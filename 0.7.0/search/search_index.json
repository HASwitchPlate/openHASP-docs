{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p> openHASP Control your home-automation devices from a customizable touchscreen UI connected via MQTT. <p>openHASP is a re-implementation of the popular HASwitchPlate sketch created by aderusha. The HASPone project uses a Wemos D1 mini and requires a Nextion/TJC HMI display.</p> <p>This project is a complete rewrite and implements the Light and Versatile Graphics Library on the MCU to drive a commodity display. openHASP uses an ESP32 to take advantage of the additional hardware capabilities.</p>"},{"location":"#demo-screens","title":"Demo Screens","text":"<p>Click on the demo screen to show the example configuration:</p> <p> </p>"},{"location":"#quotes","title":"Quotes","text":"<p>kazimir</p> <p>Hey man, openHASP is amazing. Currently running 12 pieces of Lanbon L8 plates in my house with your firmware.</p> <p>danielo</p> <p>Oh man, integrating this with Home Assistant was super easy.</p> <p>Lucky you can't see me getting hyped about turning on/off my office lights from a tinny screen (and doing it like 3 or 4 times on a row...)</p>"},{"location":"#support","title":"Support","text":"<p>For support using openHASP you can find us on Github, Discord or Home Assistant:</p> <p> Github Discussions  Discord Chat  Home Assistant Forum</p>"},{"location":"#donate","title":"Donate","text":"<p>The firmware is opensource and free to use!</p> <p>If you like this project you can show your appreciation by making a small donation. This will help with ofssetting the cost of the different hardware devices we support.</p> <p> </p>"},{"location":"commands/","title":"Commands","text":"<p>Commands are not related to an object on the screen but can get or set global properties or invoke system commands on the device.</p>"},{"location":"commands/#mqtt-topics","title":"MQTT Topics","text":"<p><code>hasp/plate01/command/</code> is for sending commands to the screen <code>hasp/plate01/state/</code> is for receiving updates from the screen</p> <p>So the topic depends on the direction of the data flow.</p> <p>Sending a message to topic <code>hasp/plate01/command/p1b2.val</code> with payload <code>25</code> would be a valid command. You can send a test MQTT message with a standalone program like MQTT Explorer or mosuito_pub.</p>"},{"location":"commands/#issuing-commands","title":"Issuing commands","text":"<p>Commands can be issued via the Serial commandline, telnet commandline or MQTT.</p> <p>For MQTT, you can use either:</p> <ul> <li><code>hasp/&lt;nodename&gt;/command</code> topic with payload <code>&lt;keyword&gt;=&lt;parameter(s)&gt;</code></li> <li><code>hasp/&lt;nodename&gt;/command/&lt;keyword&gt;</code> topic with payload <code>&lt;parameter(s)&gt;</code>   Leave the payload empty to get the current state without changing it.</li> </ul>"},{"location":"commands/#batch-processing","title":"Batch processing","text":"<p>Commands can be processed in batch one after another from <code>.cmd</code> script files located in the flash storage of the plate.   General rules when creating <code>.cmd</code> batch scripts:</p> <ul> <li>can contain any command</li> <li>empty lines are ignored</li> <li><code>#</code> or <code>//</code> can be used for comments</li> <li><code>space</code> or <code>tab</code> in front of a command is ignored</li> <li>lines starting with <code>{</code> are processed as <code>jsonl</code> payloads</li> <li>lines starting with <code>[</code> are processed as <code>json</code> payloads</li> <li>other lines are processed as <code>&lt;command&gt; &lt;payload&gt;</code></li> <li><code>CR</code>, <code>LF</code> or <code>CRLF</code> line endings allowed</li> <li><code>UTF8</code> encoding is required for special characters</li> </ul> <p>To start a batch script, use <code>run</code> command.</p>"},{"location":"commands/#system-scripts","title":"System scripts","text":"<p>If any of the following scripts is present on the filesystem, it will be run automatically according to the rules below:</p> <ul> <li><code>L:/boot.cmd</code> is executed when the plate has finished (re)booting</li> <li><code>L:/online.cmd</code> will be executed after connection to the network was successfull</li> <li><code>L:/offline.cmd</code> will be executed after connection to the WiFi is lost</li> </ul> <p>This makes it possible to disable or hide buttons, load a special offline page, etc. See example.</p>"},{"location":"commands/#global-commands","title":"Global commands","text":""},{"location":"commands/#run","title":"run","text":"<p>accepted parameters: name of a <code>.cmd</code> or <code>.jsonl</code> file present on the flash filesystem of the plate. Filename must be preceeded by the <code>/</code> character      </p> <p>Run a batch script or load a jsonl page.</p> <p>Example</p> <p><code>run /script.cmd</code> <code>run /pages_party_mode.jsonl</code></p>"},{"location":"commands/#jsonl","title":"jsonl","text":"<p>accepted parameters: one or more json formatted lines     </p> <p>Create new objects or update the properties of an existing object. When updating an existing object the <code>obj</code> property is not required and will be ignored.</p> <p>Each line in the <code>jsonl</code> payload defines one object and has to be in the json format. If the payload exceeds the MQTT buffer of 2 kB it will be cut off to fit, don't send too many lines in a single payload, you can always sends multiple jsonl commands.</p> <p>Example</p> <pre><code>jsonl {\"obj\":\"btn\",\"id\":14,\"x\":120,\"y\":1,\"w\":30,\"h\":40,\"text_font\":\"2\",\"text\":\"Test\",\"text_color\":\"gray\",\"bg_opa\":0,\"border_width\":0}\n</code></pre> <p>For more details see Pages and Objects.</p>"},{"location":"commands/#json","title":"json","text":"<p>accepted parameters: json array of strings</p> <p>Use the <code>json</code> command to send multiple commands as an array of strings in one payload.</p> <p>Example</p> <pre><code>json ['page 3','backlight {\"state\":\"ON\",\"brightness\":100}','idle off']\n</code></pre> <p>This command will change to page 3, turn the backlight on at ~40% brightness and reset the idle timer.</p>"},{"location":"commands/#page","title":"page","text":"<p>accepted parameters: <code>[1-12]</code>, <code>prev</code>, <code>next</code> or <code>back</code></p> <p>Switches the display to show the objects from a different page and return the page number in <code>state/page</code>.</p> <p>Calling the <code>page</code> command without a parameter will return the value of the current page in <code>state/page</code>.</p>"},{"location":"commands/#clearpage","title":"clearpage","text":"<p>accepted parameters: <code>[0-12]</code> or <code>all</code></p> <p>Deletes all objects on a given page. If no page number is specified, it clears the current page. Use <code>clearpage all</code> to clear all objects on all pages.</p> <p>To delete individual objects, you can issue the <code>pXbY.delete</code> command.</p>"},{"location":"commands/#backlight","title":"backlight","text":"<p>accepted json keys:</p> <ul> <li>state: <code>on</code>/<code>off</code>, <code>true</code>/<code>false</code>, <code>0</code>/<code>1</code>, <code>yes</code>/<code>no</code></li> <li>brightness: <code>1..255</code></li> </ul> <p>Example</p> <p><code>backlight {\"state\":\"on\",\"brightness\":128}</code> sets the display to half the brightness.</p> <p>Instead of a json payload, you can use a simple payload. To change the state, use either <code>on</code>/<code>off</code>, <code>true</code>/<code>false</code>, <code>0</code>, <code>yes</code>/<code>no</code>. A simple integer payload of <code>1..255</code> will adjust the brightness.</p> <p>Example</p> <p><code>backlight off</code> <code>backlight 200</code>  sets the display brightness to ~80%.</p>"},{"location":"commands/#moodlight","title":"moodlight","text":"<p>accepted json keys:</p> <ul> <li>state: <code>on</code>/<code>off</code>, <code>true</code>/<code>false</code>, <code>0</code>/<code>1</code>, <code>yes</code>/<code>no</code></li> <li>brightness: <code>1..255</code> </li> <li>color or</li> <li>r, g, b: <code>0..255</code></li> </ul> <p>An RGB moodlight can be controlled by configuring 3 GPIO pins as type <code>Mood Red</code>, <code>Mood Green</code> and <code>Mood blue</code>. These leds can then be controlled together using the <code>moodlight</code> command.</p> <p>Example</p> <pre><code>moodlight {\"state\":\"off\",\"color\":\"green\"}\nmoodlight {\"state\":true,\"color\":\"#ff00e7\"}\nmoodlight {\"color\":12345}\nmoodlight {\"state\":\"on\",\"r\":255,\"g\":0,\"b\":255}\n</code></pre> <ul> <li>The <code>state</code> key accepts boolean values to turn the moodlight on or off</li> <li>The <code>brightness</code> key can be set between <code>1</code> and <code>255</code> to dim the moodlight</li> <li>The <code>color</code> key accepts color values to set the RGB channels at once</li> <li>Individual <code>r</code>, <code>g</code> and <code>b</code> keys can also be used to set each channel separately</li> </ul> <p>Calling the <code>moodlight</code> command without parameters (or sending an empty payload to the <code>hasp/&lt;nodename&gt;/command/moodlight</code> topic) returns the current state:</p> <p>Example</p> <pre><code>\"state/moodlight\" {\"state\":\"ON\",\"brightness\":255,\"color\":\"#ff0000\",\"r\":255,\"g\":0,\"b\":0}\n</code></pre> <p>The color is returned as a hexadecimal value and as individual RGB channels.</p>"},{"location":"commands/#idle","title":"idle","text":"<p>accepted parameters: <code>off</code>, <code>short</code> or <code>long</code></p> <p>Sets the idle state of the device and publishes the new state via a <code>state/idle</code> status message.</p> <p><code>off</code> resets the idle counter as if a touch event occurred on the device. This is helpful e.g. when you want to wake up the display when an external event has occurred, like a PIR motion sensor.</p> <p><code>short</code> or <code>long</code> sets the idle timer to the number of seconds configured in the Display Settings. You can use this to force an idle state, for example at night or when leaving the house.</p> <p>Calling the <code>idle</code> command without a parameter will also return the current idle state <code>short</code>, <code>long</code> or <code>off</code> in the <code>state/idle</code> topic.</p>"},{"location":"commands/#outputx","title":"output[x]","text":"<p>where <code>[x]</code> is number of the gpio pin (0-39)</p> <p>accepted json keys:</p> <ul> <li>state: <code>on</code>/<code>off</code>, <code>true</code>/<code>false</code>, <code>0</code>/<code>1</code>, <code>yes</code>/<code>no</code></li> <li>val: <code>0..255</code></li> </ul> <p>Changes the state GPIO pin to <code>on</code> or <code>off</code>. If the pin is configured as a <code>LED</code> or <code>Serial Dimmer</code> then the <code>val</code> key will control the brightness.</p> <p>Note</p> <p>If the GPIO is assigned to a group then objects and other GPIOs that share the same <code>groupid</code> will change state accordingly.</p>"},{"location":"commands/#inputx","title":"input[x]","text":"<p>where <code>[x]</code> is number of the gpio pin (0-39)</p> <p>read-only</p> <p>Returns a JSON object containing the current state of the input, either <code>on</code> or <code>off</code></p> <p>Example</p> <pre><code>input4 =&gt; {\"state\":\"on\"}\n</code></pre>"},{"location":"commands/#system-commands","title":"System Commands","text":""},{"location":"commands/#antiburn","title":"<code>antiburn</code>","text":"<p>accepted parameters: <code>on</code>/<code>off</code>, <code>true</code>/<code>false</code>, <code>0</code>/<code>1</code>, <code>yes</code>/<code>no</code> </p> <p>Start LCD anti burn-in protection.</p> <p>This cycles the display to a full black, red, green, blue and white color each second to relief the tension put on each individual pixel. The cycle stops when either:</p> <ul> <li>30 seconds have passed</li> <li><code>antiburn=off</code> is received</li> <li>The screen is touched</li> </ul> <p>If you're using Home Assistant, check out the automation example to make it run on a regular basis.</p>"},{"location":"commands/#calibrate","title":"<code>calibrate</code>","text":"<p>Start on-screen touch calibration.</p> <p>You need to issue a soft reboot command to save the new calibration settings. If you do a hard reset of the device, the calibration settings will be lost.</p>"},{"location":"commands/#discovery","title":"<code>discovery</code>","text":"<p>Trigger the sending of the discovery payload.</p>"},{"location":"commands/#sensors","title":"<code>sensors</code>","text":"<p>Trigger the sending of the sensor data.</p>"},{"location":"commands/#factoryreset","title":"<code>factoryreset</code>","text":"<p>Clear the filesystem and EEPROM and reboot the device in its initial state.</p> <p>Warning</p> <p>There is no confirmation prompt nor an undo function!</p>"},{"location":"commands/#reboot-or-restart","title":"<code>reboot</code> or <code>restart</code>","text":"<p>Saves any changes in the configuration file and reboots the device.</p>"},{"location":"commands/#screenshot","title":"<code>screenshot</code>","text":"<p>Saves a picture of the current screen to the flash filesystem. You can retrieve it via http://&lt;ip-address&gt;/screenshot.bmp. This can be handy for bug reporting or documentation.</p> <p>The previous screenshot is overwritten.</p>"},{"location":"commands/#service","title":"<code>service</code>","text":"<p>Start or stop some of the processes running on the plate.</p> <p>Currently supported parameters:</p> <ul> <li><code>start</code></li> <li><code>stop</code></li> </ul> <p>Currently supported services:</p> <ul> <li><code>http</code> (web interface)</li> <li><code>telnet</code> (remote console)</li> <li><code>console</code> (serial console)</li> </ul> <p>Example</p> <p>To stop the web interface of the plate, send to topic <code>hasp/&lt;your_plate&gt;/command/service</code> the string <code>stop http</code>. To start the web interface of the plate, send to topic <code>hasp/&lt;your_plate&gt;/command/service</code> the string <code>start http</code>.</p> <p>Tip</p> <p>Once these services are stopped, connection is lost/not possible to the plate through them. They can be started at any time by sending <code>service start</code> commands in through MQTT.            It's possible to create self-built firmware binaries which have services stopped by default at boot, using customization. </p>"},{"location":"commands/#statusupdate","title":"<code>statusupdate</code>","text":"<p>Reports the status of the MCU. The response will be posted to the state topic.</p> <p>Example</p> <pre><code>\"hasp/&lt;platename&gt;/state/statusupdate\" =&gt; {\n    \"node\": \"plate01\",\n    \"idle\": \"long\",\n    \"version\": \"0.6.3\",\n    \"uptime\": 11027,\n    \"ssid\": \"my_network\",\n    \"rssi\": -60,\n    \"ip\": \"192.168.0.133\",\n    \"mac\": \"7C:87:CE:E3:55:55\",\n    \"heapFree\": 58756,\n    \"heapFrag\": 7,\n    \"core\": \"v4.4.1\",\n    \"canUpdate\": \"false\",\n    \"page\": 1,\n    \"numPages\": 12,\n    \"tftDriver\": \"ILI9488\",\n    \"tftWidth\": 480,\n    \"tftHeight\": 320\n}\n</code></pre>"},{"location":"commands/#unzip","title":"<code>unzip</code>","text":"<p>Unzip a file-packgage on the plate. You can upload uncompressed ZIP files to the flash space of your plate and unzip them locally. This is useful for cases when you need a lot of small files to be uploaded - putting them in an uncompressed zip allows to upload them in one go, and then extract them with a single command:</p> <p>Example</p> <pre><code>unzip /openhasp-weathericons-day.zip\n</code></pre>"},{"location":"commands/#update","title":"<code>update</code>","text":"<p>accepted parameters: <code>[url]</code>  Update the firmware from the url provided. Reboots when update was successful.</p>"},{"location":"commands/#configuration-settings","title":"Configuration Settings","text":""},{"location":"commands/#wi-fi","title":"Wi-FI","text":""},{"location":"commands/#ssid","title":"<code>ssid</code>","text":"<p>Set network name of the access point to connect to.</p>"},{"location":"commands/#pass","title":"<code>pass</code>","text":"<p>Set the optional password for the access point to connect to.</p>"},{"location":"commands/#mqtt","title":"MQTT","text":""},{"location":"commands/#hostname","title":"<code>hostname</code>","text":"<p>Set the hostname of the device and mqtt topic for the node to <code>hasp/&lt;nodename&gt;/</code></p>"},{"location":"commands/#mqtthost","title":"<code>mqtthost</code>","text":"<p>Set the IP address or hostname of the mqtt broker.</p>"},{"location":"commands/#mqttport","title":"<code>mqttport</code>","text":"<p>Set the port of the mqtt broker.</p>"},{"location":"commands/#mqttuser","title":"<code>mqttuser</code>","text":"<p>Set the optional username for the mqtt broker.</p>"},{"location":"commands/#mqttpass","title":"<code>mqttpass</code>","text":"<p>Set the optional password for the mqtt broker.</p>"},{"location":"commands/#configsubmodule","title":"config/submodule","text":"<p>You can get or set the configuration of an openHASP submodule in json format. To get the configuration, use the command <code>config/&lt;submodule&gt;</code>: </p> <p><code>config/wifi</code> <code>config/mqtt</code> <code>config/http</code> <code>config/mdns</code> <code>config/hasp</code> <code>config/gui</code> <code>config/debug</code> <code>config/gpio</code> </p> <p>The result will be published to <code>hasp/&lt;nodename&gt;/state/config</code>. Passwords will be omitted from the result.    </p> <p>To update the configuration simply issue the same command <code>config/&lt;submodule&gt;</code> with updated json payload.</p> <p>Example</p> <p><code>config/gui {\"idle2\":0}</code> disable long idle (don't turn off the screen completely)   <code>config/debug {\"tele\":300}</code> set the telemetry period to 300 seconds   <code>config/hasp {\"startdim\":255}</code> to set the startup brightness to 255    </p>"},{"location":"gallery/","title":"Gallery","text":""},{"location":"assets/buy/waveshare-tft-touch-shield/","title":"Waveshare tft touch shield","text":"<p>&lt;!-- No line breaks allowed! Use \\t to \\n -&gt;          Buy           Amazon US Amazon UK Waveshare.com  Buy           Amazon US Amazon UK AliExpress Waveshare.com  Buy           Amazon US Amazon UK AliExpress Waveshare.com"},{"location":"assets/buy/wishlist/","title":"Wishlist","text":""},{"location":"assets/buy/wishlist/#devices","title":"Devices","text":""},{"location":"assets/buy/wishlist/#displays","title":"Displays","text":""},{"location":"assets/buy/wishlist/#development-boards","title":"Development Boards","text":""},{"location":"assets/buy/wishlist/#assorted-links","title":"Assorted Links","text":"<p>Note</p> <p>This page contains affiliate links which may pay us a small commission.</p>"},{"location":"assets/users/icons/","title":"Icons","text":"<p>For assets usable by endusers.</p>"},{"location":"assets/videos/videos/","title":"Videos","text":"<p>directory for videos</p>"},{"location":"commands/configuration/","title":"Configuration Settings","text":""},{"location":"commands/configuration/#wi-fi","title":"Wi-FI","text":""},{"location":"commands/configuration/#ssid","title":"<code>ssid</code>","text":"<p>Set network name of the access point to connect to.</p>"},{"location":"commands/configuration/#pass","title":"<code>pass</code>","text":"<p>Set the optional password for the access point to connect to.</p>"},{"location":"commands/configuration/#mqtt","title":"MQTT","text":""},{"location":"commands/configuration/#hostname","title":"<code>hostname</code>","text":"<p>Set the hostname of the device and mqtt topic for the node to <code>hasp/&lt;nodename&gt;/</code></p>"},{"location":"commands/configuration/#mqtthost","title":"<code>mqtthost</code>","text":"<p>Set the IP address or hostname of the mqtt broker.</p>"},{"location":"commands/configuration/#mqttport","title":"<code>mqttport</code>","text":"<p>Set the port of the mqtt broker.</p>"},{"location":"commands/configuration/#mqttuser","title":"<code>mqttuser</code>","text":"<p>Set the optional username for the mqtt broker.</p>"},{"location":"commands/configuration/#mqttpass","title":"<code>mqttpass</code>","text":"<p>Set the optional password for the mqtt broker.</p>"},{"location":"commands/configuration/#configsubmodule","title":"config/submodule","text":"<p>You can get or set the configuration of an openHASP submodule in json format. To get the configuration, use the command <code>config/&lt;submodule&gt;</code>: </p> <p><code>config/wifi</code> <code>config/mqtt</code> <code>config/http</code> <code>config/mdns</code> <code>config/hasp</code> <code>config/gui</code> <code>config/debug</code> <code>config/gpio</code> </p> <p>The result will be published to <code>hasp/&lt;nodename&gt;/state/config</code>. Passwords will be omitted from the result.    </p> <p>To update the configuration simply issue the same command <code>config/&lt;submodule&gt;</code> with updated json payload.</p> <p>Example</p> <p><code>config/gui {\"idle2\":0}</code> disable long idle (don't turn off the screen completely)   <code>config/debug {\"tele\":300}</code> set the telemetry period to 300 seconds   <code>config/hasp {\"startdim\":255}</code> to set the startup brightness to 255    </p>"},{"location":"commands/global/","title":"Global Commands","text":""},{"location":"commands/global/#run","title":"<code>run</code>","text":"<p>accepted parameters: name of a <code>.cmd</code> or <code>.jsonl</code> file present on the flash filesystem of the plate. Filename must be preceeded by the <code>/</code> character      </p> <p>Run a batch script or load a jsonl page.</p> <p>Example</p> <p><code>run /script.cmd</code> <code>run /pages_party_mode.jsonl</code></p>"},{"location":"commands/global/#jsonl","title":"<code>jsonl</code>","text":"<p>accepted parameters: one or more json formatted lines     </p> <p>Create new objects or update the properties of an existing object. When updating an existing object the <code>obj</code> property is not required and will be ignored.</p> <p>Each line in the <code>jsonl</code> payload defines one object and has to be in the json format. If the payload exceeds the MQTT buffer of 2 kB it will be cut off to fit, don't send too many lines in a single payload, you can always sends multiple jsonl commands.</p> <p>Example</p> <pre><code>jsonl {\"obj\":\"btn\",\"id\":14,\"x\":120,\"y\":1,\"w\":30,\"h\":40,\"text_font\":\"2\",\"text\":\"Test\",\"text_color\":\"gray\",\"bg_opa\":0,\"border_width\":0}\n</code></pre> <p>For more details see Pages and Objects.</p>"},{"location":"commands/global/#json","title":"<code>json</code>","text":"<p>accepted parameters: json array of strings</p> <p>Use the <code>json</code> command to send multiple commands as an array of strings in one payload.</p> <p>Example</p> <pre><code>json ['page 3','backlight {\"state\":\"ON\",\"brightness\":100}','idle off']\n</code></pre> <p>This command will change to page 3, turn the backlight on at ~40% brightness and reset the idle timer.</p>"},{"location":"commands/global/#page","title":"<code>page</code>","text":"<p>accepted parameters: <code>[1-12]</code>, <code>prev</code>, <code>next</code> or <code>back</code></p> <p>Switches the display to show the objects from a different page and return the page number in <code>state/page</code>.</p> <p>Calling the <code>page</code> command without a parameter will return the value of the current page in <code>state/page</code>.</p>"},{"location":"commands/global/#clearpage","title":"<code>clearpage</code>","text":"<p>accepted parameters: <code>[0-12]</code> or <code>all</code></p> <p>Deletes all objects on a given page. If no page number is specified, it clears the current page. Use <code>clearpage all</code> to clear all objects on all pages.</p> <p>To delete individual objects, you can issue the <code>pXbY.delete</code> command.</p>"},{"location":"commands/global/#backlight","title":"<code>backlight</code>","text":"<p>accepted json keys:</p> <ul> <li>state: <code>on</code>/<code>off</code>, <code>true</code>/<code>false</code>, <code>0</code>/<code>1</code>, <code>yes</code>/<code>no</code></li> <li>brightness: <code>1..255</code></li> </ul> <p>Example</p> <p><code>backlight {\"state\":\"on\",\"brightness\":128}</code> sets the display to half the brightness.</p> <p>Instead of a json payload, you can use a simple payload. To change the state, use either <code>on</code>/<code>off</code>, <code>true</code>/<code>false</code>, <code>0</code>, <code>yes</code>/<code>no</code>. A simple integer payload of <code>1..255</code> will adjust the brightness.</p> <p>Example</p> <p><code>backlight off</code> <code>backlight 200</code>  sets the display brightness to ~80%.</p>"},{"location":"commands/global/#moodlight","title":"<code>moodlight</code>","text":"<p>accepted json keys:</p> <ul> <li>state: <code>on</code>/<code>off</code>, <code>true</code>/<code>false</code>, <code>0</code>/<code>1</code>, <code>yes</code>/<code>no</code></li> <li>brightness: <code>1..255</code> </li> <li>color or</li> <li>r, g, b: <code>0..255</code></li> </ul> <p>An RGB moodlight can be controlled by configuring 3 [GPIO pins][3] as type <code>Mood Red</code>, <code>Mood Green</code> and <code>Mood blue</code>. These leds can then be controlled together using the <code>moodlight</code> command.</p> <p>Example</p> <pre><code>moodlight {\"state\":\"off\",\"color\":\"green\"}\nmoodlight {\"state\":true,\"color\":\"#ff00e7\"}\nmoodlight {\"color\":12345}\nmoodlight {\"state\":\"on\",\"r\":255,\"g\":0,\"b\":255}\n</code></pre> <ul> <li>The <code>state</code> key accepts [boolean values][2] to turn the moodlight on or off</li> <li>The <code>brightness</code> key can be set between <code>1</code> and <code>255</code> to dim the moodlight</li> <li>The <code>color</code> key accepts [color values][1] to set the RGB channels at once</li> <li>Individual <code>r</code>, <code>g</code> and <code>b</code> keys can also be used to set each channel separately</li> </ul> <p>Calling the <code>moodlight</code> command without parameters (or sending an empty payload to the <code>hasp/&lt;nodename&gt;/command/moodlight</code> topic) returns the current state:</p> <p>Example</p> <pre><code>\"state/moodlight\" {\"state\":\"ON\",\"brightness\":255,\"color\":\"#ff0000\",\"r\":255,\"g\":0,\"b\":0}\n</code></pre> <p>The color is returned as a hexadecimal value and as individual RGB channels.</p>"},{"location":"commands/global/#idle","title":"<code>idle</code>","text":"<p>accepted parameters: <code>off</code>, <code>short</code> or <code>long</code></p> <p>Sets the idle state of the device and publishes the new state via a <code>state/idle</code> status message.</p> <p><code>off</code> resets the idle counter as if a touch event occurred on the device. This is helpful e.g. when you want to wake up the display when an external event has occurred, like a PIR motion sensor.</p> <p><code>short</code> or <code>long</code> sets the idle timer to the number of seconds configured in the [Display Settings][4]. You can use this to force an idle state, for example at night or when leaving the house.</p> <p>Calling the <code>idle</code> command without a parameter will also return the current idle state <code>short</code>, <code>long</code> or <code>off</code> in the <code>state/idle</code> topic.</p>"},{"location":"commands/global/#outputx","title":"<code>output[x]</code>","text":"<p>where <code>[x]</code> is number of the gpio pin (0-39)</p> <p>accepted json keys:</p> <ul> <li>state: <code>on</code>/<code>off</code>, <code>true</code>/<code>false</code>, <code>0</code>/<code>1</code>, <code>yes</code>/<code>no</code></li> <li>val: <code>0..255</code></li> </ul> <p>Changes the state GPIO pin to <code>on</code> or <code>off</code>. If the pin is configured as a <code>LED</code> or <code>Serial Dimmer</code> then the <code>val</code> key will control the brightness.</p> <p>Note</p> <p>If the GPIO is assigned to a group then objects and other GPIOs that share the same <code>groupid</code> will change state accordingly.</p>"},{"location":"commands/global/#inputx","title":"<code>input[x]</code>","text":"<p>where <code>[x]</code> is number of the gpio pin (0-39)</p> <p>read-only</p> <p>Returns a JSON object containing the current state of the input, either <code>on</code> or <code>off</code></p> <p>Example</p> <pre><code>input4 =&gt; {\"state\":\"on\"}\n</code></pre>"},{"location":"commands/mqtt/","title":"Mqtt","text":""},{"location":"commands/mqtt/#mqtt-topics","title":"MQTT Topics","text":"<p><code>hasp/plate01/command/</code> is for sending commands to the screen <code>hasp/plate01/state/</code> is for receiving updates from the screen</p> <p>So the topic depends on the direction of the data flow.</p> <p>Sending a message to topic <code>hasp/plate01/command/p1b2.val</code> with payload <code>25</code> would be a valid command. You can send a test MQTT message with a standalone program like MQTT Explorer or mosuito_pub.</p>"},{"location":"commands/mqtt/#issuing-commands","title":"Issuing commands","text":"<p>Commands can be issued via the Serial commandline, telnet commandline or MQTT.</p> <p>For MQTT, you can use either:</p> <ul> <li><code>hasp/&lt;nodename&gt;/command</code> topic with payload <code>&lt;keyword&gt;=&lt;parameter(s)&gt;</code></li> <li><code>hasp/&lt;nodename&gt;/command/&lt;keyword&gt;</code> topic with payload <code>&lt;parameter(s)&gt;</code>   Leave the payload empty to get the current state without changing it.</li> </ul>"},{"location":"commands/scripts/","title":"Batch Processing","text":"<p>Commands can be processed in batch one after another from <code>.cmd</code> script files located in the flash storage of the plate.   General rules when creating <code>.cmd</code> batch scripts:</p> <ul> <li>can contain any command</li> <li>empty lines are ignored</li> <li><code>#</code> or <code>//</code> can be used for comments</li> <li><code>space</code> or <code>tab</code> in front of a command is ignored</li> <li>lines starting with <code>{</code> are processed as <code>jsonl</code> payloads</li> <li>lines starting with <code>[</code> are processed as <code>json</code> payloads</li> <li>other lines are processed as <code>&lt;command&gt; &lt;payload&gt;</code></li> <li><code>CR</code>, <code>LF</code> or <code>CRLF</code> line endings allowed</li> <li><code>UTF8</code> encoding is required for special characters</li> </ul> <p>To start a batch script, use <code>run</code> command.</p>"},{"location":"commands/scripts/#system-scripts","title":"System scripts","text":"<p>If any of the following scripts is present on the filesystem, it will be run automatically according to the rules below:</p> <ul> <li><code>L:/boot.cmd</code> is executed when the plate has finished (re)booting</li> <li><code>L:/online.cmd</code> will be executed after connection to the network was successfull</li> <li><code>L:/offline.cmd</code> will be executed after connection to the WiFi is lost</li> <li><code>L:/idle_off.cmd</code> will be executed after idle state change to off (wakeup)</li> <li><code>L:/idle_short.cmd</code> will be executed after idle state change to short </li> <li><code>L:/idle_long.cmd</code> will be executed after idle state change to long</li> </ul> <p>This makes it possible to disable or hide buttons, load a special offline page, dimming background, etc. See example.</p>"},{"location":"commands/system/","title":"System Commands","text":""},{"location":"commands/system/#antiburn","title":"<code>antiburn</code>","text":"<p>accepted parameters: <code>on</code>/<code>off</code>, <code>true</code>/<code>false</code>, <code>0</code>/<code>1</code>, <code>yes</code>/<code>no</code> </p> <p>Start LCD anti burn-in protection.</p> <p>This cycles the display to a full black, red, green, blue and white color each second to relief the tension put on each individual pixel. The cycle stops when either:</p> <ul> <li>30 seconds have passed</li> <li><code>antiburn=off</code> is received</li> <li>The screen is touched</li> </ul> <p>If you're using Home Assistant, check out the [automation example][6] to make it run on a regular basis.</p>"},{"location":"commands/system/#calibrate","title":"<code>calibrate</code>","text":"<p>Start on-screen touch calibration.</p> <p>You need to issue a soft reboot command to save the new calibration settings. If you do a hard reset of the device, the calibration settings will be lost.</p>"},{"location":"commands/system/#discovery","title":"<code>discovery</code>","text":"<p>Trigger the sending of the discovery payload.</p>"},{"location":"commands/system/#sensors","title":"<code>sensors</code>","text":"<p>Trigger the sending of the sensor data.</p>"},{"location":"commands/system/#factoryreset","title":"<code>factoryreset</code>","text":"<p>Clear the filesystem and EEPROM and reboot the device in its initial state.</p> <p>Warning</p> <p>There is no confirmation prompt nor an undo function!</p>"},{"location":"commands/system/#reboot-or-restart","title":"<code>reboot</code> or <code>restart</code>","text":"<p>Saves any changes in the configuration file and reboots the device.</p>"},{"location":"commands/system/#screenshot","title":"<code>screenshot</code>","text":"<p>Saves a picture of the current screen to the flash filesystem. You can retrieve it via http://&lt;ip-address&gt;/screenshot.bmp. This can be handy for bug reporting or documentation.</p> <p>The previous screenshot is overwritten.</p>"},{"location":"commands/system/#service","title":"<code>service</code>","text":"<p>Start or stop some of the processes running on the plate.</p> <p>Currently supported parameters:</p> <ul> <li><code>start</code></li> <li><code>stop</code></li> </ul> <p>Currently supported services:</p> <ul> <li><code>http</code> (web interface)</li> <li><code>telnet</code> (remote console)</li> <li><code>console</code> (serial console)</li> </ul> <p>Example</p> <p>To stop the web interface of the plate, send to topic <code>hasp/&lt;your_plate&gt;/command/service</code> the string <code>stop http</code>. To start the web interface of the plate, send to topic <code>hasp/&lt;your_plate&gt;/command/service</code> the string <code>start http</code>.</p> <p>Tip</p> <p>Once these services are stopped, connection is lost/not possible to the plate through them. They can be started at any time by sending <code>service start</code> commands in through MQTT.            It's possible to create self-built firmware binaries which have services stopped by default at boot, using customization. </p>"},{"location":"commands/system/#statusupdate","title":"<code>statusupdate</code>","text":"<p>Reports the status of the MCU. The response will be posted to the state topic.</p> <p>Example</p> <pre><code>\"hasp/&lt;platename&gt;/state/statusupdate\" =&gt; {\n    \"node\": \"plate01\",\n    \"idle\": \"long\",\n    \"version\": \"0.6.3\",\n    \"uptime\": 11027,\n    \"ssid\": \"my_network\",\n    \"rssi\": -60,\n    \"ip\": \"192.168.0.133\",\n    \"mac\": \"7C:87:CE:E3:55:55\",\n    \"heapFree\": 58756,\n    \"heapFrag\": 7,\n    \"core\": \"v4.4.1\",\n    \"canUpdate\": \"false\",\n    \"page\": 1,\n    \"numPages\": 12,\n    \"tftDriver\": \"ILI9488\",\n    \"tftWidth\": 480,\n    \"tftHeight\": 320\n}\n</code></pre>"},{"location":"commands/system/#unzip","title":"<code>unzip</code>","text":"<p>Unzip a file-packgage on the plate. You can upload uncompressed ZIP files to the flash space of your plate and unzip them locally. This is useful for cases when you need a lot of small files to be uploaded - putting them in an uncompressed zip allows to upload them in one go, and then extract them with a single command:</p> <p>Example</p> <pre><code>unzip /openhasp-weathericons-day.zip\n</code></pre>"},{"location":"commands/system/#update","title":"<code>update</code>","text":"<p>accepted parameters: <code>[url]</code>  Update the firmware from the url provided. Reboots when update was successful.</p>"},{"location":"design/characters/","title":"Languages","text":""},{"location":"design/characters/#encoding","title":"Encoding","text":"<p>The character sets are encoded in UTF-8. All character sets contain the ASCII 0x20-0x7E characters and the non-braking-space (NBSP). Each set contains roughly the same extended characters from its equivalent iso-8859 standard.</p> <p>For example: To display the \u00f7 character on the plate you need to use <code>\\u00F7</code> in json or jsonl commands, or send the encoded UTF-8 bytes <code>0xC3</code> <code>0xB7</code> in other commands.</p> <p>All character sets also contain about 100 standaard Material Design Icons for home automation use.</p> <p>The default font in pre-compiled binaries is Roboto-Condensed-Regular with the Latin 1 character set. There is no support for right-to-left scripts.</p>"},{"location":"design/characters/#ascii","title":"Ascii","text":"<p>Includes all ASCII 0x20-0x7E characters extended with these 11 universal symbols: </p> <p>NBSP \u00a3 \u00b0 \u00b1 \u00b2 \u00b3 \u00b5 \u00d7 \u00f7 \u20ac \u2022</p>"},{"location":"design/characters/#latin-1","title":"Latin 1","text":"<p>Includes all characters and symbols from the ASCII range above.</p> <p>Covers Northern, Western and Southern European languages: English (en), French (fr), Spanish (es), Portuguese (pt), Italian (it), Dutch (nl), German (de), Danish (da), Swedish (sv), Norwegian (no), Finnish (fi), Turkish (tr)</p> <p>\u00a1 \u00bf \u00c0 \u00c1 \u00c2 \u00c3 \u00c4 \u00c5 \u00c6 \u00c7 \u00c8 \u00c9 \u00ca \u00cb \u00cc \u00cd \u00ce \u00cf \u00d1 \u00d2 \u00d3 \u00d4 \u00d5 \u00d6 \u00d8 \u00d9 \u00da \u00db \u00dc \u00dd \u00de \u00df \u00e0 \u00e1 \u00e2 \u00e3 \u00e4 \u00e5 \u00e6 \u00e7 \u00e8 \u00e9 \u00ea \u00eb \u00ec \u00ed \u00ee \u00ef \u00f0 \u00f1 \u00f2 \u00f3 \u00f4 \u00f5 \u00f6 \u00f8 \u00f9 \u00fa \u00fb \u00fc \u00fd \u00fe \u00ff \u011e \u011f \u0130 \u0131 \u0152 \u0153 \u015e \u015f \u0160 \u0161 \u017d \u017e \u1e9e</p>"},{"location":"design/characters/#latin-2","title":"Latin 2","text":"<p>Includes all characters and symbols from the ASCII range above.</p> <p>Covers Central and Eastern European languages: Czech (cs), Hungarian (hu), Polish (pl), Romanian (ro), Croatian (hr), Slovak (sk), Slovenian (sl), Sorbian</p> <p>\u00c1 \u00c2 \u00c4 \u00c9 \u00cd \u00ce \u00d3 \u00d4 \u00d6 \u00da \u00dc \u00dd \u00e1 \u00e2 \u00e4 \u00e9 \u00ed \u00ee \u00f3 \u00f4 \u00f6 \u00fa \u00fc \u00fd \u0102 \u0103 \u0104 \u0105 \u0106 \u0107 \u010c \u010d \u010e \u010f \u0110 \u0111 \u0114 \u0115 \u0118 \u0119 \u011a \u011b \u0139 \u013a \u013d \u013e \u0141 \u0142 \u0143 \u0144 \u0147 \u0148 \u0150 \u0151 \u0154 \u0155 \u0158 \u0159 \u015a \u015b \u015e \u015f \u0160 \u0161 \u0162 \u0163 \u0164 \u0165 \u016e \u016f \u0170 \u0171 \u0179 \u017a \u017b \u017c \u017d \u017e \u01cd \u01ce \u0200 \u0201 \u0202 \u0203 \u0204 \u0205 \u0206 \u0207 \u0208 \u0209 \u020a \u020b \u020c \u020d \u020e \u020f \u0210 \u0211 \u0212 \u0213 \u0214 \u0215 \u0216 \u0217 \u0218 \u0219 \u021a \u021b</p>"},{"location":"design/characters/#chinese","title":"Chinese","text":"<p>Includes all characters and symbols from the ASCII range above, plus 650 most common CJK radicals:</p> <p>\u4e00 \u4e03 \u4e09 \u4e0a \u4e0b \u4e0d \u4e14 \u4e16 \u4e26 \u4e2d \u4e3b \u4e45 \u4e4b \u4e4e \u4e4f \u4e5f \u4e86 \u4e8b \u4e8c \u4e94 \u4e9b \u4ea4 \u4ea6 \u4eac \u4eba \u4ec0 \u4ecd \u4ed6 \u4ee3 \u4ee4 \u4ee5 \u4ef6 \u4efb \u4efd \u4f01 \u4f0a \u4f3c \u4f46 \u4f4d \u4f4e \u4f4f \u4f55 \u4f5c \u4f60 \u4f7f \u4f86 \u4f8b \u4f9b \u4f9d \u4fbf \u4fc2 \u4fdd \u4fe1 \u500b \u5011 \u5019 \u503c \u505a \u5065 \u5099 \u50b3 \u50c5 \u50cf \u50f9 \u5143 \u5145 \u5148 \u514b \u514d \u5152 \u5165 \u5167 \u5168 \u5169 \u516b \u516c \u516d \u5171 \u5176 \u5177 \u518d \u51fa \u5206 \u5207 \u5217 \u5225 \u5229 \u5230 \u5236 \u5247 \u524d \u525b \u5275 \u5283 \u529b \u529f \u52a0 \u52a9 \u52aa \u52d5 \u52d9 \u52f5 \u5305 \u5316 \u5317 \u5340 \u5341 \u534a \u5354 \u5373 \u537b \u539f \u53bb \u53c3 \u53c8 \u53ca \u53cb \u53cd \u53d6 \u53d7 \u53e3 \u53e5 \u53e6 \u53ea \u53eb \u53ef \u53f0 \u53f2 \u53f8 \u5403 \u5404 \u5408 \u540c \u540d \u5411 \u5426 \u5427 \u5440 \u544a \u5462 \u547d \u548c \u54c1 \u54e1 \u54ea \u5546 \u554a \u554f \u5566 \u5584 \u559c \u559d \u55ae \u55ce \u55ef \u561b \u56b4 \u56db \u56de \u56e0 \u570b \u570d \u5712 \u5718 \u571f \u5728 \u5730 \u5747 \u5750 \u57df \u57f7 \u57fa \u5831 \u5834 \u584a \u5883 \u589e \u58d3 \u58eb \u5916 \u591a \u5920 \u5927 \u5929 \u592a \u592e \u5957 \u5973 \u5979 \u597d \u5982 \u59b3 \u59cb \u59d0 \u59d4 \u5a66 \u5a92 \u5abd \u5b50 \u5b57 \u5b58 \u5b69 \u5b78 \u5b83 \u5b89 \u5b8c \u5b98 \u5b9a \u5bb6 \u5bb9 \u5bcc \u5bdf \u5be6 \u5beb \u5c07 \u5c08 \u5c0d \u5c0e \u5c0f \u5c11 \u5c1a \u5c24 \u5c31 \u5c3a \u5c45 \u5c55 \u5c6c \u5c71 \u5de5 \u5df1 \u5df2 \u5e02 \u5e0c \u5e2b \u5e36 \u5e38 \u5e74 \u5e7e \u5e95 \u5e9c \u5ea6 \u5ea7 \u5ead \u5eb7 \u5ee0 \u5efa \u5f0f \u5f15 \u5f35 \u5f37 \u5f62 \u5f71 \u5f7c \u5f80 \u5f88 \u5f8c \u5f97 \u5f9e \u5fc3 \u5fc5 \u5feb \u5ff5 \u600e \u6015 \u601d \u6027 \u60a8 \u60c5 \u60f3 \u6108 \u610f \u611b \u611f \u614b \u6167 \u616e \u61c9 \u6210 \u6211 \u6216 \u6230 \u6240 \u624b \u624d \u6253 \u627e \u6280 \u628a \u6295 \u62c9 \u62ec \u62ff \u6301 \u6307 \u6388 \u6392 \u63a1 \u63a5 \u63a7 \u63a8 \u63d0 \u63ee \u64c1 \u64c7 \u64d4 \u64da \u652f \u6539 \u653e \u653f \u6545 \u6548 \u6559 \u6562 \u6574 \u6587 \u6599 \u65b0 \u65b7 \u65b9 \u65bc \u65bd \u65c1 \u65cf \u65e2 \u65e5 \u65e9 \u660e \u6613 \u662f \u6642 \u667a \u66f4 \u66f8 \u66fe \u6700 \u6703 \u6708 \u6709 \u670b \u670d \u671b \u671f \u672a \u672c \u675f \u6771 \u6790 \u679c \u67d0 \u67e5 \u6821 \u6839 \u683c \u689d \u695a \u696d \u6975 \u6982 \u69cb \u6a02 \u6a19 \u6a23 \u6a39 \u6a5f \u6b21 \u6b50 \u6b61 \u6b63 \u6b64 \u6b65 \u6b72 \u6b77 \u6b7b \u6b8a \u6bb5 \u6bcd \u6bcf \u6bd4 \u6c11 \u6c34 \u6c38 \u6c42 \u6c7a \u6c92 \u6cbb \u6cc1 \u6cd5 \u6ce8 \u6d32 \u6d3b \u6d88 \u6df1 \u6e05 \u6e1b \u6e2f \u6e90 \u6e96 \u6e9d \u6eff \u6f38 \u6fdf \u7063 \u70ba \u7121 \u7136 \u71df \u722d \u7236 \u7238 \u7247 \u7260 \u7269 \u7279 \u72c0 \u7372 \u73a9 \u73fe \u7403 \u7406 \u74b0 \u751a \u751f \u7522 \u7528 \u7531 \u7533 \u7537 \u754c \u756b \u7576 \u767c \u7684 \u7686 \u76ee \u76f4 \u76f8 \u770b \u771f \u773e \u77e5 \u7814 \u78ba \u793a \u793e \u795e \u79d1 \u7a0b \u7a2e \u7a4d \u7a76 \u7a7a \u7acb \u7ad9 \u7ae5 \u7b11 \u7b49 \u7b56 \u7ba1 \u7bc0 \u7bc4 \u7c21 \u7cbe \u7cfb \u7d04 \u7d20 \u7d42 \u7d44 \u7d50 \u7d66 \u7d71 \u7d93 \u7dad \u7db2 \u7df4 \u7e3d \u7e3e \u7e54 \u7e7c \u7e8c \u7f3a \u7f8e \u7fa9 \u7fd2 \u8001 \u8003 \u8005 \u800c \u805e \u806f \u8072 \u807d \u80af \u80b2 \u80fd \u8166 \u81c9 \u81ea \u81f3 \u81fa \u8207 \u8208 \u8209 \u822c \u8272 \u82e5 \u8336 \u8457 \u85dd \u8607 \u8655 \u884c \u8853 \u8868 \u88ab \u88e1 \u88fd \u897f \u8981 \u898b \u898f \u8996 \u89aa \u89ba \u89c0 \u89d2 \u89e3 \u8a00 \u8a08 \u8a0a \u8a0e \u8a13 \u8a18 \u8a2d \u8a31 \u8a34 \u8a71 \u8a72 \u8a8d \u8a9e \u8aaa \u8ab0 \u8ab2 \u8abf \u8ac7 \u8acb \u8ad6 \u8b02 \u8b1b \u8b1d \u8b58 \u8b70 \u8b77 \u8b8a \u8b93 \u8c50 \u8c61 \u8ca0 \u8cac \u8cb7 \u8cbb \u8cc7 \u8cea \u8cfd \u8d70 \u8d77 \u8d85 \u8d8a \u8da3 \u8db3 \u8ddf \u8def \u8eab \u8eca \u8edf \u8f03 \u8f15 \u8fa6 \u8fce \u8fd1 \u8ffd \u900f \u9010 \u9019 \u901a \u9020 \u9023 \u9032 \u904b \u904e \u9053 \u9054 \u9060 \u9069 \u9078 \u907f \u9084 \u908a \u90a3 \u90e8 \u90fd \u914d \u91ab \u91cd \u91cf \u91dd \u9280 \u9322 \u932f \u9577 \u958b \u9593 \u95dc \u9644 \u9662 \u9664 \u9678 \u968e \u969b \u96a8 \u96bb \u96d6 \u96d9 \u96e3 \u96fb \u9700 \u975e \u9762 \u9769 \u97f3 \u97ff \u9805 \u9808 \u9817 \u9818 \u982d \u984c \u9858 \u985e \u986f \u9999 \u9a57 \u9ad4 \u9ad8 \u9e97 \u9ebc \u9ede \u9ee8 \u9f13</p> <p>\u4e00  \u4e03  \u4e09  \u4e0a  \u4e0b  \u4e0d  \u4e14  \u4e16  \u4e26  \u4e2d  \u4e3b  \u4e45  \u4e4b  \u4e4e  \u4e4f  \u4e5f  \u4e86  \u4e8b  \u4e8c  \u4e94  \u4e9b  \u4ea4  \u4ea6  \u4eac  \u4eba  \u4ec0  \u4ecd  \u4ed6  \u4ee3  \u4ee4  \u4ee5  \u4ef6  \u4efb  \u4efd  \u4f01  \u4f0a  \u4f3c  \u4f46  \u4f4d  \u4f4e  \u4f4f  \u4f55  \u4f5c  \u4f60  \u4f7f  \u4f86  \u4f8b  \u4f9b  \u4f9d  \u4fbf  \u4fc2  \u4fdd  \u4fe1  \u500b  \u5011  \u5019  \u503c  \u505a  \u5065  \u5099  \u50b3  \u50c5  \u50cf  \u50f9  \u5143  \u5145  \u5148  \u514b  \u514d  \u5152  \u5165  \u5167  \u5168  \u5169  \u516b  \u516c  \u516d  \u5171  \u5176  \u5177  \u518d  \u51fa  \u5206  \u5207  \u5217  \u5225  \u5229  \u5230  \u5236  \u5247  \u524d  \u525b  \u5275  \u5283  \u529b  \u529f  \u52a0  \u52a9  \u52aa  \u52d5  \u52d9  \u52f5  \u5305  \u5316  \u5317  \u5340  \u5341  \u534a  \u5354  \u5373  \u537b  \u539f  \u53bb  \u53c3  \u53c8  \u53ca  \u53cb  \u53cd  \u53d6  \u53d7  \u53e3  \u53e5  \u53e6  \u53ea  \u53eb  \u53ef  \u53f0  \u53f2  \u53f8  \u5403  \u5404  \u5408  \u540c  \u540d  \u5411  \u5426  \u5427  \u5440  \u544a  \u5462  \u547d  \u548c  \u54c1  \u54e1  \u54ea  \u5546  \u554a  \u554f  \u5566  \u5584  \u559c  \u559d  \u55ae  \u55ce  \u55ef  \u561b  \u56b4  \u56db  \u56de  \u56e0  \u570b  \u570d  \u5712  \u5718  \u571f  \u5728  \u5730  \u5747  \u5750  \u57df  \u57f7  \u57fa  \u5831  \u5834  \u584a  \u5883  \u589e  \u58d3  \u58eb  \u5916  \u591a  \u5920  \u5927  \u5929  \u592a  \u592e  \u5957  \u5973  \u5979  \u597d  \u5982  \u59b3  \u59cb  \u59d0  \u59d4  \u5a66  \u5a92  \u5abd  \u5b50  \u5b57  \u5b58  \u5b69  \u5b78  \u5b83  \u5b89  \u5b8c  \u5b98  \u5b9a  \u5bb6  \u5bb9  \u5bcc  \u5bdf  \u5be6  \u5beb  \u5c07  \u5c08  \u5c0d  \u5c0e  \u5c0f  \u5c11  \u5c1a  \u5c24  \u5c31  \u5c3a  \u5c45  \u5c55  \u5c6c  \u5c71  \u5de5  \u5df1  \u5df2  \u5e02  \u5e0c  \u5e2b  \u5e36  \u5e38  \u5e74  \u5e7e  \u5e95  \u5e9c  \u5ea6  \u5ea7  \u5ead  \u5eb7  \u5ee0  \u5efa  \u5f0f  \u5f15  \u5f35  \u5f37  \u5f62  \u5f71  \u5f7c  \u5f80  \u5f88  \u5f8c  \u5f97  \u5f9e  \u5fc3  \u5fc5  \u5feb  \u5ff5  \u600e  \u6015  \u601d  \u6027  \u60a8  \u60c5  \u60f3  \u6108  \u610f  \u611b  \u611f  \u614b  \u6167  \u616e  \u61c9  \u6210  \u6211  \u6216  \u6230  \u6240  \u624b  \u624d  \u6253  \u627e  \u6280  \u628a  \u6295  \u62c9  \u62ec  \u62ff  \u6301  \u6307  \u6388  \u6392  \u63a1  \u63a5  \u63a7  \u63a8  \u63d0  \u63ee  \u64c1  \u64c7  \u64d4  \u64da  \u652f  \u6539  \u653e  \u653f  \u6545  \u6548  \u6559  \u6562  \u6574  \u6587  \u6599  \u65b0  \u65b7  \u65b9  \u65bc  \u65bd  \u65c1  \u65cf  \u65e2  \u65e5  \u65e9  \u660e  \u6613  \u662f  \u6642  \u667a  \u66f4  \u66f8  \u66fe  \u6700  \u6703  \u6708  \u6709  \u670b  \u670d  \u671b  \u671f  \u672a  \u672c  \u675f  \u6771  \u6790  \u679c  \u67d0  \u67e5  \u6821  \u6839  \u683c  \u689d  \u695a  \u696d  \u6975  \u6982  \u69cb  \u6a02  \u6a19  \u6a23  \u6a39  \u6a5f  \u6b21  \u6b50  \u6b61  \u6b63  \u6b64  \u6b65  \u6b72  \u6b77  \u6b7b  \u6b8a  \u6bb5  \u6bcd  \u6bcf  \u6bd4  \u6c11  \u6c34  \u6c38  \u6c42  \u6c7a  \u6c92  \u6cbb  \u6cc1  \u6cd5  \u6ce8  \u6d32  \u6d3b  \u6d88  \u6df1  \u6e05  \u6e1b  \u6e2f  \u6e90  \u6e96  \u6e9d  \u6eff  \u6f38  \u6fdf  \u7063  \u70ba  \u7121  \u7136  \u71df  \u722d  \u7236  \u7238  \u7247  \u7260  \u7269  \u7279  \u72c0  \u7372  \u73a9  \u73fe  \u7403  \u7406  \u74b0  \u751a  \u751f  \u7522  \u7528  \u7531  \u7533  \u7537  \u754c  \u756b  \u7576  \u767c  \u7684  \u7686  \u76ee  \u76f4  \u76f8  \u770b  \u771f  \u773e  \u77e5  \u7814  \u78ba  \u793a  \u793e  \u795e  \u79d1  \u7a0b  \u7a2e  \u7a4d  \u7a76  \u7a7a  \u7acb  \u7ad9  \u7ae5  \u7b11  \u7b49  \u7b56  \u7ba1  \u7bc0  \u7bc4  \u7c21  \u7cbe  \u7cfb  \u7d04  \u7d20  \u7d42  \u7d44  \u7d50  \u7d66  \u7d71  \u7d93  \u7dad  \u7db2  \u7df4  \u7e3d  \u7e3e  \u7e54  \u7e7c  \u7e8c  \u7f3a  \u7f8e  \u7fa9  \u7fd2  \u8001  \u8003  \u8005  \u800c  \u805e  \u806f  \u8072  \u807d  \u80af  \u80b2  \u80fd  \u8166  \u81c9  \u81ea  \u81f3  \u81fa  \u8207  \u8208  \u8209  \u822c  \u8272  \u82e5  \u8336  \u8457  \u85dd  \u8607  \u8655  \u884c  \u8853  \u8868  \u88ab  \u88e1  \u88fd  \u897f  \u8981  \u898b  \u898f  \u8996  \u89aa  \u89ba  \u89c0  \u89d2  \u89e3  \u8a00  \u8a08  \u8a0a  \u8a0e  \u8a13  \u8a18  \u8a2d  \u8a31  \u8a34  \u8a71  \u8a72  \u8a8d  \u8a9e  \u8aaa  \u8ab0  \u8ab2  \u8abf  \u8ac7  \u8acb  \u8ad6  \u8b02  \u8b1b  \u8b1d  \u8b58  \u8b70  \u8b77  \u8b8a  \u8b93  \u8c50  \u8c61  \u8ca0  \u8cac  \u8cb7  \u8cbb  \u8cc7  \u8cea  \u8cfd  \u8d70  \u8d77  \u8d85  \u8d8a  \u8da3  \u8db3  \u8ddf  \u8def  \u8eab  \u8eca  \u8edf  \u8f03  \u8f15  \u8fa6  \u8fce  \u8fd1  \u8ffd  \u900f  \u9010  \u9019  \u901a  \u9020  \u9023  \u9032  \u904b  \u904e  \u9053  \u9054  \u9060  \u9069  \u9078  \u907f  \u9084  \u908a  \u90a3  \u90e8  \u90fd  \u914d  \u91ab  \u91cd  \u91cf  \u91dd  \u9280  \u9322  \u932f  \u9577  \u958b  \u9593  \u95dc  \u9644  \u9662  \u9664  \u9678  \u968e  \u969b  \u96a8  \u96bb  \u96d6  \u96d9  \u96e3  \u96fb  \u9700  \u975e  \u9762  \u9769  \u97f3  \u97ff  \u9805  \u9808  \u9817  \u9818  \u982d  \u984c  \u9858  \u985e  \u986f  \u9999  \u9a57  \u9ad4  \u9ad8  \u9e97  \u9ebc  \u9ede  \u9ee8  \u9f13 </p>"},{"location":"design/characters/#characters","title":"Characters","text":"UTF-8 Char Description CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00A0 Non-breaking space CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00A1 \u00a1 Inverted exclamation mark ES 00A2 \u00a2 Cent sign 00A3 \u00a3 Pound sign 00A4 \u00a4 Currency sign 00A5 \u00a5 Yen sign 00A6 \u00a6 Broken bar 00A7 \u00a7 Section sign 00A8 \u00a8 Diaeresis 00A9 \u00a9 Copyright sign 00AA \u00aa Feminine Ordinal Indicator 00AB \u00ab Left-pointing double angle quotation mark 00AC \u00ac Not sign 00AD \u00ad Soft hyphen 00AE \u00ae Registered sign 00AF \u00af Macron 00B0 \u00b0 Degree symbol CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00B1 \u00b1 Plus-minus sign CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00B2 \u00b2 Superscript two 00B3 \u00b3 Superscript three 00B4 \u00b4 Acute accent DA 00B5 \u00b5 Micro sign CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00B6 \u00b6 Pilcrow sign 00B7 \u00b7 Middle dot CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00B8 \u00b8 Cedilla 00B9 \u00b9 Superscript one 00BA \u00ba Masculine ordinal indicator 00BB \u00bb Right-pointing double-angle quotation mark 00BC \u00bc Vulgar fraction one quarter CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00BD \u00bd Vulgar fraction one half CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00BE \u00be Vulgar fraction three quarters CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00BF \u00bf Inverted question mark ES 00C0 \u00c0 Capital A with grave PT IT FR 00C1 \u00c1 Capital A with acute HU ES PT FR 00C2 \u00c2 Capital A with circumflex RO NO PT FR 00C3 \u00c3 Capital A with tilde PT 00C4 \u00c4 Capital A with diaeresis DE SV FI DA 00C5 \u00c5 Capital A with ring above SV FI DA NO 00C6 \u00c6 Capital AE DA NO 00C7 \u00c7 Capital C with cedilla PT FR 00C8 \u00c8 Capital E with grave NO IT FR 00C9 \u00c9 Capital E with acute NO HU ES PT IT FR 00CA \u00ca Capital E with circumflex NO PT FR 00CB \u00cb Capital E with diaeresis FR 00CC \u00cc Capital I with grave IT 00CD \u00cd Capital I with acute HU ES PT 00CE \u00ce Capital I with circumflex RO FR 00CF \u00cf Capital I with diaeresis FR 00D0 \u00d0 Capital Eth 00D1 \u00d1 Capital N with tilde ES 00D2 \u00d2 Capital O with grave NO IT 00D3 \u00d3 Capital O with acute NO HU ES PT 00D4 \u00d4 Capital O with circumflex NO PT FR 00D5 \u00d5 Capital O with tilde PT FR 00D6 \u00d6 Capital O with diaeresis DE SV FI DA HU 00D7 \u00d7 Multiplication sign CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00D8 \u00d8 Capital O with stroke DA NO 00D9 \u00d9 Capital U with grave IT 00DA \u00da Capital U with acute HU ES PT 00DB \u00db Capital U with circumflex 00DC \u00dc Capital U with diaeresis DE DA HU ES PT 00DD \u00dd Capital Y with acute CZ ES 00DE \u00de Capital Thorn 00DF \u00df Small sharp S DE 00E0 \u00e0 Small A with grave PT IT FR 00E1 \u00e1 Small A with acute HU ES PT FR 00E2 \u00e2 Small A with circumflex RO NO PT FR 00E3 \u00e3 Small A with tilde PT 00E4 \u00e4 Small A with diaeresis DE SV FI DA 00E5 \u00e5 Small A with ring above SV FI DA NO 00E6 \u00e6 Small AE DA NO 00E7 \u00e7 Small C with cedilla PT FR 00E8 \u00e8 Small E with grave NO IT FR 00E9 \u00e9 Small E with acute DA NO HU ES PT IT FR 00EA \u00ea Small E with circumflex NO PT FR 00EB \u00eb Small E with diaeresis 00EC \u00ec Small I with grave IT 00ED \u00ed Small I with acute HU ES PT FR 00EE \u00ee Small I with circumflex RO FR 00EF \u00ef Small I with diaeresis FR 00F0 \u00f0 Small Eth 00F1 \u00f1 Small N with tilde ES EN NL 00F2 \u00f2 Small O with grave NO IT 00F3 \u00f3 Small O with acute NO HU ES PT FR 00F4 \u00f4 Small O with circumflex NO PT FR 00F5 \u00f5 Small O with tilde PT 00F6 \u00f6 Small O with diaeresis DE SV FI DA HU 00F7 \u00f7 Division sign CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00F8 \u00f8 Small O with stroke DA NO 00F9 \u00f9 Small U with grave IT FR 00FA \u00fa Small U with acute HU ES PT FR 00FB \u00fb Small U with circumflex FR 00FC \u00fc Small U with diaeresis DE DA HU ES PT 00FD \u00fd Small Y with acute ES 00FE \u00fe Small Thorn 00FF \u00ff Small Y with diaeresis 0100 \u0100 Capital A with macron 0101 \u0101 Small A with macron 0102 \u0102 Capital A with breve RO 0103 \u0103 Small A with breve RO 0104 \u0104 Capital A with ogonek 0105 \u0105 Small A with ogonek 0106 \u0106 Capital C with acute 0107 \u0107 Small C with acute 0108 \u0108 Capital C with circumflex 0109 \u0109 Small C with circumflex 010A \u010a Capital C with dot above 010B \u010b Small C with dot above 010C \u010c Capital C with caron SL 010D \u010d Small C with caron SL 010E \u010e Capital D with caron 010F \u010f Small D with caron 0110 \u0110 Capital D with stroke 0111 \u0111 Small D with stroke 0112 \u0112 Capital E with macron 0113 \u0113 Small E with macron 0114 \u0114 Capital E with breve CZ 0115 \u0115 Small E with breve CZ 0116 \u0116 Capital E with dot above 0117 \u0117 Small E with dot above 0118 \u0118 Capital E with ogonek 0119 \u0119 Small E with ogonek 011A \u011a Capital E with caron 011B \u011b Small E with caron 011C \u011c Capital G with circumflex 011D \u011d Small G with circumflex 011E \u011e Capital G with breve 011F \u011f Small G with breve 0120 \u0120 Capital G with dot above 0121 \u0121 Small G with dot above 0122 \u0122 Capital G with cedilla 0123 \u0123 Small G with cedilla 0124 \u0124 Capital H with circumflex 0125 \u0125 Small H with circumflex 0126 \u0126 Capital H with stroke 0127 \u0127 Small H with stroke 0128 \u0128 Capital I with tilde 0129 \u0129 Small I with tilde 012A \u012a Capital I with macron 012B \u012b Small I with macron 012C \u012c Capital I with breve 012D \u012d Small I with breve 012E \u012e Capital I with ogonek 012F \u012f Small I with ogonek 0130 \u0130 Capital I with dot above 0131 \u0131 Small dotless I 0132 \u0132 Capital Ligature IJ 0133 \u0133 Small Ligature IJ 0134 \u0134 Capital J with circumflex 0135 \u0135 Small J with circumflex 0136 \u0136 Capital K with cedilla 0137 \u0137 Small K with cedilla 0138 \u0138 Small Kra 0139 \u0139 Capital L with acute 013A \u013a Small L with acute 013B \u013b Capital L with cedilla 013C \u013c Small L with cedilla 013D \u013d Capital L with caron 013E \u013e Small L with caron 013F \u013f Capital L with middle dot 0140 \u0140 Small L with middle dot 0141 \u0141 Capital L with stroke 0142 \u0142 Small L with stroke 0143 \u0143 Capital N with acute 0144 \u0144 Small N with acute 0145 \u0145 Capital N with cedilla 0146 \u0146 Small N with cedilla 0147 \u0147 Capital N with caron CZ 0148 \u0148 Small N with caron CZ 0149 \u0149 Small N preceded by apostrophe 014A \u014a Capital Eng 014B \u014b Small Eng 014C \u014c Capital O with macron 014D \u014d Small O with macron 014E \u014e Capital O with breve 014F \u014f Small O with breve 0150 \u0150 Capital O with double acute HU 0151 \u0151 Small O with double acute HU 0152 \u0152 Capital Ligature OE FR 0153 \u0153 Small Ligature OE FR 0154 \u0154 Capital R with acute 0155 \u0155 Small R with acute 0156 \u0156 Capital R with cedilla 0157 \u0157 Small R with cedilla 0158 \u0158 Capital R with caron 0159 \u0159 Small R with caron 015A \u015a Capital S with acute 015B \u015b Small S with acute 015C \u015c Capital S with circumflex 015D \u015d Small S with circumflex 015E \u015e Capital S with cedilla RO 015F \u015f Small S with cedilla RO 0160 \u0160 Capital S with caron SL FI 0161 \u0161 Small S with caron SL FI 0162 \u0162 Capital T with cedilla RO 0163 \u0163 Small T with cedilla RO 0164 \u0164 Capital T with caron 0165 \u0165 Small T with caron 0166 \u0166 Capital T with stroke 0167 \u0167 Small T with stroke 0168 \u0168 Capital U with tilde 0169 \u0169 Small U with tilde 016A \u016a Capital U with macron 016B \u016b Small U with macron 016C \u016c Capital U with breve 016D \u016d Small U with breve 016E \u016e Capital U with ring above CZ 016F \u016f Small U with ring above CZ 0170 \u0170 Capital U with double acute HU 0171 \u0171 Small U with double acute HU 0172 \u0172 Capital U with ogonek 0173 \u0173 Small U with ogonek 0174 \u0174 Capital W with circumflex 0175 \u0175 Small W with circumflex 0176 \u0176 Capital Y with circumflex 0177 \u0177 Small Y with circumflex 0178 \u0178 Capital Y with diaeresis 0179 \u0179 Capital Z with acute 017A \u017a Small Z with acute 017B \u017b Capital Z with dot above 017C \u017c Small Z with dot above 017D \u017d Capital Z with caron SL FI 017E \u017e Small Z with caron SL FI 017F \u017f Small long S 01C4 \u01c4 Capital DZ with Caron HR 01C5 \u01c5 Capital D with  Small Z with Caron HR 01C6 \u01c6 Small DZ with Caron HR 01C7 \u01c7 Capital LJ HR 01C8 \u01c8 Capital L with  Small J HR 01C9 \u01c9 Small LJ HR 01CA \u01ca Capital NJ HR 01CB \u01cb Capital N with  Small J HR 01CC \u01cc Small NJ HR 01CD \u01cd Capital A with Caron RO 01CE \u01ce Small A with Caron RO 01CF \u01cf Capital I with Caron 01D0 \u01d0 Small I with Caron 01D1 \u01d1 Capital O with Caron 01D2 \u01d2 Small O with Caron 01D3 \u01d3 Capital U with Caron 01D4 \u01d4 Small U with Caron 01D5 \u01d5 Capital U with Diaeresis and Macron 01D6 \u01d6 Small U with Diaeresis and Macron 01D7 \u01d7 Capital U with Diaeresis and Acute 01D8 \u01d8 Small U with Diaeresis and Acute 01D9 \u01d9 Capital U with Diaeresis and Caron 01DA \u01da Small U with Diaeresis and Caron 01DB \u01db Capital U with Diaeresis and Grave 01DC \u01dc Small U with Diaeresis and Grave 01DD \u01dd Small Turned E 01DE \u01de Capital A with Diaeresis and Macron 01DF \u01df Small A with Diaeresis and Macron 01E0 \u01e0 Capital A with Dot Above and Macron 01E1 \u01e1 Small A with Dot Above and Macron 01E2 \u01e2 Capital AE with Macron 01E3 \u01e3 Small AE with Macron 01E4 \u01e4 Capital G with Stroke 01E5 \u01e5 Small G with Stroke 01E6 \u01e6 Capital G with Caron 01E7 \u01e7 Small G with Caron 01E8 \u01e8 Capital K with Caron 01E9 \u01e9 Small K with Caron 01EA \u01ea Capital O with Ogonek 01EB \u01eb Small O with Ogonek 01EC \u01ec Capital O with Ogonek and Macron 01ED \u01ed Small O with Ogonek and Macron 01EE \u01ee Capital Ezh with Caron 01EF \u01ef Small Ezh with Caron 01F0 \u01f0 Small J with Caron 01F1 \u01f1 Capital DZ 01F2 \u01f2 Capital D with  Small Z 01F3 \u01f3 Small DZ 01F4 \u01f4 Capital G with Acute 01F5 \u01f5 Small G with Acute 01F6 \u01f6 Capital Hwair 01F7 \u01f7 Capital Wynn 01F8 \u01f8 Capital N with Grave 01F9 \u01f9 Small N with Grave 01FA \u01fa Capital A with Ring Above and Acute 01FB \u01fb Small A with Ring Above and Acute 01FC \u01fc Capital AE with Acute 01FD \u01fd Small AE with Acute 01FE \u01fe Capital O with Stroke and Acute 01FF \u01ff Small O with Stroke and Acute 0200 \u0200 Capital A with Double Grave HR SL 0201 \u0201 Small A with Double Grave HR SL 0202 \u0202 Capital A with Inverted Breve RO HR SL 0203 \u0203 Small A with Inverted Breve RO HR SL 0204 \u0204 Capital E with Double Grave HR SL 0205 \u0205 Small E with Double Grave HR SL 0206 \u0206 Capital E with Inverted Breve HR SL 0207 \u0207 Small E with Inverted Breve HR SL 0208 \u0208 Capital I with Double Grave HR SL 0209 \u0209 Small I with Double Grave HR SL 020A \u020a Capital I with Inverted Breve RO HR SL 020B \u020b Small I with Inverted Breve RO HR SL 020C \u020c Capital O with Double Grave HR SL 020D \u020d Small O with Double Grave HR SL 020E \u020e Capital O with Inverted Breve HR SL 020F \u020f Small O with Inverted Breve HR SL 0210 \u0210 Capital R with Double Grave HR SL 0211 \u0211 Small R with Double Grave HR SL 0212 \u0212 Capital R with Inverted Breve HR SL 0213 \u0213 Small R with Inverted Breve HR SL 0214 \u0214 Capital U with Double Grave HR SL 0215 \u0215 Small U with Double Grave HR SL 0216 \u0216 Capital U with Inverted Breve HR SL 0217 \u0217 Small U with Inverted Breve HR SL 0218 \u0218 Capital S with Comma Below RO 0219 \u0219 Small S with Comma Below RO 021A \u021a Capital T with Comma Below RO 021B \u021b Small T with Comma Below RO 021C \u021c Capital Yogh 021D \u021d Small Yogh 021E \u021e Capital H with Caron 021F \u021f Small H with Caron 0220 \u0220 Capital N with Long Right Leg 0221 \u0221 Small D with Curl 0222 \u0222 Capital OU 0223 \u0223 Small OU 0224 \u0224 Capital Z with Hook 0225 \u0225 Small Z with Hook 0226 \u0226 Capital A with Dot Above 0227 \u0227 Small A with Dot Above 0228 \u0228 Capital E with Cedilla 0229 \u0229 Small E with Cedilla 022A \u022a Capital O with Diaeresis and Macron 022B \u022b Small O with Diaeresis and Macron 022C \u022c Capital O with Tilde and Macron 022D \u022d Small O with Tilde and Macron 022E \u022e Capital O with Dot Above 022F \u022f Small O with Dot Above 0230 \u0230 Capital O with Dot Above and Macron 0231 \u0231 Small O with Dot Above and Macron 0232 \u0232 Capital Y with Macron 0233 \u0233 Small Y with Macron 0234 \u0234 Small L with Curl 0235 \u0235 Small N with Curl 0236 \u0236 Small T with Curl 0237 \u0237 Small Dotless J 0238 \u0238 Small DB Digraph 0239 \u0239 Small QP Digraph 023A \u023a Capital A with Stroke 023B \u023b Capital C with Stroke 023C \u023c Small C with Stroke 023D \u023d Capital L with Bar 023E \u023e Capital T with Diagonal Stroke 023F \u023f Small S with Swash Tail 0240 \u0240 Small Z with Swash Tail 0241 \u0241 Capital Glottal Stop 0242 \u0242 Small Glottal Stop 0243 \u0243 Capital B with Stroke 0244 \u0244 Capital U Bar 0245 \u0245 Capital Turned V 0246 \u0246 Capital E with Stroke 0247 \u0247 Small E with Stroke 0248 \u0248 Capital J with Stroke 0249 \u0249 Small J with Stroke 024A \u024a Capital Q with Hook Tail 024B \u024b Small Q with Hook Tail 024C \u024c Capital R with Stroke 024D \u024d Small R with Stroke 024E \u024e Capital Y with Stroke 024F \u024f Small Y with Stroke 1E9E \u1e9e Capital Letter Sharp S DE"},{"location":"design/convert/","title":"Convert JSONL","text":"<ul> <li>Save a copy of the original code to your computer first, just in case.</li> <li>Paste your <code>jsonl</code> or <code>yaml</code> code into the textarea.</li> <li>Click the convert button to replace the old icon codes to the new UTF-16 format.</li> <li>Copy/paste the code back to your configuration.</li> </ul> <p>Warning</p> Convert"},{"location":"design/data-types/","title":"Data Types","text":"<p>There are 5 major data types that openHASP uses when communicating over MQTT:</p>"},{"location":"design/data-types/#boolean","title":"Boolean","text":"<p>Properties with a boolean data type accept these values and are case insensitive:</p> <ul> <li><code>true</code> / <code>ON</code> / <code>1</code> / <code>yes</code></li> <li><code>false</code> / <code>OFF</code> / <code>0</code> / <code>no</code></li> </ul> <p>The return value will be either <code>1</code>/<code>0</code> or <code>on</code>/<code>off</code> depending on the context.</p>"},{"location":"design/data-types/#integer","title":"Integer","text":"<p>Numeric properties have integer values with a variable minimum and maximum input value.    Certain object properties also support negative values.</p> <p>Details</p> <p><code>int8</code> (signed) supports values ranging from -128 to 127.   <code>uint8</code> (unsigned) supports values ranging from 0 to 255.   <code>int16</code> (signed) supports values ranging from -32768 to 32767.    <code>uint16</code> (unsigned) supports values ranging from 0 to 65535.</p>"},{"location":"design/data-types/#string","title":"String","text":"<p>Properties that accept textual input. When sending raw text in the MQTT payload or as command parameter no quotes are needed.   Only when a text value is included in a <code>jsonl</code> or <code>json</code> command, it needs to be quoted accoring to JSON rules.</p>"},{"location":"design/data-types/#json-object","title":"JSON Object","text":"<p>Some properties can be set or retrieved in JSON format too. The JSON object has several keys that have a boolean, integer or string data type.</p> <p>Example: <code>{\"cover\":\"cover.my_room\",\"position\":\"50\"}</code></p>"},{"location":"design/data-types/#colors","title":"Colors","text":"<p>Color values can be:</p> <ul> <li>Short names (from table below)</li> <li>RGB hex code (<code>#rrggbb</code>)</li> <li>Short hex code (<code>#rgb</code>)</li> <li>RGB565 number format (<code>0..65535</code>)</li> </ul> Hex Code Short Name Hex Code Short Name #00FFFF Cyan or Aqua #FFC0CB Pink #00FF00 Lime #DDA0DD Plum #008000 Green #DA70D6 Orchid #008080 Teal #EE82EE Violet #0000FF Blue #FF00FF Magenta or Fuchsia #000080 Navy #800080 Purple #808000 Olive #4B0082 Indigo #CD853F Peru #B00000 Blush #A0522D Sienna #FF0000 Red #A52A2A Brown #FF6347 Tomato #800000 Maroon #FA8072 Salmon #FFFFFF White #FF7F50 Coral #FFFAFA Snow #FFA500 Orange #FFFFF0 Ivory #FFD700 Gold #FAF0E6 Linen #FFFF00 Yellow #F5F5DC Beige #F0E68C Khaki #F0FFFF Azure #FFE4C4 Bisque #C0C0C0 Silver #F5DEB3 Wheat #808080 Gray or Grey #D2B48C Tan #000000 Black"},{"location":"design/data-types/#setting-color","title":"Setting Color","text":"<p>Examples: <pre><code>p0b2.value_color=13891\np1b5.text_color=silver\np2b3.bg_color=#C042A3\np2b4.border_color=#9f9\n</code></pre></p>"},{"location":"design/data-types/#return-values","title":"Return values","text":"<p>When retrieving the color of an object, both the HTML representation as the RGB values are returned separately.</p> <p>The format will be a json object with components:</p> <ul> <li>color : 6 digit hexadecimal code preceeded by a hash <code>#</code> sign.</li> <li>r : byte value for red (<code>0..255</code>)</li> <li>g : byte value for green (<code>0..255</code>)</li> <li>b : byte value for blue (<code>0..255</code>)</li> </ul> <p>For example, the color returned by a color picker change event is: <pre><code>{\"color\":\"#00fff6\",\"r\":0,\"g\":255,\"b\":246}\n</code></pre></p>"},{"location":"design/data-types/#variables","title":"Variables","text":"<p>Some properties can be set with variable data at plate runtime. Use the strings below to retrieve data:</p> <ul> <li><code>%ip%</code> - IP address of the plate</li> <li><code>%hostname%</code> - hostname (nodename)</li> <li><code>%ssid%</code> - SSID of the network connected to</li> <li><code>%model%</code> - plate model (set in the firmware)</li> <li><code>%version%</code> - firmware version number</li> </ul>"},{"location":"design/file-editor/","title":"File Editor","text":"<p>There is a file browser included in the web UI of the plate. You can use it to upload, edit, download and delete files on the flash partition of the ESP32.</p> <p>Click on the File Editor button on the Main Webpage:</p> <p></p>"},{"location":"design/file-editor/#upload-files","title":"Upload Files","text":""},{"location":"design/file-editor/#create-files","title":"Create Files","text":"<p>Type a new filename into the path field and click the Create button. The file will appear in the filelist.</p> <p>For example, type <code>/pages.jsonl</code> and click Create button.</p>"},{"location":"design/file-editor/#edit-files","title":"Edit Files","text":"<p>To change the Font size or settings of the Editor, click inside the text field and type F1.</p>"},{"location":"design/file-editor/#save-files","title":"Save Files","text":"<p>To save changes in the File Editor to flash type Ctrl+S on a PC or Cmd+S on Mac.</p>"},{"location":"design/file-editor/#delete-files","title":"Delete Files","text":"<p>Right-click on any file in the list and select Delete from the pop-up menu to remove that file from the ESP32 filesystem.</p> <p></p>"},{"location":"design/fonts/","title":"Fonts","text":""},{"location":"design/fonts/#fonts","title":"Fonts","text":""},{"location":"design/fonts/#built-in","title":"Built-in","text":"<p>The ESP32 firmware includes these built-in fonts:</p> <ul> <li>Unscii with font size 8pt</li> <li> { .tag-small } Roboto Condensed only in these fixed font sizes 12, 16, 24 and 32pt</li> <li> { .tag-small } Roboto Condensed TrueType font, i.e. any size can be set as of 0.7.0</li> </ul> <p>The default font in pre-compiled binaries is Roboto-Condensed-Regular which includes these character sets: Ascii, Cyrillic, Latin-1, Latin-2, Greek and Vietnamese. It also includes 146 MaterialDesign icons listed below.</p> <p>The built-in fonts can be set by using the pointsize as parameter. For example:</p> <pre><code>p4b1.text_font=24\np4b2.value_font=12\np4b3.text_font=64             &lt;-- Uses the TrueType font\n</code></pre> <p>Note</p> <p>On Devices that do not have PSRAM, you may notice that changing pages/drawing new pages may take a bit longer on version 0.7.0.</p>"},{"location":"design/fonts/#icons","title":"Icons","text":"<p>The icons in the list below are included with the built-in font sizes. Included are a range of arrows, navigation, climate, controls, devices, energy, lights, places, presence, security, sound, time and wireless icons.</p> Icon Code Name Icon Code Name <code>E045</code> arrow-down <code>F2A3</code> battery-high <code>E6C0</code> arrow-down-box <code>F2A1</code> battery-low <code>E04D</code> arrow-left <code>F2A2</code> battery-medium <code>E054</code> arrow-right <code>E08E</code> battery-outline <code>E05D</code> arrow-up <code>E5F1</code> ev-station <code>E6C3</code> arrow-up-box <code>E32A</code> leaf <code>E140</code> chevron-down <code>F40B</code> lightning-bolt <code>E141</code> chevron-left <code>E425</code> power <code>E142</code> chevron-right <code>E6A5</code> power-plug <code>E143</code> chevron-up <code>E769</code> ceiling-light <code>E60C</code> subdirectory-arrow-left <code>F020</code> coach-lamp <code>E01B</code> air-conditioner <code>E95F</code> desk-lamp <code>E957</code> cloud-search-outline <code>E8DD</code> floor-lamp <code>E238</code> fire <code>E6B5</code> lamp <code>E438</code> radiator <code>E335</code> lightbulb <code>EAD7</code> radiator-disabled <code>E6E8</code> lightbulb-on <code>E717</code> snowflake <code>F054</code> outdoor-lamp <code>E50F</code> thermometer <code>F2BA</code> string-lights <code>E58C</code> water <code>F1E1</code> vanity-light <code>E58E</code> water-percent <code>E91C</code> wall-sconce <code>E590</code> weather-cloudy <code>E12C</code> check <code>E591</code> weather-fog <code>E156</code> close <code>E592</code> weather-hail <code>E493</code> cog <code>E593</code> weather-lightning <code>E1D9</code> dots-vertical <code>E67E</code> weather-lightning-rainy <code>E2DC</code> home <code>E594</code> weather-night <code>E6A1</code> home-outline <code>E595</code> weather-partly-cloudy <code>E374</code> minus <code>E596</code> weather-pouring <code>E415</code> plus <code>E597</code> weather-rainy <code>E2E3</code> bed <code>E598</code> weather-snowy <code>E10B</code> car <code>E67F</code> weather-snowy-rainy <code>E176</code> coffee <code>E599</code> weather-sunny <code>E606</code> pool <code>E59D</code> weather-windy <code>E9A0</code> shower <code>E59E</code> weather-windy-variant <code>EA70</code> silverware-fork-knife <code>E5A8</code> white-balance-sunny <code>E4B9</code> sofa <code>E0ED</code> calendar <code>E9AB</code> toilet <code>E150</code> clock-outline <code>E004</code> account <code>E2DA</code> history <code>E64A</code> human-greeting <code>E51B</code> timer-outline <code>E70E</code> run <code>E0AF</code> bluetooth <code>E026</code> alert <code>E5A9</code> wifi <code>E7AE</code> cctv <code>E0AC</code> blinds <code>E81B</code> door-closed <code>F011</code> blinds-open <code>F0AF</code> door-closed-lock <code>F2D4</code> garage-open-variant <code>E81C</code> door-open <code>F2D3</code> garage-variant <code>E30B</code> key-variant <code>F11C</code> window-shutter <code>E33E</code> lock <code>F11D</code> window-shutter-alert <code>EFC6</code> lock-open-variant <code>F11E</code> window-shutter-open <code>E565</code> shield-check <code>E09A</code> bell <code>E68A</code> shield-home <code>E11C</code> cellphone <code>E99D</code> shield-lock <code>EAAC</code> dishwasher <code>F1DB</code> window-closed-variant <code>E1FA</code> engine <code>EF5F</code> monitor-speaker <code>E210</code> fan <code>E75A</code> music <code>E96B</code> fountain <code>E3E4</code> pause <code>E28F</code> fridge-outline <code>E40A</code> play <code>E5FA</code> kettle <code>E456</code> repeat <code>E322</code> laptop <code>E457</code> repeat-off <code>EC99</code> microwave <code>E458</code> repeat-once <code>F39D</code> recycle-variant <code>E49D</code> shuffle <code>F1F3</code> robot-mower-outline <code>E49E</code> shuffle-disabled <code>E70D</code> robot-vacuum <code>E4AD</code> skip-next <code>E4DE</code> stove <code>E4AE</code> skip-previous <code>E502</code> television <code>E4C3</code> speaker <code>EA7A</code> trash-can-outline <code>E4DB</code> stop <code>E917</code> tumble-dryer <code>E57E</code> volume-high <code>E72A</code> washing-machine <code>E580</code> volume-medium <code>E58F</code> water-pump <code>E75F</code> volume-mute <code>E6C1</code> arrow-left-box <code>ED9B</code> solar-panel <code>E6C2</code> arrow-right-box <code>ED9C</code> solar-panel-large <code>EAD8</code> radiator-off <code>EA72</code> solar-power <code>EF30</code> weather-hazy <code>FA74</code> solar-power-variant-outline <code>EF31</code> weather-night-partly-cloudy <code>F92D</code> transmission-tower-import <code>ED3E</code> transmission-tower <code>F92C</code> transmission-tower-export"},{"location":"design/fonts/#custom-fonts","title":"Custom Fonts","text":""},{"location":"design/fonts/#truetype","title":"TrueType","text":"<p>Warning</p> <p>You should only load TTF fonts on a device that has PSRAM</p> <p>You can use any TrueType font containing characters or icons. </p> <ol> <li>Upload any <code>.ttf</code> (in lowercase) TrueType font file to the flash partition of your plate. If you want to use other styles than Regular like Italic or Bold, make sure you use a font which provides separate, optimized versions for these. You can upload and use multiple font files, but within a property you can only select one font.</li> <li>In the jsonl code use the filename of the font without the extension and the desired font size added to it. So for example to have a text rendered in Arial 20px, you upload <code>arial.ttf</code> to the plate and use <code>\"text_font\":\"arial20\"</code> or command <code>p1b2.text_font=arial20</code>.</li> </ol> <p>Note</p> <p>If you get an error when you upload the TTF file to the plate, make sure to use shorter filenames.</p> <p>Tip</p> <p>You can use different fonts for different properties of the same objects, like <code>\"text_font\":\"mdi32\",\"value_font\":\"robotocondensed19\"</code>. To use MDI icons, get the latest webfont build from their site. From the unzipped archive you need the <code>.ttf</code></p> <p>Warning</p> <p>Use as few as possible separate TTF fonts in parrallel, because each of them is loaded in memory, which will exhaust faster. With the open source FontForge tool you can combine glyphs and icons from different fonts into one single TTF file and create your custom collection based on your needs.</p>"},{"location":"design/fonts/#binary","title":"Binary","text":"<p>With the online Font Converter tool you can create binary font files from any TTF, OTF or WOFF font. You can select custom ranges of Unicode characters and specify the bpp (bits-per-pixel).</p> <p>The font converter is designed to be compatible with LVGL. An offline version of the converter is also available here.</p>"},{"location":"design/fonts/#online-font-converter","title":"Online Font Converter","text":"<p>How to use the font converter?</p> <ol> <li>Give a name to the binary font. E.g. \"arial_20\"</li> <li>Specify the height in pixels</li> <li>Set the bpp (bits-per-pixel). Higher values result in a smoother (anti-aliased) font but will require more flash and memory.</li> <li>Choose a TTF, OTF or WOFF source font file</li> <li>Set a range of Unicode characters to include in your font or list the characters in the Symbols field</li> <li>Optionally choose another font too and specify the ranges and/or symbols for it as well. The characters will be merged into the final binary font.</li> <li>Click the Convert button to download the resulting <code>.bin</code> file.</li> </ol> Name Size Bpp 1 bit-per-pixel 2 bit-per-pixel 3 bit-per-pixel (Needs compression enabled) 4 bit-per-pixel 8 bit-per-pixel  Enable font compression (reduces size)                   No subpixel hinting   Horizontal subpixel hinting (may                     improve font quality, requires 6.1+)                       Vertical subpixel hinting   Try to use glyph                     color info from font to create grayscale icons. Since gray tones are emulated via                         transparency, result will be good on contrast background only. Source font Ranges &amp; Codepoints Symbols &amp; Characters You can use both \"Ranges\" and \"Symbols\" or only one of them Include another font"},{"location":"design/fonts/#usage","title":"Usage","text":"<ol> <li>Upload the resulting <code>arial_20.bin</code> binary font file to the flash partition of your plate.</li> <li>In the jsonl code use <code>\"text_font\":\"arial_20\"</code> without the extension or use command <code>p1b2.text_font=arial_20</code></li> </ol> <p>Warning</p> <p>The entire binary font is cached into memory when it is first used. PSram is highly recommended to use binary fonts.</p> <p>Note</p> <p>If both a <code>arial_20.bin</code> and <code>arial.ttf</code> file are present, the binary file is prefered over the TrueType file.</p>"},{"location":"design/fonts/#encoding","title":"Encoding","text":"<p>The encoding of the icons depends on how they are sent to the plate:</p>"},{"location":"design/fonts/#1-as-json-payload","title":"1. As JSON payload","text":"<p>To use an icon in a <code>json</code> or <code>jsonl</code> payload you need to prefix the UTF-8 character code with <code>\\u</code>. ArduinoJSON will correctly decode the text into it's UTF-8 representation while parsing the JSON object:</p> <p><code>jsonl</code> example: <pre><code>{\"page\":2,\"id\":1,\"obj\":\"label\",\"w\":150,\"h\":50,\"text\":\"\\uE64A Hello world!\"}\n</code></pre></p> <p><code>json</code> example: <pre><code>[\"p2b1.text=\\uE64A Hello world!\"]\n</code></pre></p> <p>If the icon codepoint is larger than <code>0xFFFF</code> you need to convert the codepoint to its surrogate pair first! Then include both UTF-16 surrogate characters in the payload like this:</p> <p><code>jsonl</code> example: <pre><code>{\"page\":2,\"id\":1,\"obj\":\"label\",\"w\":150,\"h\":50,\"text\": \"\\uDB81\\uDC25 Hello world!\"}\n</code></pre></p> <p><code>json</code> example: <pre><code>[\"p2b1.text=\\uDB81\\uDC25 Hello world!\"]\n</code></pre></p>"},{"location":"design/fonts/#2-as-raw-payload","title":"2. As raw payload","text":"<p>Raw payloads are directly passed to the LVGL text rendering engine without any conversion on the MCU. You need to make sure the string is properly encoded into UTF-8 by the application sending the payload! How this is accomplished depends on the Home Automation tool:</p>"},{"location":"design/fonts/#home-assistant","title":"Home Assistant","text":"<ul> <li> <p>Code points up to <code>0xFFFF</code> should be encoded as <code>\"\\uE6E8\"</code> in the template. Note: Use lowercase <code>\\u</code> and exactly 4 hexadecimal digits.</p> </li> <li> <p>Code points above <code>0xFFFF</code> must be encoded as <code>\"\\U0001F5E9\"</code> in the template. Note: Use capital <code>\\U</code> and exactly 8 hexadecimal digits.</p> </li> <li> <p>At the end of the template you must indicate that Home Assistant needs encoded the string before sending it by appending <code>|e</code> (pipe symbol + <code>e</code>) at the end.</p> </li> </ul> <pre><code>- obj: \"p1b2\"  # light-switch toggle button\n  properties:\n    \"text\": '{{ \"\\uE6E8\" if is_state(\"light.x\",\"on\") else \"\\U0001F5E9\" |e }}'\n</code></pre> <p>Tip</p> <p>For MDI icons, use this modified cheatsheet to get the raw and the surrogate paired codepoints ready to use. Note that the cheatsheet may not contain the very latest icons.</p>"},{"location":"design/fonts/#character-sets","title":"Character Sets","text":"<p>The characters are encoded in UTF-8. All character sets include the Ascii <code>0x20-0x7E</code> characters, the non-braking-space (<code>NBSP</code>) and 12 universal symbols. Each set contains roughly the same extended characters from its equivalent iso-8859 standard. All character sets also contain about 130 standard Material Design Icons for home automation use.</p> <p>The default font in pre-compiled binaries is Roboto-Condensed-Regular with the Ascii, Cyrillic, Latin-1, Latin-2, Greek and Vietnamese character sets.</p> <p>There is no support for right-to-left scripts.</p> <p>For example: To display the \u00f7 character on the plate you need to use <code>\\u00F7</code> in json or jsonl commands, or send the encoded UTF-8 bytes <code>0xC3</code> <code>0xB7</code> in other commands.</p>"},{"location":"design/fonts/#ascii","title":"Ascii","text":"<p>Includes all ASCII 0x20-0x7E characters extended with a non-breaking space and 10 universal symbols: </p> <p><code>NBSP</code> \u00a3 \u00b0 \u00b1 \u00b2 \u00b3 \u00b5 \u00d7 \u00f7 \u20ac \u2022 \u2030 \u2031</p>"},{"location":"design/fonts/#latin-1","title":"Latin 1","text":"<p>Covers Northern, Western and Southern European languages: English (en), French (fr), Spanish (es), Portuguese (pt), Italian (it), Dutch (nl), German (de), Danish (da), Swedish (sv), Norwegian (no), Finnish (fi), Albanian (sq), Turkish (tr)</p> <p>\u00a1 \u00bf \u00c0 \u00c1 \u00c2 \u00c3 \u00c4 \u00c5 \u00c6 \u00c7 \u00c8 \u00c9 \u00ca \u00cb \u00cc \u00cd \u00ce \u00cf \u00d1 \u00d2 \u00d3 \u00d4 \u00d5 \u00d6 \u00d8 \u00d9 \u00da \u00db \u00dc \u00dd \u00de \u00df \u00e0 \u00e1 \u00e2 \u00e3 \u00e4 \u00e5 \u00e6 \u00e7 \u00e8 \u00e9 \u00ea \u00eb \u00ec \u00ed \u00ee \u00ef \u00f0 \u00f1 \u00f2 \u00f3 \u00f4 \u00f5 \u00f6 \u00f8 \u00f9 \u00fa \u00fb \u00fc \u00fd \u00fe \u00ff \u011e \u011f \u0130 \u0131 \u0152 \u0153 \u015e \u015f \u0160 \u0161 \u017d \u017e \u1e9e</p>"},{"location":"design/fonts/#latin-2","title":"Latin 2","text":"<p>Covers Central and Eastern European languages: Czech (cs), Hungarian (hu), Polish (pl), Romanian (ro), Croatian (hr), Slovak (sk), Slovenian (sl), Sorbian (sb)</p> <p>\u00c1 \u00c2 \u00c4 \u00c9 \u00cd \u00ce \u00d3 \u00d4 \u00d6 \u00da \u00dc \u00dd \u00e1 \u00e2 \u00e4 \u00e9 \u00ed \u00ee \u00f3 \u00f4 \u00f6 \u00fa \u00fc \u00fd \u0102 \u0103 \u0104 \u0105 \u0106 \u0107 \u010c \u010d \u010e \u010f \u0110 \u0111 \u0114 \u0115 \u0118 \u0119 \u011a \u011b \u0139 \u013a \u013d \u013e \u0141 \u0142 \u0143 \u0144 \u0147 \u0148 \u0150 \u0151 \u0154 \u0155 \u0158 \u0159 \u015a \u015b \u015e \u015f \u0160 \u0161 \u0162 \u0163 \u0164 \u0165 \u016e \u016f \u0170 \u0171 \u0179 \u017a \u017b \u017c \u017d \u017e \u01cd \u01ce \u0200 \u0201 \u0202 \u0203 \u0204 \u0205 \u0206 \u0207 \u0208 \u0209 \u020a \u020b \u020c \u020d \u020e \u020f \u0210 \u0211 \u0212 \u0213 \u0214 \u0215 \u0216 \u0217 \u0218 \u0219 \u021a \u021b</p>"},{"location":"design/fonts/#cyrillic","title":"Cyrillic","text":"<p>Covers the Slavic languages that use a Cyrillic alphabet, including Belarusian, Bulgarian, Macedonian, Russian, Serbian, and Ukrainian </p> <p>\u0400 \u0401 \u0402 \u0403 \u0404 \u0405 \u0406 \u0407 \u0408 \u0409 \u040a \u040b \u040c \u040d \u040e \u040f \u0410 \u0411 \u0412 \u0413 \u0414 \u0415 \u0416 \u0417 \u0418 \u0419 \u041a \u041b \u041c \u041d \u041e \u041f \u0420 \u0421 \u0422 \u0423 \u0424 \u0425 \u0426 \u0427 \u0428 \u0429 \u042a \u042b \u042c \u042d \u042e \u042f \u0430 \u0431 \u0432 \u0433 \u0434 \u0435 \u0436 \u0437 \u0438 \u0439 \u043a \u043b \u043c \u043d \u043e \u043f \u0440 \u0441 \u0442 \u0443 \u0444 \u0445 \u0446 \u0447 \u0448 \u0449 \u044a \u044b \u044c \u044d \u044e \u044f \u0450 \u0451 \u0452 \u0453 \u0454 \u0455 \u0456 \u0457 \u0458 \u0459 \u045a \u045b \u045c \u045d \u045e \u045f</p>"},{"location":"design/fonts/#greek","title":"Greek","text":"<p>Covers the Greek (el) language:</p> <p>\u0386 \u0388 \u0389 \u038a \u038c \u038e \u038f \u0390 \u0391 \u0392 \u0393 \u0394 \u0395 \u0396 \u0397 \u0398 \u0399 \u039a \u039b \u039c \u039d \u039e \u039f \u03a0 \u03a1 \u03a3 \u03a4 \u03a5 \u03a6 \u03a7 \u03a8 \u03a9 \u03ac \u03ad \u03ae \u03af \u03b0 \u03b1 \u03b2 \u03b3 \u03b4 \u03b5 \u03b6 \u03b7 \u03b8 \u03b9 \u03ba \u03bb \u03bc \u03bd \u03be \u03bf \u03c0 \u03c1 \u03c2 \u03c3 \u03c4 \u03c5 \u03c6 \u03c7 \u03c8 \u03c9 \u03ca \u03cb \u03cc \u03cd \u03ce</p>"},{"location":"design/fonts/#vietnamese","title":"Vietnamese","text":"<p>Covers the Vietnamese (vi) language:</p> <p>\u00c1 \u00c0 \u00c2 \u0102 \u00c3 \u1ea4 \u1ea6 \u1eae \u1eb0 \u1eaa \u1eb4 \u1ea2 \u1ea8 \u1eb2 \u1ea0 \u1eac \u1eb6 \u0110 \u00c9 \u00c8 \u00ca \u1ebc \u1ebe \u1ec0 \u1ec4 \u1eba \u1ec2 \u1eb8 \u1ec6 \u00cd \u00cc \u0128 \u1ec8 \u1eca \u00d3 \u00d2 \u00d4 \u00d5 \u1ed0 \u1ed2 \u1ed6 \u1ece \u01a0 \u1ed4 \u1ecc \u1eda \u1edc \u1ee0 \u1ed8 \u1ede \u1ee2 \u00da \u00d9 \u0168 \u1ee6 \u01af \u1ee4 \u1ee8 \u1eea \u1eee \u1eec \u1ef0 \u00dd \u1ef2 \u1ef8 \u1ef6 \u1ef4 \u00e1 \u00e0 \u00e2 \u0103 \u00e3 \u1ea5 \u1ea7 \u1eaf \u1eb1 \u1eab \u1eb5 \u1ea3 \u1ea9 \u1eb3 \u1ea1 \u1ead \u1eb7 \u0111 \u00e9 \u00e8 \u00ea \u1ebd \u1ebf \u1ec1 \u1ec5 \u1ebb \u1ec3 \u1eb9 \u1ec7 \u00ed \u00ec \u0129 \u1ec9 \u1ecb \u00f3 \u00f2 \u00f4 \u00f5 \u1ed1 \u1ed3 \u1ed7 \u1ecf \u01a1 \u1ed5 \u1ecd \u1edb \u1edd \u1ee1 \u1ed9 \u1edf \u1ee3 \u00fa \u00f9 \u0169 \u1ee7 \u01b0 \u1ee5 \u1ee9 \u1eeb \u1eef \u1eed \u1ef1 \u00fd \u1ef3 \u1ef9 \u1ef7 \u1ef5 \u20ab    </p>"},{"location":"design/objects/","title":"Objects","text":"Objects <p>There are two ways to create an object on the screen:</p> <ul> <li>Uploading a <code>pages.jsonl</code> file onto the internal flash</li> <li>Use the <code>jsonl</code> command (via MQTT, serial or telnet console)</li> </ul>"},{"location":"design/objects/#cheatsheet","title":"Cheatsheet","text":"obj Type Description btn Binary Button switch Toggle Switch checkbox Toggle Checkbox label Visual Label led Visual LED spinner Visual Spinner obj Visual Base Object line  Visual Line img  Visual Image dropdown Selector Dropdown List roller Selector Roller btnmatrix Selector Button Matrix msgbox   Selector Messagebox tabview   Selector Tabview tab   Selector Tab cpicker Selector Color picker bar Range Progress Bar slider Range Slider arc Range Arc linemeter Range Line Meter gauge Range Gauge"},{"location":"design/objects/#common-parameters","title":"Common Parameters","text":""},{"location":"design/objects/#common-properties","title":"Common Properties","text":"<p>These are the common properties shared among all objects, but only the <code>id</code> and <code>obj</code> properties are required to create an object:</p> Property Value Required Default Description id 1..254 yes n/a ID of the object on this page. <code>0</code> for the page itself. obj string yes n/a Name of the object type (see below) page 0..12 no n/a ID of the page the object appears on (see below) groupid 0..15 no 0 (none) ID of the GPIO group the object belongs to x int16 no 0 Horizontal position on the page y int16 no 0 Vertical position on the page w int16 no 0 Width of the object h int16 no 0 Height of the object hidden bool no false Object is hidden opacity 0..255 no 255 How much the the object is opaque action string no 0 Command handled locally (see below) swipe bool no false Page navigation using swipe gestures (see below) click bool no true Object is touch/clickable (also see enabled) ext_click_h 0..255 no 0 Extended horizontal clickable are on the left and right ext_click_v 0..255 no 0 Extended vertical clickable are on the top and bottom parentid 0..255 no 0 Set the object to be the child of another object.<code>x</code> and <code>y</code> will be relative to the parent object. Property inheritance can affect the appearance of the of the children (more info in styling). <p>Tip</p> <p>Further customizable properties can be found in styling.</p> <p>Ids start from 1 on each page. You can have a maximum of 254 ids on each page. You don't have to use them in ascending order, you can for example use them for logical numbering (start labels from 11, 12, 13, buttons from 21, 22, 23 etc.)</p>"},{"location":"design/objects/#pages","title":"Pages","text":"<p>If the <code>page</code> parameter is not present, the object is placed on the same page as the previous object. If <code>page</code> is not specified for the first object either, the current page being displayed is used.</p> <p><code>\"page\":0</code> indicates that the object is visible on all pages. It can be used for example to specify a static menu bar. You can still hide the object on select pages if needed. Objects on page 0 appear on top of any objects on the underlying page.</p>"},{"location":"design/objects/#actions","title":"Actions","text":"<p>Action commands are supported only by binary or visual type of objects and they are performed locally on the plate. The following actions can be set for these objects:</p> <ul> <li><code>p1</code> to <code>p12</code> to switch to the corresponding page numbers directly (for ESP32; in case of ESP8266 it's only <code>p1</code> to <code>p4</code>)</li> <li><code>prev</code> to switch to the previous page</li> <li><code>next</code> to switch to the next page</li> <li><code>back</code> to go back to the home page</li> </ul> <p>Check out the example for how to implement actions. You can change the target pages using <code>prev</code>, <code>back</code> and <code>next</code> page attributes operation on the page object<code>pXb0</code>.  </p>"},{"location":"design/objects/#swipe","title":"Swipe","text":"<p>Objects and page area (<code>p0bY</code>) support <code>swipe</code> property. Enabling this will process <code>left</code>, <code>right</code> and <code>down</code> swipes on the object as <code>next</code>, <code>prev</code> and <code>back</code> page changes, respectively. The start of the swipe needs to be on the element which has this property enabled for the feature to activate.  </p> <p>Note</p> <p>Page id <code>p0b0</code> is not valid to set this property as it has to be set on real elements. </p>"},{"location":"design/objects/#events","title":"Events","text":"<p>All objects are touchable by default and respond to touch events. To disable touch events for an object set its <code>enabled</code> property to <code>false</code>. In this case the touch event \"goes through\" to the object on the layer below or to the page itself.</p> <p>Events (and values) are published in a state topic corresponding to the object, eg. <code>hasp/&lt;nodename&gt;/state/p1b2</code> with payload in json format eg. <code>{\"event\":\"up\",\"val\":1}</code>. Possible events (depending on object type) are:</p> Event Description <code>down</code> Occurs when a button goes from depressed to pressed (the moment of touch) <code>up</code> The button was released within a short time i.e. a short press has occurred <code>release</code> The button is released after being pressed for over the threshold time <code>long</code> Event is sent when the button is still being pressed after the threshold time of 400ms <code>hold</code> The HOLD event is repeated every 200ms while the button is still pressed <code>changed</code> Event is sent when the value of the object has changed during the event <p>Tip</p> <p>To actively see the sent out events you can use an MQTT client app and subscribe to the <code>hasp/#</code> topic.</p>"},{"location":"design/objects/#common-methods","title":"Common Methods","text":"<p>These are the common methods shared among all objects,</p> Method Parameters Description <code>clear</code> Delete the children from the object <code>delete</code> Delete the object and its children from the page <code>to_front</code> Bring the object to the front on the page <code>to_back</code> Send the object to the back on the page <p>Example commands:</p> <pre><code>p1b5.delete\np1b3.to_front\n</code></pre> Object Types <p>Each object type is an ID that indicates which object type that line represents. Besides the common properties listed above, each object type can have specific properties.</p>"},{"location":"design/objects/#text-label","title":"Text Label","text":"<p>obj:<code>label</code></p> <p></p> Property Value Default Description text string \"Text\" The text of the label, <code>\\n</code> for line break. Can also be a variable. mode string <code>crop</code> The wrapping mode of long text labels:<code>expand</code> Expand the object size to the text size<code>break</code> Keep the object width, break the too long lines and expand the object height<code>dots</code> Keep the size and write dots at the end if the text is too long<code>scroll</code> Keep the size and roll the text back and forth<code>loop</code> Keep the size and roll the text circularly<code>crop</code> Keep the size and crop the text out of it align string <code>left</code> Text alignment: <code>left</code>, <code>center</code>, <code>right</code> <p>It's possible to set the color of characters in the text indvidually, just prefix the text to be re-colored with a <code>#RRGGBB</code> hexadecimal color code and a space, and close with a single hash <code>#</code> tag.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":1,\"obj\":\"label\",\"x\":10,\"y\":5,\"w\":150,\"h\":50,\"text\":\"\\uE64A Hello world!\"}\n{\"page\":1,\"id\":1,\"obj\":\"label\",\"x\":10,\"y\":5,\"w\":150,\"h\":50,\"text\":\"#0000FF \\uE64A# #FF0000 Hello# #008000 world#!\"}\n</code></pre>"},{"location":"design/objects/#button","title":"Button","text":"<p>obj:<code>btn</code></p> <p></p> Property Value Default Description toggle bool false When enabled, creates a toggle-on/toggle-off button. If false, creates a normal button val int16 0 The value: <code>0</code> = untoggled, <code>1</code> = toggled text string \"\" The text of the label mode string <code>expand</code> The wrapping mode of long text labels.<code>expand</code> Expand the object size to the text size<code>break</code> Keep the object width, break the too long lines and expand the object height<code>dots</code> Keep the size and write dots at the end if the text is too long<code>scroll</code> Keep the size and roll the text back and forth<code>loop</code> Keep the size and roll the text circularly<code>crop</code> Keep the size and crop the text out of it align string <code>left</code> Text alignment: <code>left</code>, <code>center</code>, <code>right</code> <p>Similar to the text label, it's possible to set the color of characters in the text indvidually, just prefix the text to be re-colored with a <code>#RRGGBB</code> hexadecimal color code and a space, and close with a single hash <code>#</code> tag.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":2,\"obj\":\"btn\",\"x\":10,\"y\":40,\"w\":105,\"h\":90,\"toggle\":false,\"text\":\"Normal Button\",\"mode\":\"break\",\"align\":\"center\"}\n{\"page\":1,\"id\":3,\"obj\":\"btn\",\"x\":125,\"y\":40,\"w\":105,\"h\":90,\"toggle\":true,\"text\":\"#FFD700 Toggle# Button\",\"mode\":\"break\",\"align\":\"center\"}\n</code></pre> <p>Normal buttons (<code>toggle=false</code>) send touch events while they occur: </p> <p>Short touch: <pre><code>{\"event\":\"down\"}\n{\"event\":\"up\"}\n</code></pre></p> <p>Long press: <pre><code>{\"event\":\"down\"}\n{\"event\":\"long\"}\n{\"event\":\"hold\"}\n{\"event\":\"hold\"}\n{\"event\":\"release\"}\n</code></pre></p> <p>Toggle buttons (<code>toggle=true</code>) send out the old value in the <code>down</code> event and the new value in the <code>up</code> event when released:</p> <p>Toggle ON: <pre><code>{\"event\":\"down\",\"val\":0}\n{\"event\":\"up\",\"val\":1}\n</code></pre></p> <p>Toggle OFF: <pre><code>{\"event\":\"down\",\"val\":1}\n{\"event\":\"up\",\"val\":0}\n</code></pre></p>"},{"location":"design/objects/#switch","title":"Switch","text":"<p>obj:<code>switch</code></p> <p></p> Property Value Default Description val bool 0 <code>1</code> = on, <code>0</code> = off bg_color1 color 0 changes indicator color bg_color2 color 0 changes knob color radius2 int16 dependson theme changes knob corner radius (also see radius) Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":4,\"obj\":\"switch\",\"x\":125,\"y\":145,\"w\":105,\"h\":55,\"radius\":15}\n</code></pre> <p>Events generated by switch are similar to the ones generate by the toggle buttons.</p>"},{"location":"design/objects/#checkbox","title":"Checkbox","text":"<p>obj:<code>checkbox</code></p> <p></p> Property Value Default Description val int16 0 <code>1</code> = checked<code>0</code> = unchecked text string \"Checkbox\" The label of the checkbox <p>Note</p> <p>The checkbox object ignores the <code>w</code> and <code>h</code> attribute. These are calculated based on the font and text.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":5,\"obj\":\"checkbox\",\"x\":10,\"y\":145,\"w\":105,\"text\":\" Checkbox\"}\n</code></pre> <p>Events generated by checkbox are similar to the ones generate by the toggle buttons.</p>"},{"location":"design/objects/#progress-bar","title":"Progress Bar","text":"<p>obj:<code>bar</code></p> <p></p> Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator start_value int16 0 optional minimal allowed value of the indicator <p>Vertical bars can be created if the width of the object is smaller than its height.</p> <p>Note</p> <p><code>min</code>, <code>max</code>, <code>val</code> and <code>start_value</code> support also negative values.</p>"},{"location":"design/objects/#slider","title":"Slider","text":"<p>obj:<code>slider</code></p> <p></p> Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator start_value int16 0 optional minimal allowed value of the indicator <p>Vertical sliders can be created if the width of the object is smaller than its height.</p> <p>Note</p> <p><code>min</code>, <code>max</code>, <code>val</code> and <code>start_value</code> support also negative values.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":6,\"obj\":\"slider\",\"x\":20,\"y\":250,\"w\":200,\"h\":20,\"min\":15,\"max\":35}\n</code></pre> <p>While pressing and dragging the <code>slider</code> object the following events are sent: <code>down</code> (old value), <code>changed</code> (repeatedly until released) and <code>up</code> (value at the moment of releasing it):</p> <pre><code>{\"event\":\"down\",\"val\":21}\n{\"event\":\"changed\",\"val\":22}\n{\"event\":\"changed\",\"val\":23}\n{\"event\":\"changed\",\"val\":25}\n{\"event\":\"changed\",\"val\":27}\n{\"event\":\"changed\",\"val\":29}\n{\"event\":\"up\",\"val\":31}\n</code></pre>"},{"location":"design/objects/#arc","title":"Arc","text":"<p>obj:<code>arc</code></p> <p></p> Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator rotation int16 0 offset to the 0 degree position type 0-2 0 <code>0</code> = normal, <code>1</code> = symmetrical, <code>2</code> = reverse adjustable bool false Add knob that the user can operate to change the value start_angle 0-360 start angle of the arc background (see note) end_angle 0-360 end angle of the arc background (see note) start_angle1 0-360 start angle of the arc indicator (see note) end_angle1 0-360 end angle of the arc indicator (see note) <p>Note</p> <p>Zero degree is at the middle right (3 o'clock) of the object and the degrees are increasing in a clockwise direction. The angles should be in the [0-360] range.    <code>min</code>, <code>max</code> and <code>val</code> support also negative values.</p> <p>Tip</p> <p>To adjust the size of the knob, use <code>pad_top2</code>, <code>pad_bottom2</code>, <code>pad_left2</code>, <code>pad_right2</code> styling properties. If you increase the knob beyond the margins of the object, you also need to increase <code>pad_top</code>, <code>pad_bottom</code>, <code>pad_left</code>, <code>pad_right</code> for the arc itself.   Check out value styling to display a textual value in the middle of the arc.     </p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":9,\"obj\":\"arc\",\"x\":20,\"y\":75,\"w\":200,\"h\":200,\"min\":15,\"max\":35,\"border_side\":0,\"type\":0,\"rotation\":0,\"start_angle\":135,\"end_angle\":45,\"start_angle1\":135,\"end_angle1\":45,\"adjustable\":true}\n</code></pre> <p>While pressing and dragging the <code>arc</code> object the following events are sent: <code>down</code> (old value), <code>changed</code> (repeatedly until released) and <code>up</code> (value at the moment of releasing it):</p> <pre><code>{\"event\":\"down\",\"val\":21}\n{\"event\":\"changed\",\"val\":22}\n{\"event\":\"changed\",\"val\":23}\n{\"event\":\"changed\",\"val\":25}\n{\"event\":\"changed\",\"val\":27}\n{\"event\":\"changed\",\"val\":29}\n{\"event\":\"up\",\"val\":31}\n</code></pre>"},{"location":"design/objects/#dropdown-list","title":"Dropdown List","text":"<p>obj:<code>dropdown</code></p> <p></p> Property Value Default Description options string \"\" List of items separated by <code>\\n</code> val int16 0 The number of the selected item text string \"\" Read-only The text of the selected item direction byte 0 Direction where the dropdown expands: <code>0</code> = down, <code>1</code> = up, <code>2</code> = left, <code>3</code> = right Note: up and down are superseeded by the screen size. show_selected bool true Show the selected option or a static text max_height int16 3/4 of screen height The maximum height of the open drop-down list Method Parameters Description open To manually open the drop-down list close To manually close the drop-down list <p>To change the currently selected item, use the <code>val</code> attribute.   To change the items in the list, use the <code>options</code> attribute.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":10,\"obj\":\"dropdown\",\"x\":10,\"y\":205,\"w\":105,\"h\":30,\"options\":\"Apple\\nBanana\\nOrange\\nMelon\"}\n</code></pre> <p>When the item is changed both <code>val</code> and <code>text</code> of the newly selected item are send out accompanied by the <code>change</code> event.</p>"},{"location":"design/objects/#roller","title":"Roller","text":"<p>obj:<code>roller</code></p> <p></p> Property Value Default Description options string \"\" List of items separated by <code>\\n</code> val int16 0 The number of the selected item text string \"\" Read-only The text of the selected item rows int8 3 The number of rows that are visibleUse this property instead of <code>h</code> to set object height mode 0..1 0 Roller mode: <code>0</code> = normal (finite), <code>1</code> = infinite align string <code>center</code> Text alignment: <code>left</code>, <code>center</code>, <code>right</code> <p>To change the currently selected item, use the <code>val</code> attribute.   To change the items in the list, use the <code>options</code> attribute.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":11,\"obj\":\"roller\",\"x\":125,\"y\":205,\"w\":105,\"h\":30,\"options\":\"Apple\\nBanana\\nOrange\\nMelon\",\"mode\":1}\n</code></pre> <p>When the item is changed both <code>val</code> and <code>text</code> of the newly selected item are send out accompanied by the <code>change</code> event.</p>"},{"location":"design/objects/#line-meter","title":"Line Meter","text":"<p>obj:<code>linemeter</code></p> <p></p> Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator angle 0-360 240 angle between start and end of the scale line_count uint16 31 tick count of the scale rotation 0-360 0 offset for the scale angles to rotate it type 0-1 0 <code>0</code> = indicator lines are activated clock-wise<code>1</code> = indicator lines are activated counter-clock-wise <p>Use line and scale properties to customize.</p> <p>Note</p> <p><code>min</code>, <code>max</code> and <code>val</code> support also negative values.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":12,\"obj\":\"linemeter\",\"x\":20,\"y\":70,\"w\":200,\"h\":200,\"value_str\":\"Temp\",\"val\":75,\"line_count\":35,\"line_rounded\":1}\n</code></pre>"},{"location":"design/objects/#gauge","title":"Gauge","text":"<p>obj:<code>gauge</code></p> <p></p> Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator critical_value int16 80 scale color will be changed to scale_end_color after this value angle 0-360 240 angle between start and end of the scale label_count uint8 number of labels (and major ticks) of the scale line_count uint16 31 number of minor ticks of the entire scale rotation 0-360 0 offset for the gauge's angles to rotate it format uint16 0 divider for major tick values <p>To strip trailing zero's of major tick labels the <code>format</code> divider can be used to scale the values before printing:</p> <ul> <li><code>0</code> : print the major tick value as is</li> <li><code>1</code> : strip 1 zero, i.e. divide tick value by 10 before printing the major tick label</li> <li><code>2</code> : strip 2 zeros, i.e. divide tick value by 100 before printing the major tick label</li> <li><code>3</code> : strip 3 zeros, i.e. divide tick value by 1000 before printing the major tick label</li> <li><code>4</code> : strip 4 zeros, i.e. divide tick value by 10000 before printing the major tick label</li> </ul> <p>Only these values are allowed, arbitrary numbers are not supported.</p> <p>Note</p> <p><code>min</code>, <code>max</code> and <code>val</code> support also negative values.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":13,\"obj\":\"gauge\",\"x\":20,\"y\":70,\"w\":200,\"h\":200}\n</code></pre> <p>Use scale properties to customize.</p>"},{"location":"design/objects/#tabview","title":"Tabview","text":"<p>obj:<code>tabview</code></p> <p></p> <p>A tabview is an object that can hold multiple tab objects. You first create the <code>tabview</code> object and then add <code>tab</code> objects to it.</p> Property Value Default Description val int8 0 The number of the active tab, starting at 0 text string \"\" The name of the active tab btn_pos 0..4 1 Position of the tab buttons:<code>0</code> = none<code>1</code> = top<code>2</code> = bottom<code>3</code> = left<code>4</code> = right count uint16 0 Read-only The number of tabs of the tabview <p>To change the currently visible tab, use the <code>val</code> attribute after all tabs have been added.   </p> <p>Note</p> <p>To adjust the height of the tab buttons row, use <code>pad_top1</code> and <code>pad_bottom1</code> styling properties. Accepts also negative values.    To adjust the text size of the tab names, use the <code>text_font1</code> styling property.    </p> <p>Read further down to learn now to add tabs to the tabview.</p>"},{"location":"design/objects/#tab","title":"Tab","text":"<p>obj:<code>tab</code></p> Property Value Default Description parentid int8 0 The <code>id</code> of the tabview object to which this tab is added text string \"Tab\" The name of tab button <p>Set the parent object (which <code>tabview</code> the tabs belong to) by referencing the <code>parentid</code> when creating the tab. To add other objects to these tabs, set the <code>parentid</code> when creating those objects to the id of the tab you wamt them to appear on.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":14,\"obj\":\"tabview\",\"btn_pos\":1,\"y\":180}\n{\"page\":1,\"id\":51,\"obj\":\"tab\",\"parentid\":14,\"text\":\"Tab 1\"}\n{\"page\":1,\"id\":52,\"obj\":\"tab\",\"parentid\":14,\"text\":\"Tab 2\"}\n{\"page\":1,\"id\":53,\"obj\":\"tab\",\"parentid\":14,\"text\":\"Tab 3\"}\n{\"page\":1,\"id\":61,\"obj\":\"switch\",\"x\":20,\"y\":10,\"w\":60,\"h\":30,\"parentid\":51,\"radius\":25,\"radius2\":25}\n{\"page\":1,\"id\":71,\"obj\":\"dropdown\",\"x\":15,\"y\":10,\"w\":110,\"h\":30,\"parentid\":52,\"options\":\"Apple\\nBanana\\nOrange\\nMelon\"}\n{\"page\":1,\"id\":81,\"obj\":\"checkbox\",\"x\":15,\"y\":10,\"w\":110,\"h\":30,\"parentid\":53,\"text\":\" Nice tabview\"} \n</code></pre>"},{"location":"design/objects/#color-picker","title":"Color picker","text":"<p>obj:<code>cpicker</code></p> <p></p> Property Value Default Description color color 0 The selected color in html format #rrggbb scale_width uint16 25 The width of the color gradient of the circle pad_inner int16 10 The padding between the circle and the inner preview circle <p>The object will automatically adjust based on the <code>w</code> and <code>h</code> properties: when the object is longer then it is height a rectangular color picker is created, otherwise it will be circular.</p> <p>By long pressing the inner preview circle, the color picker will through the color modes: hue &gt; saturation &gt; value. Double-click on the inner preview circle to reset the current value.</p>"},{"location":"design/objects/#setting-color","title":"Setting Color","text":"<p>Example MQTT commands: <pre><code>hasp/&lt;nodename&gt;/command/p0b2.color 13891\nhasp/&lt;nodename&gt;/command/p1b5.color silver\nhasp/&lt;nodename&gt;/command/p2b3.color #C0C0C0\n</code></pre></p>"},{"location":"design/objects/#events_1","title":"Events","text":"<p>While pressing and dragging the <code>cpicker</code> object the following events are sent: <code>down</code> (old color), <code>changed</code> (repeatedly until released) and <code>up</code> (value at the moment of releasing it):</p> <pre><code>{\"event\":\"down\",\"color\":\"#8300ff\",\"r\":131,\"g\":0,\"b\":255}\n{\"event\":\"changed\",\"color\":\"#7300ff\",\"r\":115,\"g\":0,\"b\":255}\n{\"event\":\"changed\",\"color\":\"#6200ff\",\"r\":98,\"g\":0,\"b\":255}\n{\"event\":\"up\",\"color\":\"#6200ff\",\"r\":98,\"g\":0,\"b\":255}\n</code></pre>"},{"location":"design/objects/#spinner","title":"Spinner","text":"<p>obj:<code>spinner</code></p> <p></p> Property Value Default Description speed int16 1000 The time for 1 turn in ms direction int16 0 <code>0</code> = clockwise, <code>1</code> = counter-clockwise angle 0-360 60 The length of the spinning segment in degrees line_width int16 20 The width of the background circle line_width1 int16 20 The width of the spinning segment line_color color dependson theme color of the background circle line_color1 color dependson theme color of the spinning segment <p>Tip</p> <p>Check out background, border, and line styling to adjust other aspects of the appearance.</p> <p>Note</p> <p>Placing objects over/under the spinner will increase the CPU load because all objects need to be redrawn constantly.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":15,\"obj\":\"spinner\",\"x\":180,\"y\":50,\"w\":36,\"h\":36,\"bg_opa\":0,\"border_width\":0,\"line_width\":6,\"line_width1\":6,\"angle\":80,\"line_color\":\"white\",\"line_color1\":\"green\"}\n</code></pre>"},{"location":"design/objects/#led-indicator","title":"LED Indicator","text":"<p>obj:<code>led</code></p> <p></p> Property Value Default Description val byte 0 The brightness of the indicator [<code>0..255</code>]"},{"location":"design/objects/#button-matrix","title":"Button Matrix","text":"<p>obj:<code>btnmatrix</code></p> <p></p> Property Value Default Description options json array \"Text\" Json array of strings where each element is the label of a button. Use <code>\"\\n\"</code> for a new line of buttons align string <code>center</code> Text alignment: <code>left</code>, <code>center</code>, <code>right</code> toggle bool false All buttons behave as toggle buttons or normal buttons one_check bool false Allow only one button to be checked (toggled) at once val int8 0 The number of the active button, starting at 0. In conjunction with <code>toggle</code> and <code>one_check</code> set it to <code>-1</code> to deactivate all buttons <p>The styling properties apply to all buttons in the matrix. To change the color of a single label you can prefix the text with a <code>#RRGGBB</code> hexadecimal color code and close with a single hash <code>#</code> tag.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":20,\"obj\":\"btnmatrix\",\"x\":10,\"y\":10,\"w\":220,\"h\":150,\"options\":[\"#FF0000 Red Text#\",\"#0000FF Cyan Text#\",\"\\n\",\"#FFFF00 Yellow Text#\"],\"toggle\":1,\"one_check\":1}\n</code></pre>"},{"location":"design/objects/#messagebox","title":"Messagebox","text":"<p>obj:<code>msgbox</code></p> <p></p> Property Value Default Description text string \"\" The text of the message to be displayed. options json array [\"OK\"] Json array of strings where each element is the label of a button modal bool false Make the messagebox a modal dialog requiring user input auto_close int16 0 Close the pop-up message automatically after this number of milliseconds have passed <p>The Message boxes act as a pop-up. The default width is the horizontal screen size, the height adjusts according to the contents of the message. The pop-up is centered on the screen.</p> <p>Note</p> <p>The messagebox object is automatically deleted when it is closed. You will need to create it again using <code>jsonl</code> to pop-up a new message.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":24,\"obj\":\"msgbox\",\"text\":\"A message box with two buttons\",\"options\":[\"Apply\",\"Close\"]}\n</code></pre>"},{"location":"design/objects/#line","title":"Line","text":"<p>obj:<code>line</code></p> <p></p> Property Value Default Description points JSON array \"\" The name of the image file auto_size bool true Automatically set the size of the line object to the outer bounds y_invert bool false The y direction might be conter-intuitive in some cases so the y coordinates can be inverted <p>The points parameter is a JSON array of [x,y] coordinates, for example <code>[[10,25],[100,25],[100,0]]</code>.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":33,\"obj\":\"line\",\"points\":[[10,25],[100,25],[100,0]],\"auto_size\":0,\"y_invert\":1}\n</code></pre>"},{"location":"design/objects/#image","title":"Image","text":"<p>obj:<code>img</code></p> <p></p> Property Value Default Description src string \"\" The name of the image file auto_size bool true Automatically set the size of the image object to the image source offset_x int16 0 Shift the picture horizontally relative to the image object offset_y int16 0 Shift the picture vertically relative to the image object <p>Only PNG image files are supported, from flash. </p> <p>You can use <code>image_recolor</code> and <code>image_recolor_opa</code> from the image styling properties to apply a color overlay mask.</p> <p>Note</p> <p>The decoding of the images is done in memory, thus you'll be able to display full-screen images only if your microcontroller has installed PSram memory, else you will be limited to small icons.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":34,\"obj\":\"img\",\"src\":\"/littlefs/image.png\",\"auto_size\":0,\"w\":50}\n</code></pre>"},{"location":"design/objects/#base-object","title":"Base Object","text":"<p>obj:<code>obj</code></p> <p></p> <p>The Base Object can be directly used as a simple, empty widget. It is nothing more then a (rounded) rectangle.</p> <p>You can use it as a background shape for other objects by putting its jsonl line before the object. It catches touches!</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":50,\"obj\":\"obj\",\"x\":5,\"y\":35,\"w\":230,\"h\":250,\"click\":0}\n</code></pre>"},{"location":"design/pages/","title":"Pages","text":"<p>The layout of the pages can be defined in several ways:</p> <ul> <li>by creating a special file on the flash file system, which will be loaded and the layout with the objects displayed each time HASP starts up.</li> <li>by issuing commands through MQTT to draw/change the objects immediately</li> </ul> <p>You can create the file with your favourite text editor and upload it (and other resource assets like fonts) using the web interface HASP Design menu.</p>"},{"location":"design/pages/#pagesjsonl","title":"pages.jsonl","text":"<p>The location of this file is <code>/pages.jsonl</code> in the root of the flash filesystem.  It uses the JSON Lines format with one json object per line.  Each line should contain exactly one valid json object and end with a line-break <code>\\n</code> (not a comma).</p> <p>The jsonl lines are interpreted line-by-line.</p> <p>When a malformed line is encountered, the processing of the rest of the file stops.   If you are missing objects, check the logs to see which line was processed last.   You probably have a typo in the following line which blocks parsing the rest of the file. Blank lines are allowed for readability and are ignored.</p> <p>Note</p> <p>The complete file in its entirety is not a valid json file. Each individual line however must be a valid json object. The file extension is <code>.jsonl</code> and not <code>.json</code>.</p> <p>Note</p> <p>The maximum number of pages and objects is limited by the memory available in the MCU, it depends on the microcontroller type you use.</p>"},{"location":"design/pages/#file-comments","title":"File comments","text":"<p>If any of the required <code>id</code> or <code>obj</code> properties are missing -and the line is still valid json- then it is interpreted as a comment.</p> <p>When you upload the file to your plate's flash filesystem, you can also use the <code>page</code> parameter in a comment to set the default page for new objects that don't have a <code>page</code> parameter.</p> <p>Example 1: Add a comment on a single line that is ignored.</p> <pre><code>{\"comment\":\" ----------- Page 1 layout ------------\"}\n</code></pre> <p>Example 2: Set the default <code>page</code> to <code>2</code> for objects in the following lines, besides adding a comment as well.</p> <p><pre><code>{\"page\":2,\"comment\":\" ---- My Awesome Color Picker Layout ----\"}\n</code></pre> If you then omit the <code>page</code> parameter in the lines below this comment, those objects will appear by default on page <code>2</code>.</p> <p>Example 3: Insert a comment for an object.</p> <pre><code>{\"page\":1,\"id\":3,\"obj\":\"obj\",\"x\":40,\"y\":100,\"w\":160,\"h\":160,\"radius\":100,\"opacity\":100,\"border_opa\":160,\"border_width\":4,\"comment\":\"touch-catcher\"}\n</code></pre> <p>Warning</p> <p>If the line is not valid json, the parsing of the rest of the file is also stopped.</p>"},{"location":"design/pages/#jsonl-command","title":"jsonl command","text":"<p>See commands documentation for the <code>jsonl</code> command. The payload of the command corresponds to what's exactly in one line of the <code>pages.jsonl</code> file above, with a minor exception: page numbers are not kept between the commands - you need to specfiy the page with each!</p>"},{"location":"design/pages/#objects","title":"Objects","text":"<p>Each line in <code>pages.jsonl</code> creates one object on a page and has to be in the json format. The order of the objects also dictates the layer on the page from bottom to top. So the last drawn object will be the topmost.</p> <p>Example Objects:</p> <pre><code>{\"page\":1,\"id\":1,\"obj\":\"label\",\"x\":5,\"y\":5,\"h\":50,\"w\":50,\"text\":\"Hello\",\"enabled\":true,\"hidden\":false}\n{\"page\":1,\"id\":2,\"obj\":\"btn\",\"x\":5,\"y\":90,\"h\":90,\"w\":50,\"text\":\"World\",\"enabled\":false,\"hidden\":false}\n</code></pre> <p>Once the object is created, you can reference it with <code>pXbY</code> where <code>X</code> is the page number and <code>Y</code> is the id of the object.</p> <p>For example: <pre><code>p1b1.w=100\np1b2.hidden=true\n</code></pre></p> <p>Ids start from <code>1</code> on each page.   You can have a maximum of 254 ids on each page. You don't have to use them in ascending order, you can for example use them for logical numbering (start labels from 11, 12, 13, buttons from 21, 22, 23 etc.)  Page number <code>0</code> refers to an object visible on all pages.  An id of <code>0</code> refers to the page itself instead of an object.   </p> <p>See objects documentation for details.</p>"},{"location":"design/pages/#page-attributes","title":"Page attributes","text":"<p>A page can have the following attributes:</p> <ul> <li><code>prev</code> : The number of the destination page when performing a <code>page prev</code> action on this page</li> <li><code>next</code> : The number of the destination page when performing a <code>page next</code> action on this page</li> <li><code>back</code> : The number of the destination page when performing a <code>page back</code> action on this page</li> </ul> <p>By default all pages cycle in a round-robin fashion (after the last page jump back to first), but you can change this behaviour by adjusting the <code>prev</code>, <code>next</code> and <code>back</code> target pages.</p> <p>For example, to limit cycle through page 1-5 only:</p> <p>on page 5, <code>page next</code> action will jump back to page 1: <pre><code>{\"page\":5,\"id\":0,\"next\":1}\n</code></pre> The corresponding command is <code>p5b0.next=1</code>.</p> <p>on page 1, <code>page prev</code> action will go to page 5 (instead of default page 12 on an ESP32) <pre><code>{\"page\":1,\"id\":0,\"prev\":5}\n</code></pre> The corresponding command is <code>p1b0.prev=5</code>.</p> <p>Tip</p> <p>Page id <code>p0b0</code> (as all pages) is not valid to set this attribute for. It has to be set individually on each real page starting from 1. </p> <p><code>back</code> acts like a level up action, so you can jump back to the home or menu page where you came from using <code>page back</code>. You can create a hierarchy of pages and menus this way.</p> <p>Check out the example for how to implement a simple pagination bar.   </p>"},{"location":"design/styling/","title":"Styling Properties","text":"<p>You can adjust the appearance of objects by changing the foreground, background and/or border color of each object. Some objects allow for more complex styling, effectively changing the appearance of their sub-components.     </p>"},{"location":"design/styling/#suffixes","title":"Suffixes","text":"<p>The styling properties below support an optional two-digit suffix to indicate which part and/or state of the object the property applies to. A styling property without suffix will be applied to the default state of the main part of the object (i.e. the background).</p> <p>Very detailed styling can be applied to each part depending on the state of the object:</p>"},{"location":"design/styling/#parts","title":"Parts","text":"<p>All objects have at least a main part. Several objects are made up of additional parts which can each be styled separately. To access the properties of the parts use a two-digit suffix appended to the styling properties below.</p> <p>The part indexes are:</p> <ul> <li>00 = main part of the object (i.e. the background)</li> <li>10 = the indicator or needle, highlighting the the current value</li> <li>20 = the knob which can be used the change the value</li> <li>30 = the background of the items/buttons</li> <li>40 = the items/buttons</li> <li>50 = the selected item</li> <li>60 = major ticks of the gauge object</li> <li>70 = the text cursor</li> <li>80 = the scrollbar</li> <li>90 = other special part, not listed above</li> </ul> <p>Tip</p> <p>For example the gauge object uses <code>line_width</code> to set the minor ticks thickness, <code>line_width60</code> for major ticks and <code>line_width10</code> for the thickness of the needle.</p>"},{"location":"design/styling/#states","title":"States","text":"<p>The state indexes:</p> <ul> <li>00 = default styling</li> <li>01 = styling for toggled state</li> <li>02 = styling for pressed, not toggled state</li> <li>03 = styling for pressed and toggled state</li> <li>04 = styling for disabled not toggled state</li> <li>05 = styling for disabled and toggled state</li> </ul> <p>For example to set the <code>radius</code> of all the buttons in btnmatrix you'd set a value for the property <code>radius30</code>. Using <code>radius</code> without a suffix will apply the property to the outline background of it.</p> <p>A <code>toggle</code> <code>btn</code> can be made to show <code>text</code> <code>yellow</code> when toggled ON with <code>\"text_color\":\"white\",\"text_color01\":\"yellow\"</code></p>"},{"location":"design/styling/#inheritance","title":"Inheritance","text":"<p>If objects are children of other objects (they have the parentid property set), property inheritance takes place. </p> <p>Some properties (typically that are related to text and opacity) can be inherited from the parent object's styles. Inheritance is applied only if the given property is not set in the initial jsonl of the child object (at first draw). In this case, if the property is inheritable, the property's value will be searched in the parents too until an object specifies a value for the property. The parents will use their own state to detemine the value. So for example if a button is pressed, and the text color comes from here, the pressed text color will be used. (source) Inheritance takes place at run time too.     </p> <p>When a parent object is deleted, all children will be deleted too.</p>"},{"location":"design/styling/#general","title":"General","text":"<p>General styling options.</p> Property Value Default Description radius uint16 dependson theme The radius of the rounded corners of the object:0 = no radius i.e. square corners65535 = pill shaped object (true circle if object has same width and height) clip_corner bool false Enable to clip off the overflowed content on the rounded (<code>radius &gt; 0</code>) corners of the object"},{"location":"design/styling/#background","title":"Background","text":"<p>The color and gradient used for drawing the background of an object.</p> Property Type Description bg_opa uint8 The background opacity level bg_color color The background color bg_grad_color color The background gradient color bg_grad_dir [0..2] 0 = none (=default)1 = horizontal2 = vertical bg_grad_stop uint8 Specifies where the gradient should stop.0 = at left/top most position128 = in the center255 = at right/bottom most position (=default) bg_main_stop uint8 Specifies where should the gradient start0 = at left/top most position (=default)128 = in the center255 = at right/bottom most position <p>To adjust the background style of a page use <code>pXb0</code> where <code>X</code> is the page number.</p>"},{"location":"design/styling/#border","title":"Border","text":"<p>The border is drawn on top of the background. It has radius rounding.</p> Property Type Description border_color color Specifies the color of the border border_opa uint8 Specifies opacity of the border border_width uint8 Set the width of the border border_side uint8 Specifies which sides of the border to draw.0 = none1 = bottom2 = top4 = left8 = right15 = fullA sum of these values is also possible to select specific sides. border_post bool If <code>true</code> the border will be drawn after all children have been drawn."},{"location":"design/styling/#outline","title":"Outline","text":"<p>The outline is similar to border but is drawn outside of the object.</p> Property Type Description outline_color color Specifies the color of the outline outline_opa uint8 Specifies opacity of the outline outline_width uint8 Set the width of the outline outline_pad int16 The space between the object and the outline. (default=0)"},{"location":"design/styling/#padding-and-margin","title":"Padding and Margin","text":"<p>Padding sets the space on the inner sides of the edges. It means \"I don't want my children too close to my sides, so keep this space\". Padding inner sets the \"gap\" between the children. Margin sets the space on the outer side of the edges. It means \"I want this space around me\".</p> <p>Objects use them to set spacing. See the documentation of the objects for the details.</p> Property Type Description pad_top int16 Set the padding on the top pad_bottom int16 Set the padding on the bottom pad_left int16 Set the padding on the left pad_right int16 Set the padding on the right pad_inner int16 Set the padding inside the object between children margin_top int16 Set the margin on the top margin_bottom int16 Set the margin on the bottom margin_left int16 Set the margin on the left margin_right int16 Set the margin on the right"},{"location":"design/styling/#shadow","title":"Shadow","text":"<p>The shadow is a blurred area under the object.</p> Property Type Description shadow_color color Color of the shadow shadow_opa uint8 Specifies opacity of the shadow shadow_width int16 Set the width (blur size) of the outline shadow_ofs_x int16 Set the an X offset for the shadow shadow_ofs_y int16 Set the an Y offset for the shadow shadow_spread uint8 Make the shadow larger than the background in every direction by this value"},{"location":"design/styling/#text","title":"Text","text":"<p>Properties applied to the textual elements of the objects.</p> Property Type Description text_color color Color of the text text_opa uint8 Opacity level of the text [0-255] text_font uint8 The Font ID text_letter_space int16 Distance between letters of the text, can be a negative number text_line_space int16 Distance between lines of the text, can be a negative number text_decor uint8 Add text decoration.0 = none (=default)1 = underline2 = strikethrough3 = underline and strikethrough text_sel_color color Set background color of text selection"},{"location":"design/styling/#value","title":"Value","text":"<p>Value is an arbitrary text label drawn on top of an object. It can be a lightweight replacement for creating standalone label objects.</p> Property Type Description value_str string Text to display value_color color Color of the text value_opa uint8 Opacity level of the text [0-255] value_font uint8 The Font ID value_letter_space int16 Distance between letters of the text, can be negative value_line_space int16 Distance between lines of the text, can be negative value_align align Alignment of the text. Can be: none left right top bottom full center (=default) value_ofs_x int16 X offset from the default position of the alignment value_ofs_y int16 Y offset from the default position of the alignment"},{"location":"design/styling/#line","title":"Line","text":"<p>Properties for line, line meter objects.</p> Property Type Description line_color color Color of the line line_opa uint8 Opacity level of the line [0-255] line_width int16 Width of a scale line in the active region (also see <code>scale_end_line_width</code> below), or gauge minor ticks thickness line_rounded bool <code>true</code> = draw rounded line endings. Default = <code>false</code> line_dash_width int16 Width of dash. Dashing is drawn only for horizontal or vertical lines. <code>0</code> = disable dash (= default) line_dash_gap int16 Gap between two dash line. Dashing is drawn only for horizontal or vertical lines. <code>0</code> = disable dash (= default)"},{"location":"design/styling/#scale","title":"Scale","text":"<p>The properties for styling the scale of line meter, gauge objects.</p> Property Type Description scale_grad_color color Gradient to this color on the scale lines, or gauge minor ticks scale_end_color color Color of the scale lines in the end region, or gauge minor ticks / critical area scale_width int16 Width of the scale in the normal region, or length of gauge minor ticks scale_border_width int16 Width of a border drawn on the outer side of the scale in the normal region scale_end_line_width int16 Width of a scale line in the end region scale_end_border_width int16 Width of a border drawn on the outer side of the scale in the end region"},{"location":"design/styling/#image","title":"Image","text":"Property Type Description image_opa uint8 Opacity of the image image_recolor color Color of the overlay color mask image_recolor_opa uint8 Specifies opacity of the overlay color mask"},{"location":"design/converter/","title":"Index","text":"<p>With this free online font converter tool you can create C array from any TTF or WOFF font. You can             select ranges of Unicode characters and speficy the bpp (bit-per-pixel).</p> <p>The font converter is designed to be compatible with LVGL but with minor modification you can make it             compatible with other graphics libraries.</p> <p>The offline version of the converter is available here</p> How to use the font converter? <ol> <li>Give name to the output font. E.g. \"arial_40\"</li> <li>Specify the height in px</li> <li>Set the bpp (bit-per-piel). Higher value results smoother (anti-aliased) font</li> <li>Choose a TTF or WOFF font</li> <li>Set a range of Unicode character to include in your font or list the characters in                 the Symbols field</li> <li>Optionally choose and other font too and specify the ranges and/or symbols for it as well. The                 characters will be merged into the final C file.</li> <li>Click the Convert button to download the result C file.</li> </ol> How to use the generated fonts in LVGL? <ol> <li>Copy the result C file into your LVGL project</li> <li>In a C file of your application declare the font as: <code>extern lv_font_t my_font_name;</code> or simply <code>LV_FONT_DECLARE(my_font_name);</code></li> <li>Set the font in a style: <code>style.text.font = &amp;my_font_name;</code> </li> </ol> Name Size Bpp 1 bit-per-pixel 2 bit-per-pixel 3 bit-per-pixel (Needs compression enabled) 4 bit-per-pixel 8 bit-per-pixel  Enable font compression (reduces size, requires                     6.1+)   No subpixel hinting   Horizontal                     subpixel hinting (may improve font quality, requires 6.1+)   Vertical subpixel hinting   Try to use                     glyph color info from font to create grayscale icons. Since gray tones are emulated                         via transparency, result will be good on contrast background only. TTF/WOFF/OTF file Range Symbols Include another font You can use both \"Range\" and                 \"Symbols\" or only one of them Useful notes <ul> <li>Unicode table to pick letters: https://unicode-table.com/</li> <li>Unicode ranges http://jrgraphix.net/research/unicode.php</li> <li>A pixel perfect font: Terminus. </li> <li>Examples for two-tone or colored fonts: Material                     Design Icons (two-tone version), BungeeColor-Regular </li> <li>List of built-in symbols Use this FontAwesome symbol                     font and copy this list to Range:                  61441,61448,61451,61452,61452,61453,61457,61459,61461,61465,                 61468,61473,61478,61479,61480,61502,61512,61515,61516,61517,                 61521,61522,61523,61524,61543,61544,61550,61552,61553,61556,                 61559,61560,61561,61563,61587,61589,61636,61637,61639,61671,                 61674,61683,61724,61732,61787,61931,62016,62017,62018,62019,                 62020,62087,62099,62212,62189,62810,63426,63650 </li> <li>To learn more about the font handling of LVGL read this Guide</li> </ul>"},{"location":"design/objects/","title":"Objects","text":""},{"location":"design/objects/#objects","title":"Objects","text":"<p>There are two ways to create an object on the screen:</p> <ul> <li>Uploading a <code>pages.jsonl</code> file onto the internal flash</li> <li>Use the <code>jsonl</code> command (via MQTT, serial or telnet console)</li> </ul>"},{"location":"design/objects/#cheatsheet","title":"Cheatsheet","text":"obj Type Description Extra Parts btn Binary Button switch Toggle Switch indicator, knob checkbox Toggle Checkbox indicator label Visual Label led Visual LED spinner Visual Spinner indicator obj Visual Base Object line Visual Line img Visual Image cpicker Selector Color picker knob roller Selector Roller selected dropdown Selector Dropdown List selected, items, scrollbar btnmatrix Selector Button Matrix items msgbox Selector Messagebox items, items_bg tabview Selector Tabview items, items_bg, indicator, selected tab Selector Tab bar Range Progress Bar indicator slider Range Slider indicator, knob arc Range Arc indicator, knob linemeter Range Line Meter gauge Range Gauge indicator, ticks qrcode Visual Qrcode"},{"location":"design/objects/#common-parameters","title":"Common Parameters","text":""},{"location":"design/objects/#common-properties","title":"Common Properties","text":"<p>These are the common properties shared among all objects, but only the <code>id</code> and <code>obj</code> properties are required to create an object:</p> Property Value Default Description id 1..254 n/a Required. ID of the object on this page. <code>0</code> for the page itself. obj string n/a Required. Name of the object type (see below) page 0..12 n/a ID of the page the object appears on (see below) groupid 0..15 0 (none) ID of the GPIO group the object belongs to x int16 0 Horizontal position on the page y int16 0 Vertical position on the page w int16 0 Width of the object h int16 0 Height of the object enabled bool true Object is touchable, if <code>false</code>, a disabled style is applied hidden bool false Object is hidden opacity uint8 255 How much the the object is opaque swipe  JSONobject null Swipe gestures handled locally (see below) action  JSONobject null Touch command handled locally (see below) click bool true Object is touch/clickable (also see <code>enabled</code>) ext_click_h uint8 0 Extended horizontal clickable are on the left and right ext_click_v uint8 0 Extended vertical clickable are on the top and bottom parentid uint8 0 Set the object to be the child of another object.<code>x</code> and <code>y</code> will be relative to the parent object. Property inheritance can affect the appearance of the of the children (more info in styling). tag JSONobject n/a Arbitrary attribute data. Once set, it will be included in each event message. For advanced scenarios (more info in an example). jsonl JSONobject n/a Pseudo-property to set multiple properties of an existing object in one go with a JSON object. <p>Tip</p> <p>Further customizable properties can be found in styling.</p> <p>Ids start from 1 on each page. You can have a maximum of 254 ids on each page. You don't have to use them in ascending order, you can for example use them for logical numbering (start labels from 11, 12, 13, buttons from 21, 22, 23 etc.)</p>"},{"location":"design/objects/#pages","title":"Pages","text":"<p>If the <code>page</code> parameter is not present, the object is placed on the same page as the previous object. If <code>page</code> is not specified for the first object either, the current page being displayed is used.</p> <p><code>\"page\":0</code> indicates that the object is visible on all pages. It can be used for example to specify a static menu bar. You can still hide the object on select pages if needed. Objects on page 0 appear on top of any objects on the underlying page.</p>"},{"location":"design/objects/#actions","title":"Actions","text":"<p>Action commands are supported only by binary or visual type of objects and they are performed locally on the plate. Actions can be of most any command:</p> <p><code>action</code> has the format of <code>\"action\": {\"&lt;btn event&gt;\": \"&lt;command&gt;\"}</code></p> <p>*btn events: are found in events. examples are <code>up</code>, <code>down</code> etc.</p> <p>Check out the example for how to implement actions. You can change the target pages using <code>prev</code>, <code>back</code> and <code>next</code> page attributes operation on the page object <code>pXb0</code>.  </p>"},{"location":"design/objects/#swipe","title":"Swipe","text":"<p>Objects and page area (<code>pXb0</code>) support  the<code>swipe</code> property. Enabling this will process <code>left</code>, <code>right</code>, <code>up</code> and/or <code>down</code> swipes on the object. The start of the swipe needs to be on the element which has this property enabled for the feature to activate.</p> <ul> <li>The default is <code>\"swipe\":null</code> or swipe gestures disabled.</li> <li>To enable the default swipe gestures use <code>\"swipe\":1</code>. This will change the page to <code>next</code>, <code>prev</code> and <code>back</code> on <code>left</code>, <code>right</code> and <code>down</code> swipes, respectively. It is a shorthand for <code>\"swipe\":{\"down\":\"page back\",\"left\":\"page next\",\"right\":\"page prev\"}</code>.</li> <li>You can customize the gesture to execure different commands if needed.</li> </ul> <p>Note</p> <p>Page id <code>p0b0</code> is not valid to set this property as it has to be set on real elements. </p>"},{"location":"design/objects/#events","title":"Events","text":"<p>All objects are touchable by default and respond to touch events. To disable touch events for an object set its <code>enabled</code> property to <code>false</code>. In this case the touch event \"goes through\" to the object on the layer below or to the page itself.</p> <p>Events (and values) are published in a state topic corresponding to the object, eg. <code>hasp/&lt;nodename&gt;/state/p1b2</code> with payload in json format eg. <code>{\"event\":\"up\",\"val\":1}</code>. Possible events (depending on object type) are:</p> Event Description <code>down</code> Occurs when a button goes from depressed to pressed (the moment of touch) <code>up</code> The button was released within a short time i.e. a short press has occurred <code>release</code> The button is released after being pressed for over the threshold time <code>long</code> Event is sent when the button is still being pressed after the threshold time of 400ms <code>hold</code> The HOLD event is repeated every 200ms while the button is still pressed <code>changed</code> Event is sent when the value of the object has changed during the event <p>Tip</p> <p>To actively see the sent out events you can use an MQTT client app and subscribe to the <code>hasp/#</code> topic.</p>"},{"location":"design/objects/#common-methods","title":"Common Methods","text":"<p>These are the common methods shared among all objects,</p> Method Parameters Description <code>clear</code> Delete the children from the object <code>delete</code> Delete the object and its children from the page <code>to_front</code> Bring the object to the front on the page <code>to_back</code> Send the object to the back on the page <p>Example commands:</p> <pre><code>p1b5.delete\np1b3.to_front\n</code></pre>"},{"location":"design/objects/#object-types","title":"Object Types","text":"<p>Each object type is an ID that indicates which object type that line represents. Besides the common properties listed above, each object type can have specific properties.</p>"},{"location":"design/objects/#text-label","title":"Text Label","text":"<p>obj:<code>label</code></p> <p></p> Property Value Default Description text string \"Text\" The text of the label, <code>\\n</code> for line break. Can also be a variable. mode string <code>crop</code> The wrapping mode of long text labels:<code>expand</code> Expand the object size to the text size<code>break</code> Keep the object width, break the too long lines and expand the object height<code>dots</code> Keep the size and write dots at the end if the text is too long<code>scroll</code> Keep the size and roll the text back and forth<code>loop</code> Keep the size and roll the text circularly<code>crop</code> Keep the size and crop the text out of it align string <code>left</code> Text alignment: <code>left</code>, <code>center</code>, <code>right</code> <p>It's possible to set the color of characters in the text indvidually, just prefix the text to be re-colored with a <code>#RRGGBB</code> hexadecimal color code and a space, and close with a single hash <code>#</code> tag.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":1,\"obj\":\"label\",\"x\":10,\"y\":5,\"w\":150,\"h\":50,\"text\":\"\\uE64A Hello world!\"}\n{\"page\":1,\"id\":1,\"obj\":\"label\",\"x\":10,\"y\":5,\"w\":150,\"h\":50,\"text\":\"#0000FF \\uE64A# #FF0000 Hello# #008000 world#!\"}\n</code></pre>"},{"location":"design/objects/#button","title":"Button","text":"<p>obj:<code>btn</code></p> <p>![lv_btn]./images/lv_ex_btn_1.png)</p> Property Value Default Description toggle bool false When enabled, creates a toggle-on/toggle-off button. If false, creates a normal button val int16 0 The value: <code>0</code> = untoggled, <code>1</code> = toggled text string \"\" The text of the label mode string <code>expand</code> The wrapping mode of long text labels.<code>expand</code> Expand the object size to the text size<code>break</code> Keep the object width, break the too long lines and expand the object height<code>dots</code> Keep the size and write dots at the end if the text is too long<code>scroll</code> Keep the size and roll the text back and forth<code>loop</code> Keep the size and roll the text circularly<code>crop</code> Keep the size and crop the text out of it align string <code>left</code> Text alignment: <code>left</code>, <code>center</code>, <code>right</code> <p>Similar to the text label, it's possible to set the color of characters in the text indvidually, just prefix the text to be re-colored with a <code>#RRGGBB</code> hexadecimal color code and a space, and close with a single hash <code>#</code> tag.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":2,\"obj\":\"btn\",\"x\":10,\"y\":40,\"w\":105,\"h\":90,\"toggle\":false,\"text\":\"Normal Button\",\"mode\":\"break\",\"align\":\"center\"}\n{\"page\":1,\"id\":3,\"obj\":\"btn\",\"x\":125,\"y\":40,\"w\":105,\"h\":90,\"toggle\":true,\"text\":\"#FFD700 Toggle# Button\",\"mode\":\"break\",\"align\":\"center\"}\n</code></pre> <p>Normal buttons (<code>toggle=false</code>) send touch events while they occur: </p> <p>Short touch: <pre><code>{\"event\":\"down\"}\n{\"event\":\"up\"}\n</code></pre></p> <p>Long press: <pre><code>{\"event\":\"down\"}\n{\"event\":\"long\"}\n{\"event\":\"hold\"}\n{\"event\":\"hold\"}\n{\"event\":\"release\"}\n</code></pre></p> <p>Toggle buttons (<code>toggle=true</code>) send out the old value in the <code>down</code> event and the new value in the <code>up</code> event when released:</p> <p>Toggle ON: <pre><code>{\"event\":\"down\",\"val\":0}\n{\"event\":\"up\",\"val\":1}\n</code></pre></p> <p>Toggle OFF: <pre><code>{\"event\":\"down\",\"val\":1}\n{\"event\":\"up\",\"val\":0}\n</code></pre></p>"},{"location":"design/objects/#switch","title":"Switch","text":"<p>obj:<code>switch</code></p> <p></p> Property Value Default Description val bool 0 <code>1</code> = on, <code>0</code> = off bg_color10 color 0 changes indicator color bg_color20 color 0 changes knob color radius20 int16 dependson theme changes knob corner radius (also see radius) Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":4,\"obj\":\"switch\",\"x\":125,\"y\":145,\"w\":105,\"h\":55,\"radius\":15}\n</code></pre> <p>Events generated by switch are similar to the ones generate by the toggle buttons.</p>"},{"location":"design/objects/#checkbox","title":"Checkbox","text":"<p>obj:<code>checkbox</code></p> <p></p> Property Value Default Description val int16 0 <code>1</code> = checked<code>0</code> = unchecked text string \"Checkbox\" The label of the checkbox <p>Note</p> <p>The checkbox object ignores the <code>w</code> and <code>h</code> attribute. These are calculated based on the font and text.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":5,\"obj\":\"checkbox\",\"x\":10,\"y\":145,\"w\":105,\"text\":\" Checkbox\"}\n</code></pre> <p>Events generated by checkbox are similar to the ones generate by the toggle buttons.</p>"},{"location":"design/objects/#progress-bar","title":"Progress Bar","text":"<p>obj:<code>bar</code></p> <p></p> Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator start_value int16 0 optional minimal allowed value of the indicator <p>Vertical bars can be created if the width of the object is smaller than its height.</p> <p>Note</p> <p><code>min</code>, <code>max</code>, <code>val</code> and <code>start_value</code> also support negative values.</p>"},{"location":"design/objects/#slider","title":"Slider","text":"<p>obj:<code>slider</code></p> <p></p> Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator start_value int16 0 optional minimal allowed value of the indicator <p>Vertical sliders can be created if the width of the object is smaller than its height.</p> <p>Note</p> <p><code>min</code>, <code>max</code>, <code>val</code> and <code>start_value</code> also support negative values.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":6,\"obj\":\"slider\",\"x\":20,\"y\":250,\"w\":200,\"h\":20,\"min\":15,\"max\":35}\n</code></pre> <p>While pressing and dragging the <code>slider</code> object the following events are sent: <code>down</code> (old value), <code>changed</code> (repeatedly until released) and <code>up</code> (value at the moment of releasing it):</p> <pre><code>{\"event\":\"down\",\"val\":21}\n{\"event\":\"changed\",\"val\":22}\n{\"event\":\"changed\",\"val\":23}\n{\"event\":\"changed\",\"val\":25}\n{\"event\":\"changed\",\"val\":27}\n{\"event\":\"changed\",\"val\":29}\n{\"event\":\"up\",\"val\":31}\n</code></pre>"},{"location":"design/objects/#arc","title":"Arc","text":"<p>obj:<code>arc</code></p> <p></p> Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator rotation int16 0 offset to the 0 degree position type 0-2 0 <code>0</code> = normal, <code>1</code> = symmetrical, <code>2</code> = reverse adjustable bool false Add knob that the user can operate to change the value start_angle 0-360 start angle of the arc background (see note) end_angle 0-360 end angle of the arc background (see note) start_angle10 0-360 start angle of the arc indicator (see note) end_angle10 0-360 end angle of the arc indicator (see note) <p>Note</p> <p>Zero degree is at the middle right (3 o'clock) of the object and the degrees are increasing in a clockwise direction. The angles should be in the [0-360] range.    <code>min</code>, <code>max</code> and <code>val</code> also support negative values.</p> <p>Tip</p> <p>To adjust the size of the knob, use <code>pad_top20</code>, <code>pad_bottom20</code>, <code>pad_left20</code>, <code>pad_right20</code> styling properties. If you increase the knob beyond the margins of the object, you also need to increase <code>pad_top</code>, <code>pad_bottom</code>, <code>pad_left</code>, <code>pad_right</code> for the arc itself.   Check out value styling to display a textual value in the middle of the arc.     </p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":9,\"obj\":\"arc\",\"x\":20,\"y\":75,\"w\":200,\"h\":200,\"min\":15,\"max\":35,\"border_side\":0,\"type\":0,\"rotation\":0,\"start_angle\":135,\"end_angle\":45,\"start_angle10\":135,\"end_angle10\":45,\"adjustable\":true}\n</code></pre> <p>While pressing and dragging the <code>arc</code> object the following events are sent: <code>down</code> (old value), <code>changed</code> (repeatedly until released) and <code>up</code> (value at the moment of releasing it):</p> <pre><code>{\"event\":\"down\",\"val\":21}\n{\"event\":\"changed\",\"val\":22}\n{\"event\":\"changed\",\"val\":23}\n{\"event\":\"changed\",\"val\":25}\n{\"event\":\"changed\",\"val\":27}\n{\"event\":\"changed\",\"val\":29}\n{\"event\":\"up\",\"val\":31}\n</code></pre>"},{"location":"design/objects/#dropdown-list","title":"Dropdown List","text":"<p>obj:<code>dropdown</code></p> <p></p> Property Value Default Description options string \"\" List of items separated by <code>\\n</code> val int16 0 The number of the selected item text string \"\" Read-only The text of the selected item direction byte 0 Direction where the dropdown expands: <code>0</code> = down, <code>1</code> = up, <code>2</code> = left, <code>3</code> = right Note: up and down are superseeded by the screen size. show_selected bool true Show the selected option or a static text max_height int16 3/4 of screen height The maximum height of the open drop-down list Method Parameters Description open To manually open the drop-down list close To manually close the drop-down list <p>To change the currently selected item, use the <code>val</code> attribute.   To change the items in the list, use the <code>options</code> attribute.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":10,\"obj\":\"dropdown\",\"x\":10,\"y\":205,\"w\":105,\"h\":30,\"options\":\"Apple\\nBanana\\nOrange\\nMelon\"}\n</code></pre> <p>When the item is changed both <code>val</code> and <code>text</code> of the newly selected item are send out accompanied by the <code>change</code> event.</p>"},{"location":"design/objects/#roller","title":"Roller","text":"<p>obj:<code>roller</code></p> <p></p> Property Value Default Description options string \"\" List of items separated by <code>\\n</code> val int16 0 The number of the selected item text string \"\" Read-only The text of the selected item rows int8 3 The number of rows that are visibleUse this property instead of <code>h</code> to set object height mode 0..1 0 Roller mode: <code>0</code> = normal (finite), <code>1</code> = infinite align string <code>center</code> Text alignment: <code>left</code>, <code>center</code>, <code>right</code> <p>To change the currently selected item, use the <code>val</code> attribute.   To change the items in the list, use the <code>options</code> attribute.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":11,\"obj\":\"roller\",\"x\":125,\"y\":205,\"w\":105,\"h\":30,\"options\":\"Apple\\nBanana\\nOrange\\nMelon\",\"mode\":1}\n</code></pre> <p>When the item is changed both <code>val</code> and <code>text</code> of the newly selected item are send out accompanied by the <code>change</code> event.</p>"},{"location":"design/objects/#line-meter","title":"Line Meter","text":"<p>obj:<code>linemeter</code></p> <p></p> Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator angle 0-360 240 angle between start and end of the scale line_count uint16 31 tick count of the scale rotation 0-360 0 offset for the scale angles to rotate it type 0-1 0 <code>0</code> = indicator lines are activated clock-wise<code>1</code> = indicator lines are activated counter-clock-wise <p>Use line and scale properties to customize.</p> <p>Note</p> <p><code>min</code>, <code>max</code> and <code>val</code> also support negative values.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":12,\"obj\":\"linemeter\",\"x\":20,\"y\":70,\"w\":200,\"h\":200,\"value_str\":\"Temp\",\"val\":75,\"line_count\":35,\"line_rounded\":1}\n</code></pre>"},{"location":"design/objects/#gauge","title":"Gauge","text":"<p>obj:<code>gauge</code></p> <p></p> Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator critical_value int16 80 scale color will be changed to scale_end_color after this value label_count uint8 number of labels (and major ticks) of the scale line_count uint16 31 number of minor ticks of the entire scale angle 0-360 240 angle between start and end of the scale rotation 0-360 0 offset for the gauge's angles to rotate it format uint16 0 divider for major tick values <p>To strip trailing zero's of major tick labels the <code>format</code> divider can be used to scale the values before printing:</p> <ul> <li><code>0</code> : print the major tick value as is</li> <li><code>1</code> : strip 1 zero, i.e. divide tick value by 10 before printing the major tick label</li> <li><code>2</code> : strip 2 zeros, i.e. divide tick value by 100 before printing the major tick label</li> <li><code>3</code> : strip 3 zeros, i.e. divide tick value by 1000 before printing the major tick label</li> <li><code>4</code> : strip 4 zeros, i.e. divide tick value by 10000 before printing the major tick label</li> </ul> <p>Only these values are allowed, arbitrary numbers are not supported.</p> <p>Note</p> <p><code>min</code>, <code>max</code> and <code>val</code> also support negative values.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":13,\"obj\":\"gauge\",\"x\":20,\"y\":70,\"w\":200,\"h\":200}\n</code></pre> <p>Use scale properties to customize.</p>"},{"location":"design/objects/#tabview","title":"Tabview","text":"<p>obj:<code>tabview</code></p> <p></p> <p>A tabview is an object that can hold multiple tab objects. You first create the <code>tabview</code> object and then add <code>tab</code> objects to it.</p> Property Value Default Description val int8 0 The number of the active tab, starting at 0 text string \"\" The name of the active tab btn_pos 0..4 1 Position of the tab buttons:<code>0</code> = none<code>1</code> = top<code>2</code> = bottom<code>3</code> = left<code>4</code> = right count uint16 0 Read-only The number of tabs of the tabview <p>To change the currently visible tab, use the <code>val</code> attribute after all tabs have been added.   </p> <p>Note</p> <p>To adjust the height of the tab buttons row, use <code>pad_top40</code> and <code>pad_bottom40</code> styling properties. Accepts also negative values.    To adjust the text size of the tab names, use the <code>text_font40</code> styling property.    </p> <p>Read further down to learn now to add tabs to the tabview.</p>"},{"location":"design/objects/#tab","title":"Tab","text":"<p>obj:<code>tab</code></p> Property Value Default Description parentid int8 0 The <code>id</code> of the tabview object to which this tab is added text string \"Tab\" The name of tab button <p>Set the parent object (which <code>tabview</code> the tabs belong to) by referencing the <code>parentid</code> when creating the tab. To add other objects to these tabs, set the <code>parentid</code> when creating those objects to the id of the tab you want them to appear on.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":14,\"obj\":\"tabview\",\"btn_pos\":1,\"y\":180}\n{\"page\":1,\"id\":51,\"obj\":\"tab\",\"parentid\":14,\"text\":\"Tab 1\"}\n{\"page\":1,\"id\":52,\"obj\":\"tab\",\"parentid\":14,\"text\":\"Tab 2\"}\n{\"page\":1,\"id\":53,\"obj\":\"tab\",\"parentid\":14,\"text\":\"Tab 3\"}\n{\"page\":1,\"id\":61,\"obj\":\"switch\",\"x\":20,\"y\":10,\"w\":60,\"h\":30,\"parentid\":51,\"radius\":25,\"radius20\":25}\n{\"page\":1,\"id\":71,\"obj\":\"dropdown\",\"x\":15,\"y\":10,\"w\":110,\"h\":30,\"parentid\":52,\"options\":\"Apple\\nBanana\\nOrange\\nMelon\"}\n{\"page\":1,\"id\":81,\"obj\":\"checkbox\",\"x\":15,\"y\":10,\"w\":110,\"h\":30,\"parentid\":53,\"text\":\" Nice tabview\"} \n</code></pre>"},{"location":"design/objects/#color-picker","title":"Color picker","text":"<p>obj:<code>cpicker</code></p> <p></p> Property Value Default Description color color 0 The selected color in html format #rrggbb scale_width uint16 25 The width of the color gradient of the circle pad_inner int16 10 The padding between the circle and the inner preview circle mode string \"hue\" The aspect of the color being edited: <code>\"hue\"</code>, <code>\"saturation\"</code>, or <code>\"value\"</code> mode_fixed bool false Disables long press behavior to cycle color modes <p>The object will automatically adjust based on the <code>w</code> and <code>h</code> properties: when the object is longer then it is height a rectangular color picker is created, otherwise it will be circular.</p> <p>Long pressing the inner preview circle, if <code>mode_fixed</code> is <code>false</code>, will cause color picker to cycle through the color modes: hue &gt; saturation &gt; value. Double-click on the inner preview circle to reset the current value.</p>"},{"location":"design/objects/#setting-color","title":"Setting Color","text":"<p>Example MQTT commands: <pre><code>hasp/&lt;nodename&gt;/command/p0b2.color 13891\nhasp/&lt;nodename&gt;/command/p1b5.color silver\nhasp/&lt;nodename&gt;/command/p2b3.color #C0C0C0\nhasp/&lt;nodename&gt;/command/p2b3.mode saturation\n</code></pre></p>"},{"location":"design/objects/#events_1","title":"Events","text":"<p>While pressing and dragging the <code>cpicker</code> object the following events are sent: <code>down</code> (old color), <code>changed</code> (repeatedly until released) and <code>up</code> (value at the moment of releasing it):</p> <pre><code>{\"event\":\"down\",\"color\":\"#8300ff\",\"r\":131,\"g\":0,\"b\":255,\"h\":271,\"s\":100,\"v\":100}\n{\"event\":\"changed\",\"color\":\"#7300ff\",\"r\":115,\"g\":0,\"b\":255,\"h\":267,\"s\":100,\"v\":100}\n{\"event\":\"changed\",\"color\":\"#6200ff\",\"r\":98,\"g\":0,\"b\":255,\"h\":263,\"s\":100,\"v\":100}\n{\"event\":\"up\",\"color\":\"#6200ff\",\"r\":98,\"g\":0,\"b\":255,\"h\":263,\"s\":100,\"v\":100}\n</code></pre>"},{"location":"design/objects/#spinner","title":"Spinner","text":"<p>obj:<code>spinner</code></p> <p></p> Property Value Default Description speed int16 1000 The time for 1 turn in ms direction int16 0 <code>0</code> = clockwise, <code>1</code> = counter-clockwise angle 0-360 60 The length of the spinning segment in degrees type 0-2 0 <code>0</code> = slow down on the top, <code>1</code> = slow down and stretch, <code>2</code> = constant speed no stretch line_width int16 20 The width of the background circle line_width10 int16 20 The width of the spinning segment line_color color dependson theme color of the background circle line_color10 color dependson theme color of the spinning segment <p>Tip</p> <p>Check out background, border, and line styling to adjust other aspects of the appearance.</p> <p>Note</p> <p>Placing objects over/under the spinner will increase the CPU load because all objects need to be redrawn constantly.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":15,\"obj\":\"spinner\",\"x\":180,\"y\":50,\"w\":36,\"h\":36,\"bg_opa\":0,\"border_width\":0,\"line_width\":6,\"line_width10\":6,\"angle\":80,\"line_color\":\"white\",\"line_color10\":\"green\"}\n</code></pre>"},{"location":"design/objects/#led-indicator","title":"LED Indicator","text":"<p>obj:<code>led</code></p> <p></p> Property Value Default Description val byte 0 The brightness of the indicator [<code>0..255</code>]"},{"location":"design/objects/#button-matrix","title":"Button Matrix","text":"<p>obj:<code>btnmatrix</code></p> <p></p> Property Value Default Description options json array \"Text\" Json array of strings where each element is the label of a button. Use <code>\"\\n\"</code> for a new line of buttons align string <code>center</code> Text alignment: <code>left</code>, <code>center</code>, <code>right</code> toggle bool false All buttons behave as toggle buttons or normal buttons one_check bool false Allow only one button to be checked (toggled) at once val int8 0 The number of the active button, starting at 0. In conjunction with <code>toggle</code> and <code>one_check</code> set it to <code>-1</code> to deactivate all buttons <p>The styling properties apply to all buttons in the matrix. To change the color of a single label you can prefix the text with a <code>#RRGGBB</code> hexadecimal color code and close with a single hash <code>#</code> tag.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":20,\"obj\":\"btnmatrix\",\"x\":10,\"y\":10,\"w\":220,\"h\":150,\"options\":[\"#FF0000 Red Text#\",\"#0000FF Cyan Text#\",\"\\n\",\"#FFFF00 Yellow Text#\"],\"toggle\":1,\"one_check\":1}\n</code></pre>"},{"location":"design/objects/#messagebox","title":"Messagebox","text":"<p>obj:<code>msgbox</code></p> <p></p> Property Value Default Description text string \"\" The text of the message to be displayed. options json array [\"OK\"] Json array of strings where each element is the label of a button modal bool false Make the messagebox a modal dialog requiring user input auto_close int16 0 Close the pop-up message automatically after this number of milliseconds have passed <p>The Message boxes act as a pop-up. The default width is the horizontal screen size, the height adjusts according to the contents of the message. The pop-up is centered on the screen.</p> <p>Note</p> <p>The messagebox object is automatically deleted when it is closed. You will need to create it again using <code>jsonl</code> to pop-up a new message.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":24,\"obj\":\"msgbox\",\"text\":\"A message box with two buttons\",\"options\":[\"Apply\",\"Close\"]}\n</code></pre>"},{"location":"design/objects/#line","title":"Line","text":"<p>obj:<code>line</code></p> <p></p> Property Value Default Description points JSON array \"\" The name of the image file auto_size bool true Automatically set the size of the line object to the outer bounds y_invert bool false The y direction might be counter-intuitive in some cases so the y coordinates can be inverted <p>The points parameter is a JSON array of [x,y] coordinates, for example <code>[[10,25],[100,25],[100,0]]</code>.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":33,\"obj\":\"line\",\"points\":[[10,25],[100,25],[100,0]],\"auto_size\":0,\"y_invert\":1}\n</code></pre>"},{"location":"design/objects/#image","title":"Image","text":"<p>obj:<code>img</code></p> <p></p> Property Value Default Description src string \"\" The name of the image file auto_size bool true Automatically set the size of the image object to the image source offset_x int16 0 Shift the picture horizontally relative to the image object offset_y int16 0 Shift the picture vertically relative to the image object zoom uint16 256 A larger value enlarges the images (e.g. <code>512</code> double size), a smaller value shrinks it (e.g. <code>128</code> half size). Fractional scale works as well. E.g. <code>281</code> for <code>10%</code> enlargement. angle int16 0 Rotate the picture around its pivot point. Angle has <code>0.1</code> degree precision, so for <code>45.8\u00b0</code> use <code>458</code>. pivot_x int16 H center The pivot point of the rotation, by default centered pivot_y int16 V center The pivot point of the rotation, by default centered antialias bool false The quality of the angle and zoom transformation. With enabled anti-aliasing the transformations has a higher quality but they are slower. <p>Note</p> <p>You can use <code>image_recolor</code> and <code>image_recolor_opa</code> from the image styling properties to apply a color overlay mask.</p> <p>Either PNG or BIN image files are supported, from flash:</p> <ul> <li> <p>PNG image are decoded and kept in memory, thus you'll be able to display full-screen images only if your microcontroller has installed PSram memory,   else you will be limited to small icons or <code>BIN</code> files.</p> </li> <li> <p>BIN images are not stored in memory and are read from flash each time. This will be slower but allows the use of larger images even if your microcontroller doesn't have PSram.   </p> </li> <li> <p>BIN images from flash do not support <code>zoom</code> or <code>angle</code> transformations.</p> </li> <li> <p>Use the online LVGL Image Converter to create BIN files. Set the output format to Binary or Binary RGB565.</p> </li> </ul> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":34,\"obj\":\"img\",\"src\":\"L:/image.png\",\"auto_size\":0,\"w\":50}\n</code></pre>"},{"location":"design/objects/#qr-code","title":"QR-Code","text":"<p>obj:<code>qrcode</code></p> <p></p> Property Value Default Description text string \"\" The text to encode to QR code size int16 140 The object is always a square with a width and a height that correspond to size. Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":42,\"obj\":\"qrcode\",\"text\":\"www.openhasp.com/0.7.0/design/objects/\",\"x\":520,\"y\":20,\"size\":200}\n</code></pre> <p>!!! note :     The maximum text length depends on the QR code version. By default, the maximum version 7 is used, which corresponds to a maximum text length of 122 characters.</p>"},{"location":"design/objects/#base-object","title":"Base Object","text":"<p>obj:<code>obj</code></p> <p></p> <p>The Base Object can be directly used as a simple, empty widget. It is nothing more then a (rounded) rectangle.</p> <p>You can use it as a background shape for other objects by putting its jsonl line before the object. It catches touches!</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":50,\"obj\":\"obj\",\"x\":5,\"y\":35,\"w\":230,\"h\":250,\"click\":0}\n</code></pre>"},{"location":"design/objects/arc/","title":"Arc","text":"<p>obj:<code>arc</code></p> <p></p> Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator rotation int16 0 offset to the 0 degree position type 0-2 0 <code>0</code> = normal, <code>1</code> = symmetrical, <code>2</code> = reverse adjustable bool false Add knob that the user can operate to change the value start_angle 0-360 start angle of the arc background (see note) end_angle 0-360 end angle of the arc background (see note) start_angle10 0-360 start angle of the arc indicator (see note) end_angle10 0-360 end angle of the arc indicator (see note) <p>Note</p> <p>Zero degree is at the middle right (3 o'clock) of the object and the degrees are increasing in a clockwise direction. The angles should be in the [0-360] range.    <code>min</code>, <code>max</code> and <code>val</code> also support negative values.</p> <p>Tip</p> <p>To adjust the size of the knob, use <code>pad_top20</code>, <code>pad_bottom20</code>, <code>pad_left20</code>, <code>pad_right20</code> styling properties. If you increase the knob beyond the margins of the object, you also need to increase <code>pad_top</code>, <code>pad_bottom</code>, <code>pad_left</code>, <code>pad_right</code> for the arc itself.   Check out value styling to display a textual value in the middle of the arc.     </p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":9,\"obj\":\"arc\",\"x\":20,\"y\":75,\"w\":200,\"h\":200,\"min\":15,\"max\":35,\"border_side\":0,\"type\":0,\"rotation\":0,\"start_angle\":135,\"end_angle\":45,\"start_angle10\":135,\"end_angle10\":45,\"adjustable\":true}\n</code></pre> <p>While pressing and dragging the <code>arc</code> object the following events are sent: <code>down</code> (old value), <code>changed</code> (repeatedly until released) and <code>up</code> (value at the moment of releasing it):</p> <pre><code>{\"event\":\"down\",\"val\":21}\n{\"event\":\"changed\",\"val\":22}\n{\"event\":\"changed\",\"val\":23}\n{\"event\":\"changed\",\"val\":25}\n{\"event\":\"changed\",\"val\":27}\n{\"event\":\"changed\",\"val\":29}\n{\"event\":\"up\",\"val\":31}\n</code></pre>"},{"location":"design/objects/bar/","title":"Progress Bar","text":"<p>obj:<code>bar</code></p> <p></p> Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator start_value int16 0 optional minimal allowed value of the indicator <p>Vertical bars can be created if the width of the object is smaller than its height.</p> <p>Note</p> <p><code>min</code>, <code>max</code>, <code>val</code> and <code>start_value</code> also support negative values.</p>"},{"location":"design/objects/btn/","title":"Button","text":"<p>obj:<code>btn</code></p> <p></p> Property Value Default Description toggle bool false When enabled, creates a toggle-on/toggle-off button. If false, creates a normal button val int16 0 The value: <code>0</code> = untoggled, <code>1</code> = toggled text string \"\" The text of the label mode string <code>expand</code> The wrapping mode of long text labels.<code>expand</code> Expand the object size to the text size<code>break</code> Keep the object width, break the too long lines and expand the object height<code>dots</code> Keep the size and write dots at the end if the text is too long<code>scroll</code> Keep the size and roll the text back and forth<code>loop</code> Keep the size and roll the text circularly<code>crop</code> Keep the size and crop the text out of it align string <code>left</code> Text alignment: <code>left</code>, <code>center</code>, <code>right</code>"},{"location":"design/objects/btn/#examples","title":"Examples","text":"<p>Similar to the text label, it's possible to set the color of characters in the text indvidually, just prefix the text to be re-colored with a <code>#RRGGBB</code> hexadecimal color code and a space, and close with a single hash <code>#</code> tag.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":2,\"obj\":\"btn\",\"x\":10,\"y\":40,\"w\":105,\"h\":90,\"toggle\":false,\"text\":\"Normal Button\",\"mode\":\"break\",\"align\":\"center\"}\n{\"page\":1,\"id\":3,\"obj\":\"btn\",\"x\":125,\"y\":40,\"w\":105,\"h\":90,\"toggle\":true,\"text\":\"#FFD700 Toggle# Button\",\"mode\":\"break\",\"align\":\"center\"}\n</code></pre>"},{"location":"design/objects/btn/#events","title":"Events","text":""},{"location":"design/objects/btn/#push-button","title":"Push Button","text":"<p>Normal buttons (<code>toggle=false</code>) send touch events while they occur: </p> <p>Short touch: <pre><code>{\"event\":\"down\"}\n{\"event\":\"up\"}\n</code></pre></p> <p>Long press: <pre><code>{\"event\":\"down\"}\n{\"event\":\"long\"}\n{\"event\":\"hold\"}\n{\"event\":\"hold\"}\n{\"event\":\"release\"}\n</code></pre></p>"},{"location":"design/objects/btn/#toggle-button","title":"Toggle Button","text":"<p>Toggle buttons (<code>toggle=true</code>) send out the old value in the <code>down</code> event and the new value in the <code>up</code> event when released:</p> <p>Toggle ON: <pre><code>{\"event\":\"down\",\"val\":0}\n{\"event\":\"up\",\"val\":1}\n</code></pre></p> <p>Toggle OFF: <pre><code>{\"event\":\"down\",\"val\":1}\n{\"event\":\"up\",\"val\":0}\n</code></pre></p>"},{"location":"design/objects/btnmatrix/","title":"Button Matrix","text":"<p>obj:<code>btnmatrix</code></p> <p></p> Property Value Default Description options json array \"Text\" Json array of strings where each element is the label of a button. Use <code>\"\\n\"</code> for a new line of buttons align string <code>center</code> Text alignment: <code>left</code>, <code>center</code>, <code>right</code> toggle bool false All buttons behave as toggle buttons or normal buttons one_check bool false Allow only one button to be checked (toggled) at once val int8 0 The number of the active button, starting at 0. In conjunction with <code>toggle</code> and <code>one_check</code> set it to <code>-1</code> to deactivate all buttons <p>The styling properties apply to all buttons in the matrix. To change the color of a single label you can prefix the text with a <code>#RRGGBB</code> hexadecimal color code and close with a single hash <code>#</code> tag.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":20,\"obj\":\"btnmatrix\",\"x\":10,\"y\":10,\"w\":220,\"h\":150,\"options\":[\"#FF0000 Red Text#\",\"#0000FF Cyan Text#\",\"\\n\",\"#FFFF00 Yellow Text#\"],\"toggle\":1,\"one_check\":1}\n</code></pre>"},{"location":"design/objects/checkbox/","title":"Checkbox","text":"<p>obj:<code>checkbox</code></p> <p></p> Property Value Default Description val int16 0 <code>1</code> = checked<code>0</code> = unchecked text string \"Checkbox\" The label of the checkbox <p>Note</p> <p>The checkbox object ignores the <code>w</code> and <code>h</code> attribute. These are calculated based on the font and text.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":5,\"obj\":\"checkbox\",\"x\":10,\"y\":145,\"w\":105,\"text\":\" Checkbox\"}\n</code></pre> <p>Events generated by checkbox are similar to the ones generate by the toggle buttons.</p>"},{"location":"design/objects/cpicker/","title":"Color picker","text":"<p>obj:<code>cpicker</code></p> <p></p> Property Value Default Description color color 0 The selected color in html format #rrggbb scale_width uint16 25 The width of the color gradient of the circle pad_inner int16 10 The padding between the circle and the inner preview circle mode string \"hue\" The aspect of the color being edited: <code>\"hue\"</code>, <code>\"saturation\"</code>, or <code>\"value\"</code> mode_fixed bool false Disables long press behavior to cycle color modes <p>The object will automatically adjust based on the <code>w</code> and <code>h</code> properties: when the object is longer then it is height a rectangular color picker is created, otherwise it will be circular.</p> <p>Long pressing the inner preview circle, if <code>mode_fixed</code> is <code>false</code>, will cause color picker to cycle through the color modes: hue &gt; saturation &gt; value. Double-click on the inner preview circle to reset the current value.</p>"},{"location":"design/objects/cpicker/#setting-color","title":"Setting Color","text":"<p>Example MQTT commands: <pre><code>hasp/&lt;nodename&gt;/command/p0b2.color 13891\nhasp/&lt;nodename&gt;/command/p1b5.color silver\nhasp/&lt;nodename&gt;/command/p2b3.color #C0C0C0\nhasp/&lt;nodename&gt;/command/p2b3.mode saturation\n</code></pre></p>"},{"location":"design/objects/cpicker/#events","title":"Events","text":"<p>While pressing and dragging the <code>cpicker</code> object the following events are sent: <code>down</code> (old color), <code>changed</code> (repeatedly until released) and <code>up</code> (value at the moment of releasing it):</p> <pre><code>{\"event\":\"down\",\"color\":\"#8300ff\",\"r\":131,\"g\":0,\"b\":255,\"h\":271,\"s\":100,\"v\":100}\n{\"event\":\"changed\",\"color\":\"#7300ff\",\"r\":115,\"g\":0,\"b\":255,\"h\":267,\"s\":100,\"v\":100}\n{\"event\":\"changed\",\"color\":\"#6200ff\",\"r\":98,\"g\":0,\"b\":255,\"h\":263,\"s\":100,\"v\":100}\n{\"event\":\"up\",\"color\":\"#6200ff\",\"r\":98,\"g\":0,\"b\":255,\"h\":263,\"s\":100,\"v\":100}\n</code></pre>"},{"location":"design/objects/dropdown/","title":"Dropdown List","text":"<p>obj:<code>dropdown</code></p> <p></p> Property Value Default Description options string \"\" List of items separated by <code>\\n</code> val int16 0 The number of the selected item text string \"\" Read-only The text of the selected item direction byte 0 Direction where the dropdown expands: <code>0</code> = down, <code>1</code> = up, <code>2</code> = left, <code>3</code> = right Note: up and down are superseeded by the screen size. show_selected bool true Show the selected option or a static text max_height int16 3/4 of screen height The maximum height of the open drop-down list Method Parameters Description open To manually open the drop-down list close To manually close the drop-down list <p>To change the currently selected item, use the <code>val</code> attribute.   To change the items in the list, use the <code>options</code> attribute.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":10,\"obj\":\"dropdown\",\"x\":10,\"y\":205,\"w\":105,\"h\":30,\"options\":\"Apple\\nBanana\\nOrange\\nMelon\"}\n</code></pre> <p>When the item is changed both <code>val</code> and <code>text</code> of the newly selected item are send out accompanied by the <code>change</code> event.</p>"},{"location":"design/objects/gauge/","title":"Gauge","text":"<p>obj:<code>gauge</code></p> <p></p> Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator critical_value int16 80 scale color will be changed to scale_end_color after this value label_count uint8 number of labels (and major ticks) of the scale line_count uint16 31 number of minor ticks of the entire scale angle 0-360 240 angle between start and end of the scale rotation 0-360 0 offset for the gauge's angles to rotate it format uint16 0 divider for major tick values <p>To strip trailing zero's of major tick labels the <code>format</code> divider can be used to scale the values before printing:</p> <ul> <li><code>0</code> : print the major tick value as is</li> <li><code>1</code> : strip 1 zero, i.e. divide tick value by 10 before printing the major tick label</li> <li><code>2</code> : strip 2 zeros, i.e. divide tick value by 100 before printing the major tick label</li> <li><code>3</code> : strip 3 zeros, i.e. divide tick value by 1000 before printing the major tick label</li> <li><code>4</code> : strip 4 zeros, i.e. divide tick value by 10000 before printing the major tick label</li> </ul> <p>Only these values are allowed, arbitrary numbers are not supported.</p> <p>Note</p> <p><code>min</code>, <code>max</code> and <code>val</code> also support negative values.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":13,\"obj\":\"gauge\",\"x\":20,\"y\":70,\"w\":200,\"h\":200}\n</code></pre> <p>Use scale properties to customize.</p>"},{"location":"design/objects/img/","title":"Image","text":"<p>obj:<code>img</code></p> <p></p> Property Value Default Description src string \"\" The name of the image file auto_size bool true Automatically set the size of the image object to the image source offset_x int16 0 Shift the picture horizontally relative to the image object offset_y int16 0 Shift the picture vertically relative to the image object zoom uint16 256 A larger value enlarges the images (e.g. <code>512</code> double size), a smaller value shrinks it (e.g. <code>128</code> half size). Fractional scale works as well. E.g. <code>281</code> for <code>10%</code> enlargement. angle int16 0 Rotate the picture around its pivot point. Angle has <code>0.1</code> degree precision, so for <code>45.8\u00b0</code> use <code>458</code>. pivot_x int16 H center The pivot point of the rotation, by default centered pivot_y int16 V center The pivot point of the rotation, by default centered antialias bool false The quality of the angle and zoom transformation. With enabled anti-aliasing the transformations has a higher quality but they are slower. <p>Note</p> <p>You can use <code>image_recolor</code> and <code>image_recolor_opa</code> from the image styling properties to apply a color overlay mask.</p> <p>Either PNG or BIN image files are supported, from flash:</p> <ul> <li> <p>PNG image are decoded and kept in memory, thus you'll be able to display full-screen images only if your microcontroller has installed PSram memory,   else you will be limited to small icons or <code>BIN</code> files.</p> </li> <li> <p>BIN images are not stored in memory and are read from flash each time. This will be slower but allows the use of larger images even if your microcontroller doesn't have PSram.   </p> </li> <li> <p>BIN images from flash do not support <code>zoom</code> or <code>angle</code> transformations.</p> </li> <li> <p>Use the online LVGL Image Converter to create BIN files. Set the output format to Binary or Binary RGB565.</p> </li> </ul> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":34,\"obj\":\"img\",\"src\":\"L:/image.png\",\"auto_size\":0,\"w\":50}\n</code></pre>"},{"location":"design/objects/label/","title":"Text Label","text":"<p>obj:<code>label</code></p> <p></p> Property Value Default Description text string \"Text\" The text of the label, <code>\\n</code> for line break. Can also be a variable. mode string <code>crop</code> The wrapping mode of long text labels:<code>expand</code> Expand the object size to the text size<code>break</code> Keep the object width, break the too long lines and expand the object height<code>dots</code> Keep the size and write dots at the end if the text is too long<code>scroll</code> Keep the size and roll the text back and forth<code>loop</code> Keep the size and roll the text circularly<code>crop</code> Keep the size and crop the text out of it align string <code>left</code> Text alignment: <code>left</code>, <code>center</code>, <code>right</code> <p>It's possible to set the color of characters in the text indvidually, just prefix the text to be re-colored with a <code>#RRGGBB</code> hexadecimal color code and a space, and close with a single hash <code>#</code> tag.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":1,\"obj\":\"label\",\"x\":10,\"y\":5,\"w\":150,\"h\":50,\"text\":\"\\uE64A Hello world!\"}\n{\"page\":1,\"id\":1,\"obj\":\"label\",\"x\":10,\"y\":5,\"w\":150,\"h\":50,\"text\":\"#0000FF \\uE64A# #FF0000 Hello# #008000 world#!\"}\n</code></pre>"},{"location":"design/objects/led/","title":"LED Indicator","text":"<p>obj:<code>led</code></p> <p></p> Property Value Default Description val byte 0 The brightness of the indicator [<code>0..255</code>]"},{"location":"design/objects/line/","title":"Line","text":"<p>obj:<code>line</code></p> <p></p> Property Value Default Description points JSON array \"\" The name of the image file auto_size bool true Automatically set the size of the line object to the outer bounds y_invert bool false The y direction might be counter-intuitive in some cases so the y coordinates can be inverted <p>The points parameter is a JSON array of [x,y] coordinates, for example <code>[[10,25],[100,25],[100,0]]</code>.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":33,\"obj\":\"line\",\"points\":[[10,25],[100,25],[100,0]],\"auto_size\":0,\"y_invert\":1}\n</code></pre>"},{"location":"design/objects/linemeter/","title":"Line Meter","text":"<p>obj:<code>linemeter</code></p> <p></p> Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator angle 0-360 240 angle between start and end of the scale line_count uint16 31 tick count of the scale rotation 0-360 0 offset for the scale angles to rotate it type 0-1 0 <code>0</code> = indicator lines are activated clock-wise<code>1</code> = indicator lines are activated counter-clock-wise <p>Use line and scale properties to customize.</p> <p>Note</p> <p><code>min</code>, <code>max</code> and <code>val</code> also support negative values.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":12,\"obj\":\"linemeter\",\"x\":20,\"y\":70,\"w\":200,\"h\":200,\"value_str\":\"Temp\",\"val\":75,\"line_count\":35,\"line_rounded\":1}\n</code></pre>"},{"location":"design/objects/msgbox/","title":"Messagebox","text":"<p>obj:<code>msgbox</code></p> <p></p> Property Value Default Description text string \"\" The text of the message to be displayed. options json array [\"OK\"] Json array of strings where each element is the label of a button modal bool false Make the messagebox a modal dialog requiring user input auto_close int16 0 Close the pop-up message automatically after this number of milliseconds have passed <p>The Message boxes act as a pop-up. The default width is the horizontal screen size, the height adjusts according to the contents of the message. The pop-up is centered on the screen.</p> <p>Note</p> <p>The messagebox object is automatically deleted when it is closed. You will need to create it again using <code>jsonl</code> to pop-up a new message.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":24,\"obj\":\"msgbox\",\"text\":\"A message box with two buttons\",\"options\":[\"Apply\",\"Close\"]}\n</code></pre>"},{"location":"design/objects/obj/","title":"Base Object","text":"<p>obj:<code>obj</code></p> <p></p> <p>The Base Object can be directly used as a simple, empty widget. It is nothing more then a (rounded) rectangle.</p> <p>You can use it as a background shape for other objects by putting its jsonl line before the object. It catches touches!</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":50,\"obj\":\"obj\",\"x\":5,\"y\":35,\"w\":230,\"h\":250,\"click\":0}\n</code></pre>"},{"location":"design/objects/qrcode/","title":"QR-Code","text":"<p>obj:<code>qrcode</code></p> <p></p> Property Value Default Description text string \"\" The text to encode to QR code size int16 140 The object is always a square with a width and a height that correspond to size. Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":42,\"obj\":\"qrcode\",\"text\":\"www.openhasp.com/0.7.0/design/objects/\",\"x\":520,\"y\":20,\"size\":200}\n</code></pre> <p>!!! note :     The maximum text length depends on the QR code version. By default, the maximum version 7 is used, which corresponds to a maximum text length of 122 characters.</p>"},{"location":"design/objects/roller/","title":"Roller","text":"<p>obj:<code>roller</code></p> <p></p> Property Value Default Description options string \"\" List of items separated by <code>\\n</code> val int16 0 The number of the selected item text string \"\" Read-only The text of the selected item rows int8 3 The number of rows that are visibleUse this property instead of <code>h</code> to set object height mode 0..1 0 Roller mode: <code>0</code> = normal (finite), <code>1</code> = infinite align string <code>center</code> Text alignment: <code>left</code>, <code>center</code>, <code>right</code> <p>To change the currently selected item, use the <code>val</code> attribute.   To change the items in the list, use the <code>options</code> attribute.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":11,\"obj\":\"roller\",\"x\":125,\"y\":205,\"w\":105,\"h\":30,\"options\":\"Apple\\nBanana\\nOrange\\nMelon\",\"mode\":1}\n</code></pre> <p>When the item is changed both <code>val</code> and <code>text</code> of the newly selected item are send out accompanied by the <code>change</code> event.</p>"},{"location":"design/objects/slider/","title":"Slider","text":"<p>obj:<code>slider</code></p> <p></p> Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator start_value int16 0 optional minimal allowed value of the indicator <p>Vertical sliders can be created if the width of the object is smaller than its height.</p> <p>Note</p> <p><code>min</code>, <code>max</code>, <code>val</code> and <code>start_value</code> also support negative values.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":6,\"obj\":\"slider\",\"x\":20,\"y\":250,\"w\":200,\"h\":20,\"min\":15,\"max\":35}\n</code></pre> <p>While pressing and dragging the <code>slider</code> object the following events are sent: <code>down</code> (old value), <code>changed</code> (repeatedly until released) and <code>up</code> (value at the moment of releasing it):</p> <pre><code>{\"event\":\"down\",\"val\":21}\n{\"event\":\"changed\",\"val\":22}\n{\"event\":\"changed\",\"val\":23}\n{\"event\":\"changed\",\"val\":25}\n{\"event\":\"changed\",\"val\":27}\n{\"event\":\"changed\",\"val\":29}\n{\"event\":\"up\",\"val\":31}\n</code></pre>"},{"location":"design/objects/spinner/","title":"Spinner","text":"<p>obj:<code>spinner</code></p> <p></p> Property Value Default Description speed int16 1000 The time for 1 turn in ms direction int16 0 <code>0</code> = clockwise, <code>1</code> = counter-clockwise angle 0-360 60 The length of the spinning segment in degrees type 0-2 0 <code>0</code> = slow down on the top, <code>1</code> = slow down and stretch, <code>2</code> = constant speed no stretch line_width int16 20 The width of the background circle line_width10 int16 20 The width of the spinning segment line_color color dependson theme color of the background circle line_color10 color dependson theme color of the spinning segment <p>Tip</p> <p>Check out background, border, and line styling to adjust other aspects of the appearance.</p> <p>Note</p> <p>Placing objects over/under the spinner will increase the CPU load because all objects need to be redrawn constantly.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":15,\"obj\":\"spinner\",\"x\":180,\"y\":50,\"w\":36,\"h\":36,\"bg_opa\":0,\"border_width\":0,\"line_width\":6,\"line_width10\":6,\"angle\":80,\"line_color\":\"white\",\"line_color10\":\"green\"}\n</code></pre>"},{"location":"design/objects/switch/","title":"Switch","text":"<p>obj:<code>switch</code></p> <p></p> Property Value Default Description val bool 0 <code>1</code> = on, <code>0</code> = off bg_color10 color 0 changes indicator color bg_color20 color 0 changes knob color radius20 int16 dependson theme changes knob corner radius (also see radius) Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":4,\"obj\":\"switch\",\"x\":125,\"y\":145,\"w\":105,\"h\":55,\"radius\":15}\n</code></pre> <p>Events generated by switch are similar to the ones generate by the toggle buttons.</p>"},{"location":"design/objects/tabview/","title":"Tabs","text":""},{"location":"design/objects/tabview/#tabview","title":"Tabview","text":"<p>obj:<code>tabview</code></p> <p></p> <p>A tabview is an object that can hold multiple tab objects. You first create the <code>tabview</code> object and then add <code>tab</code> objects to it.</p> Property Value Default Description val int8 0 The number of the active tab, starting at 0 text string \"\" The name of the active tab btn_pos 0..4 1 Position of the tab buttons:<code>0</code> = none<code>1</code> = top<code>2</code> = bottom<code>3</code> = left<code>4</code> = right count uint16 0 Read-only The number of tabs of the tabview <p>To change the currently visible tab, use the <code>val</code> attribute after all tabs have been added.   </p> <p>Note</p> <p>To adjust the height of the tab buttons row, use <code>pad_top40</code> and <code>pad_bottom40</code> styling properties. Accepts also negative values.    To adjust the text size of the tab names, use the <code>text_font40</code> styling property.    </p> <p>Read further down to learn now to add tabs to the tabview.</p>"},{"location":"design/objects/tabview/#tab","title":"Tab","text":"<p>obj:<code>tab</code></p> Property Value Default Description parentid int8 0 The <code>id</code> of the tabview object to which this tab is added text string \"Tab\" The name of tab button <p>Set the parent object (which <code>tabview</code> the tabs belong to) by referencing the <code>parentid</code> when creating the tab. To add other objects to these tabs, set the <code>parentid</code> when creating those objects to the id of the tab you want them to appear on.</p> Example <code>jsonl</code> <pre><code>{\"page\":1,\"id\":14,\"obj\":\"tabview\",\"btn_pos\":1,\"y\":180}\n{\"page\":1,\"id\":51,\"obj\":\"tab\",\"parentid\":14,\"text\":\"Tab 1\"}\n{\"page\":1,\"id\":52,\"obj\":\"tab\",\"parentid\":14,\"text\":\"Tab 2\"}\n{\"page\":1,\"id\":53,\"obj\":\"tab\",\"parentid\":14,\"text\":\"Tab 3\"}\n{\"page\":1,\"id\":61,\"obj\":\"switch\",\"x\":20,\"y\":10,\"w\":60,\"h\":30,\"parentid\":51,\"radius\":25,\"radius20\":25}\n{\"page\":1,\"id\":71,\"obj\":\"dropdown\",\"x\":15,\"y\":10,\"w\":110,\"h\":30,\"parentid\":52,\"options\":\"Apple\\nBanana\\nOrange\\nMelon\"}\n{\"page\":1,\"id\":81,\"obj\":\"checkbox\",\"x\":15,\"y\":10,\"w\":110,\"h\":30,\"parentid\":53,\"text\":\" Nice tabview\"} \n</code></pre>"},{"location":"examples/dashui/","title":"Dash UI","text":""},{"location":"examples/dashui/#layout","title":"Layout","text":""},{"location":"examples/dashui/#code","title":"Code","text":"<p>To add an openHASP plate to your installation with the Dash UI sample configuration:</p> <ul> <li>in the plate's web UI select <code>Material Light</code> UI theme, choose a purple color in the Hue color bar and reboot,</li> <li>upload a <code>pages.jsonl</code> file with the folowing content to your plate's flash memory and reboot:</li> </ul> <pre><code>{\"page\":1,\"comment\":\"---------- Page 1 ----------\"}\n{\"page\":1,\"id\":0,\"bg_color\":\"#FFFFFF\",\"bg_grad_color\":\"#FFFFFF\",\"text_color\":\"#000000\",\"radius\":0,\"border_side\":0}\n{\"page\":1,\"id\":1,\"obj\":\"btn\",\"x\":0,\"y\":0,\"w\":240,\"h\":30,\"text\":\"LIVING ROOM\",\"value_font\":22,\"bg_color\":\"#2C3E50\",\"bg_grad_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0}\n{\"page\":1,\"id\":2,\"obj\":\"arc\",\"x\":5,\"y\":45,\"w\":140,\"h\":100,\"max\":40,\"border_side\":0,\"type\":0,\"rotation\":0,\"start_angle\":180,\"end_angle\":0,\"start_angle10\":180,\"value_font\":12,\"value_ofs_x\":-19,\"value_ofs_y\":-4,\"bg_opa\":0}\n{\"page\":1,\"id\":3,\"obj\":\"arc\",\"x\":130,\"y\":45,\"w\":140,\"h\":100,\"max\":100,\"border_side\":0,\"type\":0,\"start_angle\":180,\"end_angle\":0,\"start_angle10\":180,\"value_font\":12,\"value_color\":\"#000000\",\"value_ofs_x\":-19,\"value_ofs_y\":-4,\"bg_opa\":0}\n{\"page\":1,\"id\":4,\"obj\":\"label\",\"x\":0,\"y\":120,\"w\":240,\"h\":20,\"align\":\"center\",\"text\":\"CO2 levels: \",\"radius\":0,\"border_side\":0}\n{\"page\":1,\"id\":5,\"obj\":\"label\",\"x\":2,\"y\":35,\"w\":140,\"text\":\"Temperature\"}\n{\"page\":1,\"id\":6,\"obj\":\"label\",\"x\":140,\"y\":35,\"w\":140,\"text\":\"Humidity\"}\n{\"page\":1,\"id\":7,\"obj\":\"btn\",\"x\":0,\"y\":160,\"w\":240,\"h\":20,\"text\":\"LIGHTS\",\"bg_color\":\"#F1C40F\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0}\n{\"page\":1,\"id\":8,\"obj\":\"label\",\"x\":20,\"y\":190,\"w\":140,\"h\":20,\"text\":\"Ceiling Light\"}\n{\"page\":1,\"id\":9,\"obj\":\"switch\",\"x\":160,\"y\":190,\"w\":40,\"h\":20}\n{\"page\":1,\"id\":10,\"obj\":\"label\",\"x\":20,\"y\":215,\"w\":140,\"h\":20,\"text\":\"Wall Light\"}\n{\"page\":1,\"id\":11,\"obj\":\"switch\",\"x\":160,\"y\":215,\"w\":40,\"h\":20}\n{\"page\":1,\"id\":12,\"obj\":\"label\",\"x\":20,\"y\":240,\"w\":200,\"h\":20,\"text\":\"Ambient Light\"}\n{\"page\":1,\"id\":13,\"obj\":\"slider\",\"x\":30,\"y\":265,\"w\":200,\"h\":10}\n\n{\"page\":0,\"comment\":\"---------- All pages ----------\"}\n{\"page\":0,\"id\":11,\"obj\":\"btn\",\"action\":\"prev\",\"x\":0,\"y\":290,\"w\":79,\"h\":32,\"bg_color\":\"#34495E\",\"text\":\"\\uE141\",\"text_color\":\"#000000\",\"radius\":0,\"border_side\":0,\"text_font\":32}\n{\"page\":0,\"id\":12,\"obj\":\"btn\",\"action\":\"back\",\"x\":80,\"y\":290,\"w\":80,\"h\":32,\"bg_color\":\"#34495E\",\"text\":\"\\uE2DC\",\"text_color\":\"#000000\",\"radius\":0,\"border_side\":0,\"text_font\":24}\n{\"page\":0,\"id\":13,\"obj\":\"btn\",\"action\":\"next\",\"x\":161,\"y\":290,\"w\":79,\"h\":32,\"bg_color\":\"#34495E\",\"text\":\"\\uE142\",\"text_color\":\"#000000\",\"radius\":0,\"border_side\":0,\"text_font\":32}\n</code></pre> <p>Assuming your plate's configured MQTT topic is <code>plate35</code>, values for Temperature, Humidity and CO2 Sensor have to be sent from another device by publishing values to the appropriate command topic:</p> <ul> <li><code>hasp/plate35/command/p1b2.val %value%</code> - to update Temperature arc value</li> <li><code>hasp/plate35/command/p1b2.value_str %value%\u00b0C</code> - to update Temperature text value</li> <li><code>hasp/plate35/command/p1b3.val %value%</code> - to update Humidity arc value </li> <li><code>hasp/plate35/command/p1b3.value_str %value% %</code> - to update Humidity text value</li> <li><code>hasp/plate35/command/p1b4.text CO2 levels: %value%</code> - to update CO2 level value</li> </ul>"},{"location":"examples/fan/","title":"Animated fan status","text":""},{"location":"examples/fan/#layout","title":"Layout","text":""},{"location":"examples/fan/#code","title":"Code","text":"<p>To add an openHASP plate to your installation with a sample design to control and reflect the status of a fan:</p> <ul> <li>in the plate's web UI select <code>Hasp Light</code> UI theme and reboot,</li> <li>upload the fan icon to your plate,</li> <li>upload a <code>pages.jsonl</code> file with the folowing content to your plate and reboot:</li> </ul> <pre><code>{\"page\":1,\"id\":1,\"obj\":\"btn\",\"x\":0,\"y\":0,\"w\":240,\"h\":30,\"text\":\"FAN STATUS\",\"text_font\":16,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0,\"click\":0}\n\n{\"page\":1,\"id\":11,\"obj\":\"img\",\"src\":\"L:/noun_Fan_35097_140.png\",\"auto_size\":1,\"w\":140,\"h\":140,\"x\":50,\"y\":75,\"image_recolor\":\"lime\",\"image_recolor_opa\":150}\n{\"page\":1,\"id\":12,\"obj\":\"spinner\",\"parentid\":11,\"x\":7,\"y\":6,\"w\":126,\"h\":126,\"bg_opa\":0,\"border_width\":0,\"line_width\":7,\"line_width10\":7,\"type\":2,\"angle\":120,\"speed\":1000,\"value_str\":3}\n</code></pre> <p>It is made from a transparent PNG image and a spinner object placed on top of it. To reflect various states of the fan from your home automation system, you could change the <code>speed</code> of the spinner, the <code>value_str</code> to display it numerically, or <code>line_color10</code> to colorize it. You can use <code>image_recolor</code> and <code>image_recolor_opa</code> from the image styling properties to apply a color overlay mask to the fan itself. You could use the spinner's <code>down</code> touch events to change the speed of the fan in an OFF &gt; 1 &gt; 2 &gt; 3 &gt; OFF style (consult the documentation of your home automation system how to do this based on MQTT messages).</p> <p>Here's another approach where the spinner discretely shows up behind the blades:</p> <pre><code>{\"page\":1,\"id\":13,\"obj\":\"spinner\",\"x\":68,\"y\":91,\"w\":105,\"h\":105,\"bg_opa\":0,\"border_width\":0,\"line_width\":0,\"line_width10\":32,\"line_color10\":\"orange\",\"line_rounded10\":1,\"type\":2,\"angle\":160,\"speed\":1000,\"value_str\":3,\"value_ofs_y\":1}\n{\"page\":1,\"id\":14,\"obj\":\"img\",\"src\":\"L:/noun_Fan_35097_140.png\",\"auto_size\":1,\"w\":140,\"h\":140,\"x\":50,\"y\":75,\"image_recolor\":\"silver\",\"image_recolor_opa\":120}\n</code></pre> <p>For fans in action, check out the fan and scent diffuser example for Home Assistant.  Check out the pagination example to learn how to implement the bottom bar.  Check out the clock and temperature example to learn how to implement values to the top.  </p> <p>Attribution</p> <p>Fan by WARPAINT Media Inc. from the Noun Project</p>"},{"location":"examples/lovelace/","title":"Lovelace-like Entities","text":""},{"location":"examples/lovelace/#layout","title":"Layout","text":""},{"location":"examples/lovelace/#code","title":"Code","text":"<p>To add an openHASP plate to your installation with a sample design looking a bit like Home Assistant's Lovelace UI:</p> <ul> <li>in the plate's web UI select <code>Hasp Light</code> UI theme and reboot,</li> <li>upload a <code>pages.jsonl</code> file with the folowing content to your plate and reboot:</li> </ul> <pre><code>{\"page\":1,\"id\":1,\"obj\":\"btn\",\"x\":0,\"y\":0,\"w\":240,\"h\":30,\"text\":\"ENTITIES\",\"value_font\":22,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0,\"click\":0}\n{\"page\":1,\"id\":2,\"obj\":\"obj\",\"x\":5,\"y\":35,\"w\":230,\"h\":250,\"click\":0}\n\n{\"page\":1,\"id\":11,\"obj\":\"label\",\"x\":8,\"y\":33,\"w\":35,\"h\":35,\"text\":\"\\uE004\",\"align\":1,\"text_font\":32,\"text_color\":\"black\"}\n{\"page\":1,\"id\":12,\"obj\":\"label\",\"x\":48,\"y\":43,\"w\":130,\"h\":30,\"text\":\"Presence override\",\"align\":0,\"text_font\":16,\"text_color\":\"black\"}\n{\"page\":1,\"id\":13,\"obj\":\"switch\",\"x\":177,\"y\":40,\"w\":50,\"h\":25,\"radius\":25,\"radius20\":15}\n\n{\"page\":1,\"id\":21,\"obj\":\"label\",\"x\":8,\"y\":69,\"w\":35,\"h\":35,\"text\":\"\\uF020\",\"align\":1,\"text_font\":32,\"text_color\":\"black\"}\n{\"page\":1,\"id\":22,\"obj\":\"label\",\"x\":48,\"y\":79,\"w\":130,\"h\":30,\"text\":\"Front door light\",\"align\":0,\"text_font\":16,\"text_color\":\"black\"}\n{\"page\":1,\"id\":23,\"obj\":\"switch\",\"x\":177,\"y\":74,\"w\":50,\"h\":25,\"radius\":25,\"radius20\":15}\n\n{\"page\":1,\"id\":31,\"obj\":\"label\",\"x\":8,\"y\":103,\"w\":35,\"h\":35,\"text\":\"\\uF054\",\"align\":1,\"text_font\":32,\"text_color\":\"black\"}\n{\"page\":1,\"id\":32,\"obj\":\"label\",\"x\":48,\"y\":113,\"w\":130,\"h\":30,\"text\":\"Back yard lights\",\"align\":0,\"text_font\":16,\"text_color\":\"black\"}\n{\"page\":1,\"id\":33,\"obj\":\"switch\",\"x\":177,\"y\":110,\"w\":50,\"h\":25,\"radius\":25,\"radius20\":15}\n\n{\"page\":1,\"id\":41,\"obj\":\"label\",\"x\":8,\"y\":138,\"w\":35,\"h\":35,\"text\":\"\\uEA7A\",\"align\":1,\"text_font\":32,\"text_color\":\"black\"}\n{\"page\":1,\"id\":42,\"obj\":\"label\",\"x\":48,\"y\":148,\"w\":130,\"h\":30,\"text\":\"Trash service\",\"align\":0,\"text_font\":16,\"text_color\":\"black\"}\n{\"page\":1,\"id\":43,\"obj\":\"label\",\"x\":97,\"y\":148,\"w\":130,\"h\":30,\"text\":\"in 6 days\",\"align\":2,\"text_color\":\"black\"}\n\n{\"page\":1,\"id\":51,\"obj\":\"label\",\"x\":8,\"y\":173,\"w\":35,\"h\":35,\"text\":\"\\uF39D\",\"align\":1,\"text_font\":32,\"text_color\":\"black\"}\n{\"page\":1,\"id\":52,\"obj\":\"label\",\"x\":48,\"y\":183,\"w\":130,\"h\":30,\"text\":\"Selective trash\",\"align\":0,\"text_font\":16,\"text_color\":\"black\"}\n{\"page\":1,\"id\":53,\"obj\":\"label\",\"x\":97,\"y\":183,\"w\":130,\"h\":30,\"text\":\"in 10 days\",\"align\":2,\"text_color\":\"black\"}\n\n{\"page\":1,\"id\":61,\"obj\":\"label\",\"x\":8,\"y\":208,\"w\":35,\"h\":35,\"text\":\"\\uE32A\",\"align\":1,\"text_font\":32,\"text_color\":\"black\"}\n{\"page\":1,\"id\":62,\"obj\":\"label\",\"x\":48,\"y\":218,\"w\":130,\"h\":30,\"text\":\"Green energy active\",\"align\":0,\"text_font\":16,\"text_color\":\"black\"}\n{\"page\":1,\"id\":63,\"obj\":\"label\",\"x\":97,\"y\":218,\"w\":130,\"h\":30,\"text\":\"Yes :)\",\"align\":2,\"text_color\":\"black\"}\n\n{\"page\":1,\"id\":71,\"obj\":\"label\",\"x\":8,\"y\":243,\"w\":35,\"h\":35,\"text\":\"\\uE957\",\"align\":1,\"text_font\":32,\"text_color\":\"black\"}\n{\"page\":1,\"id\":72,\"obj\":\"label\",\"x\":48,\"y\":253,\"w\":130,\"h\":30,\"text\":\"Air quality\",\"align\":0,\"text_font\":16,\"text_color\":\"black\"}\n{\"page\":1,\"id\":73,\"obj\":\"label\",\"x\":97,\"y\":253,\"w\":130,\"h\":30,\"text\":\"OK (29.58 \u00b5g/m\u00b3)\",\"align\":2,\"text_color\":\"black\"}\n</code></pre> <p>Check out the pagination example to learn how to implement the bottom bar. Check out the clock and temperature example to learn how to implement values to the top. Check out the Lovelace cover example to learn how to bring life to the objects.  </p>"},{"location":"examples/offlinehandling/","title":"Handle offline state","text":"<p>openHASP can detect the state when the plate is disconnected from the network. With Group ID object property combined with batch processing, objects on the screen can act on locally connected devices without using the home automation system - letting you use only these devices when the network is down.</p>"},{"location":"examples/offlinehandling/#prerequisites","title":"Prerequisites","text":"<p>In the use case presented below, the following assumptions are made:</p> <ul> <li>you have a plate with 2 local relays (configured on output GPIOs as lights), each relay added to a different group (Group 1 and 2 respectively).</li> <li>you want to have 2 toggle buttons on the screen acting directly on these relays when the plate is not yet, or disconnected from the WiFi network. No page navigation is needed as no other objects related to the home automation services have to be displayed. The buttons have the <code>groupid</code> property set to 1 and 2 respectively.</li> </ul>"},{"location":"examples/offlinehandling/#configuration","title":"Configuration","text":"<p>In the plate's web UI keep the default <code>/pages.jsonl</code> as Startup Layout. This will load immediately after plate boot, before the plate is connected to the network. If your network is not available after boot, this page configuration will be on screen while the plate keeps connecting in the background.</p> <p><code>pages.jsonl</code> - loaded at boot, has only with objects related to local relays, and displays the hostname:</p> <pre><code>{\"page\":1,\"id\":1,\"obj\":\"btn\",\"x\":0,\"y\":0,\"w\":240,\"h\":30,\"text\":\"LIGHTS\",\"text_font\":16,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0,\"click\":0}\n{\"page\":1,\"id\":2,\"obj\":\"btn\",\"x\":10,\"y\":40,\"w\":220,\"h\":115,\"toggle\":true,\"text\":\"\\uE335\",\"text_font\":32,\"mode\":\"break\",\"align\":1,\"radius\":20,\"groupid\":1}\n{\"page\":1,\"id\":3,\"obj\":\"btn\",\"x\":10,\"y\":165,\"w\":220,\"h\":115,\"toggle\":true,\"text\":\"\\uE335\",\"text_font\":32,\"mode\":\"break\",\"align\":1,\"radius\":20,\"groupid\":2}\n{\"page\":1,\"id\":98,\"obj\":\"btn\",\"x\":0,\"y\":290,\"w\":240,\"h\":30,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0,\"click\":0}\n{\"page\":1,\"id\":99,\"obj\":\"label\",\"x\":0,\"y\":295,\"w\":240,\"align\":\"center\",\"text\": \"%hostname%\",\"text_color\":\"#FFFFFF\"}\n</code></pre> <p>You can use batch processing and create scripts which run when the plate connects to the WiFi network or loses connection from it.</p> <p><code>online.cmd</code> - batch script to run after connected to the WiFi network, it will clear the screen and load the pages with objects related to the home automation:</p> <pre><code>clearpage all\nrun /pages_online.jsonl\n</code></pre> <p><code>pages_online.jsonl</code> - to be loaded after connected to the WiFi network:</p> <p>Put in <code>pages_online.jsonl</code> the main configuration for the pages you'd like to use when the plate is connected to the network and the home automation system. See integrations examples corresponding to the home automation system you have.</p> <p>Note</p> <p>If you use Home Assistant and opt to store the <code>pages.jsonl</code> file on the server, which will be loaded on start of Home Assistant, it will also be reloaded on plate becoming online. Don't put <code>run /pages_online.jsonl</code> in the script and don't need <code>pages_online.jsonl</code> either on the plate.</p> <p><code>offline.cmd</code> - batch script to run when connection is lost from the WiFi network, it will clear the screen and load the page only with objects related to local relays:</p> <pre><code>clearpage all\nrun /pages_offline.jsonl\n</code></pre> <p><code>pages_offline.jsonl</code> - to be loaded after connection is lost to the WiFi network, has only with objects related to local relays:</p> <pre><code>{\"page\":1,\"id\":1,\"obj\":\"btn\",\"x\":0,\"y\":0,\"w\":240,\"h\":30,\"text\":\"LIGHTS\",\"text_font\":16,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0,\"click\":0}\n{\"page\":1,\"id\":2,\"obj\":\"btn\",\"x\":10,\"y\":40,\"w\":220,\"h\":115,\"toggle\":true,\"text\":\"\\uE335\",\"text_font\":32,\"mode\":\"break\",\"align\":1,\"radius\":20,\"groupid\":1}\n{\"page\":1,\"id\":3,\"obj\":\"btn\",\"x\":10,\"y\":165,\"w\":220,\"h\":115,\"toggle\":true,\"text\":\"\\uE335\",\"text_font\":32,\"mode\":\"break\",\"align\":1,\"radius\":20,\"groupid\":2}\n{\"page\":1,\"id\":99,\"obj\":\"btn\",\"x\":0,\"y\":290,\"w\":240,\"h\":30,\"text\":\"\\uE156\\uE5A9\",\"text_font\":16,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0,\"click\":0}\n</code></pre>"},{"location":"examples/offlinehandling/#testing","title":"Testing","text":"<ul> <li>Reboot the plate. First only the buttons related to local relays are shown, these act the relays. After the plate connects to the network, screen is cleared and home automation-related pages are loaded.</li> <li>Kill the WiFi network. Plate detects the disconnection from the network, thus screen is cleared and only the buttons related to local relays are shown, relays can be turned on and off.</li> <li>Restore the WiFi network. Plate reconnects to the network, screen is cleared and home automation-related pages are loaded back again.</li> </ul>"},{"location":"examples/pagination/","title":"Simple page navigation","text":"<p>Pagination can be executed locally using the <code>action</code> attribute of the objects. The <code>jsonl</code> lines below will setup 3 buttons to the bottom of a 240x320 screen which will navigate back and forth between the pages:</p> <pre><code>{\"page\":0,\"id\":1,\"obj\":\"btn\",\"action\":{\"down\": \"page prev\"},\"x\":0,\"y\":290,\"w\":79,\"h\":32,\"bg_color\":\"#2C3E50\",\"text\":\"\\uE141\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0,\"text_font\":24}\n{\"page\":0,\"id\":2,\"obj\":\"btn\",\"action\":{\"down\": \"page back\"},\"x\":80,\"y\":290,\"w\":80,\"h\":32,\"bg_color\":\"#2C3E50\",\"text\":\"\\uE2DC\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0,\"text_font\":24}\n{\"page\":0,\"id\":3,\"obj\":\"btn\",\"action\":{\"down\": \"page next\"},\"x\":161,\"y\":290,\"w\":79,\"h\":32,\"bg_color\":\"#2C3E50\",\"text\":\"\\uE142\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0,\"text_font\":24}\n</code></pre> <p>The <code>action</code> can take any command.</p> <p>For example: <pre><code>{\"page\":0,\"id\":4,\"x\": 0, \"y\": 0, \"obj\": \"btn\", \"action\": {\"hold\": \"restart\"}, \"text\":\"\\uE456\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0,\"text_font\":24}\n</code></pre> Will restart the device on holding of the button object.</p> <p>Note: <code>action</code> has the format of <code>\"action\": {\"&lt;btn event&gt;\": \"&lt;command&gt;\"}</code></p> <p>*btn events: are <code>up</code>, <code>down</code>, <code>hold</code>, <code>release</code>.</p> <p>Pagination can be also acomplished by enabling swipe gesture on certain objects. The <code>jsonl</code> line below will setup an invisible rectangle overlay at the top of the screen with enabled <code>swipe</code>:</p> <pre><code>{\"page\":0,\"id\":6,\"obj\":\"obj\",\"swipe\":1,\"x\":0,\"y\":0,\"h\":30,\"w\":240,\"opacity\":0,\"comment\":\"swipe-area-at-top\"}\n</code></pre> <p>Tip</p> <p>You should put these lines to the end of your <code>pages.jsonl</code> config file, so that these objects remain at the top, and no others will be drawn on top of them.</p> <p>To limit page navigation only to page numbers between 1 and 6:</p> <pre><code>{\"page\":1,\"id\":0,\"prev\":6}\n{\"page\":6,\"id\":0,\"next\":1}\n</code></pre> <p>You can create a main menu on page 1 like this: <pre><code>{\"id\":1,\"obj\":\"btn\",\"action\": \"p2\",\"x\":10,\"y\":5,\"w\":200,\"h\":40,\"text\":\"Doors+Windows\",\"text_font\":32}\n{\"id\":2,\"obj\":\"btn\",\"action\": \"p3\",\"x\":10,\"y\":65,\"w\":200,\"h\":40,\"text\":\"Weather\",\"text_font\":32}\n{\"id\":3,\"obj\":\"btn\",\"action\": \"p4\",\"x\":10,\"y\":140,\"w\":200,\"h\":40,\"text\":\"Lights\",\"text_font\":32}\n</code></pre></p> <p>If you press on the Button Weather it jumps to page 3 (<code>\"action\": \"p3\"</code>)</p>"},{"location":"examples/surprise/","title":"Surprise","text":"<p>No screenshot available. To see the result, test the code!</p>"},{"location":"examples/surprise/#code","title":"Code","text":"<p>Strictly for geeks:</p> <pre><code>{\"page\":0,\"id\":60,\"obj\":\"obj\",\"x\":0,\"y\":0,\"w\":240,\"h\":320,\"radius\":0,\"hidden\":0,\"bg_grad_dir\":0,\"bg_color\":\"#0000bb\"}\n{\"page\":0,\"id\":61,\"obj\":\"btn\",\"x\":80,\"y\":50,\"w\":80,\"h\":20,\"text\":\"openHASP\",\"text_font\":16,\"bg_color\":\"gray\",\"bg_grad_color\":\"gray\",\"text_color\":\"white\",\"radius\":0,\"border_side\":0,\"click\":0}\n{\"page\":0,\"id\":62,\"obj\":\"label\",\"x\":1,\"y\":80,\"w\":240,\"h\":220,\"text\":\"A fatal exception has ocured in MCU.\\nThe application will be terminated.\\n\\n\\uE40A Touch the screen to terminate it.\\n\\uE40A Press CTRL+ALT+DEL again to\\n  restart your computer. You will lose\\n  any unsaved information.\\n\\n        Press any key to continue _\\n\",\"text_color\":\"white\"}\n</code></pre>"},{"location":"examples/widgets/","title":"Widgets Demo","text":""},{"location":"examples/widgets/#page-layout","title":"Page Layout","text":""},{"location":"examples/widgets/#code","title":"Code","text":"<p>This is a real-world example of a <code>pages.jsonl</code> file. Upload it to your plate's flash memory and restart the plate:</p> <pre><code>{\"page\":1,\"comment\":\"---------- Page 1 ----------\"}\n{\"id\":1,\"obj\":\"btn\",\"x\":10,\"y\":45,\"w\":220,\"h\":55,\"toggle\":true,\"text\":\"Touch me \\uE96B\",\"text_font\":32}\n{\"id\":2,\"obj\":\"checkbox\",\"x\":10,\"y\":100,\"w\":220,\"h\":55,\"text\":\" My Checkbox\"}\n{\"id\":3,\"obj\":\"label\",\"x\":10,\"y\":10,\"w\":220,\"h\":30,\"text\":\"\\uE75A My Label\",\"align\":1,\"padh\":50}\n{\"id\":4,\"obj\":\"switch\",\"x\":125,\"y\":220,\"w\":100,\"h\":55,\"radius\":40,\"radius20\":40}\n{\"id\":5,\"obj\":\"led\",\"x\":22,\"y\":220,\"w\":55,\"h\":55}\n{\"id\":6,\"obj\":\"dropdown\",\"x\":10,\"y\":160,\"w\":130,\"options\":\"\\uE40A Apples\\n\\uE40A Oranges\\n\\uE40A Bananas\"}\n{\"id\":7,\"obj\":\"spinner\",\"x\":160,\"y\":140,\"w\":70,\"h\":70}\n\n{\"page\":2,\"comment\":\"---------- Page 2 ----------\"}\n{\"id\":1,\"obj\":\"obj\",\"x\":5,\"y\":5,\"w\":230,\"h\":280,\"click\":0}\n{\"id\":11,\"obj\":\"gauge\",\"x\":10,\"y\":10,\"w\":150,\"h\":150,\"val\":75}\n{\"id\":12,\"obj\":\"linemeter\",\"x\":130,\"y\":120,\"w\":100,\"h\":100,\"val\":32}\n{\"id\":13,\"obj\":\"label\",\"x\":28,\"y\":65,\"w\":70,\"h\":70,\"parentid\":12,\"text\":\"\\uE12C OK\"}\n{\"id\":14,\"obj\":\"bar\",\"x\":20,\"y\":225,\"w\":200,\"h\":20, \"val\":75}\n{\"id\":15,\"obj\":\"slider\",\"x\":20,\"y\":254,\"w\":200,\"h\":20,\"val\":25}\n\n{\"comment\":\"---------- Page 3 ----------\"}\n{\"page\":3,\"id\":1,\"obj\":\"cpicker\",\"page\":3,\"x\":20,\"y\":10,\"w\":200,\"h\":200}\n{\"page\":3,\"id\":2,\"obj\":\"cpicker\",\"page\":3,\"x\":30,\"y\":230,\"w\":200,\"h\":30}\n\n{\"page\":4,\"comment\":\"---------- Page 4 ----------\"}\n{\"id\":1,\"obj\":\"tabview\",\"btn_pos\":1}\n{\"id\":10,\"obj\":\"tab\",\"parentid\":1,\"text\":\"Tab 1\"}\n{\"id\":20,\"obj\":\"tab\",\"parentid\":1,\"text\":\"Tab 2\"}\n{\"id\":30,\"obj\":\"tab\",\"parentid\":1,\"text\":\"Tab 3\"}\n{\"id\":11,\"obj\":\"roller\",\"x\":40,\"y\":10,\"w\":160,\"rows\":2,\"options\":\"2020\\n2021\\n2022\\n2023\\n2024\",\"parentid\":10}\n{\"id\":12,\"obj\":\"img\",\"src\":\"L:/logo-medium.png\",\"x\":45,\"y\":80,\"auto_size\":1,\"w\":150,\"parentid\":10}\n\n{\"comment\":\"---------- All Pages ----------\"}\n{\"page\":0,\"id\":7,\"obj\":\"btn\",\"action\":\"prev\",\"x\":0,\"y\":290,\"w\":79,\"h\":32,\"text\":\"\\uE141\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0,\"text_font\":32}\n{\"page\":0,\"id\":8,\"obj\":\"btn\",\"action\":\"back\",\"x\":80,\"y\":290,\"w\":80,\"h\":32,\"text\":\"\\uE2DC\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0,\"text_font\":24}\n{\"page\":0,\"id\":9,\"obj\":\"btn\",\"action\":\"next\",\"x\":161,\"y\":290,\"w\":79,\"h\":32,\"text\":\"\\uE142\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0,\"text_font\":32}\n\n{\"comment\":\"---------- Limit page prev/next between 1 and 4 ----------\"}\n{\"page\":1,\"id\":0,\"prev\":4}\n{\"page\":4,\"id\":0,\"next\":1}\n</code></pre> <p>Upload this logo to the plate to see the <code>img</code> object.</p> <p>Note</p> <p>Your MCU needs to have on-board PSram in order for the <code>img</code> object to be properly displayed.</p>"},{"location":"firmware/","title":"Getting Started","text":"<p>openHASP currently supports the ESP32 family of microcontrollers. It needs a compatible micro-controller with drivers supporting the attached display, touch controller, storage and network.</p> <p>Below is a list of recommended development boards and a TFT touchscreen to get you up-and-running in no time.</p> <p></p>"},{"location":"firmware/#recommended-boards","title":"Recommended Boards","text":"Basic Standard Capacity Dev. Board* D1 mini ESP32 TTGO T7 v1.5 Mini32 Lolin D32 Pro V2.0 MCU ESP32-WROOM ESP32-WROVER ESP32-WROVER CPU Freq. 240Mhz 240Mhz 240Mhz Ram 520Kb 520Kb 520Kb PSRam no yes yes Flash 4MB 4MB or 16MB 16MB Display ILI9341 SPI ILI9341 SPI ILI9341 SPI Touch XPT2046 SPI XPT2046 SPI XPT2046 SPI Network Wi-Fi Wi-Fi Wi-Fi Firmware Download Download Download <p>Note</p> <p>Due to the large number of possible hardware options a selection of 3 popular ESP development boards has been made for the precompiled binaries.</p> <p>For new projects we recommend ESP32-WROVER boards with PSram and minimal 8MB of flash.</p> <p>Tip</p> <p>Advanced users can build and compile custom hardware configurations using PlatformIO locally or online with Gitpod, however this is not currently supported.</p>"},{"location":"firmware/#recommended-display","title":"Recommended Display","text":""},{"location":"firmware/#lolin-tft-24","title":"Lolin TFT 2.4\"","text":"<p>ILI9341 SPI touchscreens with backlight dimming via PWM are quite cheap to get. An ILI9341 TFT display with SPI is required when using a pre-built binary. The touch controller needs to be the XPT2046 Resistive Touch driver.</p> <p>The Lolin TFT 2.4\" is plug-and-play with the 3 recommended ESP development boards. If you have another ESP or MCU, you can still use this display using jumper cables. You can also solder a row of headers at the bottom of the display to plug it into a breadboard. Therefor the Lolin TFT 2.4 Touch Shield is used as the development display of choice.</p>"},{"location":"firmware/#backlight-control","title":"Backlight Control","text":"<p>To use PWM dimming on the Lolin TFT 2.4\" you must connect the TFT-LED pin to either D1, D2 or D4. D1 is recommended for backlight control and configured by default.</p> <p></p> <p>Do not use D3 for backlight control because it is already in use for touch!</p> <p>It is not recommended to use D4 for backlight control because it is already in use for PSram on the ESP32-Wrover. The D1-mini has D4 connected to on-board LED and boot fails if pulled LOW</p>"},{"location":"firmware/#compatible-esp-boards","title":"Compatible ESP boards","text":"<p>The Lolin TFT 2.4\" header is plug-and-play compatible with these development boards, no need to use any jumper cables:</p> <p>ESP32:</p> <ul> <li>Wemos D1 Mini ESP32 (only solder the inner row of pin headers)</li> <li>TTGO T7 V1.5 MINI32 ESP32 (only solder the inner row of pin headers)</li> <li>LOLIN D32 Pro V2.0.0 using an additional TFT cable</li> </ul> <p>ESP32-S2:</p> <ul> <li>Wemos S2 Mini ESP32-S2 (only solder the outer row of pin headers)</li> </ul> <p>Note</p> <p>If you have a Lolin TFT 2.4\" Display and a compatible ESP development board, you have all the hardware that is needed. In that case you can skip ahead to the Firmware Installation.</p>"},{"location":"firmware/#alternative-spi-display","title":"Alternative SPI Display","text":"<p>Any common ILI9341 320x240 4-wire SPI touchscreen with XPT2046 Resistive Touch driver can be used, like:</p> <ul> <li>2.4\" SKU: MSP2402</li> <li>2.8\" SKU: MSP2807</li> <li>3.2\" SKU: MSP3218</li> </ul> <p>You will need to connect the GPIO pins using jumper wires.</p>"},{"location":"firmware/#ready-made-devices","title":"Ready-made devices","text":"<p>Some manufacturers offer IoT devices which are ready to go with openHASP:</p> <ul> <li>ESP32-Touchdown</li> <li>FreeTouchDeck</li> <li>Lanbon L8</li> </ul>"},{"location":"firmware/esp32/","title":"Flash ESP32","text":""},{"location":"firmware/esp32/#online-installation","title":"Online Installation","text":"<p>With Chrome or Edge you can flash the ESP32 directly from within the browser window using the openHASP Web installer. for releases, Dev/Beta use openHASP Web installer Nightly.  If you have another browser then use the offline flash tools below to download and flash the ESP32.</p>"},{"location":"firmware/esp32/#download-firmware","title":"Download Firmware","text":"<p>Download the latest openHASP binaries from the openHASP Web installer or GitHub Releases page. You need to pick the correct binary files for your device:</p> <ul> <li>Get the full binary file for flashing over the serial port: e.g. <code>d1-mini-esp32_ili9341_full_4MB_v0.7.0-rc11.bin</code></li> <li>Get the ota binary file for updating the firmware from the Web UI: e.g. <code>d1-mini-esp32_ili9341_ota_v0.7.0-rc11.bin</code></li> </ul> <p>Note</p> <p>You can also download the nightly openHASP development .zip files from the Actions tab on Github. Select one of the latest \"workflows\" and scroll down to find zip files. You need to be logged in to download the firmware files.</p>"},{"location":"firmware/esp32/#flash-esp32_1","title":"Flash ESP32","text":"<p>Important</p> <p>When flashing openHASP onto the ESP32 for the first time, you need to flash it over serial using the full firmware binary file. You need to write the full binary to the ESP32 flash chip at address <code>0x0</code>.</p> <p>The full binary also contains a bootloader and partition scheme needed to properly boot the ESP32.</p> <p>Before starting the flash process you have to put the ESP into flash mode:</p> <ol> <li>Connect <code>GPIO0</code> to <code>GND</code> before booting the device</li> <li>Power-on or reset the ESP32 while <code>GPIO0</code> is connected to <code>GND</code></li> <li>Start the flash process</li> </ol> <p>The actual procedure to flash the ESP32 depends on the tool used. Click on the tab below that matches your flash tool.</p> <p>Note</p> <p>ESPHome Flasher cannot flash the openHASP binary. Use one of the other tools below instead.</p> ESPtool.py Tasmota-PyFlasher ESP Flash Tools  <pre><code>esptool.py --port COM1 erase_flash\nesptool.py --port COM1 --baud 921600 write_flash 0x0 d1-mini-esp32_ili9341_full_4MB_&lt;version&gt;.bin\n</code></pre> <p>Change <code>COM1</code> to the correct port on your computer. If you get an error at the end of the flash procedure, you can try with a lower the baudrate eg. 460800.</p> <p>Tasmota-PyFlasher is a simple GUI tool for flashing ESP32 firmware without any installation.</p> <p></p> <p>Change <code>COM7</code> to the correct port on your computer.</p> <p>Espressif provides their own Flash Download Tools for Windows.</p> <p></p> <p>Change <code>COM90</code> to the correct port on your computer.</p>"},{"location":"firmware/faq/","title":"Frequently Asked Questions","text":""},{"location":"firmware/faq/#what-is-the-difference-between-openhasp-and-haspone","title":"What is the difference between openHASP and HASPone","text":"<p>HASPone uses a d1-mini ESP8266 connected to a Nextion/TJC smart display via the serial port. HASPone is the go-to firmware for using a Nextion/TJC screen in your Home Automation setup.</p> <p>openHASP does not support Nextion/TJC displays because it needs to be able to drive the display directly. It was created specifically to eliminate the proprietary hardware and take control of the screen.</p> <p>So openHASP is a hard fork of the original HASwitchPlate project to run on open hardware.</p>"},{"location":"firmware/faq/#the-display-stays-white","title":"The display stays white","text":"<p>The good news is the backlight is working, but a white screen is typical of a problem with the pin assignment (software config) or wiring (hardware):</p> <ol> <li> <p>Check the serial log when the plate boots and look for the <code>TFT</code> pin assignments.     The configured GPIOs must match the connections on the display.</p> </li> <li> <p>If the pin configuration is OK then the next step is checking the connection from the ESP to the display:</p> <ul> <li>Check the solder connections or jumper wires for bad connections or shorts</li> <li>Test with a multi-meter if there is a good connection from the ESP pins to the display pins</li> <li>Try disconnecting the wires from the touch device and only test the display first</li> </ul> </li> </ol>"},{"location":"firmware/faq/#error-the-firmware-binary-is-invalid-magic-byteff-should-be-e9","title":"Error: The firmware binary is invalid (magic byte=FF, should be E9)","text":"<p>ESPhome-Flasher does not recognize the openHASP full binary firmware correctly. It expects the firmware to be written to address <code>0x10000</code> and will throw a \"magic byte error\".</p> <p>The openHASP full binary is meant to be flashed to address <code>0x0</code> instead. Use ESPtool, Flash Download Tools or Tasmota-PyFlasher.</p>"},{"location":"firmware/faq/#other-question","title":"Other question","text":"<p>For support using openHASP please find us on Github, Discord or Home Assistant:</p> <p> Github Discussions  Discord Chat  Home Assistant Forum</p>"},{"location":"firmware/firmware-update/","title":"Firmware Update","text":"<p>Warning</p> <p>The partition layout of openHASP 0.7.0 has changed! Follow the Serial Update procedure if you are running v0.6.x.</p>"},{"location":"firmware/firmware-update/#over-the-air","title":"Over-The-Air","text":"<p>When openHASP 0.7.x is already running on the device you can upgrade the firmware from the Web UI. For Over-The-Air updates you need to use the ota binary files.</p>"},{"location":"firmware/firmware-update/#http-upload","title":"HTTP Upload","text":"<p>Click 'Browse' to select the ota file from your computer and click 'Update Firmware'. The 'Target' should be 'Firmware'.</p>"},{"location":"firmware/firmware-update/#http-update","title":"HTTP Update","text":"<p>You can also enter the ota URL to download new firmware from a webserver on your network or from the internet. Both <code>http</code> and <code>https</code> links are supported but using <code>https</code> is recommended for additinal security.</p> <p>Some content providers -like Github- redirect links to a server which is closest to you. For safety reasons openHASP will not follow these redirect headers by default. This behaviour can be changed by setting 'Follow Redirects' to either 'Strict' or 'Always':</p> <ul> <li>Strict adheres to RFC2616 and only follows redirects using <code>GET</code> or <code>HEAD</code> methods</li> <li>Always will follow all redirects regardless of a used method, which is less secure</li> </ul> <p>Note</p> <p>You can also trigger an upgrade using the <code>update</code> command from the Serial console, telnet or MQTT.</p>"},{"location":"firmware/firmware-update/#arduino-ota","title":"Arduino OTA","text":"<p>When you are developing locally it can be useful to update a plate Over-The-Air using Arduino OTA. The Arduino OTA service is not enabled in the official releases.</p> <p>For this option to work, the firmware has to be compiled with <code>HASP_USE_ARDUINOOTA=1</code> enabled in <code>include/user_config_override.h</code>. Then update the <code>platformio_override.ini</code> with the IP address instead of a serial port:</p> <pre><code>[env:lanbon_l8]\n; upload_port = COM3       ; Disable serial upload\n; monitor_port = COM3      ; Disable serial upload\nupload_protocol = espota   ; Use Arduino OTA to flash the firmware over-the-air\nupload_port = 192.168.7.89 ; Specify the IP of the ESP\nupload_flags =\n    --auth=haspadmin       ; optional OTA password, none by default\n    --port=3232            ; optional remote port on the ESP, 3232 by default\n    --host_port=45678      ; optional local port for access through the firewall\n</code></pre>"},{"location":"firmware/firmware-update/#serial-update","title":"Serial Update","text":"<p>Warning</p> <ul> <li>Devices coming from 0.6.x with 4MB flash will be reformatted and loose all data!!!</li> <li>Devices with 8MB flash or more should retain the filesystem and user configuration.</li> </ul> <p>It is important to first make a full backup of the device:</p> <ul> <li>Download the files from the filesystem to your PC.</li> <li>Create a full backup of the flash chip using esptool.py</li> </ul> <p>Flash a full binary file onto the ESP32. The procedure is the same as the initial installation. Do not erase the flash first in this situation because that will destroy all files and settings!</p>"},{"location":"firmware/license/","title":"License","text":""},{"location":"firmware/license/#mit-license","title":"MIT License","text":"<p>openHASP is Copyright\u00a9 2019-2023 fvanroie, openhasp.com and contributors</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"firmware/license/#components","title":"Components","text":"<p>openHASP is building upon the existing work of the following open source developers:</p>"},{"location":"firmware/license/#core","title":"Core","text":"<ul> <li> <p>HASwitchPlate, the original Arduino project,   Copyright\u00a9 2019 Allen Derusha.   HASwitchPlate is distributed under the terms of the MIT License.</p> </li> <li> <p>LVGL,   Copyright\u00a9 2021 LVGL Kft   LVGL is distributed under the terms of the MIT License.</p> </li> <li> <p>ArduinoJson,   Copyright\u00a9 2014-2021 Benoit BLANCHON   MIT License.</p> </li> </ul>"},{"location":"firmware/license/#mcu","title":"MCU","text":"<ul> <li> <p>LovyanGFX,   Copyright\u00a9 2020 lovyan03 (https://github.com/lovyan03) All rights reserved.   LovyanGFX is distributed under the terms of the FreeBSD License</p> </li> <li> <p>TFT_eSPI,   Copyright\u00a9 2020 Bodmer (https://github.com/Bodmer) All rights reserved.   TFT_eSPI is distributed under the terms of the FreeBSD License</p> </li> <li> <p>Adafruit_GFX library,   Copyright\u00a9 2012 Adafruit Industries All rights reserved.   Adafruit_GFX is distributed under the terms of the BSD License</p> </li> <li> <p>PubSubClient   Copyright\u00a9 2008-2020 Nicholas O'Leary   MIT License.</p> </li> <li> <p>Logging engine is based on ArduinoLog,   Copyright\u00a9 2017,2018 Thijs Elenbaas, MrRobot62, rahuldeo2047, NOX73, dhylands, Josha blemasle, mfalkvidd   with modifications by fvanroie, netwize.be.   ArduinoLog is distributed under the terms of the MIT License.</p> </li> <li> <p>QR Code generator   Copyright\u00a9 Project Nayuki   MIT License.</p> </li> <li> <p>AceButton   Copyright\u00a9 2018 Brian T. Park   MIT License.</p> </li> <li> <p>ArduinoStreamUtils   Copyright\u00a9 2019 Benoit BLANCHON   MIT License.</p> </li> </ul>"},{"location":"firmware/license/#native-applications","title":"Native Applications","text":"<ul> <li> <p>paho.mqtt.c client library   Copyright\u00a9 Eclipse Foundation   Paho is distributed under the terms of the Eclipse Public License v2.0</p> </li> <li> <p>Simple DirectMedia Layer library   Copyright\u00a9 1997-2021 Sam Lantinga slouken@libsdl.org   SDL 2.0 and newer are available under the zlib license</p> </li> </ul>"},{"location":"firmware/license/#native-windows-application","title":"Native Windows Application","text":"<ul> <li>mingw-w64 GCC for Windows 64 &amp; 32 bits   Copyright\u00a9 2009 - 2013 by the mingw-w64 project   Mingw-w64 is free software and permissively-licensed. The details are located in the sources themselves. </li> </ul>"},{"location":"firmware/license/#website","title":"Website","text":"<ul> <li>Built with Material for MkDocs   Copyright \u00a9 2016-2021 Martin Donath   MIT License.</li> </ul>"},{"location":"firmware/license/#assets","title":"Assets","text":"<ul> <li> <p>Built-in font unscii (8pt)   Copyright\u00a9 viznut.   A public domain bitmapped Unicode font </p> </li> <li> <p>Built-in fonts use rasterized glyphs from the Roboto Consensed font   Copyright\u00a9 2011 Google Inc. All Rights Reserved.   Roboto Consensed is licensed under the Apache License, Version 2.0.</p> </li> <li> <p>The built-in fonts, bootscreen, web UI and website all use the MaterialDesign Icons font,   MaterialDesign Icons are licensed under the Apache License, Version 2.0.</p> </li> <li> <p>The website incorporates Font Awesome,   Copyright\u00a9 2017 Dave Gandy.   Font Awesome is distributed under the terms of the SIL OFL 1.1    and MIT License.</p> </li> </ul>"},{"location":"firmware/wifi-setup/","title":"Wi-Fi Setup","text":"<p>At first boot, when no Wi-Fi setup is found, the device will create an initial Access Point for configuring the device. If the touchscreen is properly connected it will display a QR code, along with a temporary SSID and password, to connect to the device.</p> <p> </p> <p>Advanced Users</p> <p>To skip this step, Wi-Fi credentials can be saved into the .bin file when you compile the firmware yourself using customization. </p> <p>Either use the touchscreen interface or connect via a web browser to setup the credentials for your local Wi-Fi access point:</p>"},{"location":"firmware/wifi-setup/#using-touchscreen","title":"Using Touchscreen","text":"<ol> <li>Tap on the screen to start a Touch Calibration sequence:</li> <li>Precisely touch the 4 corners as indicated</li> <li>Use the on-screen keyboard to enter your local SSID and password</li> <li>Tap on the Checkmark button in the lower righthand corner to save the settings</li> </ol> <p>The device will validate the entered credentials and reboot if they are correct.</p>"},{"location":"firmware/wifi-setup/#using-wi-fi-access-point","title":"Using Wi-Fi Access-Point","text":"<p>Connect to the temporary Access Point by scanning the QR on the display, if available. Or Check the serial log for the SSID and password to connect.</p> <ul> <li>Once connected, your browser should automatically connect to <code>http://192.168.4.1</code> (captive portal address)</li> <li>Enter your local SSID and password for joining the device to your wireless network</li> <li>Click Save Settings</li> <li>The device will automatically reboot and connect to your wireless LAN</li> </ul>"},{"location":"firmware/wifi-setup/#using-command-line","title":"Using Command line","text":"<p>You can also directly configure the Wi-Fi settings via the serial console:</p> <pre><code>ssid myAccessPointName\npass myWifiPassword\nreboot\n</code></pre>"},{"location":"firmware/compiling/custom/","title":"Custom Code","text":"<p>To add your own custom code in the <code>src/custom</code> directory, you need to enable <code>#define HASP_USE_CUSTOM 1</code> in your <code>include\\user_config_override.h</code>.</p> <p>You can start adding code by copying the template files as <code>my_custom.h</code> and <code>my_custom.cpp</code>. This will add the <code>custom\\my_custom.h</code> header to openHASP compilation and call the defined functions from the main loop.</p>"},{"location":"firmware/compiling/custom/#available-hooks","title":"Available Hooks","text":"<p>Create a file <code>src/my_custom.h</code> that defines all these custom hooks:</p> src/my_custom.h<pre><code>#ifndef HASP_CUSTOM_H\n#define HASP_CUSTOM_H\n#if defined(HASP_USE_CUSTOM)\n\n#include \"hasplib.h\"\n\nvoid custom_setup();\nvoid custom_loop();\nvoid custom_every_second();\nvoid custom_every_5seconds();\nbool custom_pin_in_use(uint8_t pin);\nvoid custom_get_sensors(JsonDocument&amp; doc);\nvoid custom_topic_payload(const char* topic, const char* payload, uint8_t source);\nvoid custom_state_subtopic(const char* subtopic, const char* payload);\n\n#endif // HASP_USE_CUSTOM\n#endif // HASP_CUSTOM_H\n</code></pre> <p>The <code>custom_setup()</code> function is called at boot. Use it to initialize variables, load libraries, configure GPIOs or sensors.</p> <p>The <code>custom_loop()</code> function is called every itteration of the main loop, much like the Arduino <code>loop()</code> function. It is very important to make the execution of this function very efficient without using any blocking code or <code>delay()</code>. Otherwise it will have an impact on the UI responsiveness and/or other time-sensitive code.</p> <p><code>custom_every_second()</code> and <code>custom_every_5seconds()</code> functions are called every second and every 5 seconds respectively. You can use these to execute non-time-critical code.</p> <p>The function <code>custom_pin_in_use(pin)</code> is used to indicate that a pin is in use. Return <code>true</code> if the pin used by your custom code.</p> <p>Use <code>custom_get_sensors(doc)</code> to add a sensor key and value to the periodic <code>sensor</code> MQTT messages.  The function is called every 30 seconds by default, but the teleperiod interval can be changed by the user. The <code>doc</code> variable is passed so you can add your JSON object too it. (see below)</p> <p>With <code>custom_topic_payload(topic, payload, source)</code> you can receive custom topic &amp; payload messages. You can use the value of the topic and payload variables to set LVGL attributes or perform custom actions. <code>source</code> indicates the module from wich the command is received. (<code>TAG_MQTT</code>, <code>TAG_CONS</code>, <code>TAG_TELN</code>, <code>TAG_HTTP</code>, ...)</p> <p>With <code>custom_state_subtopic(subtopic, payload)</code> you get a copy of all status messages sent out. Examples:</p> <ul> <li>going to page 1: <code>subtopic</code> = <code>\"page\"</code> and <code>payload</code> = <code>\"1\"</code></li> <li>click on a control: <code>subtopic</code> = \"p2b15\" and <code>payload</code> = <code>{\"event\":\"up\",\"val\":0}</code></li> </ul>"},{"location":"firmware/compiling/custom/#customize-functions","title":"Customize functions","text":"<p>In <code>src/my_custom.cpp</code> you add the code to execute for each of the functions declared above.</p>"},{"location":"firmware/compiling/custom/#setup","title":"Setup","text":"<p>We keep a variable for tracking the last blink time.</p> my_custom.h<pre><code>#include \"hasplib.h\"\n\n#if defined(HASP_USE_CUSTOM) &amp;&amp; true // &lt;-- set this to true in your code\n\n#include \"hasp_debug.h\"\n#include \"custom/my_custom.h\"\n\nunsigned long last_blink = 0;\nbool blink_state = LOW;\n\nvoid custom_setup()\n{\n    // Initialization code here\n    last_blink = millis();\n    pinMode(LED_BUILTIN, OUTPUT);\n    randomSeed(millis());\n}\n</code></pre>"},{"location":"firmware/compiling/custom/#loops","title":"Loops","text":"<p>Next, check the time past since the last blink. This should execute very fast, do not use <code>delay()</code> or any blocking code. <pre><code>void custom_loop()\n{\n    // Non-blocking code here!\n    if(blink_speed &amp;&amp; (millis() - last_blink &gt; blink_speed)) {\n        if (blink_state==LOW) {\n            blink_state = HIGH;\n        } else {\n            blink_state = LOW;\n        }\n        digitalWrite(LED_BUILTIN, blink_state);\n        last_blink = millis();\n    }\n}\n</code></pre></p> <p>We don't execute code at fixed intervals, so leave these functions blank: <pre><code>void custom_every_second()\n{\n    // Unused\n}\n\nvoid custom_every_5seconds()\n{\n    // Unused\n}\n</code></pre></p>"},{"location":"firmware/compiling/custom/#declare-pins","title":"Declare pins","text":"<p>We need to tell the firmware which custom pins we have used: <pre><code>bool custom_pin_in_use(uint8_t pin)\n{\n    switch(pin) {\n        case LED_BUILTIN:  // Custom LED pin\n        case 6:  // Custom Input pin\n            return true;\n        default:\n            return false;\n    }\n}\n</code></pre></p>"},{"location":"firmware/compiling/custom/#report-sensors","title":"Report Sensors","text":"<p>Here we can add data to the <code>sensors</code> MQTT messages that are sent periodically. You can add a simple Key-Value pair or a more complex JSON object if needed.</p> <pre><code>void custom_get_sensors(JsonDocument&amp; doc)\n{\n    JsonObject sensor = doc.createNestedObject(F(\"Temperature\"));  // Add Key\n    sensor[F(\"Temperature\")] = random(256);                        // Set Value\n}\n</code></pre>"},{"location":"firmware/compiling/custom/#debug-output","title":"Debug Output","text":"<p>By including <code>#include \"hasp_debug.h\"</code> we can also utilize <code>LOG_*()</code> functions to print debug output to the console:</p> <ul> <li>LOG_VERBOSE(TAG_CUSTOM, message [, args])</li> <li>LOG_NOTICE(TAG_CUSTOM, message [, args])</li> <li>LOG_TRACE(TAG_CUSTOM, message [, args])</li> <li>LOG_ERROR(TAG_CUSTOM, message [, args])</li> </ul>"},{"location":"firmware/compiling/custom/#mqtt-output","title":"MQTT Output","text":"<p>Use <code>dispatch_state_subtopic(topic, payload)</code> to send an MQTT message and payload to <code>hasp/&lt;plate&gt;/state/topic</code>.</p> <pre><code>void custom_every_5seconds()\n{\n    LOG_VERBOSE(TAG_CUSTOM, \"%d seconds have passsed...\", 5);\n    dispatch_state_subtopic(\"my_topic\", \"{\\\"test\\\":123}\");\n}\n</code></pre>"},{"location":"firmware/compiling/customize/","title":"Customization","text":"<p>The file <code>include\\user_config_override-template.h</code> lists the options you have to customize your build. Settings applied here will act as factory defaults in the firmware. Check the file for the self-explanatory options. Some of the available possibilities are:</p> <ul> <li>WiFi Settings</li> <li>MQTT Settings</li> <li>OTA Server Settings</li> <li>Syslog Settings</li> <li>Timezone</li> <li>Interface Language</li> <li>Web interface coloring</li> <li>Built-in fonts choice</li> <li>GPIO Templates</li> <li>Services startup</li> <li>Memory handling</li> </ul> <p>Copy it to <code>include\\user_config_override.h</code> and change the settins per your needs.  Uncomment <code>-DUSE_CONFIG_OVERRIDE</code> in <code>platformio_override.ini</code> to ensure that the config overrides are taken into account during the compilation process.</p>"},{"location":"firmware/compiling/customize/#custom-code","title":"Custom code","text":"<p>It is possible to include your own custom code in the <code>src/custom</code> directory. If you enable <code>#define HASP_USE_CUSTOM 1</code> in your <code>include\\user_config_override.h</code>, you can start adding code by copying the template files as <code>my_custom.h</code> and <code>my_custom.cpp</code>. This will add the <code>custom\\my_custom.h</code> header to openHASP compilation and call the defined functions from the main loop.</p>"},{"location":"firmware/compiling/gitpod/","title":"Compiling online with Gitpod","text":"<p>Even though openHASP is available in several pre-compiled firmware variants, sometimes the ready-to-flash binaries aren't enough. If you need to customize some features, or simply change some parameters, then you need to compile a firmware binary yourself. If you don't want to install an IDE (Integrated Development Environment) like PlatformIO or ATOM on your computer, compiling your own firmware is a breeze using Gitpod.</p> <p>Gitpod is a web browser based online IDE. All you need to use it is to link your GitHub account (or make a new one here). Gitpod will take care of all the necessary software package dependencies for you.</p>"},{"location":"firmware/compiling/gitpod/#load-openhasp-project-in-gitpod","title":"Load openHASP project in Gitpod","text":"<p>Click on one of the links below, and that will automatically load Gitpod with openHASP prepared for creating your custom build:</p> <ul> <li>Release (for example 0.6.2): https://gitpod.io#https://github.com/HASwitchPlate/openHASP/tree/0.6.2</li> <li>Development (main branch): https://gitpod.io#https://github.com/HASwitchPlate/openHASP</li> </ul> <p>After Gitpod loads the project, you will be greeted by the main window.</p> <p> </p>"},{"location":"firmware/compiling/gitpod/#choose-the-version-you-need","title":"Choose the version you need","text":"<p>A copy of <code>platformio_override-template.ini</code> to <code>platformio_override.ini</code> will be readily prepared for you. Click <code>platformio_override.ini</code> to open it, and to select your firmware flavour for your hardware uncomment in the <code>extra_configs</code> section the platform of your hadware, for example for ESP32:</p> <pre><code>[platformio]\nextra_configs =\n    ; Uncomment or edit the lines to show more User Setups in the PIO sidebar\n    ; user_setups/darwin_sdl/*.ini\n    user_setups/esp32/*.ini\n    ; user_setups/esp32s2/*.ini\n    ; user_setups/linux_sdl/*.ini\n    ; user_setups/stm32f4xx/*.ini\n    ; user_setups/win32/*.ini\n</code></pre> <p>If you use customization, remove the comment from the line <code>-DUSE_CONFIG_OVERRIDE</code> and make sure you have your own <code>user_config_override.h</code> in place:  (please consider before saving your wifi and mqtt credentials to an online cloud)</p> <pre><code>[override]\n; -- Hasp config options --------------------------------------\nbuild_flags =\n; -- Uncomment the next line to use the file include/user_config_override.h settings\n    -DUSE_CONFIG_OVERRIDE\n</code></pre> <p>And finally select your supported hardware from the <code>extra_default_envs</code> section by uncommenting the corresponding line. For example to build firmware for Lanbon L8, you should remove that comment only:</p> <p><pre><code>extra_default_envs =\n    ; Comment unneeded environments or create extra\n    ; arduitouch-esp32_ili9341\n    ; d1-mini-esp32_ili9341\n    ; d132-unoshield\n    ; esp12e-st7735\n    ; esp32dev-mrb3511\n    ; esp32dev-ili9488\n    lanbon_l8\n    ; lolin-d32-pro_ili9341\n    ; my_custom_build\n    ; nodemcu32s-raspi\n    ; wt32-sc01\n    ; ttgo_esp32_poe-ili9341\n</code></pre> Save the file by pressing <code>Ctrl + S</code> or selecting <code>Save</code> from the top-left menu.</p> <p>Note</p> <p>You can of course uncomment multiple lines, the system will make builds for each. Note that these environments rely on the platforms above so double-check that your hardware has the correct platform enabled in the <code>extra_configs</code> section!</p> <p>Warning</p> <p>If you build from a development branch, you may not get the expected results, as it may contain undocumented or buggy features. Also, most likely a development branch has verbose logging enabled by default which adversely affects performance (for example setting <code>HASP_LOG_LEVEL</code> back to <code>LOG_LEVEL_TRACE</code> may bring speed to normal, otherwise the plate may become laggy).</p>"},{"location":"firmware/compiling/gitpod/#build-the-firmware","title":"Build the firmware","text":"<p>To generate your customized firmware build, type <code>platformio run</code> in the command line area at the bottom, and press Enter key.</p>"},{"location":"firmware/compiling/gitpod/#download-the-build","title":"Download the build","text":"<p>After the build successfully finishes, you will be able to find the downloadable binaries on the left panel, in the <code>build_output\\firmware</code> folder.</p>"},{"location":"firmware/compiling/local/","title":"Compiling locally","text":"<p>Even though openHASP is available in several pre-compiled firmware variants, sometimes the ready-to-flash binaries aren't enough. If you need to customize some features, or simply change some parameters, then you need to compile a firmware binary yourself. The guide below will describe how to make your own build from source on your local PC.  </p>"},{"location":"firmware/compiling/local/#install-visual-studio-code","title":"Install Visual Studio Code","text":"<ul> <li>on Linux</li> <li>on MacOS</li> <li>on Windows</li> </ul> <p>Additional packages on Linux: <pre><code>sudo apt update\nsudo apt install git python3-venv\n</code></pre></p>"},{"location":"firmware/compiling/local/#clone-openhasp","title":"Clone openHASP","text":"<p>Make sure to add the <code>--recursive</code> parameter when cloning the project from GitHub. Otherwise git will not download the required submodules in the <code>/lib</code> subdirectory. To clone the current development version (main branch):</p> <pre><code>git clone --recursive https://github.com/HASwitchPlate/openHASP\n</code></pre> <p>If you already cloned openHASP without the <code>--recursive</code> parameter, you can fetch the submodules separately using:</p> <pre><code>git submodule update --init --recursive\n</code></pre> <p>To switch to a different branch (for example 0.7.0-rc11 release) use:</p> <pre><code>git clone --recursive https://github.com/HASwitchPlate/openHASP\ncd openHASP\ngit checkout 0.7.0-rc11\ngit submodule update --init --recursive\n</code></pre>"},{"location":"firmware/compiling/local/#open-in-platformio","title":"Open in PlatformIO","text":"<p>Open the project folder in Visual Studio Code. You will receive a popup to install PlatformIO IDE if it is not already installed. This will automatically install all PlatformIO dependencies and the MCU compiler frameworks needed.</p> <p></p> <p>Restart Visual Studio Code when the PIO installation completes.</p>"},{"location":"firmware/compiling/local/#create-a-configuration","title":"Create a configuration","text":"<p>Copy <code>platformio_override-template.ini</code> to <code>platformio_override.ini</code> and uncomment the platforms for <code>esp32</code>or <code>esp32s2</code>:</p> <pre><code>[platformio]\nextra_configs =\n    ; Uncomment or edit the lines to show more User Setups in the PIO sidebar\n    ; user_setups/darwin_sdl/*.ini\n    user_setups/esp32/*.ini\n    user_setups/esp32s2/*.ini\n    ; user_setups/linux_sdl/*.ini\n    ; user_setups/stm32f4xx/*.ini\n    ; user_setups/win32/*.ini\n</code></pre> <p>If you use customization, remove the comment from the line <code>-DUSE_CONFIG_OVERRIDE</code>:</p> <pre><code>[override]\n; -- Hasp config options --------------------------------------\nbuild_flags =\n; -- Uncomment the next line to use the file include/user_config_override.h settings\n    -DUSE_CONFIG_OVERRIDE\n</code></pre> <p>Then Click on the \"Refresh Project tasks\" icon in PlatformIO to list all the configured environments.</p>"},{"location":"firmware/compiling/local/#compiling","title":"Compiling","text":""},{"location":"firmware/compiling/local/#mcu-environments","title":"MCU Environments","text":"<p>You can now run \"Build\" or \"Build All\" in PlatformIO to compile (all) the firmware.</p>"},{"location":"firmware/compiling/local/#native-linux-build","title":"Native Linux build","text":"<p>For native linux_sdl builds, you also need: <pre><code>sudo apt update\nsudo apt install build-essential libsdl2-dev\n</code></pre></p>"},{"location":"firmware/compiling/local/#native-macos-build","title":"Native MacOS build","text":"<p>For native darwin_sdl builds, you also need Homebrew:</p> <pre><code>brew install gcc sdl2\n</code></pre>"},{"location":"firmware/compiling/local/#native-windows-build","title":"Native Windows build","text":"<p>For native windows_sdl builds, you also need MingW:</p> <p>Use MSYS2</p> <pre><code>pacman -S mingw-w64-x86_64-gcc mingw-w64-x86_64-SDL2\n</code></pre> <p>Add the path to your Mingw-w64 <code>bin</code> folder to the Windows PATH environment variable (usually <code>C:\\msys64\\mingw64\\bin</code>). See instruction, 4.</p>"},{"location":"firmware/compiling/memory/","title":"Memory handling","text":"<p>If you have high memory use by for example:</p> <ul> <li>large <code>pages.jsonl</code> file</li> <li>many large fonts</li> <li>large images</li> </ul> <p>.. you risk getting \"out of memory\" errors. </p>"},{"location":"firmware/compiling/memory/#memory-types-and-how-to-see-if-there-are-potential-problems","title":"Memory types and how to see if there are potential problems","text":"<p>There are different memory pools inside openHASP:</p> <ul> <li>Device Memory (also called \"System Memory\"): general program use</li> <li>LVGL Memory: graphics</li> <li>PSRam: when available, used for some graphics functions</li> </ul> <p>By default, the first 2 types of memory share space in the device's internal SRAM, and the default size of the LVGL Memory is some \"sensible\" default value for your device. Example: SC01 Plus has 64kiB. The remainder of the SRAM is mostly used for the Device Memory.</p> <p>There are 3 major indicators than you can use to determine if you risk running out of memory:</p> <ul> <li>Free memory</li> <li>Fragmentation</li> <li>Largest free block</li> </ul> <p>See the <code>/info</code> web page for the first 2 indicators. The status MQTT message has <code>heapFree</code> and <code>heapFrag</code> for these 2 indicators of the Device Memory.</p> <p>The console logs show all 3 indicators of both Device Memory and LVGL Memory. If you see a log file that starts with <code>[21:52:01.007][29684/42548 30][ 9552/ 9736  2] MQTT PUB: ...</code>, it means:</p> <ul> <li>Time of log 21:52 etc (of course)</li> <li>Device Memory:<ul> <li>Largest continuous free block: 29.6kB</li> <li>Total free memory: 42.5kB</li> <li>Fragmentation: 32%</li> </ul> </li> <li>LVGL Memory:<ul> <li>Largest continuous free block: 9.5kB</li> <li>Total free memory: 9.7kB</li> <li>Fragmentation: 2%</li> </ul> </li> </ul> <p>In general,</p> <ul> <li>Device free memory must remain above 25-30kB.</li> <li>LVGL free memory must remain above 5kB, depending on you graphical needs.</li> <li>Fragmentation must be low. The higher it is, the higher the risk of problems.</li> </ul>"},{"location":"firmware/compiling/memory/#how-to-solve-memory-problems","title":"How to solve memory problems","text":"<p>In some cases, there are relatively simple solutions:</p> <ul> <li>Use device with enough RAM and with PSram.</li> <li>If you have large images, see the recommendations about <code>.bin</code> files.</li> <li>If you have many large fonts, standardize to a small list of different sizes.</li> </ul> <p>If this doesn't help, then you may need to adapt the default memory handling via changing settings in <code>include\\user_config_override.h</code>.</p> <p>Here are some options:</p> <ul> <li>increase LVGL memory: change <code>LV_MEM_SIZE</code>. Know that this will impact the available heap memory. Please keep an eye on the memory indicators and adapt according to your situation.</li> <li>use <code>LV_MEM_CUSTOM</code>. This will force both memory pools to use the Device's SRAM together, without separation between them. As a result,<ul> <li>the console log no longer shows the second memory section</li> <li>you may encounter other memory errors. Example: downloading a huge file from the device via the device's web interface may cause a crash of the network connectivity.</li> </ul> </li> <li> <p>adapt the memory management methods behind <code>LV_MEM_CUSTOM</code>. For low level information, see <code>include\\lv_conf_v7.h</code></p> <pre><code>#define LV_MEM_CUSTOM_ALLOC   malloc       /*Wrapper to malloc*/\n#define LV_MEM_CUSTOM_FREE    free         /*Wrapper to free*/\n</code></pre> <p>If you want to use PSram instead, change the define to <code>ps_malloc</code> if the device actually has PSram. Or use <code>hasp_malloc</code>, which will check if PSram is available first and uses it if it does. This is not fully tested. Use at your own risk, and be so kind as to inform us of your findings via github or, better, update this documentation.</p> </li> </ul>"},{"location":"firmware/configuration/debug/","title":"Debug Settings","text":"<p>openHASP logs valuable information during its operation to the serial port, telnet console or syslog server. Use these settings to configure the debug output.</p>"},{"location":"firmware/configuration/debug/#settings","title":"Settings","text":""},{"location":"firmware/configuration/debug/#serial-port","title":"Serial Port","text":"<p>Set the baudrate to use for the serial logging and console.</p>"},{"location":"firmware/configuration/debug/#telemetry-period","title":"Telemetry Period","text":"<p>This is the interval in seconds with which openHASP will send automatic statusupdate messages to the <code>state/statusupdate</code> topic.</p>"},{"location":"firmware/configuration/debug/#syslog-server","title":"Syslog Server","text":"<p>Specify the hostname or IP address of the syslog server.</p>"},{"location":"firmware/configuration/debug/#syslog-port","title":"Syslog Port","text":"<p>Specify the port of the syslog server.</p>"},{"location":"firmware/configuration/debug/#syslog-protocol","title":"Syslog Protocol","text":"<p>Select the protocol used by your syslog backend.</p> <p>Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.</p>"},{"location":"firmware/configuration/display/","title":"Display Settings","text":"<p>Configure the overal settings of the display driver.</p>"},{"location":"firmware/configuration/display/#settings","title":"Settings","text":""},{"location":"firmware/configuration/display/#short-idle","title":"Short Idle","text":"<p>When the display has not been touched for the Short Idle amount of seconds, an <code>idle = short</code> event will be sent out.</p>"},{"location":"firmware/configuration/display/#long-idle","title":"Long Idle","text":"<p>When the display has not been touched for Long + Short Idle amount of seconds, an <code>idle = long</code> event will be sent out.</p> <p>The Long Idle period begins to count after the Short Idle period.</p>"},{"location":"firmware/configuration/display/#orientation","title":"Orientation","text":"<p>Rotate the display by the set number of degrees and optionally mirror the display as well.</p>"},{"location":"firmware/configuration/display/#invert-colors","title":"Invert Colors","text":"<p>Enable color inversion of the display. This can be enabled if the colors on the display are wrong e.g. cyan objects is displayed in orange.</p>"},{"location":"firmware/configuration/display/#show-pointer","title":"Show Pointer","text":"<p>Enable this option to show a mouse pointer. This helps with checking if the touches are correctly detected. The pointer is hidden automatically when the display is idle.</p>"},{"location":"firmware/configuration/display/#backlight-pin","title":"Backlight Pin","text":"<p>Sets the GPIO pin which is used for PWM dimming of the backlight.</p>"},{"location":"firmware/configuration/display/#invert-backlight","title":"Invert Backlight","text":"<p>By default openHASP will set the backlight pin <code>HIGH</code> to turn on the backlight. For some devices, the backlight will turn on when the pin is <code>LOW</code> instead. Enable Invert Backlight to swap the on/off behavior.</p>"},{"location":"firmware/configuration/display/#actions","title":"Actions","text":""},{"location":"firmware/configuration/display/#calibrate","title":"Calibrate","text":"<p>Only available with XPT2046 resistive touchscreen controllers.</p> <p>Starts an on-screen calibration sequence.</p>"},{"location":"firmware/configuration/display/#run-anti-burn-in","title":"Run Anti Burn-in","text":"<p>Click this button to run the <code>antiburn</code> command, which will display white noise on the LCD for approximately 30 seconds. This can help to reduce ghosting of a static image on some displays. It also trains the pixels to show different colors which can prolong the lifespan of the display.</p> <p>Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.</p>"},{"location":"firmware/configuration/factory_reset/","title":"Factory Reset","text":"<p>You can remove all files and configuration settings with this button:</p>"},{"location":"firmware/configuration/factory_reset/#actions","title":"Actions","text":"<p>Click 'Reset All Settings' to erase the files on the internal flash, EEPROM and NVS user configurations.</p> <p>Warning</p> <p>There is no confirmation message. This operation can not be undone.</p>"},{"location":"firmware/configuration/factory_reset/#command-line","title":"Command Line","text":"<p>Use the <code>factoryreset</code> command to clear all settings and restore them the plate to the default configuration:</p> <pre><code>factoryreset\n</code></pre>"},{"location":"firmware/configuration/ftp/","title":"FTP Settings","text":"<p>Note: All FTP communication is unencrypted and setting credentials is only a simple security measure!</p> <p>The FTP server will only be started if a userand password have been configured. Anonymous access is not allowed for security reasons.</p> <p>Both active and passive modes are supported but you must limit the client to use only one transfer connection at a time.</p>"},{"location":"firmware/configuration/ftp/#settings","title":"Settings","text":""},{"location":"firmware/configuration/ftp/#username-and-password","title":"Username and Password","text":"<p>Enter the credentials required to access the FTP server.</p>"},{"location":"firmware/configuration/ftp/#port","title":"Port","text":"<p>Set the port for the FTP Server.</p>"},{"location":"firmware/configuration/ftp/#passive-port","title":"Passive Port","text":"<p>Set the data port to be used in passive mode.</p> <p>Click 'Save Settings' to save the changes. A restart of the FTP service is needed to apply the settings.</p>"},{"location":"firmware/configuration/ftp/#ftp-client-setup","title":"FTP Client Setup","text":"<p>Any FTP client should be able to connect to the FTP service on the plate. You must force the client to use only one connection at same time.</p>"},{"location":"firmware/configuration/ftp/#filezilla","title":"Filezilla","text":"<p>For example to use FileZilla as FTP client configure the site settings like this:</p> <p>First, you must go on Manage site ==&gt; New site and now set these parameters:</p>"},{"location":"firmware/configuration/ftp/#general-settings","title":"General Settings","text":"<ul> <li>Select protocol FTP - File Transfer Protocol</li> <li>Select Only use plain FTP (insecure)</li> <li>Set your login and password</li> </ul>"},{"location":"firmware/configuration/ftp/#transfer-settings","title":"Transfer Settings","text":"<ul> <li>Select Limit number of simultanious connections</li> <li>Set the Maximum number of connections to 1</li> </ul> <p>Now you can connect to your device and manage its files using drag and drop.</p>"},{"location":"firmware/configuration/gpio/","title":"GPIO Settings","text":"<p>You can attach external devices like buttons, switches, relays, lights or LEDs using the GPIO pins of the ESP. The Devices section of the documentation contains pin descriptions and ways to set them up for specific hardware configurations.</p> <p>When integrated with Home Assistant, the configured GPIOs will be added automatically during discovery as appropriate entities in the system.</p>"},{"location":"firmware/configuration/gpio/#gpio-overview","title":"GPIO Overview","text":""},{"location":"firmware/configuration/gpio/#input-pin","title":"Input Pin","text":""},{"location":"firmware/configuration/gpio/#pin","title":"Pin","text":"<p>Select the GPIO number of the input pin to use.</p> <p>Note</p> <p>Pins known to be in use will be hidden from this list of available pins. Check the documentation of your board to see which pins are free to be used as GPIO.</p>"},{"location":"firmware/configuration/gpio/#group","title":"Group","text":"<p>GPIOs and objects can be grouped together by specifying a <code>groupid</code>. The state of objects in the same group is altered by the value of this input. This allows for simple action-reaction scenarios without relying on a home automation system:</p> <ul> <li>Link a switch and relay together</li> <li>Link a push button and doorbell together</li> </ul> <p>The state of a digital input can only be <code>on</code> or <code>off</code> and will set all group members to either 100% or 0% of their maximum value.</p> <p>Note</p> <p>The grouping of multiple gpios and objects together is intended for simple actions only. More complex actions should be performed by a home automation system, without linking groupids together.</p> Example <code>jsonl</code> <p>To act on the relays directly from the switch objects on the screen, try this very simple pages.jsonl: <pre><code>{\"page\":1,\"id\":1,\"obj\":\"switch\",\"x\":30,\"y\":40,\"w\":180,\"h\":75,\"radius\":40,\"radius20\":40,\"groupid\":1}\n{\"page\":1,\"id\":2,\"obj\":\"switch\",\"x\":30,\"y\":122,\"w\":180,\"h\":75,\"radius\":40,\"radius20\":40,\"groupid\":2}\n{\"page\":1,\"id\":3,\"obj\":\"switch\",\"x\":30,\"y\":205,\"w\":180,\"h\":75,\"radius\":40,\"radius20\":40,\"groupid\":3}\n</code></pre> </p>"},{"location":"firmware/configuration/gpio/#default-state","title":"Default state","text":"<p>The state of the input when it is not being engaged: i.e. the switch, button or sensor is idle (not active):</p> <ul> <li>Normally Open: The default state interrupts the circuit </li> <li>Normally Closed: The default state completes the circuit </li> </ul>"},{"location":"firmware/configuration/gpio/#resistor","title":"Resistor","text":"<p>To avoid ghost events and RF interference each input should either have a pullup or pulldown resistor. This ensures the signal in the default state is always <code>HIGH</code> or <code>LOW</code> respectively.</p> <p>Most input pins have either an internal pullup or pulldown resistor that can be activated by the firmware. Check the documentation of your MCU whether the pin you want to use provides this functionality. If an internal pullup or pulldown resistor is not available on that pin you must add an external resistor and connect it either to <code>3.3V</code> or <code>GND</code>.</p> <ul> <li>Internal Pullup: The pin is pulled <code>HIGH</code> internally by the firmware </li> <li>Internal Pulldown: The pin is pulled <code>LOW</code> internally by the firmware</li> <li>External Pullup: The pin is pulled <code>HIGH</code> by an external resistor</li> <li>External Pulldown: The pin is pulled <code>LOW</code> by an external resistor</li> </ul>"},{"location":"firmware/configuration/gpio/#type","title":"Type","text":"<ul> <li>Button</li> </ul> <p>A button gpio sends events to topic <code>input#</code> where <code>#</code> is the pin number.</p> <p>GPIO buttons send out events while they occur. The possible events are:</p> <ul> <li><code>down</code>: Occurs when a button goes from depressed to pressed</li> <li><code>up</code>: The button was released within a short time i.e. a short click has occurred</li> <li><code>long</code>: A single LONG event is send when the button is still being pressed after the threshold time of 400ms</li> <li><code>release</code>: The button is released after being pressing for a LONG threshold time.</li> </ul> <p>The values of objects or gpios with the same groupid will be set to maximum when the button is being pressed and to minimum when the button is released.</p> <ul> <li>Switch</li> </ul> <p>A switch gpio sends events to <code>input#</code> where <code>#</code> is the groupnumber.</p> <p>GPIO Switches send out their value when toggled: {\"val\":\"0\"} or {\"val\":\"1\"}.</p> <p>The values of objects or gpios in the same group will be set to maximum when the switch is turned on and to minimum when the switch is turned off.</p> <p>Idle State</p> <p>The input pins do not affect the idle state of the device. Only interacting with the touchscreen automatically resets the idle state.</p> <p>If you want a GPIO pin to wakeup the device then you should monitor its mqtt topic and use the <code>idle</code> and <code>backlight</code> commands appropriately.</p>"},{"location":"firmware/configuration/gpio/#output-pin","title":"Output Pin","text":""},{"location":"firmware/configuration/gpio/#pin_1","title":"Pin","text":"<p>Select the GPIO number of the output pin to use.</p> <p>Note</p> <p>Pins known to be in use will be hidden from this list of available pins. Check the documentation of your board to see which pins are free to be used as GPIO.</p>"},{"location":"firmware/configuration/gpio/#group_1","title":"Group","text":"<p>The applied value is normalized and proportionate to the value of the input object, much like a percentage:</p> <ul> <li>Binary objects, like a switch, checkbox or toggle button only pass along 0% and 100% values.</li> <li>Range objects, like a slider, arc slider, roller or drop-down list pass along a value between 0-65535, depending on their current <code>min</code>, <code>max</code> and <code>val</code> attributes.</li> </ul>"},{"location":"firmware/configuration/gpio/#type_1","title":"Type","text":""},{"location":"firmware/configuration/gpio/#dimmable-lights","title":"Dimmable Lights:","text":"<ul> <li>Led</li> <li>L8-HD (EU)</li> <li>L8-HD (AU)</li> </ul> <p>Set the brightness of the light or LED between <code>0</code> and <code>255</code> when a value is received on <code>output#</code> where <code>#</code> is the groupnumber.</p> <p>When a led is controlled by a button or switch in the same group, it will be turned ON or OFF according to the state of the button or switch.</p> <p>When a led is controlled by a range object (slider, arc slider, roller, drop-down list) in the same group, the brightness will be proportional to the <code>.val</code> value of the object within its range (<code>min-max</code>).</p> <p>Example</p> <p>Consider a roller or drop-down list with 4 options: <code>OFF</code>, <code>Low</code>, <code>Medium</code> and <code>High</code>. The <code>.val</code> values can range from 0 to 3. These will set the brightness of the led to 0 (0%), 84 (33%), 170 (66%) and 255 (100%) respectively.</p> <p>For a roller or drop-down list with 5 options, <code>.val</code> ranges between 0 and 4. The brightness of the led increases 25% with each step.</p>"},{"location":"firmware/configuration/gpio/#moodlight","title":"Moodlight:","text":"<ul> <li>Mood Red</li> <li>Mood Green</li> <li>Mood Blue</li> </ul> <p>Assigns the pin to an RGB channel of the moodlight. The three RGB channels can be controlled together using the <code>moodlight</code> command.</p>"},{"location":"firmware/configuration/gpio/#relays","title":"Relays:","text":"<ul> <li>Light Relay</li> <li>Power Relay</li> </ul> <p>Set the relay ON or OFF when an event is received on <code>output#</code> where <code>#</code> is the groupnumber or from another group <code>intput</code>.</p> <p>When a relay is grouped with a button or switch in the same group, it will be turned ON or OFF according to the state of the button or switch.</p> <p>When a relay is controlled by a range object (slider, arc slider, roller, drop-down list) within the same group, the state will be be ON if the <code>val</code> value is larger then its <code>min</code> value.</p> <p>The various relay types (Light, Power) denote only the device class you want them to be autodetected as in Home Assistant: light vs. switch etc.</p> <p>Warning</p> <p>Attaching devices to mains power can be dangerous! Configuring gpios is done on your own responsibility. Be sure to test any system thoroughly using low voltages first. By using the firmware you accept the License.</p> <p>Use the hasp//command/output[x] topic (where x is the pin number) with an empty payload to query the current state of the relay. <p><code>json linenums=\"1\"l hasp/my_plate/command/output27 hasp/my_plate/state/output27 {\"state\":\"off\"}</code></p>"},{"location":"firmware/configuration/gpio/#pwm","title":"PWM","text":"<p>Experimental</p> <p>Set the duty cycle of the pin between <code>0</code> and <code>4095</code> when a value is received on <code>output#</code> where <code>#</code> is the groupnumber or from another group <code>intput</code>.</p> <p>When the PWM gpio is grouped with a button or switch, its duty cycle is either set to full-duty or off according to the state of the button or switch.</p> <p>When the PWM gpio is grouped with range object (slider, arc slider, roller, drop-down list), the duty cycle is proportional to the <code>.val</code> value of the object within its range (<code>min-max</code>).</p> <p>Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.</p>"},{"location":"firmware/configuration/hasp/","title":"HASP Design","text":"<p>You can configure the general look and feel for the interface by uploading your favorite fonts and selecting your favorite theme and color.</p>"},{"location":"firmware/configuration/hasp/#ui-theme","title":"UI Theme","text":"<p>Select one of the built-in themes to select the general style for the HASP interface.</p>"},{"location":"firmware/configuration/hasp/#primary-color","title":"Primary Color","text":"<p>Select the base color for the built-in theme.</p>"},{"location":"firmware/configuration/hasp/#secondary-color","title":"Secondary Color","text":"<p>Accent color for the theme.</p>"},{"location":"firmware/configuration/hasp/#startup-layout","title":"Startup Layout","text":"<p>Enter the filename of the <code>.jsonl</code> you have uploaded to load the layout on startup.</p>"},{"location":"firmware/configuration/hasp/#startup-page","title":"Startup Page","text":"<p>Select to the page number to display at startup.</p>"},{"location":"firmware/configuration/hasp/#startup-brightness","title":"Startup Brightness","text":"<p>Select the brightness level of the display on startup.</p> <p>Note: The display must support the dim feature and GPIO for dim is set in display setup.</p> <p>Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.</p>"},{"location":"firmware/configuration/http/","title":"HTTP Settings","text":"<p>You can restrict access to the web user interface.</p> <p>Note: All HTTP communication is unencrypted and setting credentials is only a simple security measure!</p>"},{"location":"firmware/configuration/http/#settings","title":"Settings","text":""},{"location":"firmware/configuration/http/#username-and-password","title":"Username and Password","text":"<p>Enter the credentials required to access the web interface.</p> <p>Click 'Save Settings' to activate immediately. If the username and/or password have been changed you need to enter the new values.</p>"},{"location":"firmware/configuration/mqtt/","title":"MQTT Settings","text":"<p>All communication between openHASP and your Home Automation service is done over MQTT. You will need a functional MQTT Broker.</p> <p>Tip: Learn more about the protocol on MQTT Essentials</p>"},{"location":"firmware/configuration/mqtt/#settings","title":"Settings","text":""},{"location":"firmware/configuration/mqtt/#plate-name","title":"Plate Name","text":"<p>The Plate Name is the unique identifier of your device on your MQTT Broker.</p> <p>For example, setting the Plate Name to plate35 will make the device listen and communicate on the main topic hasp/plate35/</p>"},{"location":"firmware/configuration/mqtt/#group-name","title":"Group Name","text":"<p>The Group Name is the unique identifier for a Group of devices.</p> <p>For example, the default Group Name is plates. This will make all devices in this group listen on the main topic hasp/plates/ This way you can send a command to all devices in the group at the same moment. Each devices will only respond on their own main Plate Name topic.</p>"},{"location":"firmware/configuration/mqtt/#broker","title":"Broker","text":"<p>Set the IP or hostname of your MQTT Broker service.</p>"},{"location":"firmware/configuration/mqtt/#port","title":"Port","text":"<p>Set the port for your MQTT Broker.</p>"},{"location":"firmware/configuration/mqtt/#username","title":"Username","text":"<p>Enter credentials if your MQTT Broker requires a Username.</p>"},{"location":"firmware/configuration/mqtt/#password","title":"Password","text":"<p>Enter credentials if your MQTT Broker requires a Password.</p> <p>Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.</p>"},{"location":"firmware/configuration/mqtt/#command-line","title":"Command Line","text":"<p>You can also configure the mqtt settings via the serial or telnet console:</p> <pre><code>hostname myPlateName\nmqtthost 192.168.0.123\nmqttport 1883\nmqttuser myUsername\nmqttpass myPassword\nreboot\n</code></pre>"},{"location":"firmware/configuration/time/","title":"Time Settings","text":"<p>The internal clock of the plate is synchronized with one or more NTP servers. The clock is used to display the time on the plate and in the log. To show the correct time for your area, please configure the corrent timezone.</p>"},{"location":"firmware/configuration/time/#settings","title":"Settings","text":""},{"location":"firmware/configuration/time/#region","title":"Region","text":"<p>Select the region or continent of the timezone you are in. This selection shows the timezones of that region or continent in the dropdown below.</p>"},{"location":"firmware/configuration/time/#timezone","title":"Timezone","text":"<p>Select the city or timezone you are in. The timezones shown in this list are filtered by the selected region above.</p>"},{"location":"firmware/configuration/time/#ntp-servers","title":"NTP Servers","text":"<p>Enter the URL or IP address of up to 3 Network Time Servers to synchronized the internal clock with.</p> <p>Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.</p>"},{"location":"firmware/configuration/time/#command-line","title":"Command Line","text":"<p>You can also configure the wifi settings via the serial or telnet console:</p> <pre><code>ssid myAccessPointName\npass myWifiPassword\nreboot\n</code></pre>"},{"location":"firmware/configuration/wifi/","title":"Wifi Settings","text":"<p>When using a wireless network adapter, you need to configure the SSID to connect.</p>"},{"location":"firmware/configuration/wifi/#settings","title":"Settings","text":""},{"location":"firmware/configuration/wifi/#ssid","title":"SSID","text":"<p>The name of the wireless network to connect to.</p>"},{"location":"firmware/configuration/wifi/#password","title":"Password","text":"<p>Optional password for the access point, if required.</p> <p>Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.</p>"},{"location":"firmware/configuration/wifi/#command-line","title":"Command Line","text":"<p>You can also configure the wifi settings via the serial or telnet console:</p> <pre><code>ssid myAccessPointName\npass myWifiPassword\nreboot\n</code></pre>"},{"location":"hardware/","title":"Getting Started","text":"<p>openHASP supports the ESP32 family of microcontrollers. It needs a compatible micro-controller with drivers supporting the attached display, touch controller, storage and network.</p> <p>Below is a list of recommended devices, development boards and touchscreens to get you up-and-running in no time.</p>"},{"location":"hardware/#recommended-devices","title":"Recommended Devices","text":"<p>For new projects we recommend ESP32-S3 boards with at least 520 kB SRAM, 8MB of flash and 2MB PSram. A capacitive touchscreen is also highly prefered because it is more responsive over resistive touchscreens.</p> <p>Note</p> <p>We do not recommend using an ESP32-S2 because it only has 320 kB of SRAM.</p> <p>Due to the large number of possible hardware options a selection of 3 popular ESP development boards has been made for the precompiled binaries. Please have a look at the list of recommended boards.</p>"},{"location":"hardware/#other-supported-devices","title":"Other Supported Devices","text":"<p>Support for additional devices is primarily maintained through the contributions of our users. While the experience with these devices can be excellent, it may also vary significantly. Due to the vast array of hardware combinations available, it is not feasible for the maintainers to offer uniform support across all devices. However, we strive to keep the project's scope broad and inclusive.</p> <p>For a comprehensive list of supported devices, please refer to the section on the left. We encourage you to thoroughly review the device-specific pages before starting a new project, as this will provide you with valuable insights into the level of support each device offers. If you have any uncertainties, we recommend using the boards highlighted in the \"Recommended Devices\" section to ensure a smoother experience.</p>"},{"location":"hardware/adafruit/featherwing/","title":"Adafruit","text":"<p>openHASP runs on Adafruit's ESP32 Feather Boards and supports Adafruit's TFT Featherwing resistive touch screens. Build configurations and precompiled firmware binaries are available for these popular hardware combinations to help you get started quickly.</p>"},{"location":"hardware/adafruit/featherwing/#supported-boards","title":"Supported Boards","text":"<p>openHASP supports the following Adafruit Feather boards (and the many different versions and variations based on them):</p> <ul> <li>Adafruit HUZZAH32 - ESP32 Feather (4MB Flash, No PSRAM)</li> <li>Adafruit ESP32-S3 Feather (4MB Flash, 2MB PSRAM)</li> <li>Adafruit ESP32 Feather V2 (8MB Flash, 2MB PSRAM)</li> </ul> <p>These boards are virtually plug-and-play when combined with Adafruit TFT FeatherWing displays. Many of these boards come in versions with pre-soldered headers (no soldering required).</p> <p>Warning</p> <p>Don't use the Adafruit ESP8266-based Feather HUZZAH as it lacks both sufficient memory and MCU power.</p> <p>Note</p> <p>Boards with PSRAM are highly recommended, and required for image processing.</p>"},{"location":"hardware/adafruit/featherwing/#supported-displays","title":"Supported Displays","text":"<ul> <li>TFT FeatherWing - 2.4\" 320x240 Touchscreen (ILI9341 with STMPE610 resistive touch)</li> <li>TFT FeatherWing - 2.4\" 320x240 Touchscreen V2 (ILI9341 with TSC2007 resistive touch)</li> <li>TFT FeatherWing - 3.5\" 480x320 Touchscreen (HX8357D with STMPE610 resistive touch)</li> <li>TFT FeatherWing - 3.5\" 480x320 Touchscreen V2 (HX8357D with TSC2007 resistive touch)</li> </ul> <p>Check out Adafruit's TFT Featherwing tutorial on learn.adafruit.com for detailed information and wiring diagrams.</p>"},{"location":"hardware/adafruit/featherwing/#backlight","title":"Backlight","text":"<p>By default, the display is always on and at its maximum brightness. To control backlight dimming or sleeping, you need to solder the <code>LITE</code> pad on the TFT Featherwing to a PWM output pin on the Feather board (e.g., <code>GPIO 21</code> on the Adafruit HUZZAH32 - ESP32 Feather or <code>GPIO 37</code> on the Adafruit ESP32 Feather V2, as these are, respectively, the closest pins to the <code>LITE</code> pad).</p>"},{"location":"hardware/adafruit/featherwing/#product-videos","title":"Product Videos","text":""},{"location":"hardware/adafruit/featherwing/#24-tft-featherwing","title":"2.4\" TFT FeatherWing","text":""},{"location":"hardware/adafruit/featherwing/#24-tft-featherwing-v2","title":"2.4\" TFT FeatherWing V2","text":""},{"location":"hardware/adafruit/featherwing/#35-tft-featherwing","title":"3.5\" TFT FeatherWing","text":""},{"location":"hardware/adafruit/featherwing/#35-tft-featherwing-v2","title":"3.5\" TFT FeatherWing V2","text":""},{"location":"hardware/adafruit/featherwing/#3d-printed-cases","title":"3D Printed Cases","text":"<p>Check out these enclosures available on Thingiverse:</p> <ul> <li>2.4\" TFT FeatherWing Enclosure</li> <li>2.4\" TFT FeatherWing Weather Station</li> <li>3.5\" TFT FeatherWing Table Top Case</li> <li>3.5\" TFT FeatherWing Touch Deck</li> </ul> <p>About Adafruit</p> <p>Adafruit invests time and resources providing open source code and libraries, please support Adafruit and open-source hardware by purchasing products from Adafruit!</p>"},{"location":"hardware/az-delivery/az-touch/","title":"AZ-Touch MOD","text":"more images... <p>The AZ-Touch MOD for ESP32 comes as kit with a touchscreen, wall enclosure, PCB and pinheaders. It includes either a 2.4\" or 2.8\" ILI9341 display with a XPT2046 resistive touchscreen controller.</p> <p>The PCB is pre-soldered except for the pinheaders, so some soldering is required.</p> Pros Cons Versatile PCB options Bulky enclosure Limited soldering required Resistive touchpanel Choice of several ESP32 MCUs 9 to 35V DC-DC power input Breadboard area <p> AZ-Touch MOD 2.4\"  AZ-Touch MOD 2.8\"</p>"},{"location":"hardware/az-delivery/az-touch/#esp32-dev-boards","title":"ESP32 dev boards","text":"<p>The AZ-Touch MOD PCB kit does not come with an MCU and needs to be purchased separately. The PCB is designed to be compatible with serveral development boards.</p> <p>There are two ESP32 footprint options for soldering headers onto the PCB:</p> <ol> <li>ESP32-DevKitC footprint with <code>2x19</code> pins</li> <li>Wemos D1 mini footprint with <code>2x8</code> pins</li> </ol> <p>The ESP32-DevKitC option is prefered because you can use more pins from the ESP32.</p> Board ESP32-DevKitC-V4 ESP32-DevKitC-VE MCU ESP32-WROOM ESP32-WROVER Flash 4 MB 8 MB PSram No 8 MB  Buy  Buy"},{"location":"hardware/az-delivery/az-touch/#backlight-control","title":"Backlight Control","text":"<p><code>GPIO15</code> of the ESP32 is used for PWM dimming of the AZ-Touch MOD display.</p>"},{"location":"hardware/az-delivery/az-touch/#documentation","title":"Documentation","text":"<p> Schematics  Datasheet  Assembly Guide</p>"},{"location":"hardware/az-delivery/az-touch/#product-video","title":"Product Video","text":""},{"location":"hardware/az-delivery/az-touch/#backlight-control_1","title":"Backlight Control","text":"<p><code>GPIO15</code> of the ESP32 is used for PWM dimming of the AZ-Touch MOD display.</p> <p><code>GPIO13</code> of the ESP32 is used for PWM dimming of the AZ-Touch Feather display.</p>"},{"location":"hardware/az-delivery/az-touch/#enclosure","title":"Enclosure","text":"<p>Each AZ-Touch kit comes with a nice wall mounting enclosure for the 2.4\" or 2.8\" touchscreen. It enables you to mount your project permanently in your living room, corridor or other exposed places.</p> <p>The AZ-Touch MOD PCB comes partly assembled with only the pin headers requiring some minimal soldering skills.</p> <p>The wall mounted enclosure measures 120mm x 80mm x 35mm (W x H x D).</p>"},{"location":"hardware/az-delivery/az-touch/#flashing","title":"Flashing","text":"<p>The ESP32 can be flashed over USB like any ESP32 development board.</p>"},{"location":"hardware/az-delivery/feather/","title":"AZ-Touch Feather","text":"<p>The AZ-Touch Feather also uses a 2.8\" TFT display but the footprint on the PCB is only suitable for the Adafruit Feather family of MCUs. This AZ-Touch Feather kit can also be used to run openHASP with the HUZZAH32 or SparkFun Thing Plus ESP32-WROOM development boards.</p> <p>Unlike the AZ-Touch MOD, the AZ-Touch Feather is a self-solder kit!  You have to solder all components to the PCB yourself. For this reason the AZ-Touch MOD is recommended over the AZ-Touch Feather.</p> Pros Cons Versatile PCB options All components need soldering Choice of several ESP32 MCUs Bulky enclosure 9 to 35V DC-DC power input Resistive touchpanel Breadboard area <p> AZ-Touch Feather</p>"},{"location":"hardware/az-delivery/feather/#feather-dev-boards","title":"Feather dev boards","text":"<p>We do not offer pre-built binaries for the AZ-Touch Feather yet but these dev boards should work:</p> Board HUZZAH32 SparkFun Thing Plus MCU ESP32-WROOM ESP32-WROOM Flash 4 MB 16 MB PSram No No  Buy  Buy"},{"location":"hardware/az-delivery/feather/#documentation","title":"Documentation","text":"<p> Schematics  Datasheet  Assembly Guide</p>"},{"location":"hardware/az-delivery/feather/#backlight-control","title":"Backlight Control","text":"<p><code>GPIO13</code> of the ESP32 is used for PWM dimming of the AZ-Touch Feather display.</p>"},{"location":"hardware/az-delivery/feather/#enclosure","title":"Enclosure","text":"<p>Each AZ-Touch kit comes with a nice wall mounting enclosure for the 2.4\" or 2.8\" touchscreen. It enables you to mount your project permanently in your living room, corridor or other exposed places.</p> <p>The AZ-Touch Feather contains loose components that you need to solder to the PCB yourself using the Assembly Guide.</p> <p>The wall mounted enclosure measures 120mm x 80mm x 35mm (W x H x D).</p>"},{"location":"hardware/az-delivery/feather/#flashing","title":"Flashing","text":"<p>The ESP32 can be flashed over USB like any ESP32 development board.</p>"},{"location":"hardware/dustin-watts/esp32-touchdown/","title":"ESP32 TouchDown","text":"more images..."},{"location":"hardware/dustin-watts/esp32-touchdown/#features","title":"Features","text":"<ul> <li>ESP32-WROOM-32D</li> <li>ILI9488 3.5\" (480*320) TFT screen in 4-wire SPI mode</li> <li>FT62x6 Capacitive Touch Controller</li> <li>APK2112 3.3V regulator</li> <li>MCP73831 battery management IC</li> <li>CP2102 USB-to-UART IC</li> <li>USB-C connector</li> <li>Piezo Speaker</li> <li>microSD card holder</li> <li>Battery voltage divider connected to GPIO35</li> <li>Stemma / JST-PH I2C connector</li> <li>Compact size: 100x57x15mm</li> </ul> <p>This board was originaly created for the FreeTouchDeck project and the hardware is also open source. Due to the extensive documentation it was easy to port openHASP to the ESP32-Touchdown.</p> Pros Cons 480x320 display 4 MB flash Capactitive touch No PSram Battery connector Battery sensor <p>The speaker and SD card are not supported by openHASP 0.7.0-rc11.</p> <p>Info</p> <p>Any 3.7V (nominal voltage) LiPo will work, 2000mAh battery should suffice. Be sure to have the correct polarity. If the connecter at the end of the battery does not match, gently remove the pins from the connector and put them back in the correct orientation.</p> <p>Available from:  Tindie  Eplop (UK)  PCBway</p>"},{"location":"hardware/dustin-watts/esp32-touchdown/#product-video","title":"Product Video","text":""},{"location":"hardware/dustin-watts/esp32-touchdown/#backlight-control","title":"Backlight Control","text":"<p>To enable backlight control, make sure the solder jumper pad is in position 2-1:</p> <p></p>"},{"location":"hardware/dustin-watts/esp32-touchdown/#3d-printed-cases","title":"3D Printed Cases","text":"<p>You can find several different 3D printable cases in the ESP32 TouchDown repository:</p>"},{"location":"hardware/dustin-watts/esp32-touchdown/#flashing","title":"Flashing","text":"<p>The ESP32 TouchDown can easily be flashed over USB like any ESP32 development board.</p>"},{"location":"hardware/dustin-watts/esp32-touchdown/#gpio-settings","title":"GPIO Settings","text":"<p>These pins can be used freely as GPIOs:</p>"},{"location":"hardware/dustin-watts/esp32-touchdown/#pcb-blueprint","title":"PCB Blueprint","text":"<p>The ESP32 TouchDown is fully Open Source Hardware:</p> <ul> <li>Schematics</li> <li>Bill of materials</li> <li>PCB layout</li> <li>Datasheets</li> </ul> <p></p>"},{"location":"hardware/dustin-watts/esp32-touchdown/#hasp-build_flags","title":"HASP build_flags","text":"<p>Specify the LCD Configuration to use and define the GPIOs in the environment build flags:</p> <pre><code>build_flags =\n    ${env.build_flags}\n    ${esp32.build_flags}\n    ${esp32.vspi}        ; Use VSPI hardware SPI bus\n\n;region -- TFT_eSPI build options ------------------------\n    -D USER_SETUP_LOADED=1\n    -D ILI9488_DRIVER=1\n    -D TFT_ROTATION=0 ; 0=0, 1=90, 2=180 or 3=270 degree\n    -D TFT_WIDTH=320\n    -D TFT_HEIGHT=480\n    -D TFT_CS=15  ;// Chip select control pin\n    -D TFT_DC=2  ;// Data Command control pin\n    -D TFT_RST=4 ;// Reset pin (could connect to RST pin)\n    -D TFT_BCKL=5  ;None, configurable via web UI (e.g. 2 for D4)\n    -D SUPPORT_TRANSACTIONS\n    -D TOUCH_DRIVER=6336 ; XPT2606 Resistive touch panel driver \n    -D TOUCH_SDA=21\n    -D TOUCH_SCL=22\n    -D TOUCH_IRQ=27   ; not connected\n    -D TOUCH_RST=-1   ; not used, connected to 3.3V\n    -D TOUCH_FREQUENCY=400000\n    -D SPI_FREQUENCY=27000000\n    -D SPI_READ_FREQUENCY=16000000\n;endregion\n</code></pre>"},{"location":"hardware/dustin-watts/freetouchdeck/","title":"FreeTouchDeck","text":"more images..."},{"location":"hardware/dustin-watts/freetouchdeck/#features","title":"Features","text":"<ul> <li>ESP32 DevKitC (38pin)</li> <li>ILI9488 TFT SPI 4-WIRE</li> <li>XPT2046 resistive touch controller</li> </ul> <p>This board is created for the FreeTouchDeck project and the PCB-combiner board is open source. Due to the extensive documentation it was easy to port openHASP to the FreeTouchDeck.</p> Pros Cons 480x320 Display 4 MB flash Price No PSram Build Instructions Resistive touch <p>This is a kit so you need to assemble the parts yourself. Some soldering skills are required. You can 3D print a custom enclosure.</p>"},{"location":"hardware/dustin-watts/freetouchdeck/#product-video","title":"Product Video","text":""},{"location":"hardware/dustin-watts/freetouchdeck/#3d-printed-cases","title":"3D Printed Cases","text":"<p>You can find a 3D printable case on Thingiverse and Github.</p>"},{"location":"hardware/dustin-watts/freetouchdeck/#flashing","title":"Flashing","text":"<p>The FreeTouchDeck can easily be flashed over USB like any ESP32 development board.</p>"},{"location":"hardware/dustin-watts/freetouchdeck/#gpio-settings","title":"GPIO Settings","text":"<p>These pins can be used freely as GPIOs:</p>"},{"location":"hardware/dustin-watts/freetouchdeck/#pcb-blueprint","title":"PCB Blueprint","text":"<p>The PCB Combiner is fully Open Source Hardware:</p> <ul> <li>Schematics</li> <li>PCB layout</li> </ul> <p> </p>"},{"location":"hardware/dustin-watts/freetouchdeck/#hasp-build_flags","title":"HASP build_flags","text":"<p>Specify the LCD Configuration to use and define the GPIOs in the environment build flags:</p> <pre><code>build_flags =\n    ${env.build_flags}\n    ${esp32.build_flags}\n\n;region -- TFT_eSPI build options ------------------------\n    -D USER_SETUP_LOADED=1\n    -D ILI9488_DRIVER=1\n    -D TFT_ROTATION=0 ; 0=0, 1=90, 2=180 or 3=270 degree\n    -D TFT_WIDTH=320\n    -D TFT_HEIGHT=480\n    -D TFT_MISO=19    ; don't connect TFT SDO if other SPI devices share MISO\n    -D TFT_MOSI=23\n    -D TFT_SCLK=18\n    -D TFT_CS=15      ; Chip select control pin\n    -D TFT_DC=2       ; Data Command control pin\n    -D TFT_RST=4      ; Reset pin (could connect to RST pin)\n    -D TFT_BCKL=32    ; Default, configurable via web UI (e.g. 2 for D4)\n    -D SUPPORT_TRANSACTIONS\n    -D TOUCH_CS=21\n    -D TOUCH_DRIVER=2046 ; XPT2606 Resistive touch panel driver\n    -D SPI_FREQUENCY=27000000\n    -D SPI_TOUCH_FREQUENCY=2500000\n    -D SPI_READ_FREQUENCY=20000000\n;endregion\n</code></pre>"},{"location":"hardware/elecrow/crowpanel-hmi-rgb/","title":"CrowPanel - HMI RGB","text":"<p>The CrowPanel HMI RGB range comes in three different size: 4.3\", 5.0\" and 7.0\". All three models have a touchscreen and integrated ESP32-S3 module with built-in wireless communication 2.4 GHz Wi-Fi (802.11 b/g/n) and Bluetooth 5.0.</p>"},{"location":"hardware/elecrow/crowpanel-hmi-rgb/#models","title":"Models","text":"Model 4.3\"RGB 5\"RGB/th&gt;             7\"RGB SKU DIS06043H DIS07050H DIS08070H Resolution 480x272 800x480 800x480 MCU ESP32-S3-Wroom ESP32-S3-Wroom ESP32-S3-Wroom Flash 4 MB 4 MB 4 MB Psram 2 MB 8 MB 8 MB Touchscreen Resistive Resistive Resistive SD Card  yes  yes  yes Screen dimming  yes  yes  yes  Buy  Aliexpress                             NL Elecrow.com  Buy  AliExpress Elecrow.com  Buy  AliExpress Elecrow.com <p>The audio port and SD card are not supported by openHASP 0.7.0-rc11.</p> <p>ESP32-S3 Modules have PSram and are more suitable for loading fonts, and graphics.</p>"},{"location":"hardware/elecrow/crowpanel-hmi-rgb/#video","title":"Video","text":""},{"location":"hardware/elecrow/crowpanel-hmi-rgb/#elecrow-esp32-touch-screen-tft-display-5-vs-7","title":"Elecrow ESP32 Touch Screen TFT Display 5\" VS 7\"","text":""},{"location":"hardware/elecrow/crowpanel-hmi-rgb/#cases","title":"Cases","text":"<p>You can order the display either with or without matching acrylic case.</p>"},{"location":"hardware/elecrow/crowpanel-hmi-rgb/#flashing","title":"Flashing","text":"<p>Compile your own via platform.io and <code>platformio_override.ini</code> environment templates.</p> <p>Also available via web installer at https://nightly.openhasp.com/</p> <p>or the latest found under Github Actions, click on the latest action, and look under the <code>Assets</code> sections for zip files containing builds binary files.</p>"},{"location":"hardware/elecrow/crowpanel-hmi-rgb/#recommended-method","title":"Recommended method","text":"<ol> <li> <p>Use the <code>Nightly</code> build website to initially flash the device.</p> </li> <li> <p>Then update with the OTA file found under <code>Actions</code>, <code>Assets</code> on github.  Or compile your own if comfortable doing that.</p> </li> </ol>"},{"location":"hardware/elecrow/crowpanel-hmi-spi/","title":"CrowPanel - HMI SPI","text":"<p>The CrowPanel HMI SPI range comes in three different size: 2.4\", 2.8\" and 3.5\". All three models have a capacitive touchscreen and integrated ESP32 module with built-in wireless communication 2.4 GHz Wi-Fi (802.11 b/g/n).</p>"},{"location":"hardware/elecrow/crowpanel-hmi-spi/#models","title":"Models","text":"Model 2.4\" SPI 2.8\" SPI/th&gt;             3.5\" SPI SKU DIS03024H DIS04028H DIS05035H Resolution 320x240 320x240 480x320 MCU ESP32-WROOM-32-N4 ESP32-WROOM-32-N4 ESP32-WROVER-B Flash 4 MB 4 MB 4 MB Psram NO NO 8 MB Touchscreen Resistive Resistive Resistive SD Card  yes  yes  yes Screen dimming  yes  yes  yes  Buy  Aliexpress                             NL Elecrow.com  Buy  AliExpress Elecrow.com  Buy  AliExpress Elecrow.com <p>The audio port and SD card are not supported by openHASP 0.7.0-rc11.</p> <p>The ESP32-Wtover has PSram and is more suitable for loading fonts, and graphics.</p>"},{"location":"hardware/elecrow/crowpanel-hmi-spi/#video","title":"Video","text":""},{"location":"hardware/elecrow/crowpanel-hmi-spi/#elecrow-esp32-display-hmi-touch-screen-series-24-28-35-demo","title":"Elecrow ESP32 Display HMI Touch Screen Series 2.4\", 2.8\u201c, 3.5\" Demo","text":""},{"location":"hardware/elecrow/crowpanel-hmi-spi/#cases","title":"Cases","text":"<p>You can order the display either with or without matching acrylic case.</p>"},{"location":"hardware/elecrow/crowpanel-hmi-spi/#flashing","title":"Flashing","text":"<p>Compile your own via platform.io and <code>platformio_override.ini</code> environment templates.</p> <p>Also available via web installer at https://nightly.openhasp.com/</p> <p>or the latest found under Github Actions, click on the latest action, and look under the <code>Assets</code> sections for zip files containing builds binary files.</p>"},{"location":"hardware/elecrow/crowpanel-hmi-spi/#recommended-method","title":"Recommended method","text":"<ol> <li> <p>Use the <code>Nightly</code> build website to initially flash the device.</p> </li> <li> <p>Then update with the OTA file found under <code>Actions</code>, <code>Assets</code> on github.  Or compile your own if comfortable doing that.</p> </li> </ol>"},{"location":"hardware/elecrow/esp32-terminal/","title":"ESP32 Terminal 3.5\"","text":"<p>The CrowPanel ESP32 terminal is a display device based on the ESP32-S3 microcontroller.  This ESP32 terminal uses an acrylic shell, which can not only protects the screen but also makes it more beautiful. The size is only pocket size, small and portable; two M3 fixing holes are easy to fix, making it easier for you to set up your project.</p>"},{"location":"hardware/elecrow/esp32-terminal/#models","title":"Models","text":"Model 3.5inch RGB 3.5inch SPI SKU 15811 16099 Resolution 480x320 480x320 MCU ESP32-S3 ESP32-S3 Interface RGB SPI Touchscreen Capacitive Capacitive SD card  yes  yes Screen dimming  yes  yes  Buy  AliExpress                             NL Elecrow.com  Buy  AliExpress Elecrow.com <p>The SD card, buzzer, microphone and camera are not supported by openHASP 0.7.0-rc11.</p> <p>ESP32-S3 Modules have PSram and are more suitable for loading fonts, and graphics.</p>"},{"location":"hardware/elecrow/esp32-terminal/#video","title":"Video","text":""},{"location":"hardware/elecrow/esp32-terminal/#esp32-terminal-comparison","title":"ESP32 Terminal Comparison","text":""},{"location":"hardware/elecrow/esp32-terminal/#flashing","title":"Flashing","text":"<p>Also available via web installer at https://nightly.openhasp.com/</p> <p>or the latest found under Github Actions, click on the latest action, and look under the <code>Assets</code> sections for zip files containing builds binary files.</p>"},{"location":"hardware/elecrow/esp32-terminal/#recommended-method","title":"Recommended method","text":"<ol> <li> <p>Use the <code>Nightly</code> build website to initially flash the device.</p> </li> <li> <p>Then update with the OTA file found under <code>Actions</code>, <code>Assets</code> on github.  Or compile your own if comfortable doing that.</p> </li> </ol>"},{"location":"hardware/espressif/esp-s3-box/","title":"ESP-S3-BOX","text":""},{"location":"hardware/espressif/esp-s3-box/#features","title":"Features","text":"<p>The ESP-BOX is a series of development kits by Espressif. A handful of variations exist, but all feature an ESP32-S3 with PSRAM, a 320x240 2.4\" LCD and a capacitive touchscreen controller. They also include two microphones and a speaker, though these are not used by OpenHASP. A number of GPIOs are also available, depending on variation and stand.</p> <p>This devkit comes with a stand, which can be detached to hang the devkit on a wall instead. Power is supplied via USB-C, either plugged into the devkit or into its stand.</p> <p>If considering purchasing, see Variants</p> Pros Cons With stand Poor viewing angles 8MB/16 PSRAM Small display Capacitive touchscreen"},{"location":"hardware/espressif/esp-s3-box/#gallery","title":"Gallery","text":""},{"location":"hardware/espressif/esp-s3-box/#flashing","title":"Flashing","text":"<p>This devkit uses the native USB peripheral on the ESP32-S3. To put the devkit into flashing mode, hold the boot button (top button on the left edge) while clicking the reset button (bottom button on the left edge). After this, it can be flashed as usual. </p> <p>After flashing, click the reset button. You might need to open the serial port after flashing for the firmware to boot - in the UI, disable serial logging to fix this. </p>"},{"location":"hardware/espressif/esp-s3-box/#variants","title":"Variants","text":"ESP32-S3-BOX ESP32-S3-BOX-Lite ESP32-S3-BOX-3 ESP32-S3-BOX-3B Description Original release. Case is 3D-printed, and includes a stand that exposes the GPIO pins and a USB-C port. If the stand is removed, the display can be wall-mounted. This variant has 8MB of PSRAM. This is similar to the ESP32-S3-BOX, but does not have touch input; instead it has three buttons below the display. Stand is not included. Has 8MB of PSRAM. Second generation device. Comes with a variety of stands, with various accessories integrated, but very few are supported. This version is no longer wall-mountable. Has 16MB of PSRAM. The same as ESP32-S3-BOX-3, but has only a regular dock. Supported Yes. Touch and display work. Untested. Display should work. Buttons not implemented. Yes. Touch and display work. Yes. Touch and display work. Recommended No; deprecated and superseded - buy a ESP32-S3-BOX-3B instead. No. Does not support touch and has been superseded since. Yes, but consider the ESP32-SE-BOX-3B instead if only purchasing for OpenHASP - the additional accessories included in this variant are not supported by OpenHASP. Yes Build Target <code>esp32-s3-box</code> <code>esp32-s3-box</code> <code>esp32-s3-box-3</code> <code>esp32-s3-box-3</code> <p>For more information about the hardware, see Espressif's documentation.</p>"},{"location":"hardware/espressif/esp-s3-box/#other-notes","title":"Other notes","text":"<ul> <li>The mute button (on top) is on GPIO1 on all variants, and can be added as a switch (not button) input.</li> </ul>"},{"location":"hardware/generic/ili9341-ips/","title":"ILI9341 IPS Panel","text":"<p>A 240x320 IPS TFT display with an ILI9341 controller and XPT2046 touch controller.</p> <p>Improvement over TN versions of the display with amazing view angles.</p> <p> Buy</p>"},{"location":"hardware/generic/ili9341-ips/#pin-configuration","title":"Pin Configuration","text":"Pin Function ESP32 Pin Config Name Display Pin 1 Module Ground GND GND 2 Module Power 3.3v 3V3 VCC 3 SPI Clock GPIO18 TFT_SCLK CLK 4 Data Input GPIO23 TFT_MOSI MOSI 5 LCD Reset line GPIO15 TFT_RST RES 6 Data Command control GPIO5 TFT_DC DC 7 Backlight GPIO21 TFT_BCKL BLK 8 Data Output GPIO19 TFT_MISO MISO 9 Chip Select GPIO26 TFT_CS CS1 10 Touch Select GPIO17 TOUCH_CS CS2 11 Touch Interrupt N/C TOUCH_IRQ PEN <p>SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller.</p>"},{"location":"hardware/generic/ili9341-ips/#custom-build","title":"Custom build","text":"<p>Define a custom environment in <code>platformio_override.ini</code> and add a new <code>esp32_ili9341_spi</code> entry under <code>extra_default_envs =</code> </p> <p>If you've wired pins differently, change the values below.</p> <pre><code>;-- ILI9341 SPI version ------------------------\n[env:esp32_ili9341_spi]\nplatform = espressif32\nplatform_packages = framework-arduinoespressif32\nframework = arduino\nboard = esp32dev\nmonitor_port = COM4\nupload_port = ${env:esp32_ili9341_spi.monitor_port}\nmonitor_filters = esp32_exception_decoder\nboard_build.partitions = user_setups/esp32_partition_app1300k_spiffs1216k.csv\n\nbuild_flags =\n    ${env.build_flags}\n    ${esp32.build_flags}\n    -D ILI9341_DRIVER=1\n    -D TFT_WIDTH=240\n    -D TFT_HEIGHT=320\n    -D TFT_ROTATION=0 ; see TFT_ROTATION values\n    -D INVERT_COLORS=1  ; to fix colors\n    -D SPI_FREQUENCY=60000000\n    -D SPI_TOUCH_FREQUENCY=2500000\n    -D SPI_READ_FREQUENCY=20000000\n    -D USER_SETUP_LOADED=1\n    -D TOUCH_DRIVER=2046     ; XPT2046 Resistive SPI touch panel driver\n    -D SUPPORT_TRANSACTIONS\n    ${esp32.vspi}        ; Use VSPI hardware SPI bus: \n                         ; TFT_MISO=19 | TFT_MOSI=23 | TFT_SCLK=18\n                         ; MISO    = 8 | MOSI    = 4 | CLK     = 3\n; wiring recommendations, change pins according to your wiring\n    -D TFT_DC=5          ; DC,  lcd pin 3\n    -D TFT_RST=15        ; RES, lcd pin 5\n    -D TFT_BCKL=-1       ; BLK, lcd pin 7 (configurable via web UI (e.g. 21))\n    -D TFT_CS=26         ; CS1, lcd pin 9\n    -D TOUCH_CS=17       ; CS2, lcd pin 10  \n\nlib_deps =\n    ${env.lib_deps}\n    ${esp32.lib_deps}\n\nlib_ignore =\n    ${env.lib_ignore}\n    ${esp32.lib_ignore}\n\nextra_scripts =\n    ${env.extra_scripts}\n    ${esp32.extra_scripts}\n</code></pre>"},{"location":"hardware/generic/mhs4001/","title":"MHS4001","text":"<p>6 GPIOs are required to drive the SPI display. One additional GPIO is needed for the XPT2046 touch sensor. Including the Vcc and Gnd pins, a total of 12 connections need to be made to the MCU:</p>"},{"location":"hardware/generic/mhs4001/#pin-configuration","title":"Pin Configuration","text":"Pin Function ESP32 Pin Config Name Display Pin 1 Module Power 3.3V 3.3V 3.3V 2 Module Power 5v 5V 5V 3 Not connected NC 4 LED Backlight PWM 5V TFT_BCKL 5V 5-10 Not connected NC 11 Touch Interrupt NC TP_IRQ 12-13 Not connected NC 14 Module Ground GND GND 15-16 Not connected NC 17 Module Power 3.3V 3.3V 18 Data Command control pin GPIO4 TFT_DC LCD_RS 19 SPI Master Out Slave In GPIO23 TFT_MOSI LCD/SI/TP_SI 20 Not connected NC 21 Touch Panel Slave Out GPIO19 TFT_MISO TP_SO 22 LCD Reset pin GPIO32 TFT_RST RST 23 SPI Clock GPIO18 TFT_SCLK LCD_SCK/TP_SCK 24 Chip select control pin GPIO15 TFT_CS LCD_CS 25 Module Ground GND GND 26 Touch Chip Select GPIO22 TOUCH_CS TP_CS <p>By default, pin 4 is normally connected to 5V. This turns the display backlight LED on all time. In order to control the backlight you can drive pin 4 of the display using a PNP transistor. The electronics circuit needed is not part of this diagram.</p> <p>SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller.</p>"},{"location":"hardware/generic/mhs4001/#lcd-configuration","title":"LCD Configuration","text":"<p>The <code>lcd_config.ini</code> file specifies the different properties of the display, except for the actual pin configuration:</p> <pre><code>raspberrypi =\n    -D RPI_DISPLAY_TYPE=1\n    -D ST7796_DRIVER=1\n    -D TFT_WIDTH=320\n    -D TFT_HEIGHT=480\n    -D TFT_ROTATION=0 ; 0=0, 1=90, 2=180 or 3=270 degree\n    -D SPI_FREQUENCY=80000000\n    -D SPI_TOUCH_FREQUENCY=2500000\n    -D USER_SETUP_LOADED=1\n    -D TOUCH_DRIVER=2046 ; XPT2046 Resistive touch panel driver\n    -D SUPPORT_TRANSACTIONS\n</code></pre>"},{"location":"hardware/generic/mhs4001/#hasp-build_flags","title":"HASP build_flags","text":"<p>Specify the LCD Configuration to use and define the 7 GPIOs in the environment build flags:</p> <pre><code>build_flags =\n    ${flags.esp32_flags}\n; -- TFT_eSPI build options ------------------------\n    ${lcd.raspberrypi}\n    ${esp32.vspi}        ; Use VSPI hardware SPI bus\n    -D TFT_CS=15\n    -D TFT_DC=4\n    -D TFT_RST=32\n    -D TFT_BCKL=-1       ; None\n    -D TOUCH_CS=22\n</code></pre>"},{"location":"hardware/generic/mrb3511/","title":"MRB3511","text":"<p>14 GPIOs are required to drive the 8-bit parallel display. Another 3 GPIOs are needed for the I\u00b2C touch sensor. Including the Vcc, Gnd an Rst pins, a total of 23 connections need to be made to the MCU:</p>"},{"location":"hardware/generic/mrb3511/#pin-configuration","title":"Pin Configuration","text":"Pin Function ESP32 Pin Config Name Display Pin 1 Chip select control pin GPIO33 TFT_CS CS 2 Data Command control pin GPIO15 TFT_DC RS 3 Write control pin GPIO04 TFT_WR WR 4 Read control pin GPIO02 TFT_RD RD 5 LCD Reset pin GPIO32 TFT_RST RST 6 GPIO12 TFT_D0 D0 7 GPIO13 TFT_D1 D1 8 GPIO26 TFT_D2 D2 9 8-bit parallel data GPIO25 TFT_D3 D3 10 GPIO17 TFT_D4 D4 11 GPIO16 TFT_D5 D5 12 GPIO27 TFT_D6 D6 13 GPIO14 TFT_D7 D7 14-21 Not used, don't connect N/C D8-15 22 Module Ground GND GND 23 LED Backlight PWM GPIO5 TFT_BCKL BL 24-25 Module Power - VDD 26-27 Module Ground GND GND 28-29 Not connected NC 30 IO, I\u00b2C SDA GPIO21 TOUCH_SDA SDA 31 Touch Chip Interrupt GPIO34 TOUCH_IRQ INT 32 Not connected NC 33 Touch IC Reset 3.3V CRST 34 IO, I\u00b2C SCL GPIO22 TOUCH_SCL SCL <p>You need to desolder the 0R resistor on the back side of the panel from the 16-bit position. Then solder back the 0R resistor in the 8-bit position.</p> <p>There are no pins shared between the touch controller and the LCD controller.</p>"},{"location":"hardware/generic/mrb3511/#lcd-configuration","title":"LCD Configuration","text":"<p>The <code>lcd_config.ini</code> file specifies the different properties of the display, except for the actual pin configuration:</p> <pre><code>mrb3511 =\n    -D ESP32_PARALLEL=1\n    -D ILI9488_DRIVER=1\n    -D TFT_WIDTH=320\n    -D TFT_HEIGHT=480\n    -D TFT_ROTATION=0 ; 0=0, 1=90, 2=180 or 3=270 degree\n    -D USER_SETUP_LOADED=1\n    -D TOUCH_DRIVER=911 ; GT911 Capacitive touch panel driver\n    -D SUPPORT_TRANSACTIONS\n</code></pre>"},{"location":"hardware/generic/mrb3511/#hasp-build_flags","title":"HASP build_flags","text":"<p>Specify the LCD Configuration to use and define the 17 GPIOs in the environment build flags:</p> <pre><code>build_flags =\n    ${flags.esp32_flags}\n; -- TFT_eSPI build options ------------------------\n    ${lcd.mrb3511}\n    -D TFT_BCKL=5  ;None, configurable via web UI (e.g. 2 for D4)\n    -D TFT_CS=33  ; Chip select control pin\n    -D TFT_DC=15  ; =RS; Data Command control pin - must use a pin in the range 0-31\n    -D TFT_RST=32 ; Reset pin\n    -D TFT_WR=4   ; Write strobe control pin - must use a pin in the range 0-31\n    -D TFT_RD=2\n    -D TFT_D0=12  ; Must use pins in the range 0-31 for the data bus\n    -D TFT_D1=13  ; so a single register write sets/clears all bits\n    -D TFT_D2=26\n    -D TFT_D3=25\n    -D TFT_D4=17\n    -D TFT_D5=16\n    -D TFT_D6=27\n    -D TFT_D7=14\n    -D TOUCH_SDA=21\n    -D TOUCH_SCL=22\n    -D TOUCH_IRQ=34   ; use 34-39 as these are input only pins\n    -D TOUCH_RST=-1   ; not used, connected to 3.3V\n</code></pre>"},{"location":"hardware/generic/msp-series/","title":"ILI9341 TFT Panel","text":"<p>Models:</p> <ul> <li>2.4\" SKU: MSP2402</li> <li>2.8\" SKU: MSP2807</li> <li>3.2\" SKU: MSP3218</li> </ul> <p>The \"red\" 240x320 TFT displays with an ILI9341 controller and XPT2046 touch controller are very common.</p> <p>Make sure to select the touch version when ordering these screens online. The U2 touch chip needs to be populated on the board.</p>"},{"location":"hardware/generic/msp-series/#gallery","title":"Gallery","text":""},{"location":"hardware/generic/msp-series/#pin-configuration","title":"Pin Configuration","text":"Pin Function ESP32 Pin Config Name Display Pin 1 5V/3.3V power input 5V/3.3V VCC 2 Module Ground GND GND 3 Chip Select GPIO26 TFT_CS CS 4 LCD Reset line GPIO15 TFT_RST RESET 5 Data Command control GPIO5 TFT_DC DC 6 Data Input GPIO23 TFT_MOSI SDI(MOSI) 7 SPI Clock GPIO18 TFT_SCLK SCK 8 Backlight GPIO21 TFT_BCKL LED 9 Data Output (not used) GPIO19 or N/C TFT_MISO SDO(MISO) 10 Touch SPI Clock GPIO18 TFT_SCLK T_CLK 11 Touch Select GPIO17 TOUCH_CS T_CS 12 Touch Data Input GPIO23 TFT_MOSI T_DIN 13 Touch Data Output GPIO19 TFT_MISO T_DO 14 Touch Interrupt N/C T_IRQ <p>SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller.</p> <p>In some cases the pin 9 MISO of the LCD can prevent proper display initialization. This pin is not used by openHASP, so it can be left disconnected in case of issues.</p>"},{"location":"hardware/generic/msp-series/#lcd-configuration","title":"LCD Configuration","text":"<p>The <code>lcd_config.ini</code> file specifies the different properties of the display, except for the actual pin configuration:</p> <pre><code>lolin24 =\n    -D ILI9341_DRIVER=1\n    -D TFT_WIDTH=240\n    -D TFT_HEIGHT=320\n    -D TFT_ROTATION=0 ; Use default, see TFT_ROTATION values\n    -D SPI_FREQUENCY=40000000\n    -D SPI_TOUCH_FREQUENCY=2500000\n    -D SPI_READ_FREQUENCY=20000000\n    -D USER_SETUP_LOADED=1\n    -D TOUCH_DRIVER=2046     ; XPT2046 Resistive SPI touch panel driver\n    -D SUPPORT_TRANSACTIONS\n</code></pre>"},{"location":"hardware/generic/msp-series/#hasp-build_flags","title":"HASP build_flags","text":"<p>Specify the LCD Configuration to use and define the GPIOs in the environment build flags:</p> <pre><code>build_flags =\n    ${env.build_flags}\n    ${esp32.build_flags}\n\n;region -- TFT_eSPI build options ------------------------\n    ${lcd.lolin24}\n    ${esp32.vspi}        ; Use VSPI hardware SPI bus\n    -D TFT_DC=5\n    -D TFT_CS=26 \n    -D TFT_RST=-1        ; RST\n    -D TFT_BCKL=-1       ; None, configurable via web UI (e.g. 21)\n    -D TOUCH_CS=17       ; (can also be 22 or 16)\n;endregion\n</code></pre>"},{"location":"hardware/golden-security/gs-t3e/","title":"GS-T3E","text":""},{"location":"hardware/golden-security/gs-t3e/#models","title":"Models","text":"<ul> <li>EU model: 3 gang relay switch</li> <li>CN model: 4 gang relay switch</li> </ul> <p>Only the PCB revision v2.3 (20221205) is supported by openHASP. Specify that you want the new device with PCB revision v2.3 when ordering from known vendor Golden Security on Alibaba.</p> <p>Warning</p> <p>Do NOT buy PCB revision v1.23 (20220817) because the internal antenna connector is NOT soldered onto the board.</p> <p>Those devices will have no WiFi reception on the ESP32! This version is now discontinued, but some sellers might have old stock.</p>"},{"location":"hardware/golden-security/gs-t3e/#form-factor","title":"Form factor","text":"<ul> <li>EU model: 86mm x 86mm</li> <li>CN model: info not available</li> </ul> <p>Maximum load is 200W per gang, 600W in total EU version.</p> <p>The models have the same recessed housing sliding into the wall, sized 50x50mm, with rounded corners creating a diameter of about 59mm. This makes them suitable for both EU and UK wall fixtures. The EU model fits in a properly deployed, standard 60mm round wall box and can be fixed with two side screws (use the screws which belong to the box instead of the ones shipped with the device).</p> <p>The CN model has not been tested yet.</p>"},{"location":"hardware/golden-security/gs-t3e/#features","title":"Features:","text":"<ul> <li>Input voltage 110-250V ~ 50-60Hz AC</li> <li>ESP32-S3-WROOM-1 (Xtensa-LX7 dual core 240MHz)</li> <li>8 MB PSram - Octal SPI</li> <li>16 MB flash - Quad SPI</li> <li>Capacitive GT911 touch screen</li> </ul> Pros Cons 8 MB flash Tuya device with ZS3L Tuya chip on PCB (unused) 16 MB PSram Flash header pins not populated 480x480 HD IPS LCD Capactitive touch Built-in PSU Standard wallmount form factor both EU and UK <p> Buy</p> <p>Note</p> <p>openHASP does not support the proprietary Tuya chip, but you can still flash the firmware and use the other GS-T3E features just fine.</p>"},{"location":"hardware/golden-security/gs-t3e/#packaging","title":"Packaging","text":""},{"location":"hardware/golden-security/gs-t3e/#flashing","title":"Flashing","text":"<p>Disclaimer</p> <p>Never connect high-voltage when the panel is not properly secured in place.</p> <p>Device can be flashed by either using the USB port or the flash header pins and a FTDI serial programmer device.</p> <p>Steps to flash via USB:</p> <ol> <li>Disengage the panel from high-voltage power</li> <li>Detach the panel from the PSU power supply</li> <li>Connect a Micro USB cable</li> <li>Connect <code>IO0</code> to <code>GND</code> to activate flash mode!</li> <li>Press the <code>KEY</code> button to powercycle (<code>RESET</code>) the board</li> </ol> <p>Steps to flash via UART:</p> <ol> <li>Disengage the panel from high-voltage power</li> <li>Detach the panel from the PSU power supply</li> <li>Connect jumper wires:<ul> <li>GND &lt;--&gt; GND</li> <li>5V &lt;--&gt; 5V</li> <li>RX &lt;--&gt; RX \u00a0 (not reversed!)</li> <li>TX &lt;--&gt; TX \u00a0 (not reversed!)</li> </ul> </li> <li>Connect <code>IO0</code> to <code>GND</code> to activate flash mode!</li> <li>Press the <code>KEY</code> button to powercycle (<code>RESET</code>) the board</li> </ol> <p>Once the connections are made, flash the GS-T3E ESP32 binary like on any other device.</p>"},{"location":"hardware/golden-security/gs-t3e/#gpio-settings","title":"GPIO Settings","text":""},{"location":"hardware/golden-security/gs-t3e/#3-gang-eu-version-gs-t3e","title":"3-gang EU version GS-T3E","text":"Pin Mode GS-T3E Group Default 45 Output Relay L1 1 Low (Normal) 46 Output Relay L2 2 Low (Normal) 44 Output Relay L3 3 Low (Normal) <p>Tip</p> <p>To configure the GPIOs as light switches at once for GS-T3E send to topic <code>hasp/&lt;nodename&gt;/config/gpio</code> a message with payload: <pre><code>{\"config\":[655918,656172,655661,0,0,0,0,0]}\n</code></pre> Or for power switches: <pre><code>{\"config\":[721454,721708,721197,0,0,0,0,0]}\n</code></pre> The difference is only the device class you want them to be autodetected as in Home Assistant: light vs. switch</p> Example <code>jsonl</code> <p>To create a page displaying the local relays as switches, try this very simple pages.jsonl: <pre><code>{\"page\":1,\"id\":1,\"obj\":\"switch\",\"x\":30,\"y\":40,\"w\":180,\"h\":75,\"radius\":40,\"radius20\":40,\"groupid\":1}\n{\"page\":1,\"id\":2,\"obj\":\"switch\",\"x\":30,\"y\":122,\"w\":180,\"h\":75,\"radius\":40,\"radius20\":40,\"groupid\":2}\n{\"page\":1,\"id\":3,\"obj\":\"switch\",\"x\":30,\"y\":205,\"w\":180,\"h\":75,\"radius\":40,\"radius20\":40,\"groupid\":3}\n</code></pre> </p>"},{"location":"hardware/golden-security/gs-t3e/#wiring-diagram","title":"Wiring Diagram","text":"<p>The switch supports this wiring configuration:</p> <p>Warning</p> <p>Always follow the instructions from the installation guide and local safety regulations. Consult a licensed electrician when changing your electrical wiring.</p>"},{"location":"hardware/golden-security/gs-t3e/#product-video","title":"Product Video","text":"Your browser does not support the video tag."},{"location":"hardware/golden-security/gs-t3e/#gallery","title":"Gallery","text":""},{"location":"hardware/lanbon/lanbon-l8/","title":"Lanbon L8","text":""},{"location":"hardware/lanbon/lanbon-l8/#models","title":"Models","text":"<ul> <li>L8-HS: 3 Relays - load up to 200W/gang</li> <li>L8-HD: 1 Dimmer - load up to 200W/gang</li> <li>L8-HB: Boiler switch - load up to 16A</li> <li>L8-HT: Thermostat switch - not tested!</li> </ul> <p>Warning</p> <p>Choose a model that works with Apple HomeKit because those are WiFi versions with the internal antenna connected to the ESP32.</p> <p>Do NOT buy a version that is powered by Tuya Smart Life because the internal antenna is connected to the Tuya chip. Those devices will have very bad WiFi reception of the ESP32!</p>"},{"location":"hardware/lanbon/lanbon-l8/#form-factor","title":"Form factor","text":"<ul> <li>EU model: 86mm x 86mm</li> <li>US model: 120mm x 74mm</li> </ul> <p>All models are rated at AC 100-250V ~50-60Hz, the form factor can be a design choice regardless of the continental area.</p> <p>The models have the same recessed housing sliding into the wall, sized 50x50mm, with rounded corners creating a diameter of about 59mm. This makes them suitable for both EU and US wall fixtures. The EU model fits in a properly deployed, standard 60mm round wall box and can be fixed with two side screws (use the screws which belong to the box instead of the ones shipped with the device), the US model fits in the standard rectangular box and can be fixed through the oval holes located 3 1/4\" apart. The depth of the wall box has to be at least 35-40mm because some room is needed for the wires coming out straight of the device.</p>"},{"location":"hardware/lanbon/lanbon-l8/#bezel-color","title":"Bezel Color","text":"<ul> <li>Black</li> <li>White</li> </ul>"},{"location":"hardware/lanbon/lanbon-l8/#features","title":"Features:","text":"<ul> <li>Input voltage 110-250V ~ 50-60Hz AC</li> <li>ESP32-WROVER-B</li> <li>Capacitive touch screen</li> <li>Energy counter</li> </ul> Pros Cons 8 MB flash Mood LEDS not uniform 8 MB PSram Capactitive touch Built-in PSU Energy monitor Standard wallmount form factor both EU and US <p> Buy</p> <p>Note 1</p> <p>An earlier revision V1.14 (20191203) of the PCB had an analog temperature sensor onboard. It was removed from V1.15 (20200521) of the PCB. You are likely not to get it when buying a recent switch.</p> <p>Note 2</p> <p>There is a new V1.17 of the PCB with Tuya support. openHASP does not support the proprietary Tuya chip, but you can still flash the firmware and use the other Lanbon L8 features just fine.</p>"},{"location":"hardware/lanbon/lanbon-l8/#contents","title":"Contents","text":""},{"location":"hardware/lanbon/lanbon-l8/#flashing","title":"Flashing","text":"<p>Disclaimer</p> <p>Never connect high-voltage when the panel is not properly secured in place.</p> <p></p> <p>You can follow this flashing guide on blakadder.com or this discussion post with instructions and photos to flash the firmware without having to open the device.</p> <p>Steps:</p> <ol> <li>Disengage the high-voltage power</li> <li>Detach the panel from the PSU power supply</li> <li>Connect <code>RX</code>, <code>TX</code>, <code>IO0</code>, <code>GND</code> and <code>5V</code> pins to the female pinheader</li> <li>Because there is no <code>RESET</code> pin, you need to powercycle the board while <code>IO0</code> is connected to <code>GND</code> to activate flash mode</li> </ol> <p>Make sure you have a USB to serial adapter than can provide sufficient power on the 5V pin. Once the serial connections are made, flash the Lanbon-L8 ESP32 binary like on any other device.</p>"},{"location":"hardware/lanbon/lanbon-l8/#gpio-settings","title":"GPIO Settings","text":""},{"location":"hardware/lanbon/lanbon-l8/#3-gang-version-l8-hs","title":"3-gang version L8-HS","text":"Pin Mode L8-HS Group Default 12 Output Relay (K3) 1 Low (Normal) 14 Output Relay 2 Low (Normal) 26 Output Mood Red 4 Low (Normal) 27 Output Relay 3 Low (Normal) 32 Output Mood Green 5 Low (Normal) 33 Output Mood Blue 6 Low (Normal) <p>Tip</p> <p>To configure the GPIOs as light switches at once for L8-HS send to topic <code>hasp/&lt;nodename&gt;/config/gpio</code> a message with payload: <pre><code>{\"config\":[197658,263456,329249,655628,655886,656155,0,0]}\n</code></pre> Or for power switches: <pre><code>{\"config\":[721164,721422,197658,721691,263456,329249,0,0]}\n</code></pre> The difference is only the device class you want them to be autodetected as in Home Assistant: light vs. switch</p> Example <code>jsonl</code> <p>To create a page displaying the local relays as switches, try this very simple pages.jsonl: <pre><code>{\"page\":1,\"id\":1,\"obj\":\"switch\",\"x\":30,\"y\":40,\"w\":180,\"h\":75,\"radius\":40,\"radius20\":40,\"groupid\":1}\n{\"page\":1,\"id\":2,\"obj\":\"switch\",\"x\":30,\"y\":122,\"w\":180,\"h\":75,\"radius\":40,\"radius20\":40,\"groupid\":2}\n{\"page\":1,\"id\":3,\"obj\":\"switch\",\"x\":30,\"y\":205,\"w\":180,\"h\":75,\"radius\":40,\"radius20\":40,\"groupid\":3}\n</code></pre> </p>"},{"location":"hardware/lanbon/lanbon-l8/#dimmer-version-l8-hd","title":"Dimmer version L8-HD","text":"Pin Mode L8-HD Group Default 12 Output Dimmer TX (K3) 1 Low (Normal) 26 Output Mood Red 4 Low (Normal) 32 Output Mood Green 5 Low (Normal) 33 Output Mood Blue 6 Low (Normal) <p>Warning</p> <p>There are two versions of the dimmer configuration: <code>EU</code> and <code>AU</code>. The protocol used to command the dimmer module differs between the two! Make sure that you have the correct type configured under your GPIO Output settings for pin <code>12</code>. Use the <code>AU</code> configuration for any 120V/US compatible dimmer modules.</p> <p>Tip</p> <p>To configure the GPIOs at once for L8-HD send to topic <code>hasp/&lt;nodename&gt;/config/gpio</code> a message with payload: EU version: <pre><code>{\"config\":[3211532,197658,263456,329249,0,0,0,0]}\n</code></pre></p> <p>AU/US version: <pre><code>{\"config\":[3277068,197658,263456,329249,0,0,0,0]}\n</code></pre></p>"},{"location":"hardware/lanbon/lanbon-l8/#boiler-version-l8-hb","title":"Boiler version L8-HB","text":"Pin Mode L8-HB Group Default 26 Output Mood Red 4 Low (Normal) 27 Output Relay 16A (K1) 1 Low (Normal) 32 Output Mood Green 5 Low (Normal) 33 Output Mood Blue 6 Low (Normal) <p>Tip</p> <p>To configure the GPIOs at once for L8-HB send to topic <code>hasp/&lt;nodename&gt;/config</code> a message with payload: <pre><code>{\"gpio\":{\"config\":[197658,263456,329249,721179,14,27,0,0]}}\n</code></pre></p> <p>Developer Note</p> <p>You can build your own firmware with GPIOs and many other parameters pre-configured in <code>user_config_override.h</code> as factory defaults for Lanbon L8.</p>"},{"location":"hardware/lanbon/lanbon-l8/#wiring-diagrams","title":"Wiring Diagrams","text":"<p>The switch supports several wiring configurations:</p> <p></p> <p>Warning</p> <p>Always follow the instructions from the installation guide and local safety regulations. Consult a licensed electrician when changing your electrical wiring.</p>"},{"location":"hardware/lanbon/lanbon-l8/#product-video","title":"Product Video","text":"<p> Your browser does not support the video tag.  </p>"},{"location":"hardware/lanbon/lanbon-l8/#gallery","title":"Gallery","text":""},{"location":"hardware/lanbon/lanbon-l8/#lcd-configuration","title":"LCD Configuration","text":"<p>The <code>lcd_config.ini</code> file specifies the different properties of the display, except for the actual pin configuration:</p> <pre><code>st7789v =\n    -D ST7789_DRIVER=1\n    ;-D CGRAM_OFFSET=1         ; Library will add offsets required\n    -D TFT_SDA_READ            ; Read from display, it only provides an SDA pin\n    -D TFT_WIDTH=240\n    -D TFT_HEIGHT=320\n    -D TFT_ROTATION=2          ; see TFT_ROTATION values\n    ; -D TFT_INVERSION_OFF     ; for normal colors\n    ; -D TFT_RGB_ORDER=TFT_RGB   ; Colour order Red-Green-Blue\n    -D TFT_RGB_ORDER=TFT_BGR ; Colour order Blue-Green-Red\n    -D SPI_FREQUENCY=80000000\n    -D SPI_READ_FREQUENCY=6000000 \n    -D USER_SETUP_LOADED=1\n    -D SUPPORT_TRANSACTIONS\n</code></pre>"},{"location":"hardware/lanbon/lanbon-l8/#hasp-build_flags","title":"HASP build_flags","text":"<p>Specify the LCD Configuration to use and define the GPIOs in the environment build flags:</p> <pre><code>build_flags =\n    ${env.build_flags}\n    ${esp32.build_flags}\n    ${esp32.ps_ram}\n\n;region -- TFT_eSPI build options ------------------------\n    ${lcd.st7789v}\n    -D LANBONL8\n    -D TFT_RST=18        ; FCP pin2 RESET\n    -D TFT_SCLK=19       ; FCP pin3 SCL\n    -D TFT_DC=21         ; FCP pin4 D/C\n    -D TFT_CS=22         ; FCP pin5 CS\n    -D TFT_MOSI=23       ; FCP pin6 SDA\n    -D TFT_MISO=25       ; FCP pin7 SDO\n    -D TFT_BCKL=5\n    -D TOUCH_DRIVER=6336\n    -D TOUCH_SDA=4\n    -D TOUCH_SCL=0\n    -D TOUCH_IRQ=-1   ; not connected\n    -D TOUCH_RST=-1   ; not used, connected to 3.3V on FCP pin10\n    -D TOUCH_FREQUENCY=400000\n    -D LED_RED=26\n    -D LED_GREEN=32\n    -D LED_BLUE=33\n    -D RELAY_1=12\n    -D RELAY_2=24\n    -D RELAY_3=37\n;endregion\n</code></pre>"},{"location":"hardware/lilygo/lilygo-lily-pi/","title":"LilyGO\u00ae Lily Pi","text":""},{"location":"hardware/lilygo/lilygo-lily-pi/#features","title":"Features","text":"<ul> <li>ESP32-WROVER</li> <li>ILI9481 or ST7796 3.5\" (480*320) TFT screen in 4-wire SPI mode</li> <li>FT6X36 or GT911 Capacitive Touch Controller</li> <li>CP2104 USB-to-UART IC</li> <li>USB-C connector</li> <li>DC 5-12V barrel jack (5.5x2.1mm)</li> <li>Relay HFD3 5V 2A</li> <li>microSD card holder</li> <li>Real Time Clock PCF8563</li> <li>Battery voltage divider connected to GPIO35</li> <li>GPIO output via USB-A type connectors</li> </ul> <p>The Lily Pi is designed to resemble the Raspberry Pi appearance. The PCB layout and ports also mimmicks the Rasberry Pi. There is even the familiar 2x20 expansion port inside that match the Raspberry Pi GPIO pinout. Some Rpi expansion boards could work on this PCB too depending on the pins used.</p> Pros Cons 480x320 display Non-standard USB-A connectors as GPIO 16 MB flash 8 MB PSram Capacitive Touchscreen <p>The RTC and SD card are not supported by openHASP 0.7.0-rc11.</p>"},{"location":"hardware/lilygo/lilygo-lily-pi/#models","title":"Models","text":"Model TN ST7796 FT6236 IPS ILI9481 GT911 SKU K113 K113-01 Resolution 480x320 480x320 TFT controller ST7796 ILI9481 Interface SPI SPI Touchscreen Capacitive Capacitive Touch controller FT6236 GT911 Screen dimming  yes  yes  Buy  AliExpress Tindie  Buy  AliExpress Tindie"},{"location":"hardware/lilygo/lilygo-lily-pi/#video","title":"Video","text":""},{"location":"hardware/lilygo/lilygo-lily-pi/#backlight-control","title":"Backlight Control","text":"<p>The GPIO that controls the backlight is <code>GPIO12</code>.</p>"},{"location":"hardware/lilygo/lilygo-lily-pi/#documentation","title":"Documentation","text":"<p>The Lily Pi comes with the following information cards describing all the GPIOs used:</p>"},{"location":"hardware/lilygo/lilygo-lily-pi/#flashing","title":"Flashing","text":"<p>The LilyGO Lily Pi can easily be flashed over USB like any ESP32 development board.</p>"},{"location":"hardware/lilygo/lilygo-lily-pi/#dimensions","title":"Dimensions","text":"<p>Size: 99.7 x 62.5 x 31.2mm</p>"},{"location":"hardware/lilygo/lilygo-t-display-s3/","title":"LilyGO\u00ae T-Display-S3","text":"<p>Warning</p> <p>The configuration for this board is under development and not finilized yet.</p> <p>LILYGO\u00ae T-Display-S3 ESP32-S3 1.9\" ST7789 LCD Display Development Board WIFI Bluetooth5.0 Wireless Module 170*320 Resolution</p> <p>T-Display-S3 is a development board whose main control chip is ESP32-S3. It is equipped with a 1.9\" LCD color screen and two programmable buttons. Communication using the I8080 interface Retains the same layout design as T-Display. You can directly use ESP32S3 for USB communication or programming.</p>"},{"location":"hardware/lilygo/lilygo-t-display-s3/#specifications","title":"Specifications","text":"Pros Cons MCU ESP32-S3R8 Dual-core LX7 microprocessor Wireless Connectivity Wi-Fi 802.11, BLE 5 + BT mesh Flash 16MB PSRAM 8MB Bat voltage detection IO04 Onboard functions Boot + Reset + IO14 Button LCD 1.9\" diagonal, Full-color TFT Display Drive Chip ST7789V Resolution 170(H)RGB x320(V) 8-Bit Parallel Interface Connectors JST-GH 1.25mm 2PIN STEMMA QT / QwiicJST-SH 1.0mm 4-PIN"},{"location":"hardware/lilygo/lilygo-t-display-s3/#touch-edition","title":"Touch Edition","text":"<p>ESP32-S3 1.9\" ST7789 LCD Display with Touch Screen Development Board.</p>"},{"location":"hardware/lilygo/lilygo-t-display-s3/#basic-edition","title":"Basic Edition","text":"<p>The Basic Edition of the LilyGO\u00ae T-Display-S3 does not have a touchscreen. It can only be used to display information. You can not interact with objects on the screen.</p> <p>However, you can connect GPIOs and/or use the push buttons to integrate the device into your Home Automation system.</p>"},{"location":"hardware/lilygo/lilygo-t-display-s3/#documentation","title":"Documentation","text":""},{"location":"hardware/lilygo/lilygo-t-display-s3/#documentation_1","title":"Documentation","text":"<p>Please visit the Waveshare Wiki pages for more information, schematics and demo code:</p>  Waveshare Wiki  TFT Touch Shield 2.8\" Rev 2.1 TFT Touch Shield 3.5\" TFT Touch Shield 4.0\""},{"location":"hardware/lilygo/lilygo-t-hmi/","title":"LILYGO\u00ae T-HMI ESP32-S3","text":"<p>Warning</p> <p>The configuration for this board is currently being tested.</p> <p>T-HMI is currently LILYGO's largest touch display screen equipped with ESP32-S3 chip. The screen uses a 2.8-inch ST7789 LCD and is equipped with a resistive screen stylus/pen. It has 16 MB onboard Flash and 8MB PSram. It can be powered via the USB-C interface, 5V DC seat or battery connector.</p> Pros Cons 16 MB flash Resistive Touchscreen 8 MB PSram 3 Groove ports <p>The SD card is not supported by openHASP 0.7.0-rc11.</p> <p> AliExpress  Tindie </p>"},{"location":"hardware/lilygo/lilygo-t-rgb-s3/","title":"LilyGO\u00ae T-RGB ESP32-S3","text":"<p>Warning</p> <p>The configuration for this board is under development and not finilized yet.</p>"},{"location":"hardware/lilygo/lilygo-t-rgb-s3/#oval-edition","title":"Oval Edition","text":""},{"location":"hardware/lilygo/lilygo-t-rgb-s3/#round-edition","title":"Round Edition","text":"<p>There is an Oval and a Round Edition of the LilyGO\u00ae T-RGB ESP32-S3. Both have a capacitive touchscreen.</p>"},{"location":"hardware/lilygo/ttgo-t7-s3/","title":"T7-S3 v1.1","text":"<p>Warning</p> <p>The configuration for this board is under development and not finilized yet.</p>"},{"location":"hardware/lilygo/ttgo-t7-s3/#lilygo-t7-s3-esp32-s3","title":"LilyGO\u00ae T7 S3 ESP32-S3","text":"<p>T7 S3 is an ESP32 module based on the ESP32-S3-WROOM-1, with 16 MB built-in Flash and 8MB PSram.</p> <p> AliExpress  Tindie </p>"},{"location":"hardware/lolin/lolin-tft-shield/","title":"Lolin TFT 2.4\" Touch Shield","text":""},{"location":"hardware/lolin/lolin-tft-shield/#features","title":"Features","text":"<p>This Lolin TFT has a 2.4\" touchscreen with XPT2046 resistive touch controller. There are 3 ways to connect an ESP32:</p> <ol> <li>Plug a compatible ESP32 onto the female headers on the back</li> <li>Attach a LOLIN D32 Pro V2.0 using the 10-pin TFT connector and cable</li> <li>Solder headers onto the bottom pinholes for pluging into a breadboard or jumper cables for any other ESP32</li> </ol> Pros Cons Plug-and-play Resistive touchscreen Limited soldering required Availability Choice of several ESP32 MCUs Price <p> Buy</p>"},{"location":"hardware/lolin/lolin-tft-shield/#compatible-esp32-dev-boards","title":"Compatible ESP32 dev boards","text":"<p>The Lolin TFT 2.4\" headers are plug-and-play compatible with these development boards, no need to use any jumper cables:</p> Model Minimal Better Best SKU D1 Mini ESP32 TTGO T7 V1.5 Mini32 Lolin D32 Pro V2.0 MCU ESP32-WROOM ESP32-WROVER ESP32-WROVER Flash 4 MB 4 or 16 MB 4 or 16 MB PSram No 8 MB 8 MB Connection Two 1x8 Pinheaders\u00b2 Two 1x8 Pinheaders\u00b2 10-pin TFT cable (optional) SD Card no no  yes Battery charging no  yes  yes USB Chip CH9102F CH340C Screen dimming  yes  yes  yes  Buy  Buy  Buy <p>Warning</p> <p>The D1 Mini ESP32 board may suffer from brown-out reboots if not powered adequately.</p> <p>Note</p> <p>(\u00b2) Because the board is developed for the D1-mini, you must only solder a row of 1x8 male pins to pads <code>TXD-5V</code> and <code>RST-3V3</code> each.</p>"},{"location":"hardware/lolin/lolin-tft-shield/#product-video","title":"Product Video","text":""},{"location":"hardware/lolin/lolin-tft-shield/#backlight-control","title":"Backlight Control","text":"<p>To use PWM dimming on the Lolin TFT 2.4\" you must bridge the center TFT-LED pin to the D1 solder pad next to it. This pin is configured by default in the firmware.</p> <p></p> <p>Warning</p> <p>Do not use D3 for backlight control because it is already in use for touch! Do not use D4 for backlight control because it is already in use for PSram on the ESP32-WROVER. The D1-mini has D4 connected to the on-board LED and boot fails if pulled LOW.</p>"},{"location":"hardware/lolin/lolin-tft-shield/#documentation","title":"Documentation","text":"<p> Wemos Wiki  Schematics</p>"},{"location":"hardware/lolin/lolin-tft-shield/#dimensions","title":"Dimensions","text":""},{"location":"hardware/m5stack/core2/","title":"M5Stack core2","text":"<p>M5Stack core2 is the second generation core device in the M5Stack development kit series. The core2 features a 2\" capacitive touchscreen, unlike its predecessor, making it very suitable to run openHASP. The device is packed with a beefy ESP32 model D0WDQ6-V3 and lots of sensors.</p>"},{"location":"hardware/m5stack/core2/#features","title":"Features","text":"<ul> <li>1W Speaker</li> <li>SPM1423 Microphone</li> <li>Vibration Motor</li> <li>3.7V / 390 mAh battery with power management chip</li> <li>SD card slot (16 GB maximum size)</li> <li>IMU (3-axis gyroscope &amp; 3-axis accelerometer)</li> </ul> <p>Dimensions: 54 x 54 x 16mm</p> Pros Cons 16 MB flash Small display 8 MB PSram Internal Battery Capacitive Touchscreen <p>Available from:</p> <p> M5stack  Mouser  Digikey  Amazon</p>"},{"location":"hardware/m5stack/core2/#product-video","title":"Product Video","text":""},{"location":"hardware/m5stack/core2/#schematic","title":"Schematic","text":"<p>  Schematics</p>"},{"location":"hardware/m5stack/core2/#m5stack-library","title":"M5Stack Library","text":"<p>The M5Stack series comes with an opensource library to give you a jump start in deveopment for this device, including a Getting Started guide, examples and API reference.</p> <p>Visit the M5Stack Github repo.</p>"},{"location":"hardware/makerfabs/esp32-s3-parallel-tft-touch/","title":"ESP32-S3 Parallel TFT with Touch","text":"<p>Warning</p> <p>The configuration for this board is under development and not finilized yet.</p> more images..."},{"location":"hardware/makerfabs/esp32-s3-parallel-tft-touch/#features","title":"Features","text":"<p>The Makerfabs ESP32-S3 Parallel TFT Touch development board incorporates a 3.5\u201d, 4.0\u201d or 4.3\u201d capacitive touch display which makes it a very suitable platform for any openHASP project.</p> <p>At the back sits an ESP32-S3-WROOM module with 16MB of flash and PSram. There is also an SD-card slot, USB-C connectors and two expansion ports.</p>"},{"location":"hardware/makerfabs/esp32-s3-parallel-tft-touch/#models","title":"Models","text":"Model 3.5\" Parallel 4.0\" Parallel 4.3\" Parallel SKU ESP32S335D E32S3RGB40 E32S3RGB43 Flash 16 MB 16 MB 16 MB PSram 2 MB 8 MB 8 MB Display 3.5\" 480x320 4.0\" IPS 4.3\" IPS Resolution 480x320 480x480 800x480 Touch Screen Capacitive Capacitive Capacitive SD Card  yes  yes  yes Real Time Clock  no  no  yes Screen dimming <code>GPIO45</code> <code>GPIO2</code> <code>GPIO2</code>  Buy  Buy  Buy <p>Also available on  Tindie</p> <p>The real-time clock and SD card are not supported by openHASP 0.7.0-rc11.</p>"},{"location":"hardware/makerfabs/esp32-s3-parallel-tft-touch/#backlight-control","title":"Backlight Control","text":"<p>The backlight of the 3.5\" model can be controlled by PWM on pin <code>GPIO45</code>.</p> <p>The backlight on the 4.0\" model is always on and can not be controlled.</p> <p>The backlight of the 4.3\" model can be controlled by PWM on pin <code>GPIO02</code> if the PCB is v1.3 only. With PCB v2.0 the backlight can not be adjusted and the screen is always on.</p>"},{"location":"hardware/makerfabs/esp32-s3-parallel-tft-touch/#video","title":"Video","text":""},{"location":"hardware/makerfabs/esp32-s3-parallel-tft-touch/#esp32-s3-parallel-tft-with-touch-35-ili9488","title":"ESP32-S3 Parallel TFT with Touch 3.5'' ILI9488","text":""},{"location":"hardware/makerfabs/esp32-s3-parallel-tft-touch/#esp32-s3-parallel-tft-with-touch-40","title":"ESP32-S3 Parallel TFT with Touch 4.0\"","text":""},{"location":"hardware/makerfabs/esp32-s3-parallel-tft-touch/#esp32-s3-parallel-tft-with-touch-43","title":"ESP32-S3 Parallel TFT with Touch 4.3\"","text":""},{"location":"hardware/makerfabs/esp32-s3-parallel-tft-touch/#documentation","title":"Documentation","text":"<p>More information can be found in the Makerfabs Wiki and there are plenty of example projects available on the Github repository.</p> <p> Makerfabs Wiki  Github Repo  Schematics</p>"},{"location":"hardware/makerfabs/esp32-s3-parallel-tft-touch/#enclosure","title":"Enclosure","text":"<p>We don't have any 3D printable enclosure yet to share here. If you have a case for this board, please let us know so we can share it here.</p>"},{"location":"hardware/makerfabs/esp32-s3-spi-tft-touch/","title":"ESP32-S3 SPI TFT with Touch","text":"more images..."},{"location":"hardware/makerfabs/esp32-s3-spi-tft-touch/#features","title":"Features","text":"<p>The ESP32-S3 SPI TFT with Touch development board incorporates a 3.5\u201d capacitive touch display which makes it a very suitable platform for any openHASP project.</p> <p>At the back sits an ESP32-S3-WROOM module with 16MB of flash and 2MB of PSram. There is also an SD-card slot, USB-C connectors and expansion port with 14 GPIOs.</p>"},{"location":"hardware/makerfabs/esp32-s3-spi-tft-touch/#models","title":"Models","text":"Model 3.5\" SPI SKU ESP32S3SPI35 Flash 16 MB PSram 2 MB Resolution 3.5\" 480x320 Touch Screen Capacitive SD Card  yes Screen dimming  yes  Buy <p>Also available on  Tindie</p> <p>Tip</p> <p>An optional environmental expansion board can be added to provide a temperature, humidity and air quality sensor. The camera can not be used at the same time as the expansion port.</p> <p>The camera and SD card are not supported by openHASP 0.7.0-rc11.</p>"},{"location":"hardware/makerfabs/esp32-s3-spi-tft-touch/#backlight-control","title":"Backlight Control","text":"<p>The backlight can be controlled by PWM on <code>GPIO48</code>.</p>"},{"location":"hardware/makerfabs/esp32-s3-spi-tft-touch/#video","title":"Video","text":""},{"location":"hardware/makerfabs/esp32-s3-spi-tft-touch/#documentation","title":"Documentation","text":"<p>More information can be found in the Makerfabs Wiki and there are plenty of example projects available on the Github repository.</p> <p> Makerfabs Wiki  Github Repo  Schematics</p>"},{"location":"hardware/makerfabs/esp32-s3-spi-tft-touch/#enclosure","title":"Enclosure","text":"<p>We don't have any 3D printable enclosure yet to share here. If you have a case for this board, please let us know so we can share it here.</p>"},{"location":"hardware/makerfabs/esp32-tft-touch/","title":"ESP32 TFT Touch with Camera","text":"more images..."},{"location":"hardware/makerfabs/esp32-tft-touch/#features","title":"Features","text":"<p>The Makerfabs ESP32 TFT Touch development board incorporates a 3.2\u201d or 3.5\u201d touch display, with a built-in 2M pixel OV2640 camera, which makes it a very suitable platform for any ESP32 project. There is a version with capacitive and resistive touch.</p> <p>At the back sits an ESP32-WROVER module with 16MB of flash and 8MB of PSram. There is also an SD-card slot, USB-C connector and expansion port with 14 GPIOs.</p>"},{"location":"hardware/makerfabs/esp32-tft-touch/#models","title":"Models","text":"Model 3.2\" Resistive 3.5\" Resistive 3.5\" Capacitive SKU ESPTFT32CA ESPTFT35RE ESPTFT35CA Flash 16 MB 16 MB 16 MB PSram 8 MB 8 MB 8 MB Resolution 3.2\" 320x240 3.5\" 480x320 3.5\" 480x320 Touch Screen Resistive Resistive Capacitive OV2640 Camera 2M pixel 2M pixel 2M pixel SD Card  yes  yes  yes Screen dimming  no  no  no  Buy  Buy  Buy <p>Also available on  Tindie</p> <p>Tip</p> <p>An optional environmental expansion board can be added to provide a temperature, humidity and air quality sensor. The camera can not be used at the same time as the expansion port.</p> <p>The camera and SD card are not supported by openHASP 0.7.0-rc11.</p>"},{"location":"hardware/makerfabs/esp32-tft-touch/#backlight-control","title":"Backlight Control","text":"<p>Unfortunately, there is no support for backlight control. The display is always-on.</p>"},{"location":"hardware/makerfabs/esp32-tft-touch/#video","title":"Video","text":""},{"location":"hardware/makerfabs/esp32-tft-touch/#documentation","title":"Documentation","text":"<p>More information can be found in the Makerfabs Wiki and there are plenty of example projects available on the Github repository.</p> <p> Makerfabs Wiki  Github Repo  Schematics</p>"},{"location":"hardware/makerfabs/esp32-tft-touch/#acrylic-case","title":"Acrylic Case","text":"<p>All 3 models have the option to add a protective acrylic case for only $2.90 extra:</p>"},{"location":"hardware/seeed-studio/sensecap-indicator-d1/","title":"SenseCAP Indicator D1","text":"more images... <p>SenseCAP Indicator D1 is a 4-inch touch screen driven by an ESP32-S3 and RP2040 dual-MCU and supports Wi-Fi/BLE communication. The ESP32-S3 has 8 MB flash and 8 MB PSRAM. It is a powerful, fully open-source IoT development platform.</p> <p>It can be powered via USB-C 2.0 on the bottom or the backside of the device. It is suitable for mounting on the wall or placement on a desk using the kickback stand.</p>"},{"location":"hardware/seeed-studio/sensecap-indicator-d1/#models","title":"Models","text":"<p>The SenseCAP Indicator series offers four different versions: D1, D1S, D1L, and D1Pro. Each version is designed to meet different application needs without any extra cost from unnecessary hardware. Here are the differences between the versions:</p> <p>Attention</p> <p>openHASP does not support the D1S sensors or D1L Lora communications.</p>  Buy  Mouser Kiwi Electronics Seeed Studio <p> Documentation</p>"},{"location":"hardware/seeed-studio/sensecap-indicator-d1/#product-video","title":"Product Video","text":"<p>Introduction to the SenseCAP Indicator D1:</p>"},{"location":"hardware/seeed-studio/sensecap-indicator-d1/#gallery","title":"Gallery","text":""},{"location":"hardware/sunton/esp32-1732s019/","title":"Sunton ESP32-1732S019","text":"<p>Warning</p> <p>The configuration for this board is under development and not finilized yet.</p> <p>These are great \"all-in-one\" device that have integrated ESP32/ESP32-S3 chips, many with PSRAM.  Sizes from 1.9\" to a whopping 7\" display and built in touch.</p> <p>Available via the Sunton store on Aliexpress.</p>"},{"location":"hardware/sunton/esp32-1732s019/#versions","title":"Versions","text":"<p>There are many versions:</p> <ul> <li>ESP32-1732S019 (ESP32-S3) - currently not supported</li> <li>ESP32-2432S028 (ESP32)</li> <li>ESP32-3248S035(r/c)* (ESP32)</li> <li>ESP32-4827S043(r/c)* (ESP32-S3)</li> <li>ESP32-8048S050 (ESP32-S3)</li> <li>ESP32-8048S070 (ESP32-S3)</li> </ul> <p>*Note: versions can have Resistive (r) or Capacitive (c) touch screens, you need to ensure you load the correct firmware for the device you have.</p> <p>ESP32-S3 Modules have PSram and are more suitable for loading fonts, and graphics.</p>"},{"location":"hardware/sunton/esp32-1732s019/#features","title":"Features","text":"<p>The Sunton screens are fully featured and ready to use screens with ESP32(S3) integrated, touch control integrated (Resistive or Capacitive), with resultions as high has 800x480! (in the 4.3\"+ screens).  The back has many GPIO pins avialable through an included connector, TF Slot, Audio out (some versions), note: audio/tf not supported in openHASP yet.</p>"},{"location":"hardware/sunton/esp32-1732s019/#cases","title":"Cases","text":"<p>If you have a 3D printer, cases are becoming available:</p>"},{"location":"hardware/sunton/esp32-1732s019/#esp32-3248s035","title":"ESP32-3248S035","text":"<p>Sunton ESP32 3.5inch Display Case Stand from Printables.com</p>"},{"location":"hardware/sunton/esp32-1732s019/#esp32-4827s043","title":"ESP32-4827S043","text":"<p>Sunton ESP32S3 8048s043c 4.3\" Screen Case from Printables.com</p> <p>Other cases maybe available, search printables, thingiverse, etc</p>"},{"location":"hardware/sunton/esp32-1732s019/#flashing","title":"Flashing","text":"<p>Compile your own via platform.io and <code>platformio_override.ini</code> environment templates.</p> <p>Also available via web installer at https://nightly.openhasp.com/</p> <p>or the latest found under Github Actions, click on the latest action, and look under the <code>Assets</code> sections for zip files containing builds binary files.</p>"},{"location":"hardware/sunton/esp32-1732s019/#recommended-method","title":"Recommended method","text":"<ol> <li> <p>Use the <code>Nightly</code> build website to initially flash the device.</p> </li> <li> <p>Then update with the OTA file found under <code>Actions</code>, <code>Assets</code> on github.  Or compile your own if comfortable doing that.</p> </li> </ol>"},{"location":"hardware/sunton/esp32-1732s019/#initial-setup-notes","title":"Initial Setup Notes","text":"<p>Note that some of the screens have TWO versions, Resistive and Capacitive, so flash the correct firmware (ends in <code>r</code> or a <code>c</code> respectively).</p> <p>RESISTIVE: After first boot, Run a <code>Calibration</code> via the web ui -&gt; Display Setup -&gt; Calibrate</p> <p>Then on the screen, touch the indicated points.</p>"},{"location":"hardware/sunton/esp32-2424s012/","title":"ESP32-2424S012","text":""},{"location":"hardware/sunton/esp32-2424s012/#features","title":"Features","text":"<p>The ESP32-2424S012 is a device that features an ESP32-C3 (without any PSRAM), a 1.28\" circular IPS display and a CST816S capacitive countroller. It is notable for having a circular, rather than rectangular, display. </p> <p>It is available with a case. Power is supplied via a USB-C port, but it does not have necessary the CC resistors to use USB-C to USB-C cables - it is necessary to use a USB-A to USB-C cable. </p> Pros Cons Circular display Circular display IPS panel (good viewing angles) Small Capacitive touchscreen No PSRAM Available with case No CC resistors"},{"location":"hardware/sunton/esp32-2424s012/#gallery","title":"Gallery","text":""},{"location":"hardware/sunton/esp32-2424s012/#flashing","title":"Flashing","text":"<p>This device uses the native USB Serial on the ESP32-C3. To put the module into flashing mode, hold the boot button (right-hand button on the back, when viewed with the display facedown and the USB port facing towards you) while clicking the reset button (other bottom facing button). After this, it can be flashed as usual.</p> <p>After flashing, click the reset button to boot OpenHASP. After setup, the display will be inverted - to fix this, navigate to Configuration &gt; Display Settings and enable \"Invert Display\". </p>"},{"location":"hardware/sunton/esp32-2432s028/","title":"Sunton ESP32-2432S028","text":"<p>These are great \"all-in-one\" device that have integrated ESP32/ESP32-S3 chips, many with PSRAM.  Sizes from 1.9\" to a whopping 7\" display and built in touch.</p> <p>Available via the Sunton store on Aliexpress.</p>"},{"location":"hardware/sunton/esp32-2432s028/#versions","title":"Versions","text":"<p>There are many versions:</p> <ul> <li>ESP32-1732S019 (ESP32-S3) - currently not supported</li> <li>ESP32-2432S028 (ESP32)</li> <li>ESP32-3248S035(r/c)* (ESP32)</li> <li>ESP32-4827S043(r/c)* (ESP32-S3)</li> <li>ESP32-8048S050 (ESP32-S3)</li> <li>ESP32-8048S070 (ESP32-S3)</li> </ul> <p>*Note: versions can have Resistive (r) or Capacitive (c) touch screens, you need to ensure you load the correct firmware for the device you have.</p> <p>ESP32-S3 Modules have PSram and are more suitable for loading fonts, and graphics.</p>"},{"location":"hardware/sunton/esp32-2432s028/#features","title":"Features","text":"<p>The Sunton screens are fully featured and ready to use screens with ESP32(S3) integrated, touch control integrated (Resistive or Capacitive), with resultions as high has 800x480! (in the 4.3\"+ screens).  The back has many GPIO pins avialable through an included connector, TF Slot, Audio out (some versions), note: audio/tf not supported in openHASP yet.</p>"},{"location":"hardware/sunton/esp32-2432s028/#cases","title":"Cases","text":"<p>If you have a 3D printer, cases are becoming available:</p>"},{"location":"hardware/sunton/esp32-2432s028/#esp32-3248s035","title":"ESP32-3248S035","text":"<p>Sunton ESP32 3.5inch Display Case Stand from Printables.com</p>"},{"location":"hardware/sunton/esp32-2432s028/#esp32-4827s043","title":"ESP32-4827S043","text":"<p>Sunton ESP32S3 8048s043c 4.3\" Screen Case from Printables.com</p> <p>Other cases maybe available, search printables, thingiverse, etc</p>"},{"location":"hardware/sunton/esp32-2432s028/#flashing","title":"Flashing","text":"<p>Compile your own via platform.io and <code>platformio_override.ini</code> environment templates.</p> <p>Also available via web installer at https://nightly.openhasp.com/</p> <p>or the latest found under Github Actions, click on the latest action, and look under the <code>Assets</code> sections for zip files containing builds binary files.</p>"},{"location":"hardware/sunton/esp32-2432s028/#recommended-method","title":"Recommended method","text":"<ol> <li> <p>Use the <code>Nightly</code> build website to initially flash the device.</p> </li> <li> <p>Then update with the OTA file found under <code>Actions</code>, <code>Assets</code> on github.  Or compile your own if comfortable doing that.</p> </li> </ol>"},{"location":"hardware/sunton/esp32-2432s028/#initial-setup-notes","title":"Initial Setup Notes","text":"<p>Note that some of the screens have TWO versions, Resistive and Capacitive, so flash the correct firmware (ends in <code>r</code> or a <code>c</code> respectively).</p> <p>RESISTIVE: After first boot, Run a <code>Calibration</code> via the web ui -&gt; Display Setup -&gt; Calibrate</p> <p>Then on the screen, touch the indicated points.</p>"},{"location":"hardware/sunton/esp32-3248s035/","title":"Sunton ESP32-3248S035","text":"<p>The ESP32-3248S035 boards all come with an integrated ESP32-S3 chip, 16 MB flash and 8 MB PSRAM. There are 3 models: without touch, with resistive touch or with capacitive touch. They have a TN panel with a display resolution of 480x272 and acceptable viewing angles.</p>"},{"location":"hardware/sunton/esp32-3248s035/#models","title":"Models","text":"Model Resistive Touch Capacitive Touch SKU ESP32-3248S035R ESP32-3248S035C MCU ESP32-D0WDQ6 ESP32-D0WDQ6 Flash 4 MB 4 MB PSram No No Display Panel 3.5\" TN 3.5' TN Resolution 480x320 480x320 Touch Screen Resistive Capacitive SD Card  yes  yes Screen dimming  yes  yes  Buy  Buy <p>The SD card is not supported by openHASP 0.7.0-rc11.</p> <p>Note</p> <pre><code>Models can have Resistive (r) or Capacitive (c) touch screens, you need to ensure you purchase the correct version and load the corresponding firmware for the device you have.\n</code></pre> <p>ESP32 Modules have no PSram and are less suitable for loading fonts, and graphics.</p>"},{"location":"hardware/sunton/esp32-3248s035/#features","title":"Features","text":"<p>The Sunton screens are fully featured and ready to use screens with ESP32(S3) integrated, touch control integrated (Resistive or Capacitive), with resultions as high has 800x480! (in the 4.3\"+ screens).  The back has many GPIO pins avialable through an included connector, TF Slot, Audio out (some versions), note: audio/tf not supported in openHASP yet.</p>"},{"location":"hardware/sunton/esp32-3248s035/#cases","title":"Cases","text":"<p>If you have a 3D printer, cases are becoming available:</p> <p>Sunton ESP32S3 8048s043c 4.3\" Screen Case from Printables.com</p> <p>Other cases maybe available, search printables, thingiverse, etc</p>"},{"location":"hardware/sunton/esp32-3248s035/#flashing","title":"Flashing","text":"<p>Compile your own via platform.io and <code>platformio_override.ini</code> environment templates.</p> <p>Also available via web installer at https://nightly.openhasp.com/</p> <p>or the latest found under Github Actions, click on the latest action, and look under the <code>Assets</code> sections for zip files containing builds binary files.</p>"},{"location":"hardware/sunton/esp32-3248s035/#recommended-method","title":"Recommended method","text":"<ol> <li> <p>Use the <code>Nightly</code> build website to initially flash the device.</p> </li> <li> <p>Then update with the OTA file found under <code>Actions</code>, <code>Assets</code> on github.  Or compile your own if comfortable doing that.</p> </li> </ol>"},{"location":"hardware/sunton/esp32-3248s035/#initial-setup-notes","title":"Initial Setup Notes","text":"<p>Note that some of the screens have TWO versions, Resistive and Capacitive, so flash the correct firmware (ends in <code>r</code> or a <code>c</code> respectively).</p> <p>RESISTIVE: After first boot, Run a <code>Calibration</code> via the web ui -&gt; Display Setup -&gt; Calibrate</p> <p>Then on the screen, touch the indicated points.</p>"},{"location":"hardware/sunton/esp32-4827s043/","title":"Sunton ESP32-4827S043","text":"<p>The ESP32-4827s043 boards all come with an integrated ESP32-S3 chip, 16 MB flash and 8 MB PSRAM. There are 3 models: without touch, with resistive touch or with capacitive touch. They have a TN panel with a display resolution of 480x272 and acceptable viewing angles.</p>"},{"location":"hardware/sunton/esp32-4827s043/#models","title":"Models","text":"Model TN Without Touch TN Resistive Touch TN Capacitive Touch SKU ESP32-4827S043 ESP32-4827S043R ESP32-4827S043C MCU ESP32-S3-Wroom ESP32-S3-Wroom ESP32-S3-Wroom Flash 16 MB 16 MB 16 MB PSram 8 MB 8 MB 8 MB Display Panel 4.3\" TN 4.3\" TN 4.3\" TN Resolution 480x272 480x272 480x272 Touch Screen None Resistive Capacitive SD Card  yes  yes  yes Screen dimming  yes  yes  yes  Buy  Buy  Buy <p>The audio port and SD card are not supported by openHASP 0.7.0-rc11.</p> <p>Note</p> <pre><code>Models can have Resistive (r) or Capacitive (c) touch screens, you need to ensure you purchase the correct version and load the corresponding firmware for the device you have.\n</code></pre> <p>ESP32-S3 Modules have PSram and are more suitable for loading fonts, and graphics.</p>"},{"location":"hardware/sunton/esp32-4827s043/#features","title":"Features","text":"<p>The Sunton screens are fully featured and ready to use screens with ESP32(S3) integrated, touch control integrated (Resistive or Capacitive), with resultions as high has 800x480! (in the 4.3\"+ screens).  The back has many GPIO pins avialable through an included connector, TF Slot, Audio out (some versions), note: audio/tf not supported in openHASP yet.</p>"},{"location":"hardware/sunton/esp32-4827s043/#cases","title":"Cases","text":"<p>If you have a 3D printer, cases are becoming available:</p> <p>Sunton ESP32S3 8048s043c 4.3\" Screen Case from Printables.com</p> <p>Other cases maybe available, search printables, thingiverse, etc</p>"},{"location":"hardware/sunton/esp32-4827s043/#flashing","title":"Flashing","text":"<p>Compile your own via platform.io and <code>platformio_override.ini</code> environment templates.</p> <p>Also available via web installer at https://nightly.openhasp.com/</p> <p>or the latest found under Github Actions, click on the latest action, and look under the <code>Assets</code> sections for zip files containing builds binary files.</p>"},{"location":"hardware/sunton/esp32-4827s043/#recommended-method","title":"Recommended method","text":"<ol> <li> <p>Use the <code>Nightly</code> build website to initially flash the device.</p> </li> <li> <p>Then update with the OTA file found under <code>Actions</code>, <code>Assets</code> on github.  Or compile your own if comfortable doing that.</p> </li> </ol>"},{"location":"hardware/sunton/esp32-4827s043/#initial-setup-notes","title":"Initial Setup Notes","text":"<p>Note that some of the screens have TWO versions, Resistive and Capacitive, so flash the correct firmware (ends in <code>r</code> or a <code>c</code> respectively).</p> <p>RESISTIVE: After first boot, Run a <code>Calibration</code> via the web ui -&gt; Display Setup -&gt; Calibrate</p> <p>Then on the screen, touch the indicated points.</p>"},{"location":"hardware/sunton/esp32-8048s0xx/","title":"Sunton ESP32-8048S0xx","text":"<p>These are great \"all-in-one\" device that have integrated ESP32-S3 chips with 16 MB of flash and 8MB PSram. There are 3 sizes available with an 800x480 resolution ranging from 4.3\", 5\" to 7\" display and built in capacitive touch panel.</p> <p>The 4.3\" and 5\" model have an IPS panel so the viewing angles are great. The 7\" version uses a TN panel with acceptable viewing angles but a larger display area.</p>"},{"location":"hardware/sunton/esp32-8048s0xx/#models","title":"Models","text":"Model 4.3\" IPS Capacitive 5.0\" IPS Capacitive 7.0\" TN Capacitive SKU ESP32-8048S043C ESP32-8048S050C ESP32-8048S070C MCU ESP32-S3-Wroom ESP32-S3-Wroom ESP32-S3-Wroom Flash 16 MB 16 MB 16 MB PSram 8 MB 8 MB 8 MB Display Panel 4.3\" IPS 5.0\" IPS 7.0\" TN Resolution 800x480 800x480 800x480 Touch Screen Capacitive Capacitive Capacitive SD Card  yes  yes  yes Screen dimming  yes  yes  yes  Buy  Buy  Buy <p>The audio port and SD card are not supported by openHASP 0.7.0-rc11.</p> <p>Note</p> <pre><code>Models can have Resistive (r) or Capacitive (c) touch screens, you need to ensure you purchase the correct version and load the corresponding firmware for the device you have.\n</code></pre> <p>ESP32-S3 Modules have PSram and are more suitable for loading fonts, and graphics.</p>"},{"location":"hardware/sunton/esp32-8048s0xx/#features","title":"Features","text":"<p>The Sunton screens are fully featured and ready to use screens with ESP32(S3) integrated, touch control integrated (Resistive or Capacitive), with resultions as high has 800x480! (in the 4.3\"+ screens).  The back has many GPIO pins avialable through an included connector, TF Slot, Audio out (some versions), note: audio/tf not supported in openHASP yet.</p>"},{"location":"hardware/sunton/esp32-8048s0xx/#cases","title":"Cases","text":"<p>If you have a 3D printer, cases are becoming available:</p> <p>SUNON ESP32-2432S028 DISPLAY BOX: https://cults3d.com/en/3d-model/gadget/esp32-2432s028-display-box</p> <p>SUNON ESP32-3248S035 DISPLAY BOX: https://cults3d.com/en/3d-model/gadget/sunon-esp32-3248s035-matsekberg</p> <p>SUNON ESP32-8048S050 DISPLAY BOX: https://cults3d.com/en/3d-model/gadget/sunon-esp32-8048s050-display-box</p> <p>Other cases maybe available, search printables, thingiverse, etc</p>"},{"location":"hardware/sunton/esp32-8048s0xx/#flashing","title":"Flashing","text":"<p>Compile your own via platform.io and <code>platformio_override.ini</code> environment templates.</p> <p>Also available via web installer at https://nightly.openhasp.com/</p> <p>or the latest found under Github Actions, click on the latest action, and look under the <code>Assets</code> sections for zip files containing builds binary files.</p>"},{"location":"hardware/sunton/esp32-8048s0xx/#recommended-method","title":"Recommended method","text":"<ol> <li> <p>Use the <code>Nightly</code> build website to initially flash the device.</p> </li> <li> <p>Then update with the OTA file found under <code>Actions</code>, <code>Assets</code> on github.  Or compile your own if comfortable doing that.</p> </li> </ol>"},{"location":"hardware/sunton/esp32-8048s0xx/#initial-setup-notes","title":"Initial Setup Notes","text":"<p>Note that some of the screens have TWO versions, Resistive and Capacitive, so flash the correct firmware (ends in <code>r</code> or a <code>c</code> respectively).</p> <p>RESISTIVE: After first boot, Run a <code>Calibration</code> via the web ui -&gt; Display Setup -&gt; Calibrate</p> <p>Then on the screen, touch the indicated points.</p>"},{"location":"hardware/waveshare/waveshare-rpi-lcd/","title":"Waveshare RPi LCD (Rev C)","text":""},{"location":"hardware/waveshare/waveshare-rpi-lcd/#models","title":"Models","text":"<p>The Waveshare RPi LCD (Rev C) display comes in 3.5\" and 4.0\" sizes:</p> Model 3.5inch (Rev C) 4.0inch (Rev C) SKU 15811 16099 Resolution 480x320 480x320 TFT controller ILI9486 ST7796 Interface SPI SPI Touchscreen Resistive Resistive Touch controller XPT2046 XPT2046 Screen dimming  yes  yes  Buy  Amazon                             US Amazon                             UK Amazon                             DE Amazon                             FR Amazon                             ES Amazon                             NL AliExpress Waveshare.com  Buy  AliExpress Waveshare.com"},{"location":"hardware/waveshare/waveshare-rpi-lcd/#backlight-control","title":"Backlight Control","text":"<p>By default the display is always on. To enable backlight dimming, you can connect the pads marked by the red arrow using a 0R resistor or a direct solder connection:</p> <p>Attention (*)</p> <p>The WaveShare 3.5\" RPi LCD Revision C (SKU 15811) and WaveShare 4.0\" RPi LCD Revision C (SKU 16099) have the solder jumper on the back to enable PWM backlight dimming. Most revisions of this board do not have this feature!</p>"},{"location":"hardware/waveshare/waveshare-rpi-lcd/#development-boards","title":"Development Boards","text":""},{"location":"hardware/waveshare/waveshare-rpi-lcd/#esp32-one","title":"ESP32 One","text":"<p>The Waveshare ESP32 One development board has the same form factor as the Raspberry Pi Zero, inluding a 40 pin GPIO header. The ESP32 One is plug-and-play compatible with the Waveshare RPi LCD (Rev C) 3.5\" and 4\".</p> <p>This board has 4 MB flash and 8 MB PSRAM.</p>  Buy  Amazon             US Amazon             UK Amazon             DE Amazon             FR Amazon             ES Amazon             NL AliExpress Waveshare.com <p> Schematics</p>"},{"location":"hardware/waveshare/waveshare-rpi-lcd/#gallery","title":"Gallery","text":""},{"location":"hardware/waveshare/waveshare-rpi-lcd/#pin-configuration","title":"Pin Configuration","text":"LCD Pin Function ESP32 Pin Config Name Display Pin 1 Module Power 3.3V 3.3V 3.3V 2 Module Power 5v 5V 5V 3 Not connected N/C 4 5V 5-10 Not connected N/C 11 Touch Interrupt N/C TOUCH_IRQ TP_IRQ 12 (*) LED Backlight PWM GPIO26 TFT_BCKL LCD_LED 13 Not connected N/C 14 Module Ground GND GND 15-16 Not connected N/C 17 Module Power 3.3V 3.3V 18 Data Command control pin GPIO4 TFT_DC LCD_RS 19 SPI Master Out Slave In GPIO13 TFT_MOSI LCD/SI/TP_SI 20 Not connected N/C 21 Touch Panel Slave Out GPIO12 TFT_MISO TP_SO 22 LCD Reset pin GPIO32 TFT_RST RST 23 SPI Clock GPIO14 TFT_SCLK LCD_SCK/TP_SCK 24 Chip select control pin GPIO5 TFT_CS LCD_CS 25 Module Ground GND GND 26 Touch Chip Select GPIO22 TOUCH_CS TP_CS <p>SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller.</p> <p>You can also use jumper wires to connect the display to any ESP32 development board:</p> <p>6 GPIOs are required to drive the SPI display. One additional GPIO is needed for the XPT2046 touch sensor and one extra GPIO for backlight dimming. Including the VCC and GND pins, a total of 13 connections need to be made to the MCU.</p>"},{"location":"hardware/waveshare/waveshare-rpi-lcd/#lcd-configuration","title":"LCD Configuration","text":"<p>The <code>lcd_config.ini</code> file specifies the different properties of the display, except for the actual pin configuration:</p> <pre><code>raspberrypi =\n    -D RPI_DISPLAY_TYPE=1\n    -D ST7796_DRIVER=1\n    -D TFT_WIDTH=320\n    -D TFT_HEIGHT=480\n    -D TFT_ROTATION=0 ; 0=0, 1=90, 2=180 or 3=270 degree\n    -D SPI_FREQUENCY=80000000\n    -D SPI_TOUCH_FREQUENCY=2500000\n    -D USER_SETUP_LOADED=1\n    -D TOUCH_DRIVER=2046 ; XPT2046 Resistive touch panel driver\n    -D SUPPORT_TRANSACTIONS\n</code></pre>"},{"location":"hardware/waveshare/waveshare-rpi-lcd/#hasp-build_flags","title":"HASP build_flags","text":"<p>Specify the LCD Configuration to use and define the GPIOs in the environment build flags:</p> <pre><code>build_flags =\n    ${env.build_flags}\n    ${esp32.build_flags}\n    -DBOARD_HAS_PSRAM               ; uses 78kB\n\n; -- TFT_eSPI build options ------------------------\n    ${lcd.raspberrypi}\n    ${esp32.hspi}        ; Use HSPI hardware SPI bus\n    -D TFT_CS=5\n    -D TFT_DC=4\n    -D TFT_RST=32\n    -D TFT_BCKL=26       ; Default, configurable via web UI\n    -D TOUCH_CS=22\n    -D SD_CS=15          ; Currently not supported\n</code></pre>"},{"location":"hardware/waveshare/waveshare-tft-touch-shield/","title":"Waveshare TFT Touch Shield","text":"more images... <p>Waveshare has a line of TFT Touch Shields for Arduino which are also plug-and-play compatible with the ESPDUINO-32 aka. Wemos \u201cTTGo\u201d D1 R32 board. Unlike many other common Arduino UNO shields the Waveshare displays have an SPI interface with resistive touch controller and backlight control.</p> <p>Be sure to check if the <code>LCD_BL</code>, <code>LCD_CS</code> and <code>TP_CS</code> pins are present. If these pins are missing, the screen won't work with the pre-compiled builds.</p>"},{"location":"hardware/waveshare/waveshare-tft-touch-shield/#models","title":"Models","text":"<p>There are 3 models of this TFT shield:</p> Model 2.8\" Rev 2.1 3.5inch 4.0inch SKU 10684 13506 13587 Resolution 320x240 480x320 480x320 TFT controller ST7789(Rev 2.1 only) ILI9486 ILI9486 Interface SPI SPI SPI Touchscreen Resistive Resistive Resistive Touch controller XPT2046 XPT2046 XPT2046 SD Card  yes  yes  yes Screen dimming  yes  yes  yes  Buy  Amazon                             US Amazon                             UK Amazon                             DE Amazon                             FR Amazon                             ES Amazon                             NL Waveshare.com  Buy  Amazon                             US Amazon                             UK Amazon                             DE Amazon                             FR Amazon                             ES Amazon                             NL AliExpress Waveshare.com  Buy  Amazon                             US Amazon                             UK Amazon                             DE Amazon                             FR Amazon                             ES Amazon                             NL AliExpress Waveshare.com"},{"location":"hardware/waveshare/waveshare-tft-touch-shield/#backlight-control","title":"Backlight Control","text":"<p>All three models come with an <code>LCD_BL</code> pin that allows for backlight control. It is connected to <code>GPIO13</code> on the D1 R32 development board.</p>"},{"location":"hardware/waveshare/waveshare-tft-touch-shield/#documentation","title":"Documentation","text":"<p>Please visit the Waveshare Wiki pages for more information, schematics and demo code:</p>  Waveshare Wiki  TFT Touch Shield 2.8\" Rev 2.1 TFT Touch Shield 3.5\" TFT Touch Shield 4.0\""},{"location":"hardware/waveshare/waveshare-tft-touch-shield/#configuration","title":"Configuration","text":"<p>Note</p> <p>By default the DIP switches on the display are set in the <code>ICSP</code> position instead of the <code>SPI</code> position. If your board does not include an <code>ICSP</code> header, you need to switch the display over to use the <code>SPI</code> pins.</p> <p>To use the <code>MISO</code>, <code>MOSI</code> and <code>SCLK</code> SPI pins you first need to peel of the orange tape that sticks on top of the dip switches. Then move all 3 DIP switches to the <code>ON</code> position with a tiny screwdriver.</p> <p>The 2.8\" model has 3 solder jumpers <code>SB1</code>, <code>SB2</code> and <code>SB3</code> that need to be bridged instead!</p>"},{"location":"hardware/waveshare/waveshare-tft-touch-shield/#development-boards","title":"Development Boards","text":""},{"location":"hardware/waveshare/waveshare-tft-touch-shield/#d1-r32","title":"D1 R32","text":"<p>The Waveshare TFT Touch Shields are compatible with the ESPDUINO-32 aka. Wemos \u201cTTGo\u201d D1 R32 development board. It contains an ESP32-WROOM module with 4MB flash.</p> <p>Warning</p> <p>The D1 R32 ESP32 board may suffer from brown-out reboots if not powered adequately.</p>"},{"location":"hardware/waveshare/waveshare-tft-touch-shield/#arducam-iotai-esp32","title":"Arducam IoTai ESP32","text":"<p>Onboard 4MB PSRAM, 4MByte Flash</p> <p>To be tested</p>"},{"location":"hardware/waveshare/waveshare-tft-touch-shield/#adafruit-metro-esp32-s2","title":"Adafruit Metro ESP32-S2","text":"<p>With 4 MByte of Flash and 2 MByte of PSRAM</p> <p>Note</p> <p>This board has not been tested yet!</p>"},{"location":"hardware/wireless-tag/wt-86-32-3zw1/","title":"WT-86-32-3ZW1","text":"<p>Warning</p> <p>This product with ESP32-S2 is not sold anymore and will soon become obsolete. Please get the ESP32-S3 model instead.</p> <p>The Wireless-Tag WT-86-32-3ZW1 is a 86x86mm touchscreen with 4 relays that can be mounted in a standard 86x86mm wall-box. It is currently only available from Alibaba for around US $40 excluding shipping.</p>"},{"location":"hardware/wireless-tag/wt-86-32-3zw1/#features","title":"Features","text":"Pros Cons 16 MB flash Display ghosting 8 MB PSram 320 kB SRAM (ESP32-S2) Price Can't fit in EU workbox Capacitive Touchscreen"},{"location":"hardware/wireless-tag/wt-86-32-3zw1/#issues","title":"Issues","text":"<p>One issue we've noticed is temporary ghosting on the display reported by multiple users. When showing a UI with white, cyan or bright colors on a dark background, a dim ghost image of these bright colors can linger on the screen for some time after changing pages.</p> <p>If you notice this issue on your device, please report back in this Github discussion thread.</p>"},{"location":"hardware/wireless-tag/wt-86-32-3zw1/#dimensions","title":"Dimensions","text":"<p>Note</p> <p>The size of the PSU unit does not fit a regular EU wall-box and mounting it in a US wall-box needs testing.</p>"},{"location":"hardware/wireless-tag/wt-86-32-3zw1/#flashing","title":"Flashing","text":"<p>All pins are conveniently broken out on the 2mm pitch female header. Make sure the USB port can deliver enough power. It is best to use a powered USB hub since most PC ports can not power the whole device.</p> <pre><code>esptool.py --port COM6 erase_flash\nesptool.py --port COM6 write_flash 0x0 wt-86-32-3zw1_full_16MB_v0.6.3-dev_88a478d.bin --verify\n</code></pre>"},{"location":"hardware/wireless-tag/wt-86-32-3zw1/#gallery","title":"Gallery","text":""},{"location":"hardware/wireless-tag/wt32-sc01-plus/","title":"WT32-SC01 Plus","text":""},{"location":"hardware/wireless-tag/wt32-sc01-plus/#features","title":"Features","text":"<p>The SC01 Plus uses an ESP32-S3-WROVER module with a 3.5-inch capacitive touch display. openHASP can take advantage of the 320x480 resolution to show a large custom user-interface. On the back there are some ports with GPIOs so you can expand the capabilities as needed.</p> Pros Cons 480x320 8-bit Display Flashing the initial bootloader 2 MB PSram Serial Flashing tool recommended Capacitive Touchscreen JST 1.25mm Expansion headers IPS Viewing angles Sleek design <p>The development board is powered via USB Type-C.</p>"},{"location":"hardware/wireless-tag/wt32-sc01-plus/#video","title":"Video","text":""},{"location":"hardware/wireless-tag/wt32-sc01-plus/#cases","title":"Cases","text":"<p>A 3D-printable case can be found on: https://www.printables.com/model/381026-wt32-sc01-plus-desk-case#preview</p>"},{"location":"hardware/wireless-tag/wt32-sc01/","title":"WT32-SC01","text":""},{"location":"hardware/wireless-tag/wt32-sc01/#features","title":"Features","text":"<p>The WT32-SC01 incorporates an ESP32-WROVER-B module with a 3.5-inch capacitive touch display. openHASP can take advantage of the 320x480 resolution to show a large custom user-interface. On the back there is an expansion port with GPIOs so you can expand the capabilities as needed.</p> Pros Cons 480x320 Display 4 MB flash on basic model 8 MB PSram Viewing angle in landscape mode Capacitive Touchscreen Mounting holes placement <p>The development board is powered via USB Type-C. The basic version comes with only 4MB SPI Flash but there is a better WT32-SC01(16MB) SKU with a larger flash chip. Both models have 8MB of PSRAM.</p> <ul> <li> <p>With 4MB flash available from:  LCSC  Seeed studio</p> </li> <li> <p>With 16MB flash available from:  Alibaba </p> </li> </ul> <p>Tip</p> <p>Please consider getting the model with 16MB flash size as it is more suitable for the large screen.</p> <p>Note</p> <p>The expansion connector has a 2.0mm pitch female header instead of the more common 2.54mm pitch.</p> <p> Datasheet</p>"},{"location":"hardware/wireless-tag/wt32-sc01/#gallery","title":"Gallery","text":""},{"location":"hardware/wireless-tag/wt32-sc01/#3d-printed-case","title":"3D Printed Case","text":"<p> <p>  Wt32-sc01 Case  by  mbenten  on Sketchfab</p> </p>"},{"location":"hardware/yeacreate/nscreen32/","title":"YeaCreate Nscreen32","text":""},{"location":"hardware/yeacreate/nscreen32/#features","title":"Features","text":"<p>The Nscreen32 uses an ESP32-WROVER-IE module with a large 4-inch capacitive touch display. The display is connected via an 8-bit parallel bus resulting in a fast performance. openHASP can take advantage of the 320x480 resolution to show a large custom user-interface.</p> <p>On the back there is an expansion port with 6 GPIOs (4 input only, RX &amp; TX) so you add inputs if needed. The development board can be powered via micro USB or the 5V-in JST connector.</p> Pros Cons 8-bit parallel display No backlight control 16 MB flash + 8 MB PSram Bright white power LED Capacitive Touchscreen Viewing angles External antenna <p> YeaCreate Store</p>"},{"location":"hardware/yeacreate/nscreen32/#backlight-control","title":"Backlight Control","text":"<p>Unfortunately, there is no support for backlight control. The display is always-on.</p> <p>With a small hack it is possible to control the backlight using a PNP transistor connected to <code>GPIO0</code>, <code>R8</code> and <code>3.3V</code>.</p>"},{"location":"hardware/yeacreate/nscreen32/#documentation","title":"Documentation","text":"<p>Some example projects and the schematics for the Nscreen32 can be found on the Yeacreate Github repository.</p> <p> Github Repo  Schematics</p>"},{"location":"hardware/yeacreate/nscreen32/#product-video","title":"Product Video","text":"<p>Nscreen32 is the first device to receive the LVGL Certified Board label:</p>"},{"location":"hardware/yeacreate/nscreen32/#enclosure","title":"Enclosure","text":"<p>We don't have any 3D printable enclosure yet to share here. If you have a case for this board, please let us know so we can share it here.</p>"},{"location":"integrations/home-assistant/howto/","title":"Home Assistant","text":"<p>The openHASP Custom Component simplifies synchronization of objects on one or more openHASP plates with Home Assistant entities. You can map any service supported by any entity in Home Assistant to any object event in openHASP. Moreover, you can set any property of any object in openHASP to any value from Home Assistant. This powerful concept gives you full freedom to create a completely customized, hardware-based control user interface for your home automation.</p> <p>We call plate any device running openHASP in your system.</p> <p>Note</p> <p>Before going forward make sure you have installed the MQTT add-on in Home Assistant and the option <code>Enable Discovery</code> is indeed enabled in the MQTT integration service. A working MQTT add-on with discovery enabled is a prerequisite for using the openHASP custom component.</p>"},{"location":"integrations/home-assistant/howto/#installation","title":"Installation","text":"<p>You have the option to install the custom component using HACS or via manual download:</p> Using HACSManual Install <p></p> <p>Install using HACS in one-click. This is the preferred and recommended method, as HACS provides a very effective way to keep the component updated and/or choose between various versions.</p> <ol> <li>Goto Home Assistant &gt; HACS &gt; Integrations.</li> <li>Click the Explore &amp; Add Repositories button.</li> <li>Search for <code>openHASP</code> and click on the openHasp logo.</li> <li>Click Install this repository in HACS. Note: To install the current unstable development version select the Main.</li> <li>Click Install</li> <li>Reboot Home-Assistant</li> </ol> <p>Alternatively, you can also install it manually: </p> <p> Download ZIP</p> <ol> <li>Using the tool of choice open the directory (folder) for your HA configuration (where you find <code>configuration.yaml</code>).</li> <li>If you do not have a <code>custom_components</code> directory there, you need to create it.</li> <li>In the <code>custom_components</code> directory create a new folder called <code>openhasp</code>.</li> <li>Download all the files from the <code>custom_components/openhasp/</code> directory in this repository.</li> <li>Place the files you downloaded in the new directory you created.</li> <li>Edit your <code>configuration.yaml</code> file add an entry similar to the example below.</li> <li>Restart Home Assistant</li> </ol> <p>Note</p> <p>The download{target=blank} link points to the actual _development code in the master branch. </p> <p>Warning</p> <p>You have to use component version consistently with the firmware version on your plates. For example, if your plates are at firmware version <code>0.7.x</code>, you also need to use component version <code>0.7.y</code> to ensure interoperability. Only the first two digits matter, i.e. <code>0.7</code>, the last one can be different.</p> <p>Home Assistant will show a warning if it finds a version mismatch. Note that you can only have one version of the component installed at a time so a mix of plate firmware versions is not supported.</p>"},{"location":"integrations/home-assistant/howto/#configuration","title":"Configuration","text":"<p>First prepare your plates to be integrated with Home Assistant (follow steps in order):</p> <ol> <li>Connect your plates to the network. Static DHCP or fixed IP is not needed as communication only happens through MQTT.</li> <li>Set the GPIO configuration corresponding to your hardware (important for them to be detected as entities), save and reboot.</li> <li>Restart Home Assistant.</li> <li>Set the MQTT server settings and make sure each plate has a unique node name, save and reboot.</li> </ol> <p>The component will automatically discover the plates and you will see them appearing in Lovelace UI's Configuration &gt; Devices &amp; Services &gt; openHASP.</p> <p>When Home Assistant detects your plate, you will have to give it a name. In the examples below both name and node name is <code>plate35</code>.  You will be presented with options to set the backlight brightness level when the plate is idle and optionally you can set a path to a centrally located <code>pages.jsonl</code> file containing design for this plate - the component can send the contents of the file when the plate connects. From v0.6.3 of the component this file can also be a file with a <code>.json</code> extension. See the JSON Files section below.</p> <p>Note</p> <p>If you opt to store the <code>pages.jsonl</code> file on Home Assistant server, it will only be loaded on start of Home Assistant and reloaded on plate availability (becoming online). Optionally you should also check how to handle the offline state of the plate.</p> <p>Currently you will get a warning that you need to add manual configuration for the objects in your <code>configuration.yaml</code>, that's no problem, read ahead.</p>"},{"location":"integrations/home-assistant/howto/#example","title":"Example","text":"<p>To add an openHASP plate to your installation with a sample configuration, upload a <code>pages.jsonl</code> file with the following content to your plate first:</p> <pre><code>{\"page\":1,\"id\":1,\"obj\":\"btn\",\"x\":0,\"y\":0,\"w\":240,\"h\":30,\"text\":\"openHASP\",\"value_font\":22,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0}\n{\"page\":1,\"id\":2,\"obj\":\"btn\",\"x\":10,\"y\":40,\"w\":105,\"h\":90,\"toggle\":true,\"text\":\"\\uE335\",\"text_font\":32,\"mode\":\"break\",\"align\":1}\n{\"page\":1,\"id\":3,\"obj\":\"dropdown\",\"x\":10,\"y\":140,\"w\":170,\"h\":30,\"options\":\"Apples\\nBananas\\nOranges\\nMelon\"}\n{\"page\":0,\"id\":1,\"obj\":\"label\",\"x\":175,\"y\":5,\"h\":30,\"w\":62,\"text\":\"00.0\u00b0C\",\"align\":2,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\"}\n</code></pre> <p>Assuming your plate's configured MQTT node name is <code>plate35</code>, add the following to your <code>configuration.yaml</code> file (Home Assistant will deliberately ask for it when finished autodetection procedure):</p> <pre><code>openhasp:\n  plate35:\n    objects:\n      - obj: \"p0b1\"  # temperature label on all pages\n        properties:\n          \"text\": '{{ states(\"sensor.my_room_temperature\") }}\u00b0C'\n      - obj: \"p1b2\"  # light-switch toggle button\n        properties:\n          \"val\": '{{ 1 if states(\"light.my_room\") == \"on\" else 0 }}'\n          \"text\": '{{ \"\\uE6E8\" if is_state(\"light.my_room\", \"on\") else \"\\uE335\" | e }}'\n        event:\n          \"up\":\n            - service: homeassistant.toggle\n              entity_id: \"light.my_room\"\n      - obj: \"p1b3\"  # dropdown\n        event:\n          \"changed\":\n            - service: persistent_notification.create\n              data:\n                message: I like {{ text }}\n</code></pre> <p>Note</p> <p>The Home Assistant Custom Component is not limited to setting <code>val</code> and <code>text</code> properties on UI objects! There is nothing stopping you from using the full suite of template functions like <code>state_attr</code> in your templates to drive more sophisticated behaviors. See the Example Automations for more.</p>"},{"location":"integrations/home-assistant/howto/#variable-definitions","title":"Variable definitions","text":"openhasp: (Required) The platform identifier. Required once in the configuration. plate35: (Required) Your plate identifier slug. For each plate in your system, such an entry is required, has to be unique. It is generated automatically from the plate name you gave during discovery, which by default equals to the HASP Node Name set in the plate's configuration. objects: (Optional) Definition of the objects reacting to changes in Home Assistant, or generating events for Home Assistant. obj: (string) (Required) The object identifier which we want to integrate with Home Assistant. Its name has the form <code>pXbY</code> where <code>X</code> represents the page where the object is located, and <code>Y</code> represents the <code>id</code> of the object on that page. properties: (Optional) List containing the properties of the object which we want to modify based on changes occurring in Home Assistant. In the example above <code>text</code> property gets updated whenever <code>sensor.my_room_temperature</code> changes.  event: (Optional) List containing the events generated by the object when touched on the screen. These are object-specific and can be observed accurately with an MQTT client. Each event defines a list of services which will be processed in order (like actions list in an automation).   <p>In the example above, when object <code>p1b2</code> (which is a toggle button) generates the <code>on</code> event, <code>light.my_room</code> will be turned on by the service call <code>light.turn_on</code> as specified in the event config. And similarly when <code>off</code> event comes through MQTT, the light will be turned off by the corresponding service call.  </p> <p>Note</p> <p>Any variable coming from the MQTT message can be used between curly brackets and passed to the service call. In the example above when object <code>p1b3</code> (which is a dropdown selector) generates the <code>changed</code> event, a persistent notification will appear in Home Assistant's Lovelace interface containing the selected text from the object, which was passed over from the MQTT message. See object events for more types of generated events.</p>"},{"location":"integrations/home-assistant/howto/#reloading-the-configuration","title":"Reloading the configuration","text":"<p>After you make changes to the configuration of the plate you can apply them by either restarting Home Assistant or by reloading the integration from Lovelace user interface with option found in Configuration &gt; Devices &amp; Services &gt; openHASP &gt; (your plate &gt;) 3dots menu &gt; Reload. Note that this has to be done individually for each configured plate. </p> <p>You can achieve the same by with a service too:</p> <p><pre><code>service: homeassistant.reload_config_entry\ndata:\n  entry_id: 95f7d6fe3fa5f4e242797e9ae4a5dd1d\n</code></pre> With the <code>entry_id</code> found in .storage/core.config_entries file from your main Home Assistant configuration directory (do NOT edit this file!).</p>"},{"location":"integrations/home-assistant/howto/#configuration-tips","title":"Configuration tips","text":""},{"location":"integrations/home-assistant/howto/#multiple-plates","title":"Multiple plates","text":"<p>If you have multiple plates you can add them all using different plate identifiers. Their configured topics have to be unique too:</p> <pre><code>openhasp:\n  plate_my_room_1:\n    objects:\n      # ...\n  plate_my_room_2:\n    objects:\n      # ...\n  plate_my_room_3:\n    objects:\n      # ...\n</code></pre>"},{"location":"integrations/home-assistant/howto/#split-configuration","title":"Split configuration","text":"<p>You can use Home Assistant's split configuration to help better organizing your config files.</p> <p>Instead of keeping the configuration of all openHASP plates in Home Assistant's main config file, you can keep openHASP config separately, by adding only this to <code>configuration.yaml</code>:</p> <p><code>openhasp: !include openhasp.yaml</code></p> <p>After this, you can move your openHASP configuration starting with <code>plate_my_room:</code> level to your separate <code>openhasp.yaml</code> file and restart Home Assistant.</p> <p>Moreover, if you have multiple plates, you can keep each one in a separate config file, to achieve this, make it like:</p> <p><code>openhasp: !include_dir_merge_named openhasp_configs/</code></p> <p>Create a directory <code>openhasp_configs</code> right near <code>configuration.yaml</code>, and put in it all your plates configuration (only with <code>plate_my_room:</code> level) in separate yaml files and restart Home Assistant.</p>"},{"location":"integrations/home-assistant/howto/#services","title":"Services","text":"<p>This component implements some specific services to make interactions with the plate even more comfortable.</p> openhasp.wakeup Wakes up the display when an external event has occurred, like a presence or a PIR motion sensor. openhasp.next_page Changes plate to the next page. openhasp.prev_page Changes plate to the previous page. openhasp.change_page Changes plate directly to the specified page number. openhasp.clear_page Clears the contents of the specified page number. If page number not specified, clears all the pages. openhasp.load_pages Loads new design from <code>pages.jsonl</code> file from full path on Home Assistant server. <p>The file must be located in an authorized location defined by allowlist_external_dirs (in case of hassio <code>/config/</code> is the directory where Home Assistant's configuration.yaml resides, so in case of a subdirectory called <code>openhasp</code> the full path would be e.g. <code>/config/openhasp/pages.jsonl</code>, and you need to add  <code>/config/openhasp/</code> to your <code>allowlist_external_dirs</code>).</p> <p>Note</p> <p>The contents of the file are loaded line by line thus <code>\"page\":X</code> has to be defined for each object.</p> <p>Unless you clear the page first, the objects will be updated.</p> <p>For example, to allow read-access to the folder, add these lines to your <code>configuration.yaml</code>:</p> <pre><code>homeassistant:\n  allowlist_external_dirs:\n    - \"/config/openhasp\"\n</code></pre> openhasp.command <p>Wraps up any command so that it can be called against the entity_id of the plate. Useful in Automations and Blueprints.</p> <p>Warning</p> <p>This service handles data without input validation. Only for advanced users. No support for any problems caused by using this!</p> openhasp.config <p>Wraps up any raw submodule config so that it can be called against the entity_id of the plate. Useful in Automations and Blueprints.</p> <p>Warning</p> <p>This service handles data without input validation. Only for advanced users. No support for any problems caused by using this!</p> <p>Check out the example configurations and automations to learn how to use these services within Home Assistant.</p>"},{"location":"integrations/home-assistant/howto/#json-files","title":"JSON Files","text":"<p>From v0.6.3 pages file supplied in the plate config within home assistant can be a <code>.json</code>, files with this extension will be parsed differently and expect a JSON array containing objects or strings. Objects must be valid JSONL lines and strings can be used for comments. </p> <p>As this file is valid JSON whitespace will be ignored when parsing and removed before sending the JSONL data to the plate. If you are storing your plate config along with your HA config, this allows you to have more  readable config which will be formatted in your editor of choice.</p> <p>Example:</p> <pre><code>[\n  {\n    \"page\": 1,\n    \"id\": 2,\n    \"obj\": \"btn\",\n    \"x\": 10,\n    \"y\": 40,\n    \"w\": 105,\n    \"h\": 90,\n    \"toggle\": false,\n    \"text\": \"Normal Button\",\n    \"mode\": \"break\",\n    \"align\": \"center\"\n  },\n  \"Comment string will be removed when parsing\",\n  {\n    \"page\": 1,\n    \"id\": 3,\n    \"obj\": \"btn\",\n    \"x\": 125,\n    \"y\": 40,\n    \"w\": 105,\n    \"h\": 90,\n    \"toggle\": true,\n    \"text\": \"#FFD700 Toggle# Button\",\n    \"mode\": \"break\",\n    \"align\": \"center\"\n  }\n]\n</code></pre>"},{"location":"integrations/home-assistant/howto/#debugging","title":"Debugging","text":"<p>Add these lines to your main <code>configuration.yaml</code> configuration and restart Home Assistant:</p> <pre><code>logger:\n  default: warning\n  logs:\n    custom_components.openhasp: debug\n</code></pre> <p>Look for the debug messages in the <code>home-assistant.log</code> file.</p>"},{"location":"integrations/home-assistant/sampl_autom/","title":"Example Automations","text":""},{"location":"integrations/home-assistant/sampl_autom/#display-of-the-current-album-cover-of-a-media-player","title":"Display of the current album cover of a media player","text":"<p>Combined with a media player entity which supports <code>entity_picture</code> attribute, you can automate display of that using the <code>push_image</code> service of the Custom Component.</p> <p>On the plate (named <code>plate_livingroom</code> in this example) you'd have two objects, first a rectangular object with rounded corners, secod an image object placed inside of it. It's hidden by default so you could place this on top of your existing media player controls, and have it pop up only when there's a cover present. To look nice together use the <code>clip_corner</code> property:</p> <p><pre><code>{\"page\":6,\"id\":15,\"obj\":\"obj\",\"x\":3,\"y\":48,\"w\":200,\"h\":200,\"radius\":6,\"clip_corner\":1,\"hidden\":1}\n{\"page\":6,\"id\":16,\"obj\":\"img\",\"x\":0,\"y\":0,\"w\":200,\"h\":200,\"parentid\":15,\"src\":\"\",\"auto_size\":1}\n</code></pre> The automation below takes care of unhiding them when a cover appears on the <code>sound_livingroom</code> media player, updating the picture when it changes and hiding them again when the player drops the <code>entity_picture</code> attribute (it's stopped or the played media doesn't have a corresponding picture):</p> <pre><code>- id: openhasp-sound_livingroom-detect-mediaplayer-coverart\n  alias: openhasp-sound_livingroom-detect-mediaplayer-coverart\n  trigger:\n    - platform: state\n      entity_id: media_player.sound_livingroom\n  condition:\n    - condition: template\n      value_template: &gt;\n        {{ trigger.from_state.attributes.entity_picture !=\n           trigger.to_state.attributes.entity_picture }}\n  action:\n  - choose:\n    - conditions:\n      - condition: template\n        value_template: \"{{ state_attr('media_player.sound_livingroom','entity_picture') != None }}\"\n      sequence:\n      - service: openhasp.push_image\n        target:\n          entity_id: openhasp.plate_livingroom\n        data:\n          image: http://ip.of.your.ha:8123{{ state_attr('media_player.sound_livingroom','entity_picture') }}\n          obj: p6b16\n          width: 200\n          height: 200\n      - service: openhasp.command\n        target:\n          entity_id: openhasp.plate_livingroom\n        data:\n          keyword: p6b15.hidden\n          parameters: '0'\n    - conditions:\n      - condition: template\n        value_template: \"{{ state_attr('media_player.sound_livingroom','entity_picture') == None }}\"\n      sequence:\n      - service: openhasp.command\n        target:\n          entity_id: openhasp.plate_livingroom\n        data:\n          keyword: p6b15.hidden\n          parameters: '1'\n</code></pre>"},{"location":"integrations/home-assistant/sampl_autom/#backlight-on-dimmed-if-theres-any-light-in-the-room-off-otherwise","title":"Backlight ON (dimmed) if there's any light in the room, OFF otherwise","text":"<p>The night mode activates when all the lights are off and shutters are down below 25% (assuming it's dark enough for the backlight to be disturbing in such situation), the day mode activates otherwise. During the day, when the screen is after short idle, it dims to the level configured in Home Assistant, but never turns off. During the night, the screen turns off after the long idle period.</p> <p>This will act directly on the plate in a certain room, as it is triggered by entities located in that room. If you have multiple plates in various rooms, you can create separate automations for each.</p> <pre><code>- id: openhasp-plate_myroom-day\n  alias: \"openHASP Night mode based on My Room entities\"\n  trigger:\n    - platform: state\n      entity_id: light.plate_myroom_light_12\n    - platform: state\n      entity_id: light.plate_myroom_light_14\n    - platform: state\n      entity_id: cover.myroom_1\n    - platform: state\n      entity_id: cover.myroom_2\n    - platform: state\n      entity_id: openhasp.plate_myroom\n      from: 'unavailable'\n  mode: restart\n  condition:\n    condition: and\n    conditions:\n    - condition: template\n      value_template: \"{{ (as_timestamp(now()) - as_timestamp(states('sensor.ha_uptime_moment'))) / 60 &gt; 2 }}\"\n    - condition: template\n      value_template: &gt;\n        {{ \n        state_attr(\"cover.myroom_1\", \"current_position\") | float(default=0) &gt; 25 or\n        state_attr(\"cover.myroom_2\", \"current_position\") | float(default=0) &gt; 25 or\n        states(\"light.plate_myroom_light_12\") == \"on\" or \n        states(\"light.plate_myroom_light_14\") == \"on\"\n        }}\n  action:\n    - service: openhasp.config\n      target:\n        entity_id: openhasp.plate_myroom\n      data:\n        submodule: gui\n        parameters: '{\"idle2\":0}'\n\n\n- id: openhasp-plate_myroom-night\n  alias: \"openHASP Day mode based on My Room entities\"\n  trigger:\n    - platform: state\n      entity_id: light.plate_myroom_light_12\n    - platform: state\n      entity_id: light.plate_myroom_light_14\n    - platform: state\n      entity_id: cover.myroom_1\n    - platform: state\n      entity_id: cover.myroom_2\n    - platform: state\n      entity_id: openhasp.plate_myroom\n      from: 'unavailable'\n  mode: restart\n  condition:\n    condition: and\n    conditions:\n    - condition: template\n      value_template: \"{{ (as_timestamp(now()) - as_timestamp(states('sensor.ha_uptime_moment'))) / 60 &gt; 2 }}\"\n    - condition: template\n      value_template: &gt;\n        {{ not (\n        state_attr(\"cover.myroom_1\", \"current_position\") | float(default=0) &gt; 25 or\n        state_attr(\"cover.myroom_2\", \"current_position\") | float(default=0) &gt; 25 or\n        states(\"light.plate_myroom_light_12\") == \"on\" or \n        states(\"light.plate_myroom_light_14\") == \"on\" )\n        }}\n  action:\n    - service: openhasp.config\n      target:\n        entity_id: openhasp.plate_myroom\n      data:\n        submodule: gui\n        parameters: '{\"idle2\":60}'\n</code></pre> <p>Note the condition which assures to avoid triggering the automations falsely when Home Assistant (re)starts (allows running the automation only when Home Assistant has been up for at least 2 minutes).</p>"},{"location":"integrations/home-assistant/sampl_autom/#backlight-on-dimmed-during-the-day-off-during-the-night-for-all-the-plates","title":"Backlight ON (dimmed) during the day, OFF during the night for all the plates","text":"<p>The night mode activates when sun goes down, and the day mode activates when the sun comes up. During the day, when the screen is after short idle, it dims to the level configured in Home Assistant, but never turns off. During the night, the screen turns off after the long idle period.</p> <p>Assuming your plate's configured MQTT group name is <code>plates</code>, this will affect all the plates in your system at once:</p> <pre><code>- id: openhasp-night\n  alias: \"openHASP Night mode\"\n  trigger:\n    - platform: numeric_state\n      entity_id: sun.sun\n      attribute: elevation\n      below: -1\n  condition:\n    - condition: template\n      value_template: \"{{ (as_timestamp(now()) - as_timestamp(states('sensor.ha_uptime_moment'))) / 60 &gt; 2 }}\"\n  action:\n    - service: mqtt.publish\n      data:\n        topic: hasp/plates/config/gui\n        payload: '{\"idle2\":120}'\n\n- id: openhasp-day\n  alias: \"openHASP Day mode\"\n  trigger:\n    - platform: numeric_state\n      entity_id: sun.sun\n      attribute: elevation\n      above: 1\n  condition:\n    - condition: template\n      value_template: \"{{ (as_timestamp(now()) - as_timestamp(states('sensor.ha_uptime_moment'))) / 60 &gt; 2 }}\"\n  action:\n    - service: mqtt.publish\n      data:\n        topic: hasp/plates/config/gui\n        payload: '{\"idle2\":0}'\n</code></pre> <p>Note here too the condition which assures to avoid triggering the automations falsely when Home Assistant (re)starts (allows running the automation only when Home Assistant has been up for at least 2 minutes).</p>"},{"location":"integrations/home-assistant/sampl_autom/#turn-on-moodlight-when-backlight-goes-off-and-back","title":"Turn ON moodlight when backlight goes OFF (and back)","text":"<p>If your plate has moodlights, it is useful in dark situations, when you don't want to have the screen backlit on all the time as above, but have the mood light on instead. During the day mood light doesn't light.</p> <p>Put your <code>light.plate_my_room_moodlight</code> to a Lovelace card entity row and select a nice color for moodlight.</p> <pre><code>- id: openhasp-moodlight-on\n  alias: \"openHASP Moodlight ON when Backlight OFF\"\n  trigger:\n    - platform: state\n      entity_id: light.plate_my_room_backlight\n      from: 'on'\n      to: 'off'\n  action:\n    - service: light.turn_on\n      target:\n        entity_id: light.plate_my_room_moodlight\n\n- id: openhasp-moodlight-off\n  alias: \"openHASP Moodlight OFF when Backlight ON\"\n  trigger:\n    - platform: state\n      entity_id: light.plate_my_room_backlight\n      from: 'off'\n      to: 'on'\n  action:\n    - service: light.turn_off\n      target:\n        entity_id: light.plate_my_room_moodlight\n</code></pre>"},{"location":"integrations/home-assistant/sampl_autom/#return-to-home-page-after-some-idle-time","title":"Return to home page after some idle time","text":"<p>Apart from the idle times controlling backlight levels, one may want to return to page 1 after a while. </p> <pre><code>- id: openhasp-back-to-page-1\n  alias: \"openHASP back to page 1\"\n  trigger:\n    - platform: template\n      value_template: \"{{ state_attr('openhasp.plate_my_room','idle') != 'off' }}\"\n      for: \"00:05:00\"\n  condition:\n    - condition: template\n      value_template: \"{{ states('openhasp.plate_my_room') != '1' and states('openhasp.plate_my_room') != 'unavailable' }}\"\n  action:\n    - service: openhasp.change_page\n      target:\n        entity_id: openhasp.plate_my_room\n      data:\n        page: 1\n</code></pre>"},{"location":"integrations/home-assistant/sampl_autom/#prevent-burn-in-of-the-lcd-screen","title":"Prevent burn-in of the LCD screen","text":"<p>You can use this to protect and prolonge the lifetime of the LCD screens, thus being more green and generating less hazardous waste.</p> <p>Wall mounted LCD screens' main problem is that they display the same picture 99.999% of the time. Even if somebody turns off backlight during the night or dark periods, the LCD screen keeps showing the same picture, seen by nobody. There are high chances that this will lead to screen picture burn-in after a few years of operation.</p> Pixel training <p>One way to reduce this is to \"train\" the pixels periodically with completely different other content. Assuming your group name is configured as <code>plates</code> in your screens running openHASP, here is a possible solution to extend their life (all at once). The cycle runs for 30 seconds each time, can be stopped by touching. The trigger runs this 6 times each night.</p> <pre><code>- id: openhasp_antiburn_start_at_night\n  alias: openHASP anti-burn-in start at night\n  initial_state: 'on'\n  trigger:\n    - platform: time\n      at: '00:20:00'\n    - platform: time\n      at: '01:20:00'\n    - platform: time\n      at: '02:20:00'\n    - platform: time\n      at: '03:20:00'\n    - platform: time\n      at: '04:20:00'\n    - platform: time\n      at: '05:20:00'\n  action:\n    - service: mqtt.publish\n      data:\n        topic: hasp/plates/command/antiburn\n        payload: '1'\n</code></pre> Clear pixels when backlight off <p>Another way to reduce the chance of burn-in is to clear the contents of the screen while the backlight is turned off, as nobody sees the pixels anyway. Just add these actions to the first automation example which draw an overlay with a black base object on page 0 when display is off, and deletes it when comes back on:</p> <p>for automation <code>openhasp-moodlight-on</code>, add to actions:</p> <pre><code>    - service: mqtt.publish\n      data:\n        topic: hasp/plates/command/jsonl\n        payload: '{\"page\":0,\"id\":99,\"obj\":\"obj\",\"x\":0,\"y\":0,\"w\":240,\"h\":320,\"radius\":0,\"hidden\":0,\"bg_grad_dir\":0,\"bg_color\":\"black\"}'\n</code></pre> <p>for automation <code>openhasp-moodlight-off</code>, add to actions:</p> <pre><code>    - service: mqtt.publish\n      data:\n        topic: hasp/plates/command/p0b99.hidden\n        payload: '1'\n    - service: mqtt.publish\n      data:\n        topic: hasp/plates/command/p0b99.delete\n        payload: ''\n</code></pre> <p>Don't forget to adjust the size of the object to your screen if it's not 240x320.</p>"},{"location":"integrations/home-assistant/sampl_autom/#dynamically-set-ui-element-dimensions","title":"Dynamically set UI element dimensions","text":"<p>Note</p> <p>This technique relies on small changes in the openHasp device firmware  that should be present in all builds of <code>0.7</code> after 2021-01.</p> <p>openHasp devices report several device properties to the Custom Component... including <code>tftWidth</code> and <code>tftHeight</code>. These properties are exposed in home assistant as device attributes and can be used in template automations.</p> <p>Here is a modified version of the Display clock and temperature example configuration that will use a \"generic\" <code>jsonl</code> file that has no hard-coded layout attributes: <code>x</code>, <code>y</code>, <code>w</code>, <code>h</code> and will appear the same on devices with different resolutions and screen orientations.</p> <p>Tell the openHasp device to create three text labels. As we are not specifying x/y coordinates, when the device first powers on, all three labels will be drawn in the upper left corner with their default size/values.</p> <p>When <code>plate00</code> comes online and connects to the MQTT broker, the openHasp Custom Component will be invoked and the <code>yaml</code> below will be executed. The templates will be executed and the computed <code>x</code>, <code>y</code>, <code>w</code>, <code>h</code> values for each UI component will be sent to the plate.</p> <pre><code>{\n    \"page\": 0,\n    \"comment\": \"Default to page0 as the header and page/layout\"\n}\n{\n    \"id\": 1,\n    \"comment\": \"Time in the top left\",\n    \"obj\": \"label\",\n    \"text\": \"00:00\",\n    \"bg_color\": \"#2C3E50\"\n}\n{\n    \"id\": 2,\n    \"comment\": \"Temp in the middle\",\n    \"obj\": \"label\",\n    \"text\": \"00.0\u00b0C\",\n    \"bg_color\": \"#2C3E50\"\n}\n{\n    \"id\": 3,\n    \"comment\": \"Humidity in the top right\",\n    \"obj\": \"label\",\n    \"text\": \"00.0%\",\n    \"bg_color\": \"#2C3E50\"\n}\n</code></pre> <p>Assuming that the above <code>jsonl</code> was deployed to a openHasp device named <code>plate00</code>, configure the Home Assistant Custom Component with <code>yaml</code> like this:</p> <pre><code># The top left corner is 0,0, X grows positive to the right and Y grows positive down\nplate00:\n  objects:\n    # Header: Time\n    - obj: \"p0b1\"\n      properties:\n        \"align\": \"left\"\n        \"text\": \"{{ states('sensor.time') }}\"\n        \"mode\": \"loop\"\n        ##\n        # Draw the labels with a 1% margin from the top and sides\n        \"x\": &gt;-\n          {% set scnWd = state_attr('openhasp.plate00', 'tftWidth') | int %}\n          {% set hdrHorMargin = (scnWd*0.01) | int %}\n          {{hdrHorMargin}}          \n\n        \"y\": &gt;-\n          {% set scnHt = state_attr('openhasp.plate00', 'tftHeight') | int %}\n          {% set hdrVrtMargin = (scnHt*0.01) | int %}\n          {{hdrVrtMargin}}          \n\n        # Width is 1/3 of the screen width after subtracting margins\n        ##\n        \"w\": &gt;-\n          {% set numObj = 3 %}\n          {% set scnWd = state_attr('openhasp.plate00', 'tftWidth') | int %}\n          {% set hdrHorMargin = (scnWd*0.01) | int %}\n          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}\n          {% set hdrLblWd = (usableHdrWd/numObj) | int %}\n          {{hdrLblWd}}          \n\n        # Height is 10% of the screen, after margin\n        ##\n        \"h\": &gt;-\n          {% set scnHt = state_attr('openhasp.plate00', 'tftHeight') | int %}\n          {% set hdrVrtMargin = (scnHt*0.01) | int %}\n          {% set hdrHt = (scnHt*0.1) | int %}\n          {% set hdrLblHt = hdrHt-hdrVrtMargin %}\n          {{hdrLblHt}}          \n\n    # Header: Temp\n    - obj: \"p0b2\"\n      properties:\n        \"align\": \"center\"\n        \"text\": \"{{ states('sensor.room_temperature') }}\u00b0C\"\n        \"mode\": \"loop\"\n        ##\n        # Draw the labels with a 1% margin from the top and sides\n        \"x\": &gt;-\n          {% set numObj = 3 %}\n          {% set scnWd = state_attr('openhasp.plate00', 'tftWidth') | int %}\n          {% set hdrHorMargin = (scnWd*0.01) | int %}\n          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}\n          {% set hdrLblWd = (usableHdrWd/numObj) | int %}\n          {% set hdrHorMargin = (scnWd*0.01) | int %}\n          {{hdrHorMargin+hdrLblWd}}\n\n        \"y\": &gt;-\n          {% set scnHt = state_attr('openhasp.plate00', 'tftHeight') | int %}\n          {% set hdrVrtMargin = (scnHt*0.01) | int %}\n          {{hdrVrtMargin}}          \n\n        # Width is 1/3 of the screen width after subtracting margins\n        ##\n        \"w\": &gt;-\n          {% set numObj = 3 %}\n          {% set scnWd = state_attr('openhasp.plate00', 'tftWidth') | int %}\n          {% set hdrHorMargin = (scnWd*0.01) | int %}\n          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}\n          {% set hdrLblWd = (usableHdrWd/numObj) | int %}\n          {{hdrLblWd}}          \n\n        # Height is 10% of the screen, after margin\n        ##\n        \"h\": &gt;-\n          {% set scnHt = state_attr('openhasp.plate00', 'tftHeight') | int %}\n          {% set hdrVrtMargin = (scnHt*0.01) | int %}\n          {% set hdrHt = (scnHt*0.1) | int %}\n          {% set hdrLblHt = hdrHt-hdrVrtMargin %}\n          {{hdrLblHt}}          \n\n    # Header: Humidity\n    - obj: \"p0b3\"\n      properties:\n        \"align\": \"right\"\n        \"text\": \"{{ states('sensor.room_humidity') }}%\"\n        \"mode\": \"loop\"\n        ##\n        # Draw the labels with a 1% margin from the top and sides\n        \"x\": &gt;-\n          {% set numObj = 3 %}\n          {% set scnWd = state_attr('openhasp.plate00', 'tftWidth') | int %}\n          {% set hdrHorMargin = (scnWd*0.01) | int %}\n          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}\n          {% set hdrLblWd = (usableHdrWd/numObj) | int %}\n          {% set hdrHorMargin = (scnWd*0.01) | int %}\n          {{hdrHorMargin+(2*hdrLblWd)}}          \n\n        \"y\": &gt;-\n          {% set scnHt = state_attr('openhasp.plate00', 'tftHeight') | int %}\n          {% set hdrVrtMargin = (scnHt*0.01) | int %}\n          {{hdrVrtMargin}}          \n\n        # Width is 1/3 of the screen width after subtracting margins\n        ##\n        \"w\": &gt;-\n          {% set numObj = 3 %}\n          {% set scnWd = state_attr('openhasp.plate00', 'tftWidth') | int %}\n          {% set hdrHorMargin = (scnWd*0.01) | int %}\n          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}\n          {% set hdrLblWd = (usableHdrWd/numObj) | int %}\n          {{hdrLblWd}}          \n\n        # Height is 10% of the screen, after margin\n        ##\n        \"h\": &gt;-\n          {% set scnHt = state_attr('openhasp.plate00', 'tftHeight') | int %}\n          {% set hdrVrtMargin = (scnHt*0.01) | int %}\n          {% set hdrHt = (scnHt*0.1) | int %}\n          {% set hdrLblHt = hdrHt-hdrVrtMargin %}\n          {{hdrLblHt}}\n</code></pre> <p>You should be able to shift  the screen orientation for <code>plate00</code> by 90 degrees and restart the device to apply your change. When the device boots back up and connects to MQTT, openHasp should report a different value for it's <code>tftHeight</code> and <code>tftWidth</code> which will cause Home Assistant to re-evaluate the templates. A few seconds after connecting to MQTT, <code>plate00</code> should have an updated layout that reflects it's new screen orientation.</p>"},{"location":"integrations/home-assistant/sampl_conf/","title":"Example Configurations","text":""},{"location":"integrations/home-assistant/sampl_conf/#display-clock-and-temperature","title":"Display clock and temperature","text":"<p>The easiest example is to display the state of a clock and a temperature sensor from Home Assistant, using label objects in openHASP.</p> <p>Create a label object to display the temperature value, a separate label object to display the unit and a third label object for the clock:</p> <pre><code>{\"page\":0,\"id\":4,\"obj\":\"label\",\"x\":175,\"y\":5,\"h\":30,\"w\":45,\"text\":\"00.0\",\"align\":2,\"bg_color\":\"#2C3E50\"}\n{\"page\":0,\"id\":5,\"obj\":\"label\",\"x\":220,\"y\":5,\"h\":30,\"w\":45,\"text\":\"\u00b0C\",\"align\":0,\"bg_color\":\"#2C3E50\"}\n{\"page\":0,\"id\":6,\"obj\":\"label\",\"x\":3,\"y\":5,\"h\":30,\"w\":62,\"text\":\"00:00\",\"align\":0,\"bg_color\":\"#2C3E50\"}\n</code></pre> <p>In component configuration all you need for the objects is:</p> <pre><code>    objects:\n      - obj: \"p0b4\"\n        properties:\n          \"text\": \"{{ states('sensor.my_room_temperature') }}\"\n      - obj: \"p0b6\"\n        properties:\n          \"text\": \"{{ states('sensor.time') }}\"\n</code></pre>"},{"location":"integrations/home-assistant/sampl_conf/#tip","title":"Tip:","text":"<p>You can also use a magic template to display the time that the plate has obtained from ntp. This means you do not need a Home Assistant rule to push the time.</p> <pre><code>{\"page\":0,\"id\":6,\"obj\":\"label\",\"x\":3,\"y\":5,\"h\":30,\"w\":62,\"text\":\"00:00\",\"template\":\"%H:%M\",\"align\":0,\"bg_color\":\"#2C3E50\"}\n</code></pre>"},{"location":"integrations/home-assistant/sampl_conf/#note","title":"Note:","text":"<p>You can of course omit the second label object with the unit and use the same for both value and unit:</p> <pre><code>{\"page\":0,\"id\":4,\"obj\":\"label\",\"x\":175,\"y\":5,\"h\":30,\"w\":62,\"text\":\"00.0\u00b0C\",\"align\":2,\"bg_color\":\"#2C3E50\"}\n{\"page\":0,\"id\":6,\"obj\":\"label\",\"x\":3,\"y\":5,\"h\":30,\"w\":62,\"text\":\"00:00\",\"align\":0,\"bg_color\":\"#2C3E50\"}\n</code></pre> <p>In component configuration you will add the unit to the value using the template:</p> <pre><code>    objects:\n      - obj: \"p0b4\"\n        properties:\n          \"text\": \"{{ states('sensor.my_room_temperature') }}\u00b0C\"\n</code></pre> <p>All these being on page 0 means that they will appear on all the pages.</p>"},{"location":"integrations/home-assistant/sampl_conf/#some-basic-controls","title":"Some basic controls","text":"<p>Jsonl and Home Assistant configuration:</p>"},{"location":"integrations/home-assistant/sampl_conf/#toggle-a-light-or-any-switchable-entity-with-onoff-states","title":"Toggle a light (or any switchable entity with on/off states)","text":"<pre><code>{\"page\":1,\"id\":2,\"obj\":\"btn\",\"x\":10,\"y\":40,\"w\":105,\"h\":90,\"toggle\":true,\"text\":\"\\uE335\",\"text_font\":32,\"align\":1}\n</code></pre> <pre><code>      - obj: \"p1b2\" # switch, checkbox or btn with toggle true\n        properties:\n          \"val\": '{{ 1 if is_state(\"light.my_lamp\", \"on\") else 0 }}'\n          \"text\": '{{ \"\\uE6E8\" if is_state(\"light.my_lamp\", \"on\") else \"\\uE335\" | e }}'\n        event:\n          \"down\":\n            - service: homeassistant.toggle\n              entity_id: \"light.my_lamp\"\n</code></pre>"},{"location":"integrations/home-assistant/sampl_conf/#dropdown-self-populating-from-an-input_select","title":"Dropdown (self-populating from an input_select)","text":"<pre><code>{\"page\":1,\"id\":3,\"obj\":\"dropdown\",\"x\":5,\"y\":40,\"w\":230,\"h\":30,\"options\":\"\"}\n</code></pre> <pre><code>      - obj: \"p1b3\" # dropdown\n        properties:\n          \"options\": &gt;\n            {% if (state_attr('input_select.my_dropdown_selections','options') != none and states('input_select.my_dropdown_selections') not in ['unavailable', 'unknown']) %}{%for item in state_attr('input_select.my_dropdown_selections','options')%}{{item+\"\\n\"|e}}{%-if not loop.last%}{%-endif%}{%-endfor%}{% endif %}\n          \"val\": &gt;\n            {% if (state_attr('input_select.my_dropdown_selections','options') != none and states('input_select.my_dropdown_selections') not in ['unavailable', 'unknown']) %}{%for item in state_attr('input_select.my_dropdown_selections','options')%}\n            {{loop.index -1 if item == states('input_select.my_dropdown_selections') }}\n            {%-endfor%}{% endif %}\n        event:\n          \"changed\":\n            - service: input_select.select_option\n              data:\n                option: '{{ text }}'\n              target:\n                entity_id: input_select.my_dropdown_selections\n            - service: persistent_notification.create\n              data:\n                message: Selected {{ text }}\n</code></pre>"},{"location":"integrations/home-assistant/sampl_conf/#color-coded-icons","title":"Color coded icons","text":"Color code a WiFi icon according to RSSI reported by the plate <p>openHASP config: (screen size 240x320) </p> <pre><code>{\"obj\":\"btn\",\"id\":1,\"x\":120,\"y\":1,\"w\":30,\"h\":40,\"text_font\":\"2\",\"text\":\"\\uE5A9\",\"text_color\":\"gray\",\"bg_opa\":0,\"border_width\":0}\n</code></pre> <p>relevant openHASP-custom-component config:</p> <pre><code>    - obj: \"p0b1\"\n      properties:\n        \"text_color\": \"{% if -30 &lt;= state_attr('openhasp.openhasp_plate','rssi') |int %}green{% elif -31 &gt; state_attr('openhasp.openhasp_plate','rssi') |int &gt;= -50 %}orange{% elif -51 &gt; state_attr('openhasp.openhasp_plate','rssi') |int &gt;= -80 %}tomato{% else %}red{% endif %}\"\n</code></pre> Color code a temperature icon according to sensor values <p>openHASP config: (screen size 240x320) </p> <pre><code>{\"obj\":\"btn\",\"id\":3,\"x\":165,\"y\":1,\"w\":30,\"h\":40,\"text_font\":\"2\",\"text\":\"\\uE50F\",\"text_color\":\"gray\",\"bg_opa\":0,\"border_width\":0}\n</code></pre> <p>relevant openHASP-custom-component config:</p> <pre><code>    - obj: \"p0b3\"\n      properties:\n        \"text_color\": \"{% if states('sensor.room_temperature') |int &lt;= 21  %}#4682B4{% elif 21 &lt; states('sensor.room_temperature') |int &lt;= 26 %}green{% else %}red{% endif %}\"\n</code></pre>"},{"location":"integrations/home-assistant/sampl_conf/#variable-sized-icons","title":"Variable sized icons","text":"<p>Have a fan icon which changes its size depending on the speed of the fan, and goes off the screen when the fan is off.</p> <p>openHASP config:</p> <pre><code>{\"page\":0,\"id\":1,\"obj\":\"label\",\"x\":1,\"y\":1,\"h\":35,\"w\":35,\"text\":\"\\uE210\",\"align\":\"left\",\"bg_color\":\"#2C3E50\",\"text_color\":\"yellow\"}\n</code></pre> <p>relevant openHASP-custom-component config:</p> <pre><code>      - obj: \"p0b1\"\n        properties:\n          \"jsonl\": &gt;\n            {% if is_state('input_select.fan_speed', 'Low') %}\n            {\"text_font\":12,\"x\":6,\"y\":7}\n            {%-elif is_state('input_select.fan_speed', 'Medium') %}\n            {\"text_font\":16,\"x\":5,\"y\":6}\n            {%-elif is_state('input_select.fan_speed', 'Hign') %}\n            {\"text_font\":24,\"x\":1,\"y\":2}\n            {%-elif is_state('input_select.fan_speed', 'Turbo') %}\n            {\"text_font\":32,\"x\":-2,\"y\":-3}\n            {%-elif is_state('input_select.fan_speed', 'OFF') %}\n            {\"text_font\":12,\"x\":-10,\"y\":-10}\n            {% endif %}\n</code></pre>"},{"location":"integrations/home-assistant/sampl_conf/#light-brightness-and-color","title":"Light brightness and color","text":"<p>Have a light in Home Assistant controlled by openHASP. In our example we use Lanbon L8's moodlight which has both brightness and color - we use a slider object for the brightness, and a cpicker object for color.</p> <p>relevant openHASP config:</p> <pre><code>{\"page\":1,\"id\":31,\"obj\":\"slider\",\"x\":6,\"y\":15,\"w\":14,\"h\":180,\"min\":1,\"max\":255}\n{\"page\":1,\"id\":32,\"obj\":\"cpicker\",\"x\":30,\"y\":10,\"w\":180,\"h\":180}\n</code></pre> <p>relevant openHASP-custom-component config:</p> <p><pre><code>      - obj: \"p1b31\" # Light brightness\n        properties:\n          \"val\": \"{{ state_attr('light.plate_moodlight', 'brightness') if state_attr('light.plate_moodlight', 'brightness') != None else 0 }}\"\n        event:\n          \"changed\":\n            - service: light.turn_on\n              data:\n                entity_id: light.plate_moodlight\n                brightness:  \"{{ val }}\"\n          \"up\":\n            - service: light.turn_on\n              data:\n                entity_id: light.plate_moodlight\n                brightness:  \"{{ val }}\"\n\n      - obj: \"p1b32\" # Light color\n        properties:\n          \"color\": &gt;\n            {% if is_state('light.plate_moodlight','on') %}\n            {% set rgb = state_attr('light.plate_moodlight','rgb_color') %}\n            {{ \"#%02x%02x%02x\" | format(rgb[0],rgb[1],rgb[2]) }}\n            {% endif %}\n        event:\n          \"up\":\n            - service: light.turn_on\n              data:\n                entity_id: light.plate_moodlight\n                rgb_color: \"[{{ r }},{{ g }},{{ b }}]\"\n</code></pre> The brightness slider value gets updated from the <code>brightness</code> attribute of <code>light.plate_moodlight</code>, while it's on. If it's off, that attribute is removed by Home Assistant, in that case we set it to <code>0</code>.</p> <p>The <code>color</code> property gets updated from the <code>rgb_color</code> attriburte of the light. The R, G and B decimal color values are converted to hexadecimal html color code using a template whenever the color of the light changes in Home Assistant.</p> <p>When somebody changes the color of the picker object on the page, the light in Home Assistant gets updated with <code>rgb_color</code> values received in the MQTT message from the plate.</p>"},{"location":"integrations/home-assistant/sampl_conf/#cover-with-state-feedback","title":"Cover with state feedback","text":"<p>The icon on the up and down buttons change color when covers move and set opacity when reached to limit. UI theme set to <code>Hasp Light</code> in plate's web interface. </p> <p>relevant openHASP config: (screen size 240x320) </p> <pre><code>{\"page\":1,\"id\":4,\"obj\":\"btn\",\"x\":5,\"y\":140,\"w\":73,\"h\":60,\"toggle\":false,\"text\":\"\\uE05D\",\"text_font\":32}\n{\"page\":1,\"id\":5,\"obj\":\"btn\",\"x\":83,\"y\":140,\"w\":73,\"h\":60,\"toggle\":false,\"text\":\"\\uE4DB\",\"text_font\":32}\n{\"page\":1,\"id\":6,\"obj\":\"btn\",\"x\":161,\"y\":140,\"w\":73,\"h\":60,\"toggle\":false,\"text\":\"\\uE045\",\"text_font\":32}\n</code></pre> <p>relevant openHASP-custom-component config:</p> <pre><code>      - obj: \"p1b4\"\n        properties:\n          \"text_color\": \"{{ '#FFFF00' if is_state('cover.cover_1', 'opening') else '#FFFFFF' }}\"\n          \"text_opa\": \"{{ '80' if is_state_attr('cover.cover_1','current_position', 100) else '255' }}\"\n        event:\n          \"down\":\n            - service: cover.open_cover\n              target:\n                entity_id: \"cover.cover_1\"\n      - obj: \"p1b5\"\n        properties:\n          \"text\": &gt;\n            {% if is_state('cover.cover_1', 'closing') %}\n            {{ \"\\uE4DB\" | e }}\n            {%-elif is_state('cover.cover_1', 'opening') %}\n            {{ \"\\uE4DB\" | e }}\n            {%-elif is_state('cover.cover_1', 'closed') %}\n            {{ \"\\uF11C\" | e }}\n            {%-elif is_state('cover.cover_1', 'open') %}\n            {{ \"\\uF11E\" | e }}\n            {% endif %}\n        event:\n          \"down\":\n            - service: cover.stop_cover\n              target:\n                entity_id: \"cover.cover_1\"\n      - obj: \"p1b6\"\n        properties:\n          \"text_color\": \"{{ '#FFFF00' if is_state('cover.cover_1', 'closing') else '#FFFFFF' }}\"\n          \"text_opa\": \"{{ '80' if is_state_attr('cover.cover_1','current_position', 0) else '255' }}\"\n        event:\n          \"down\":\n            - service: cover.close_cover\n              target:\n                entity_id: \"cover.cover_1\"\n</code></pre>"},{"location":"integrations/home-assistant/sampl_conf/#cover-with-button-matrix","title":"Cover with button matrix","text":"<p>A simpler cover control with only basic feedback. UI theme set to <code>Hasp Light</code> in plate's web interface. </p> <p>relevant openHASP config: (screen size 240x320) </p> <pre><code>{\"page\":4,\"id\":20,\"obj\":\"btnmatrix\",\"x\":0,\"y\":20,\"w\":240,\"h\":70,\"options\":[\"\\uE05D\",\"\\uE4DB\",\"\\uE045\"],\"text_font\":32,\"bg_opa\":0,\"border_opa\":0}\n</code></pre> <p>relevant openHASP-custom-component config:</p> <pre><code>      - obj: \"p4b20\"\n        properties:\n          \"options\": &gt;\n            {% if is_state('cover.cover_1', 'closing') %}\n            [\"\\uE05D\",\"\\uE4DB\",\"#FFFF00 \\uE045\"]\n            {%-elif is_state('cover.cover_1', 'opening') %}\n            [\"#FFFF00 \\uE05D\",\"\\uE4DB\",\"\\uE045\"]\n            {%-else %}\n            [\"\\uE05D\",\"\\uE4DB\",\"\\uE045\"]\n            {% endif %}\n        event:\n          \"down\":\n            - service: &gt;\n                {% if val == 0 %}\n                cover.open_cover\n                {%-elif val == 1 %}\n                cover.stop_cover\n                {%-elif val == 2 %}\n                cover.close_cover\n                {% endif %}\n              target:\n                entity_id: cover.cover_1\n</code></pre>"},{"location":"integrations/home-assistant/sampl_conf/#covers-like-in-lovelace","title":"Covers like in Lovelace","text":"<p>The icon behaves like in Lovelace. UI theme set to <code>Hasp Light</code> in plate's web interface.</p>  Your browser does not support the video tag.  <p>Check out the Lovelace-like entities for similar placement.  </p> <p>relevant openHASP config: (screen size 240x320, UI Theme: Hasp Light) </p> <pre><code>{\"page\":5,\"id\":12,\"obj\":\"label\",\"x\":8,\"y\":33,\"w\":35,\"h\":35,\"text\":\"\\uF11D\",\"align\":1,\"text_font\":32,\"text_color\":\"#053248\"}\n{\"page\":5,\"id\":13,\"obj\":\"label\",\"x\":48,\"y\":43,\"w\":80,\"h\":30,\"text\":\"Cover 1\",\"align\":0,\"text_font\":16,\"text_color\":\"#053248\"}\n{\"page\":5,\"id\":14,\"obj\":\"btn\",\"x\":125,\"y\":37,\"w\":30,\"h\":30,\"toggle\":false,\"text\":\"\\uE05D\",\"text_font\":32,\"bg_opa\":0,\"border_opa\":0,\"text_color\":\"#053248\"}\n{\"page\":5,\"id\":15,\"obj\":\"btn\",\"x\":165,\"y\":37,\"w\":30,\"h\":30,\"toggle\":false,\"text\":\"\\uE4DB\",\"text_font\":32,\"bg_opa\":0,\"border_opa\":0,\"text_color\":\"#053248\"}\n{\"page\":5,\"id\":16,\"obj\":\"btn\",\"x\":205,\"y\":37,\"w\":30,\"h\":30,\"toggle\":false,\"text\":\"\\uE045\",\"text_font\":32,\"bg_opa\":0,\"border_opa\":0,\"text_color\":\"#053248\"}\n\n{\"page\":5,\"id\":22,\"obj\":\"label\",\"x\":8,\"y\":69,\"w\":35,\"h\":35,\"text\":\"\\uF11D\",\"align\":1,\"text_font\":32,\"text_color\":\"#053248\"}\n{\"page\":5,\"id\":23,\"obj\":\"label\",\"x\":48,\"y\":79,\"w\":80,\"h\":30,\"text\":\"Cover 2\",\"align\":0,\"text_font\":16,\"text_color\":\"#053248\"}\n{\"page\":5,\"id\":24,\"obj\":\"btn\",\"x\":125,\"y\":73,\"w\":30,\"h\":30,\"toggle\":false,\"text\":\"\\uE05D\",\"text_font\":32,\"bg_opa\":0,\"border_opa\":0,\"text_color\":\"#053248\"}\n{\"page\":5,\"id\":25,\"obj\":\"btn\",\"x\":165,\"y\":73,\"w\":30,\"h\":30,\"toggle\":false,\"text\":\"\\uE4DB\",\"text_font\":32,\"bg_opa\":0,\"border_opa\":0,\"text_color\":\"#053248\"}\n{\"page\":5,\"id\":26,\"obj\":\"btn\",\"x\":205,\"y\":73,\"w\":30,\"h\":30,\"toggle\":false,\"text\":\"\\uE045\",\"text_font\":32,\"bg_opa\":0,\"border_opa\":0,\"text_color\":\"#053248\"}\n</code></pre> <p>relevant openHASP-custom-component config:</p> <pre><code>      - obj: \"p5b12\"\n        properties:\n          \"text\": &gt;\n            {% if is_state('cover.my_cover', 'closing') %}\n            {{ \"\\uE6C0\" | e }}\n            {%-elif is_state('cover.my_cover', 'opening') %}\n            {{ \"\\uE6C3\" | e }}\n            {%-elif is_state('cover.my_cover', 'closed') %}\n            {{ \"\\uF11C\" | e }}\n            {%-elif is_state('cover.my_cover', 'open') %}\n            {{ \"\\uF11E\" | e }}\n            {% endif %}\n      - obj: \"p5b14\"\n        event:\n          \"down\":\n            - service: cover.open_cover\n              target:\n                entity_id: \"cover.my_cover\"\n      - obj: \"p5b15\"\n        event:\n          \"down\":\n            - service: cover.stop_cover\n              target:\n                entity_id: \"cover.my_cover\"\n      - obj: \"p5b16\"\n        event:\n          \"down\":\n            - service: cover.close_cover\n              target:\n                entity_id: \"cover.my_cover\"\n</code></pre>"},{"location":"integrations/home-assistant/sampl_conf/#media-player","title":"Media player","text":"<p>The labels with artist and title are scrolling, the progressbar fills if the media player provides duration and playback position. The dropdown lists containing the available sources and sound modes of the player get populated automatically by the values existing on the player in Home Assistant, and also the actually selected source is in sync with it.</p> <p>Player availability is shown by the opacity of the buttons. Player state (play/pause) is shown by the middle button, short pressing means pause, long-press means stop. Power state shown by color, repeat, shuffle and muted state shown by appropriate icons on the buttons. UI theme set to <code>Hasp Light</code> in plate's web interface.</p> <p>relevant openHASP config: (screen size 240x320) </p> <pre><code>{\"page\":6,\"id\":10,\"obj\":\"obj\",\"x\":5,\"y\":35,\"w\":230,\"h\":250,\"click\":0,\"bg_opa\":0,\"shadow_opa\":140,\"shadow_color\":\"black\",\"shadow_width\":20,\"shadow_spread\":0}\n{\"page\":6,\"id\":11,\"obj\":\"obj\",\"x\":8,\"y\":38,\"w\":200,\"h\":84,\"click\":0}\n{\"page\":6,\"id\":12,\"obj\":\"label\",\"x\":10,\"y\":48,\"w\":196,\"h\":30,\"text\":\"-\",\"mode\":\"scroll\",\"align\":1}\n{\"page\":6,\"id\":13,\"obj\":\"label\",\"x\":10,\"y\":83,\"w\":196,\"h\":30,\"text\":\"-\",\"mode\":\"scroll\",\"align\":1}\n{\"page\":6,\"id\":14,\"obj\":\"bar\",\"x\":8,\"y\":117,\"w\":200,\"h\":5,\"min\":0,\"max\":100,\"border_opa\":0,\"pad_top\":0,\"pad_bottom\":0,\"pad_left\":0,\"pad_right\":0}\n{\"page\":6,\"id\":15,\"obj\":\"dropdown\",\"x\":8,\"y\":129,\"w\":120,\"h\":30,\"options\":\"Source1\\nSource2\\nSource3\",\"direction\":3,\"max_height\":300,\"radius\":5}\n{\"page\":6,\"id\":16,\"obj\":\"dropdown\",\"x\":133,\"y\":129,\"w\":75,\"h\":30,\"options\":\"Jazz\\nPop\\nRock\",\"direction\":2,\"radius\":5}\n{\"page\":6,\"id\":17,\"obj\":\"btn\",\"x\":8,\"y\":166,\"w\":50,\"h\":70,\"toggle\":false,\"text\":\"\\uE4AE\",\"text_font\":32}\n{\"page\":6,\"id\":18,\"obj\":\"btn\",\"x\":66,\"y\":166,\"w\":83,\"h\":70,\"toggle\":false,\"text\":\"\\uE40A\",\"text_font\":32}\n{\"page\":6,\"id\":19,\"obj\":\"btn\",\"x\":157,\"y\":166,\"w\":51,\"h\":70,\"toggle\":false,\"text\":\"\\uE4AD\",\"text_font\":32}\n{\"page\":6,\"id\":20,\"obj\":\"slider\",\"x\":212,\"y\":38,\"w\":20,\"h\":244,\"min\":0,\"max\":100,\"val\":85}\n{\"page\":6,\"id\":21,\"obj\":\"btn\",\"x\":8,\"y\":241,\"w\":45,\"h\":40,\"toggle\":false,\"text\":\"\\uE425\",\"text_font\":32}\n{\"page\":6,\"id\":22,\"obj\":\"btn\",\"x\":60,\"y\":241,\"w\":45,\"h\":40,\"toggle\":false,\"text\":\"\\uE457\",\"text_font\":32}\n{\"page\":6,\"id\":23,\"obj\":\"btn\",\"x\":111,\"y\":241,\"w\":45,\"h\":40,\"toggle\":false,\"text\":\"\\uE49E\",\"text_font\":32}\n{\"page\":6,\"id\":24,\"obj\":\"btn\",\"x\":163,\"y\":241,\"w\":45,\"h\":40,\"toggle\":false,\"text\":\"\\uE57E\",\"text_font\":32}\n</code></pre> <p>relevant openHASP-custom-component config:</p> <p><pre><code>      - obj: \"p6b12\" # artist label\n        properties:\n          \"text\": \"{{ state_attr('media_player.sound_my_room1','media_artist') if state_attr('media_player.sound_my_room1','media_artist') else '-' }}\"\n\n      - obj: \"p6b13\" # title label\n        properties:\n          \"text\": \"{{ state_attr('media_player.sound_my_room1','media_title') if state_attr('media_player.sound_my_room1','media_title') else '-' }}\"\n\n      - obj: \"p6b15\" # sources list\n        properties:\n          \"options\": &gt;\n            {% if (state_attr('media_player.sound_my_room1','source_list') != none and states('media_player.sound_my_room1') not in ['unavailable', 'unknown']) %}\n            {{\"(no source)\\n\"|e}}\n            {%- for source in state_attr('media_player.sound_my_room1','source_list') -%}\n            {{source+\"\\n\"|e}}{%-if not loop.last%}{%-endif%}{%-endfor%}{%-endif %}\n          \"val\": &gt;\n            {% if states('media_player.sound_my_room1') not in ['unavailable', 'unknown'] %}\n            {% if state_attr('media_player.sound_my_room1','source') == None %}0{% else %}\n            {%for source in state_attr('media_player.sound_my_room1','source_list')%}\n            {{loop.index if source == state_attr('media_player.sound_my_room1','source') }}\n            {%-endfor%}{%-endif %}{%-endif %}\n          \"click\": \"{{ 'false' if states('media_player.sound_my_room1') in ['unavailable', 'unknown'] else 'true' }}\"\n        event:\n          \"changed\":\n            - service: media_player.select_source\n              data:\n                entity_id: media_player.sound_my_room1\n                source: \"{{ text }}\"\n\n      - obj: \"p6b16\" # sound modes list\n        properties:\n          \"options\": &gt;\n            {% if (state_attr('media_player.sound_my_room1','sound_mode_list') != none and states('media_player.sound_my_room1') not in ['unavailable', 'unknown']) %}\n            {%-for soundmode in state_attr('media_player.sound_my_room1','sound_mode_list')-%}\n            {{soundmode+\"\\n\"|e}}{%-if not loop.last%}{%-endif%}{%-endfor%}{%-endif %}\n          \"val\": &gt;\n            {% if states('media_player.sound_my_room1') not in ['unavailable', 'unknown'] %}{%for source in state_attr('media_player.sound_my_room1','sound_mode_list')%}\n            {{loop.index -1 if source == state_attr('media_player.sound_my_room1','sound_mode') }}\n            {%-endfor%}{% endif %}\n          \"click\": \"{{ 'false' if states('media_player.sound_my_room1') in ['unavailable', 'unknown'] else 'true' }}\"\n        event:\n          \"changed\":\n            - service: media_player.select_sound_mode\n              data:\n                entity_id: media_player.sound_my_room1\n                sound_mode: \"{{ text }}\"\n\n      - obj: \"p6b14\" # progressbar\n        properties:\n          \"max\": \"{{ state_attr('media_player.sound_my_room1','media_duration') | int }}\"\n          \"val\": \"{{ state_attr('media_player.sound_my_room1','media_position') | int }}\"\n\n      - obj: \"p6b18\" # play/pause/stop\n        properties:\n          \"text\": &gt;\n            {% if is_state('media_player.sound_my_room1', 'playing') %}\n            {{ \"\\uE3E4\" | e }}\n            {%-else %}\n            {{ \"\\uE40A\" | e }}\n            {%-endif %}\n          \"text_opa\": \"{{ '80' if states('media_player.sound_my_room1') in ['unavailable', 'unknown'] else '255' }}\"\n        event:\n          \"down\":\n            - service: media_player.media_play_pause\n              target:\n                entity_id: media_player.sound_my_room1\n          \"long\":\n            - service: media_player.media_stop\n              target:\n                entity_id: media_player.sound_my_room1\n\n      - obj: \"p6b17\" # prev\n        properties:\n          \"text_opa\": \"{{ '80' if states('media_player.sound_my_room1') in ['unavailable', 'unknown'] else '255' }}\"\n        event:\n          \"down\":\n            - service: media_player.media_previous_track\n              target:\n                entity_id: media_player.sound_my_room1\n\n      - obj: \"p6b19\" # next\n        properties:\n          \"text_opa\": \"{{ '80' if states('media_player.sound_my_room1') in ['unavailable', 'unknown'] else '255' }}\"\n        event:\n          \"down\":\n            - service: media_player.media_next_track\n              target:\n                entity_id: media_player.sound_my_room1\n\n      - obj: \"p6b20\" # volume slider\n        properties:\n          \"val\": &gt;\n            {% if (state_attr('media_player.sound_my_room1','volume_level') != none and states('media_player.sound_my_room1') not in ['unavailable', 'unknown']) %}\n            {{ state_attr('media_player.sound_my_room1','volume_level') * 100 | int(default=80) }}\n            {%-endif %}\n          \"click\": \"{{ 'false' if states('media_player.sound_my_room1') in ['unavailable', 'unknown'] else 'true' }}\"\n        event:\n          \"changed\":\n            - service: media_player.volume_set\n              data:\n                entity_id: media_player.sound_my_room1\n                volume_level: \"{{ val | int / 100 }}\"\n          \"up\":\n            - service: media_player.volume_set\n              data:\n                entity_id: media_player.sound_my_room1\n                volume_level: \"{{ val | int / 100 }}\"\n\n      - obj: \"p6b21\" # power\n        properties:\n          \"text_color\": \"{{ '#B00000' if states('media_player.sound_my_room1') == 'off' else '#FFFFFF' }}\"\n          \"text_opa\": \"{{ '80' if states('media_player.sound_my_room1') in ['unavailable', 'unknown'] else '255' }}\"\n        event:\n          \"down\":\n            - service: media_player.toggle\n              data:\n                entity_id: media_player.sound_my_room1\n\n      - obj: \"p6b22\" # repeat\n        properties:\n          \"text\": &gt;\n            {% if is_state_attr('media_player.sound_my_room1', 'repeat', 'one') %}\n            {{ \"\\uE458\" | e }}\n            {% elif is_state_attr('media_player.sound_my_room1', 'repeat', 'all') %}\n            {{ \"\\uE456\" | e }}\n            {%-else %}\n            {{ \"\\uE457\" | e }}\n            {%-endif %}\n          \"text_opa\": \"{{ '80' if states('media_player.sound_my_room1') in ['unavailable', 'unknown'] else '255' }}\"\n        event:\n          \"down\":\n            - service: media_player.repeat_set\n              data:\n                entity_id: media_player.sound_my_room1\n                repeat: &gt;\n                  {% if is_state_attr('media_player.sound_my_room1', 'repeat', 'one') %}\n                  all\n                  {% elif is_state_attr('media_player.sound_my_room1', 'repeat', 'all') %}\n                  off\n                  {% elif is_state_attr('media_player.sound_my_room1', 'repeat', 'off') %}\n                  one\n                  {%-endif %}\n\n      - obj: \"p6b23\" # shuffle\n        properties:\n          \"text\": &gt;\n            {% if state_attr('media_player.sound_my_room1', 'shuffle') %}\n            {{ \"\\uE49D\" | e }}\n            {%-else %}\n            {{ \"\\uE49E\" | e }}\n            {%-endif %}\n          \"text_opa\": \"{{ '80' if states('media_player.sound_my_room1') in ['unavailable', 'unknown'] else '255' }}\"\n        event:\n          \"down\":\n            - service: media_player.shuffle_set\n              data:\n                entity_id: media_player.sound_my_room1\n                shuffle:  &gt;\n                  {% if state_attr('media_player.sound_my_room1', 'shuffle') %}\n                  false\n                  {% else %}\n                  true\n                  {%-endif %}\n\n      - obj: \"p6b24\" # mute\n        properties:\n          \"text\": &gt;\n            {% if state_attr('media_player.sound_my_room1', 'is_volume_muted') %}\n            {{ \"\\uE75F\" | e }}\n            {%-else %}\n            {{ \"\\uE57E\" | e }}\n            {%-endif %}\n          \"text_opa\": \"{{ '80' if states('media_player.sound_my_room1') in ['unavailable', 'unknown'] else '255' }}\"\n        event:\n          \"down\":\n            - service: media_player.volume_mute\n              data:\n                entity_id: media_player.sound_my_room1\n                is_volume_muted:  &gt;\n                  {% if state_attr('media_player.sound_my_room1', 'is_volume_muted') %}\n                  false\n                  {% else %}\n                  true\n                  {%-endif %}\n</code></pre> Note that the <code>val</code> value of the slider is multiplied and divided by 100 when read and set, because LVGL only suppports integers for object values. By multiplying and dividing by 100, it becomes possible to set volume between 0 and 1 as required by Home Assistant.</p>"},{"location":"integrations/home-assistant/sampl_conf/#generic-thermostatclimate","title":"Generic thermostat/climate","text":"<p>This example is a bit more complex in the aspect that it uses several objects put on top of each other, and grouped toghether using the <code>parentid</code> parameter.  Special attention goes to an invisible tabview (exteding over the label dispaying the target temperarture) which allows for swiping between an on/off switch and dropdowns for setting the hvac and fan modes.</p> <p>The target temperature can be set by dragging the arc handle, more precise +/- setting possible by short/long pressing the middle circle containing the current temperature (increasing/decreasing the value by the temperature step defined by the climate entity). Note that the <code>min</code>, <code>max</code> and <code>val</code> values of the arc and gauge are multiplied and divided by 10 when set and read, because LVGL only suppports integers for object values. By multiplying and dividing by 10, it becomes possible to set decimal values for climate temperature. </p> <p>The number of the ticks on the gauge is determined from the <code>min</code>, <code>max</code> attributes of the configured climate, likewise the <code>hvac_modes</code> and <code>fan_modes</code> dropdowns. You can localise these using the <code>if-else</code> statements of the template in the configuration of the custom component.</p> <p>The active area of the arc changes color based on the current hvac mode of the entity.   UI theme set to <code>Hasp Light</code> in plate's web interface.</p> <p>Note that the tab swiping dots (p3b26) are also handled by the custom component. Don't forget update the service call in the configuration with your plate's MQTT node name, and the command parameters if you change the page of the objects.</p>  Your browser does not support the video tag.  <p>relevant openHASP config: (screen size 240x320) </p> <pre><code>{\"page\":3,\"id\":10,\"obj\":\"obj\",\"x\":5,\"y\":35,\"w\":230,\"h\":250,\"click\":0}\n{\"page\":3,\"id\":10,\"obj\":\"obj\",\"x\":5,\"y\":35,\"w\":230,\"h\":250,\"click\":0}\n{\"page\":3,\"id\":20,\"obj\":\"arc\",\"x\":5,\"y\":37,\"w\":230,\"h\":230,\"min\":170,\"max\":300,\"val\":250,\"border_side\":0,\"type\":0,\"rotation\":0,\"start_angle\":135,\"end_angle\":45,\"adjustable\":\"true\",\"line_width\":21,\"line_width10\":21,\"line_color10\":\"#34bdeb\",\"bg_opa\":0,\"pad_top20\":5,\"pad_bottom20\":5,\"pad_left20\":5,\"pad_right20\":5,\"pad_top\":5,\"pad_bottom\":5,\"pad_left\":5,\"pad_right\":5}\n{\"page\":3,\"id\":21,\"obj\":\"gauge\",\"x\":28,\"y\":28,\"w\":175,\"h\":175,\"parentid\":20,\"min\":170,\"max\":300,\"val\":224,\"format\":1,\"critical_value\":301,\"label_count\":14,\"line_count\":27,\"border_width\":0,\"pad_top\":2,\"pad_bottom\":2,\"pad_left\":2,\"pad_right\":2,\"value_str\":\"\u00b0C\",\"value_ofs_y\":55,\"value_font\":16,\"bg_opa\":0,\"line_width10\":3,\"line_rounded10\":1,\"line_color\":\"#348feb\",\"line_color60\":\"#348feb\",\"scale_grad_color\":\"#eb4934\",\"scale_grad_color60\":\"#eb4934\",\"scale_end_color60\":\"#eb4934\"}\n{\"page\":3,\"id\":22,\"obj\":\"obj\",\"x\":85,\"y\":85,\"w\":60,\"h\":60,\"parentid\":20,\"click\":0,\"radius\":30,\"border_width\":2,\"border_opa\":200}\n{\"page\":3,\"id\":23,\"obj\":\"label\",\"x\":80,\"y\":100,\"w\":70,\"h\":30,\"parentid\":20,\"text\":\"22.4\",\"text_font\":24,\"align\":\"center\"}\n{\"page\":3,\"id\":24,\"obj\":\"obj\",\"x\":145,\"y\":245,\"w\":60,\"h\":30,\"click\":0,\"radius\":5}\n{\"page\":3,\"id\":25,\"obj\":\"label\",\"x\":145,\"y\":245,\"w\":60,\"h\":30,\"text\":\"25\",\"text_font\":24,\"align\":\"center\"}\n{\"page\":3,\"id\":26,\"obj\":\"label\",\"x\":90,\"y\":220,\"w\":60,\"h\":30,\"text\":\"#909090 \\u2022# #000000 \\u2022# #909090 \\u2022#\",\"text_font\":24,\"align\":\"center\",\"text_color\":\"grey\",\"border_width\":0}\n{\"page\":3,\"id\":30,\"obj\":\"tabview\",\"x\":0,\"y\":235,\"w\":240,\"h\":80,\"btn_pos\":0,\"bg_opa\":0,\"border_width\":0,\"radius\":0}\n{\"page\":3,\"id\":31,\"obj\":\"tab\",\"parentid\":30}\n{\"page\":3,\"id\":32,\"obj\":\"tab\",\"parentid\":30}\n{\"page\":3,\"id\":33,\"obj\":\"tab\",\"parentid\":30}\n{\"page\":3,\"id\":41,\"obj\":\"switch\",\"x\":35,\"y\":10,\"w\":60,\"h\":30,\"parentid\":31,\"radius\":25,\"radius20\":25}\n{\"page\":3,\"id\":42,\"obj\":\"dropdown\",\"x\":15,\"y\":10,\"w\":110,\"h\":30,\"parentid\":32,\"options\":\"fan_modes\",\"direction\":\"1\",\"radius\":5}\n{\"page\":3,\"id\":43,\"obj\":\"dropdown\",\"x\":15,\"y\":10,\"w\":110,\"h\":30,\"parentid\":33,\"options\":\"hvac_modes\",\"direction\":\"1\",\"radius\":5}\n</code></pre> <p>relevant openHASP-custom-component config:</p> <pre><code>      - obj: \"p3b20\"  # arc slider\n        properties:\n          \"val\": &gt;\n            {% if state_attr('climate.thermostat_1','temperature') is not none %}\n            {{ state_attr('climate.thermostat_1','temperature') | int * 10 }}\n            {%- endif %}\n          \"min\": &gt;\n            {% if state_attr('climate.thermostat_1','min_temp') is not none %}\n            {{ state_attr('climate.thermostat_1','min_temp') | int * 10 }}\n            {%- endif %}\n          \"max\": &gt;\n            {% if state_attr('climate.thermostat_1','max_temp') is not none %}\n            {{ state_attr('climate.thermostat_1','max_temp') | int * 10 }}\n            {%- endif %}\n          \"opacity\": \"{{ 60 if (is_state('climate.thermostat_1','unavailable') or is_state('climate.thermostat_1','unknown')) else 255 }}\"\n          \"click\": \"{{ 'false' if (is_state('climate.thermostat_1','unavailable') or is_state('climate.thermostat_1','unknown')) else 'true' }}\"\n          \"line_color1\": &gt;\n            {% if is_state('climate.thermostat_1', 'cool') %}\n            {{ \"#346beb\" }}\n            {%-elif is_state('climate.thermostat_1', 'heat_cool') %}\n            {{ \"#34bdeb\" }}\n            {%-elif is_state('climate.thermostat_1', 'heat') %}\n            {{ \"#eb3434\" }}\n            {%-elif is_state('climate.thermostat_1', 'dry') %}\n            {{ \"#ebeb34\" }}\n            {%-elif is_state('climate.thermostat_1', 'fan_only') %}\n            {{ \"#34eb77\" }}\n            {%-else %}\n            {{ \"#9f96b0\" }}\n            {% endif %}\n        event:\n          \"changed\":\n            - service: climate.set_temperature\n              target:\n                entity_id: climate.thermostat_1\n              data:\n                temperature: \"{{ val | int / 10 }}\"\n          \"up\":\n            - service: climate.set_temperature\n              target:\n                entity_id: climate.thermostat_1\n              data:\n                temperature: \"{{ val | int / 10 }}\"\n\n      - obj: \"p3b21\"  # gauge current temp\n        properties:\n          \"val\": &gt;\n            {% if not (is_state('sensor.ble_atlaghomerseklet','unavailable') or is_state('sensor.ble_atlaghomerseklet','unknown')) %}\n            {{ states('sensor.ble_atlaghomerseklet') | float (default=0) * 10 }}\n            {%- endif %}\n          \"min\": &gt;\n            {% if state_attr('climate.thermostat_1','min_temp') is not none %}\n            {{ state_attr('climate.thermostat_1','min_temp') | int * 10 }}\n            {%- endif %}\n          \"max\": &gt;\n            {% if state_attr('climate.thermostat_1','max_temp') is not none %}\n            {{ state_attr('climate.thermostat_1','max_temp') | int * 10 }}\n            {%- endif %}\n          \"critical_value\": &gt;\n            {% if state_attr('climate.thermostat_1','max_temp') is not none %}\n            {{ state_attr('climate.thermostat_1','max_temp') | int * 10 + 1 }}\n            {%- endif %}\n          \"label_count\": &gt;\n            {% if state_attr('climate.thermostat_1','max_temp') is not none %}\n            {{ state_attr('climate.thermostat_1','max_temp') | int - state_attr('climate.thermostat_1','min_temp') | int + 1 }}\n            {%- endif %}\n          \"line_count\": &gt;\n            {% if state_attr('climate.thermostat_1','max_temp') is not none %}\n            {{ (state_attr('climate.thermostat_1','max_temp') | int - state_attr('climate.thermostat_1','min_temp') | int) * 2 + 1 }}\n            {%- endif %}\n          \"opacity\": \"{{ 60 if (is_state('climate.thermostat_1','unavailable') or is_state('climate.thermostat_1','unknown')) else 255 }}\"\n\n      - obj: \"p3b23\"  # label current temp (and +/- with short/long touch)\n        properties:\n          \"text\": &gt;\n            {% if (is_state('sensor.temp_room_1','unavailable') or is_state('sensor.temp_room_1','unknown')) %}\n            {{ \"--.-\" }}\n            {%-else %}\n            {{ states('sensor.temp_room_1') | round(1,default=0) }}\n            {%- endif %}\n          \"click\": \"{{ 'false' if (is_state('climate.thermostat_1','unavailable') or is_state('climate.thermostat_1','unknown')) else 'true' }}\"\n          \"opacity\": \"{{ 60 if (is_state('climate.thermostat_1','unavailable') or is_state('climate.thermostat_1','unknown')) else 255 }}\"\n        event:\n          \"up\":\n            - service: climate.set_temperature\n              target:\n                entity_id: climate.thermostat_1\n              data:\n                temperature: \"{{ state_attr('climate.thermostat_1','temperature') + state_attr('climate.thermostat_1','target_temp_step') | float(default=1)}}\" \n          \"long\":\n            - service: climate.set_temperature\n              target:\n                entity_id: climate.thermostat_1\n              data:\n                temperature: \"{{ state_attr('climate.thermostat_1','temperature') - state_attr('climate.thermostat_1','target_temp_step') | float(default=1)}}\" \n\n\n      - obj: \"p3b25\"  # label target temp\n        properties:\n          \"text\": &gt;\n            {% if state_attr('climate.thermostat_1','temperature') is not none %}\n            {{ state_attr('climate.thermostat_1','temperature') }}\n            {%- endif %}\n          \"opacity\": \"{{ 60 if (is_state('climate.thermostat_1','unavailable') or is_state('climate.thermostat_1','unknown')) else 255 }}\"\n\n\n      - obj: \"p3b41\"  # on/off switch\n        properties:\n          \"val\": \"{{ 0 if (is_state('climate.thermostat_1', 'off') or is_state('climate.thermostat_1', 'unavailable')) else 1 }}\"\n          \"click\": \"{{ 'false' if (is_state('climate.thermostat_1','unavailable') or is_state('climate.thermostat_1','unknown')) else 'true' }}\"\n          \"opacity\": \"{{ 60 if (is_state('climate.thermostat_1','unavailable') or is_state('climate.thermostat_1','unknown')) else 255 }}\"\n        event:\n          \"down\":\n            - service_template: &gt;\n                {% if val == 0 -%}\n                climate.turn_on\n                {% else -%}\n                climate.turn_off\n                {% endif -%}\n              entity_id: \"climate.thermostat_1\"\n\n      - obj: \"p3b30\"  # tab dots\n        event:\n          \"changed\":\n            - service: openhasp.command\n              target:\n                entity_id: openhasp.your_plate\n              data:\n                keyword: p3b26.text\n                parameters: &gt;\n                  {% if val == 0 %}\n                  {{ \"#000000 \\u2022# #909090 \\u2022# #909090 \\u2022#\" | e }}\n                  {%-elif val == 1 %}\n                  {{ \"#909090 \\u2022# #000000 \\u2022# #909090 \\u2022#\" | e }}\n                  {%-elif val == 2 %}\n                  {{ \"#909090 \\u2022# #909090 \\u2022# #000000 \\u2022#\" | e }}\n                  {% endif %}\n\n      - obj: \"p3b42\"  # dropdown with fan_modes\n        properties:\n          \"options\": &gt;\n            {% if state_attr('climate.thermostat_1','fan_modes') is not none %}{%for mode in state_attr('climate.thermostat_1','fan_modes')%}\n            {%- if mode == 'auto' -%}\n            Automatic{{\"\\n\"|e}}\n            {%- elif mode == 'low' -%}\n            Low{{\"\\n\"|e}}\n            {%- elif mode == 'medium' -%}\n            Medium{{\"\\n\"|e}}\n            {%- elif mode == 'high' -%}\n            High{{\"\\n\"|e}}\n            {%- elif mode == 'turbo' -%}\n            Turbo{{\"\\n\"|e}}\n            {%- endif -%}\n            {%-if not loop.last%}{%-endif%}{%-endfor%}{% endif %}\n          \"click\": \"{{ 'false' if (is_state('climate.thermostat_1','unavailable') or is_state('climate.thermostat_1','unknown')) else 'true' }}\"\n          \"val\": &gt;\n            {% if not (is_state('climate.thermostat_1','unavailable')) %}{%for mode in state_attr('climate.thermostat_1','fan_modes')%}\n            {{loop.index -1 if mode == state_attr('climate.thermostat_1','fan_mode') }}\n            {%-endfor%}{% endif %}\n        event:\n          \"changed\":\n            - service: climate.set_fan_mode\n              target:\n                entity_id: climate.thermostat_1\n              data:\n                fan_mode: &gt;\n                  {% if text == \"Automatic\" -%}\n                  auto\n                  {% elif text == 'Low' -%}\n                  low\n                  {% elif text == 'Medium' -%}\n                  medium\n                  {% elif text == 'High' -%}\n                  high\n                  {% elif text == 'Turbo' -%}\n                  turbo\n                  {% endif -%}\n\n      - obj: \"p3b43\"  # dropdown with hvac_modes\n        properties:\n          \"options\": &gt;\n            {% if state_attr('climate.thermostat_1','hvac_modes') is not none %}{%for mode in state_attr('climate.thermostat_1','hvac_modes')%}\n            {%- if mode == 'off' -%}\n            Off{{\"\\n\"|e}}\n            {%- elif mode == 'heat' -%}\n            Heating{{\"\\n\"|e}}\n            {%- elif mode == 'cool' -%}\n            Cooling{{\"\\n\"|e}}\n            {%- elif mode == 'heat_cool' -%}\n            Heat/Cool{{\"\\n\"|e}}\n            {%- elif mode == 'dry' -%}\n            Drying{{\"\\n\"|e}}\n            {%- elif mode == 'fan_only' -%}\n            Fan only{{\"\\n\"|e}}\n            {%- else -%}\n            On{{\"\\n\"|e}}\n            {%- endif -%}\n            {%-if not loop.last%}{%-endif%}{%-endfor%}{% endif %}\n          \"click\": \"{{ 'false' if (is_state('climate.thermostat_1','unavailable') or is_state('climate.thermostat_1','unknown')) else 'true' }}\"\n          \"val\": &gt;\n            {% if not (is_state('climate.thermostat_1','unavailable')) %}{%for mode in state_attr('climate.thermostat_1','hvac_modes')%}\n            {{loop.index -1 if mode == states('climate.thermostat_1') }}\n            {%-endfor%}{% endif %}\n        event:\n          \"changed\":\n            - service: climate.set_hvac_mode\n              target:\n                entity_id: climate.thermostat_1\n              data:\n                hvac_mode: &gt;\n                  {% if text == \"Off\" -%}\n                  off\n                  {% elif text == 'Heating' -%}\n                  heat\n                  {% elif text == 'Cooling' -%}\n                  cool\n                  {% elif text == 'Heat/Cool' -%}\n                  heat_cool\n                  {% elif text == 'Drying' -%}\n                  dry\n                  {% elif text == 'Fan only' -%}\n                  fan_only\n                  {% endif -%}\n</code></pre>"},{"location":"integrations/home-assistant/sampl_conf/#current-weather-and-forecasts","title":"Current weather and forecasts","text":"<p>This example implements two weather forecast screens which located on the same page, can be swiped left and right. On the top area the current weather is shown, on the bottom area the user can choose by swiping between next hours and next days forecast. This is achieved by a tabview object with invisible tabs. </p> <p>Since there's no weather integration in Home Assistant which can offer so much information at once, this can be achieved by installing multiple weather components. In our example we use two:</p> <ul> <li>Met.no (the one coming by default pre-installed) for next days forecast.</li> <li>OpenWeatherMap{target=blank} (available as standard integration to be activated) for next hours forecast. _You need to set the forecast mode to onecall_hourly to get forecasts for the day's next hours.</li> </ul> <p>The openHASP component grabs information from both weather sources and updates them on every change.  The various strings containing day names, day periods, weather conditions can be localized easily to any language within the configuration.</p> <p>Weather condition icons are displayed from the internal flash space of the plate. For this, you need to upload the desired icon pack to the plate:</p> <ul> <li>light theme</li> <li>dark theme</li> </ul> <p>To unzip them on the plate, connect via Telnet and run the command <code>unzip /openhasp-weathericons-day.zip</code> to unzip the light theme above (alternatively you can unzip them on your computer and upload them one by one). The configuration example only shows how to use the light theme icons.</p> <p>This example implements Home Assistant's standard weather conditions only (as in 2021.06), so any weather integration component can be used. Some integrations know extra conditions in addition to the standard ones, those (with their corresponding icons) can be easily added to the component configuration below.</p> <p>Note that the tab swiping dots (p5b10) are also handled by the custom component. Don't forget update the service call in the configuration with your plate's MQTT node name, and the command parameters if you change the page of the objects.</p> <p>Warning</p> <p>For this example to work, you need an ESP32 board having PSRam memory installed, otherwise openHASP will crash.</p> <p>relevant openHASP config: (screen size 240x320, UI Theme: Hasp Light) </p> <pre><code>{\"page\":5,\"id\":1,\"obj\":\"btn\",\"x\":0,\"y\":0,\"w\":240,\"h\":30,\"text\":\"WEATHER\",\"text_font\":16,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0,\"click\":0}\n{\"page\":5,\"id\":2,\"obj\":\"obj\",\"x\":5,\"y\":35,\"w\":230,\"h\":250,\"click\":0}\n\n{\"page\":5,\"id\":14,\"obj\":\"img\",\"src\":\"L:/openhasp_dummy_img.png\",\"parentid\":2,\"auto_size\":1,\"w\":128,\"offset_x\":-6,\"offset_y\":-10}\n\n{\"page\":5,\"id\":15,\"obj\":\"label\",\"x\":100,\"y\":10,\"w\":130,\"h\":25,\"align\":\"center\",\"text\":\"date current\",\"parentid\":2}\n{\"page\":5,\"id\":16,\"obj\":\"label\",\"x\":125,\"y\":34,\"w\":95,\"h\":40,\"align\":\"center\",\"text\":\"00.0\u00b0C\",\"parentid\":2,\"text_font\":32}\n{\"page\":5,\"id\":17,\"obj\":\"label\",\"x\":110,\"y\":78,\"w\":120,\"h\":25,\"align\":\"center\",\"text\":\"condition\",\"parentid\":2}\n{\"page\":5,\"id\":19,\"obj\":\"label\",\"x\":90,\"y\":95,\"w\":60,\"h\":30,\"text\":\"#000000 \\u2022# #909090 \\u2022#\",\"parentid\":2,\"text_font\":24,\"align\":\"center\",\"text_color\":\"grey\"}\n\n{\"page\":5,\"id\":10,\"obj\":\"tabview\",\"x\":0,\"y\":0,\"w\":240,\"h\":260,\"parentid\":2,\"btn_pos\":0,\"bg_opa\":0,\"border_width\":0}\n{\"page\":5,\"id\":11,\"obj\":\"tab\",\"parentid\":10}\n{\"page\":5,\"id\":12,\"obj\":\"tab\",\"parentid\":10}\n\n{\"page\":5,\"id\":21,\"obj\":\"label\",\"x\":8,\"y\":123,\"w\":130,\"h\":22,\"align\":\"left\",\"text\":\"hour+2\",\"parentid\":11,\"pad_top\":3,\"click\":0}\n{\"page\":5,\"id\":22,\"obj\":\"label\",\"x\":124,\"y\":123,\"w\":50,\"h\":22,\"align\":\"center\",\"text\":\"00.0\",\"parentid\":11,\"pad_top\":-2,\"text_font\":24,\"click\":0}\n{\"page\":5,\"id\":23,\"obj\":\"img\",\"x\":182,\"y\":118,\"w\":32,\"h\":32,\"src\":\"L:/openhasp_dummy_img.png\",\"parentid\":11,\"click\":0}\n\n{\"page\":5,\"id\":31,\"obj\":\"label\",\"x\":8,\"y\":154,\"w\":130,\"h\":22,\"align\":\"left\",\"text\":\"hour+3\",\"parentid\":11,\"pad_top\":3,\"click\":0}\n{\"page\":5,\"id\":32,\"obj\":\"label\",\"x\":124,\"y\":154,\"w\":50,\"h\":22,\"align\":\"center\",\"text\":\"00.0\",\"parentid\":11,\"pad_top\":-2,\"text_font\":24,\"click\":0}\n{\"page\":5,\"id\":33,\"obj\":\"img\",\"x\":182,\"y\":150,\"w\":32,\"h\":32,\"src\":\"L:/openhasp_dummy_img.png\",\"parentid\":11,\"click\":0}\n\n{\"page\":5,\"id\":41,\"obj\":\"label\",\"x\":8,\"y\":186,\"w\":130,\"h\":22,\"align\":\"left\",\"text\":\"hour+4\",\"parentid\":11,\"pad_top\":3,\"click\":0}\n{\"page\":5,\"id\":42,\"obj\":\"label\",\"x\":124,\"y\":186,\"w\":50,\"h\":22,\"align\":\"center\",\"text\":\"00.0\",\"parentid\":11,\"pad_top\":-2,\"text_font\":24,\"click\":0}\n{\"page\":5,\"id\":43,\"obj\":\"img\",\"x\":182,\"y\":182,\"w\":32,\"h\":32,\"src\":\"L:/openhasp_dummy_img.png\",\"parentid\":11,\"click\":0}\n\n{\"page\":5,\"id\":51,\"obj\":\"label\",\"x\":8,\"y\":218,\"w\":130,\"h\":22,\"align\":\"left\",\"text\":\"hour+5\",\"parentid\":11,\"pad_top\":3,\"click\":0}\n{\"page\":5,\"id\":52,\"obj\":\"label\",\"x\":124,\"y\":218,\"w\":50,\"h\":22,\"align\":\"center\",\"text\":\"00.0\",\"parentid\":11,\"pad_top\":-2,\"text_font\":24,\"click\":0}\n{\"page\":5,\"id\":53,\"obj\":\"img\",\"x\":182,\"y\":214,\"w\":32,\"h\":32,\"src\":\"L:/openhasp_dummy_img.png\",\"parentid\":11,\"click\":0}\n\n{\"page\":5,\"id\":61,\"obj\":\"label\",\"x\":6,\"y\":123,\"w\":100,\"h\":22,\"align\":\"left\",\"text\":\"date+1\",\"parentid\":12,\"pad_top\":3,\"click\":0}\n{\"page\":5,\"id\":62,\"obj\":\"label\",\"x\":102,\"y\":123,\"w\":40,\"h\":22,\"align\":\"center\",\"text\":\"00.0\",\"parentid\":12,\"pad_top\":-2,\"text_font\":24,\"text_color\":\"Navy\",\"click\":0}\n{\"page\":5,\"id\":63,\"obj\":\"label\",\"x\":150,\"y\":123,\"w\":40,\"h\":22,\"align\":\"center\",\"text\":\"00.0\",\"parentid\":12,\"pad_top\":-2,\"text_font\":24,\"text_color\":\"Blush\",\"click\":0}\n{\"page\":5,\"id\":64,\"obj\":\"img\",\"x\":194,\"y\":118,\"w\":32,\"h\":32,\"src\":\"L:/openhasp_dummy_img.png\",\"parentid\":12,\"click\":0}\n\n{\"page\":5,\"id\":71,\"obj\":\"label\",\"x\":6,\"y\":154,\"w\":100,\"h\":22,\"align\":\"left\",\"text\":\"date+2\",\"parentid\":12,\"pad_top\":3,\"click\":0}\n{\"page\":5,\"id\":72,\"obj\":\"label\",\"x\":102,\"y\":154,\"w\":40,\"h\":22,\"align\":\"center\",\"text\":\"00.0\",\"parentid\":12,\"pad_top\":-2,\"text_font\":24,\"text_color\":\"Navy\",\"click\":0}\n{\"page\":5,\"id\":73,\"obj\":\"label\",\"x\":150,\"y\":154,\"w\":40,\"h\":22,\"align\":\"center\",\"text\":\"00.0\",\"parentid\":12,\"pad_top\":-2,\"text_font\":24,\"text_color\":\"Blush\",\"click\":0}\n{\"page\":5,\"id\":74,\"obj\":\"img\",\"x\":194,\"y\":150,\"w\":32,\"h\":32,\"src\":\"L:/openhasp_dummy_img.png\",\"parentid\":12,\"click\":0}\n\n{\"page\":5,\"id\":81,\"obj\":\"label\",\"x\":6,\"y\":186,\"w\":100,\"h\":22,\"align\":\"left\",\"text\":\"date+3\",\"parentid\":12,\"pad_top\":3,\"click\":0}\n{\"page\":5,\"id\":82,\"obj\":\"label\",\"x\":102,\"y\":186,\"w\":40,\"h\":22,\"align\":\"center\",\"text\":\"00.0\",\"parentid\":12,\"pad_top\":-2,\"text_font\":24,\"text_color\":\"Navy\",\"click\":0}\n{\"page\":5,\"id\":83,\"obj\":\"label\",\"x\":150,\"y\":186,\"w\":40,\"h\":22,\"align\":\"center\",\"text\":\"00.0\",\"parentid\":12,\"pad_top\":-2,\"text_font\":24,\"text_color\":\"Blush\",\"click\":0}\n{\"page\":5,\"id\":84,\"obj\":\"img\",\"x\":194,\"y\":182,\"w\":32,\"h\":32,\"src\":\"L:/openhasp_dummy_img.png\",\"parentid\":12,\"click\":0}\n\n{\"page\":5,\"id\":91,\"obj\":\"label\",\"x\":6,\"y\":218,\"w\":100,\"h\":22,\"align\":\"left\",\"text\":\"date+4\",\"parentid\":12,\"pad_top\":3,\"click\":0}\n{\"page\":5,\"id\":92,\"obj\":\"label\",\"x\":102,\"y\":218,\"w\":40,\"h\":22,\"align\":\"center\",\"text\":\"00.0\",\"parentid\":12,\"pad_top\":-2,\"text_font\":24,\"text_color\":\"Navy\",\"click\":0}\n{\"page\":5,\"id\":93,\"obj\":\"label\",\"x\":150,\"y\":218,\"w\":40,\"h\":22,\"align\":\"center\",\"text\":\"00.0\",\"parentid\":12,\"pad_top\":-2,\"text_font\":24,\"text_color\":\"Blush\",\"click\":0}\n{\"page\":5,\"id\":94,\"obj\":\"img\",\"x\":194,\"y\":214,\"w\":32,\"h\":32,\"src\":\"L:/openhasp_dummy_img.png\",\"parentid\":12,\"click\":0}\n</code></pre> <p>relevant openHASP-custom-component config:</p> <pre><code>      - obj: \"p5b14\" # Icon\n        properties:\n          \"src\": \"{{ 'L:/w-128-' + states('weather.openweathermap') + '.png' if not is_state('weather.openweathermap','unavailable') }}\"\n\n      - obj: \"p5b15\" # Current date (adjust format to your needs)\n        properties:\n          \"text\": &gt;\n            {%- if not is_state('weather.openweathermap','unavailable') %}\n            {%- set day = (states.weather.openweathermap.last_changed).strftime('%w') %}\n            {%- set days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"] %}\n            {{- days[ day | int -1 ] }} {{ (states.weather.openweathermap.last_changed).strftime('%m. %d. ') }}\n            {% endif -%}\n\n      - obj: \"p5b16\" # Current temp (you can use your own outdoor temp sensor if you have one)\n        properties:\n          \"text\": \"{{ state_attr('weather.openweathermap','temperature') |string + '\u00b0C' if not is_state('weather.openweathermap','unavailable') }}\"  # or \"{{ states('sensor.your_own_temp_sensor') if not is_state('sensor.your_own_temp_sensor','unavailable') else '--' }}\u00b0C\"\n\n      - obj: \"p5b17\" # Current weather condition\n        properties:\n          \"text\": &gt;\n             {% if is_state('weather.openweathermap','clear-night') -%}\n             Clear night\n             {% elif is_state('weather.openweathermap','cloudy') -%}\n             Cloudy\n             {% elif is_state('weather.openweathermap','fog') -%}\n             Fog\n             {% elif is_state('weather.openweathermap','hail') -%}\n             Hail\n             {% elif is_state('weather.openweathermap','lightning') -%}\n             Lightning\n             {% elif is_state('weather.openweathermap','lightning-rainy') -%}\n             Thunderstorms\n             {% elif is_state('weather.openweathermap','partlycloudy') -%}\n             Partly cloudy\n             {% elif is_state('weather.openweathermap','pouring') -%}\n             Pouring rain\n             {% elif is_state('weather.openweathermap','rainy') -%}\n             Rainy\n             {% elif is_state('weather.openweathermap','snowy') -%}\n             Snowy\n             {% elif is_state('weather.openweathermap','snowy-rainy') -%}\n             Snowy-rainy\n             {% elif is_state('weather.openweathermap','sunny') -%}\n             Sunny\n             {% elif is_state('weather.openweathermap','windy') -%}\n             Windy\n             {% elif is_state('weather.openweathermap','windy-variant') -%}\n             Windy\n             {% elif is_state('weather.openweathermap','exceptional') -%}\n             Exceptional\n             {% elif is_state('weather.openweathermap','unavailable') -%}\n             (not available)\n             {% else -%}\n             {{ states('weather.openweathermap') }}\n             {% endif -%}\n\n      - obj: \"p5b10\"  # tab dots - MAKE SURE YOU UPDATE THIS ONE!!\n        event:\n          \"changed\":\n            - service: openhasp.command\n              target:\n                entity_id: openhasp.your_plate\n              data:\n                keyword: p5b19.text\n                parameters: &gt;\n                  {% if val == 0 %}\n                  {{ \"#000000 \\u2022# #909090 \\u2022#\" | e }}\n                  {%-elif val == 1 %}\n                  {{ \"#909090 \\u2022# #000000 \\u2022#\" | e }}\n                  {% endif %}\n\n      - obj: \"p5b21\" # Forecast time +1h\n        properties:\n          \"text\": &gt;\n            {%- if not is_state('weather.openweathermap','unavailable') %}\n            {%- set update = states('sensor.date') %}\n            {%- set midnight = now().replace(hour=0, minute=0, second=0, microsecond=0).timestamp() %}\n            {%- set event = as_timestamp(strptime(state_attr('weather.openweathermap','forecast')[1]['datetime'], '%Y-%m-%dT%H:%M:%S%z', default='2020-01-01T00:00:00+00:00')) %}\n            {%- set delta = ((event - midnight) // 86400) | int %}\n            {%- if delta == 0 %}\n            Today\n            {%- elif delta == 1 %}\n            Tomorrow\n            {%- endif %}\n            {{ event | timestamp_custom(\" %-I %p\") }}\n            {%- endif %}\n\n      - obj: \"p5b22\" # Forecast temp +1h\n        properties:\n          \"text\": \"{{ state_attr('weather.openweathermap','forecast')[1]['temperature'] if not is_state('weather.openweathermap','unavailable') else '-' }}\"\n\n      - obj: \"p5b23\" # Forecast condition +1h\n        properties:\n          \"src\": &gt;\n            {%- if not is_state('weather.openweathermap','unavailable') %}\n            L:/w-32-{{ state_attr('weather.openweathermap','forecast')[1]['condition'] }}.png\n            {%- endif %}\n\n      - obj: \"p5b31\" # Forecast time +2h (using Dawn/Morn etc instead of Today/Tomorrow)\n        properties:\n          \"text\": &gt;\n            {%- if not is_state('weather.openweathermap','unavailable') %}\n            {%- set hour = as_timestamp(strptime(state_attr('weather.openweathermap','forecast')[3]['datetime'], '%Y-%m-%dT%H:%M:%S%z', default='2020-01-01T00:00:00+00:00')) | timestamp_custom(\"%-H\") | int %}\n            {%- if 4 &lt;= hour &lt; 6 %}\n            Dawning\n            {%- elif 6 &lt;= hour &lt; 9 %}\n            Morning\n            {%- elif 9 &lt;= hour &lt; 12 %}\n            Forenoon\n            {%- elif 12 &lt;= hour &lt; 18 %}\n            Afternoon\n            {%- elif 18 &lt;= hour &lt; 23 %}\n            Evening\n            {%- elif 23 &lt;= hour or hour &lt; 4 %}\n            Night\n            {%- endif %}\n            {{- \" \" + hour |string + \" o'clock\" }}\n            {%- endif %}\n\n      - obj: \"p5b32\" # Forecast temp +2h\n        properties:\n          \"text\": \"{{ state_attr('weather.openweathermap','forecast')[3]['temperature'] if not is_state('weather.openweathermap','unavailable') else '-' }}\"\n\n      - obj: \"p5b33\" # Forecast condition +2h\n        properties:\n          \"src\": &gt;\n            {%- if not is_state('weather.openweathermap','unavailable') %}\n            L:/w-32-{{ state_attr('weather.openweathermap','forecast')[3]['condition'] }}.png\n            {%- endif %}\n\n      - obj: \"p5b41\" # Forecast time +4h\n        properties:\n          \"text\": &gt;\n            {%- if not is_state('weather.openweathermap','unavailable') %}\n            {%- set update = states('sensor.date') %}\n            {%- set midnight = now().replace(hour=0, minute=0, second=0, microsecond=0).timestamp() %}\n            {%- set event = as_timestamp(strptime(state_attr('weather.openweathermap','forecast')[6]['datetime'], '%Y-%m-%dT%H:%M:%S%z', default='2020-01-01T00:00:00+00:00')) %}\n            {%- set delta = ((event - midnight) // 86400) | int %}\n            {%- if delta == 0 %}\n            Today\n            {%- elif delta == 1 %}\n            Tomorrow\n            {%- endif %}\n            {{ event | timestamp_custom(\" %-I %p\") }}\n            {%- endif %}\n\n      - obj: \"p5b42\" # Forecast temp +4h\n        properties:\n          \"text\": \"{{ state_attr('weather.openweathermap','forecast')[6]['temperature'] if not is_state('weather.openweathermap','unavailable') else '-' }}\"\n\n      - obj: \"p5b43\" # Forecast condition +4h\n        properties:\n          \"src\": &gt;\n            {%- if not is_state('weather.openweathermap','unavailable') %}\n            L:/w-32-{{ state_attr('weather.openweathermap','forecast')[6]['condition'] }}.png\n            {%- endif %}\n\n      - obj: \"p5b51\" # Forecast time +8h\n        properties:\n          \"text\": &gt;\n            {%- if not is_state('weather.openweathermap','unavailable') %}\n            {%- set update = states('sensor.date') %}\n            {%- set midnight = now().replace(hour=0, minute=0, second=0, microsecond=0).timestamp() %}\n            {%- set event = as_timestamp(strptime(state_attr('weather.openweathermap','forecast')[12]['datetime'], '%Y-%m-%dT%H:%M:%S%z', default='2020-01-01T00:00:00+00:00')) %}\n            {%- set delta = ((event - midnight) // 86400) | int %}\n            {%- if delta == 0 %}\n            Today\n            {%- elif delta == 1 %}\n            Tomorrow\n            {%- endif %}\n            {{ event | timestamp_custom(\" %-I %p\") }}\n            {%- endif %}\n\n      - obj: \"p5b52\" # Forecast temp +8h\n        properties:\n          \"text\": \"{{ state_attr('weather.openweathermap','forecast')[12]['temperature'] if not is_state('weather.openweathermap','unavailable') else '-' }}\"\n\n      - obj: \"p5b53\" # Forecast condition +8h\n        properties:\n          \"src\": &gt;\n            {%- if not is_state('weather.openweathermap','unavailable') %}\n            L:/w-32-{{ state_attr('weather.openweathermap','forecast')[12]['condition'] }}.png\n            {%- endif %}\n\n      - obj: \"p5b61\" # Forecast date +1d\n        properties:\n          \"text\": &gt;\n            {%- if not is_state('weather.your_homename','unavailable') %}\n            {%- set now1 = as_timestamp(strptime(state_attr('weather.your_homename','forecast')[0]['datetime'], '%Y-%m-%dT%H:%M:%S%z', default='2020-01-01T00:00:00+00:00')) %}\n            {%- set day = now1 | timestamp_custom(\"%w\") %}\n            {%- set days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"] %}\n            {{ days[ day | int -1 ] }}{{ now1 | timestamp_custom(\" %d\") }}\n            {%- endif %}\n\n      - obj: \"p5b62\" # Forecast temp min +1d\n        properties:\n          \"text\": \"{{ state_attr('weather.your_homename','forecast')[0]['templow'] if not is_state('weather.your_homename','unavailable') else '-' }}\"\n\n      - obj: \"p5b63\" # Forecast temp max +1d\n        properties:\n          \"text\": \"{{ state_attr('weather.your_homename','forecast')[0]['temperature'] if not is_state('weather.your_homename','unavailable') else '-' }}\"\n\n      - obj: \"p5b64\" # Forecast condition +1d\n        properties:\n          \"src\": &gt;\n            {%- if not is_state('weather.your_homename','unavailable') %}\n            L:/w-32-{{ state_attr('weather.your_homename','forecast')[0]['condition'] }}.png\n            {%- endif %}\n\n      - obj: \"p5b71\" # Forecast date +2d\n        properties:\n          \"text\": &gt;\n            {%- if not is_state('weather.your_homename','unavailable') %}\n            {%- set now1 = as_timestamp(strptime(state_attr('weather.your_homename','forecast')[1]['datetime'], '%Y-%m-%dT%H:%M:%S%z', default='2020-01-01T00:00:00+00:00')) %}\n            {%- set day = now1 | timestamp_custom(\"%w\") %}\n            {%- set days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"] %}\n            {{ days[ day | int -1 ] }}{{ now1 | timestamp_custom(\" %d\") }}\n            {%- endif %}\n\n      - obj: \"p5b72\" # Forecast temp min +2d\n        properties:\n          \"text\": \"{{ state_attr('weather.your_homename','forecast')[1]['templow'] if not is_state('weather.your_homename','unavailable') else '-' }}\"\n\n      - obj: \"p5b73\" # Forecast temp max +2d\n        properties:\n          \"text\": \"{{ state_attr('weather.your_homename','forecast')[1]['temperature'] if not is_state('weather.your_homename','unavailable') else '-' }}\"\n\n      - obj: \"p5b74\" # Forecast condition +2d\n        properties:\n          \"src\": &gt;\n            {%- if not is_state('weather.your_homename','unavailable') %}\n            L:/w-32-{{ state_attr('weather.your_homename','forecast')[1]['condition'] }}.png\n            {%- endif %}\n\n      - obj: \"p5b81\" # Forecast date +3d\n        properties:\n          \"text\": &gt;\n            {%- if not is_state('weather.your_homename','unavailable') %}\n            {%- set now1 = as_timestamp(strptime(state_attr('weather.your_homename','forecast')[2]['datetime'], '%Y-%m-%dT%H:%M:%S%z', default='2020-01-01T00:00:00+00:00')) %}\n            {%- set day = now1 | timestamp_custom(\"%w\") %}\n            {%- set days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"] %}\n            {{ days[ day | int -1 ] }}{{ now1 | timestamp_custom(\" %d\") }}\n            {%- endif %}\n\n      - obj: \"p5b82\" # Forecast temp min +3d\n        properties:\n          \"text\": \"{{ state_attr('weather.your_homename','forecast')[2]['templow'] if not is_state('weather.your_homename','unavailable') else '-' }}\"\n\n      - obj: \"p5b83\" # Forecast temp max +3d\n        properties:\n          \"text\": \"{{ state_attr('weather.your_homename','forecast')[2]['temperature'] if not is_state('weather.your_homename','unavailable') else '-' }}\"\n\n      - obj: \"p5b84\" # Forecast condition +3d\n        properties:\n          \"src\": &gt;\n            {%- if not is_state('weather.your_homename','unavailable') %}\n            L:/w-32-{{ state_attr('weather.your_homename','forecast')[2]['condition'] }}.png\n            {%- endif %}\n\n      - obj: \"p5b91\" # Forecast date +4d\n        properties:\n          \"text\": &gt;\n            {%- if not is_state('weather.your_homename','unavailable') %}\n            {%- set now1 = as_timestamp(strptime(state_attr('weather.your_homename','forecast')[3]['datetime'], '%Y-%m-%dT%H:%M:%S%z', default='2020-01-01T00:00:00+00:00')) %}\n            {%- set day = now1 | timestamp_custom(\"%w\") %}\n            {%- set days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"] %}\n            {{ days[ day | int -1 ] }}{{ now1 | timestamp_custom(\" %d\") }}\n            {%- endif %}\n\n      - obj: \"p5b92\" # Forecast temp min +4d\n        properties:\n          \"text\": \"{{ state_attr('weather.your_homename','forecast')[3]['templow'] if not is_state('weather.your_homename','unavailable') else '-' }}\"\n\n      - obj: \"p5b93\" # Forecast temp max +4d\n        properties:\n          \"text\": \"{{ state_attr('weather.your_homename','forecast')[3]['temperature'] if not is_state('weather.your_homename','unavailable') else '-' }}\"\n\n      - obj: \"p5b94\" # Forecast condition +4d\n        properties:\n          \"src\": &gt;\n            {%- if not is_state('weather.your_homename','unavailable') %}\n            L:/w-32-{{ state_attr('weather.your_homename','forecast')[3]['condition'] }}.png\n            {%- endif %}\n</code></pre> <p>Attribution</p> <p>Icons are copyright from manifestinteractive and merlinthered.</p>"},{"location":"integrations/home-assistant/sampl_conf/#fan-and-scent-diffuser","title":"Fan and scent diffuser","text":"<p>This example shows how a transparent PNG image can be combined with a moving spinner object, to create the impression of a spinning fan. In Home Assistant this fan appears as a <code>select</code> component with the available presets as <code>Low</code>,<code>Mid</code>,<code>High</code>,<code>Turbo</code>,<code>OFF</code> selectable options. The scent diffuser appears as a standard <code>fan</code> component where the intensity can be set by percentage.    To control the fan we use a button matrix object which has exactly the same buttons as the options of the select component. To control the scent diffuser we use a slider object.</p> <p>The fan and the perfume PNG icons are available below. Upload them to the flash storage of your plate.</p> <ul> <li>fan</li> <li>perfume</li> </ul> <p>Warning</p> <p>For this example to work, you need an ESP32 board having PSRam memory installed, otherwise openHASP will likely crash.</p> <p>relevant openHASP config: (screen size 240x320, UI Theme: Hasp Light) </p> <pre><code>{\"page\":4,\"id\":1,\"obj\":\"btn\",\"x\":0,\"y\":0,\"w\":240,\"h\":30,\"text\":\"AIR TREATMENT\",\"text_font\":16,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0,\"click\":0}\n{\"page\":4,\"id\":10,\"obj\":\"obj\",\"x\":5,\"y\":35,\"w\":230,\"h\":250,\"click\":0}\n{\"page\":4,\"id\":2,\"obj\":\"label\",\"x\":10,\"y\":40,\"w\":105,\"h\":20,\"text\":\"Fresh air flow\",\"align\":\"center\",\"border_width\":0}\n{\"page\":4,\"id\":3,\"obj\":\"label\",\"x\":125,\"y\":40,\"w\":105,\"h\":20,\"text\":\"Scent intensity\",\"align\":\"center\",\"border_width\":0}\n{\"page\":4,\"id\":12,\"obj\":\"spinner\",\"x\":36,\"y\":84,\"w\":56,\"h\":56,\"bg_opa\":0,\"border_width\":0,\"line_width\":0,\"line_width10\":19,\"line_color10\":\"#34eb77\",\"type\":2,\"angle\":160,\"speed\":3000}\n{\"page\":4,\"id\":13,\"obj\":\"img\",\"x\":14,\"y\":75,\"src\":\"L:/g64.png\",\"auto_size\":1,\"w\":100,\"h\":74}\n{\"page\":4,\"id\":14,\"obj\":\"img\",\"x\":130,\"y\":78,\"src\":\"L:/perfume3.png\",\"auto_size\":1,\"w\":60,\"h\":68}\n{\"page\":4,\"id\":40,\"obj\":\"btnmatrix\",\"x\":5,\"y\":130,\"w\":110,\"h\":113,\"parentid\":10,\"options\":[\"Low\",\"Mid\",\"\\n\",\"High\",\"Turbo\",\"\\n\",\"OFF\"],\"toggle\":1,\"one_check\":1,\"bg_opa\":0,\"pad_inner\":5,\"border_width\":0,\"pad_top\":0,\"pad_bottom\":0,\"pad_left\":0,\"pad_right\":0}\n{\"page\":4,\"id\":51,\"obj\":\"slider\",\"x\":200,\"y\":60,\"w\":25,\"h\":220,\"min\":0,\"max\":60,\"val\":15}\n{\"page\":4,\"id\":52,\"obj\":\"obj\",\"x\":130,\"y\":130,\"w\":50,\"h\":30,\"parentid\":10,\"click\":0,\"radius\":5}\n{\"page\":4,\"id\":53,\"obj\":\"label\",\"x\":130,\"y\":130,\"w\":50,\"h\":30,\"parentid\":10,\"text\":\"15\",\"text_font\":24,\"align\":\"center\"}\n{\"page\":4,\"id\":54,\"obj\":\"btn\",\"x\":130,\"y\":168,\"w\":50,\"h\":76,\"parentid\":10,\"toggle\":true,\"text\":\"\\uE425\",\"text_font\":32,\"align\":1,\"bg_color\":\"#A0A0A0\",\"bg_grad_color\":\"#606060\",\"border_color\":\"#404040\"}\n</code></pre> <p>relevant openHASP-custom-component config: <pre><code>      - obj: \"p4b40\" # Buttin Matrix with the fan presets\n        properties:\n          \"click\": \"{{ 0 if (is_state('input_select.fan_presets','unavailable') or is_state('input_select.fan_presets','unknown')) else 1 }}\"\n          \"opacity\": \"{{ 100 if (is_state('input_select.fan_presets','unavailable') or is_state('input_select.fan_presets','unknown')) else 255 }}\"\n          \"options\": '[\"Low\",\"Mid\",\"\\n\",\"High\",\"Turbo\",\"\\n\",\"OFF\"]'\n          \"toggle\": '{{ 1 if (not states(\"input_select.fan_presets\") in state_attr(\"input_select.fan_presets\",\"options\")) or (is_state(\"input_select.fan_presets\",\"unavailable\")) -}}'\n\n          \"val\": &gt;\n            {% if state_attr(\"input_select.fan_presets\",\"options\") is not none -%}\n            {% if not states('input_select.fan_presets') in state_attr('input_select.fan_presets','options') -%}-1{% else -%}\n            {% for source in state_attr('input_select.fan_presets','options') -%}\n            {{loop.index - 1 if source == states('input_select.fan_presets') }}\n            {%-endfor%}\n            {%- endif %}\n            {%- endif %}\n        event:\n            - service: input_select.input_select_option\n              data:\n                option: '{{ text }}'\n              target:\n                entity_id: input_select.fan_presets\n\n      - obj: \"p4b12\"  # Spinner behind the PNG icon\n        properties:\n          \"opacity\": \"{{ 0 if states('input_select.fan_presets') in ['unavailable', 'unknown', 'OFF'] else 255 }}\"\n          \"jsonl\": &gt;\n            {% if is_state('number.plate_test_page_number', '4') %}\n            {% if is_state('input_select.fan_presets', 'Alap') %}\n            {\"speed\":7000,\"line_color10\":\"#31de70\"}\n            {%-elif is_state('input_select.fan_presets', 'K\u00f6z\u00e9p') %}\n            {\"speed\":1700,\"line_color10\":\"#dede1f\"}\n            {%-elif is_state('input_select.fan_presets', 'Magas') %}\n            {\"speed\":800,\"line_color10\":\"#d6a11a\"}\n            {%-elif is_state('input_select.fan_presets', 'Turb\u00f3') %}\n            {\"speed\":250,\"line_color10\":\"#ff4a4a\"}\n            {% endif %}\n            {% else -%}\n            {\"speed\":0}\n            {% endif %}\n\n      - obj: \"p4b54\" # Scent Diffuser ON/OFF button\n        properties:\n          \"val\": '{{ 1 if is_state(\"fan.scent_diffuser_intensity\", \"on\") else 0 }}'\n          \"enabled\": \"{{ 'false' if states('input_select.fan_presets') in ['unavailable', 'unknown'] else 'true' }}\"\n        event:\n          \"down\":\n            - service: fan.toggle\n              target:\n                entity_id: fan.scent_diffuser_intensity\n\n      - obj: \"p4b51\" # Scent Diffuser intensity slider\n        properties:\n          \"val\": \"{{ state_attr('fan.scent_diffuser_intensity','percentage') }}\"\n          \"enabled\": \"{{ 'false' if states('input_select.fan_presets') in ['unavailable', 'unknown'] else 'true' }}\"\n        event:\n          \"up\":\n            - service: fan.set_percentage\n              target:\n                entity_id: fan.scent_diffuser_intensity\n              data:\n                percentage: '{{ val }}'\n\n      - obj: \"p4b53\" # Scent Diffuser intensity number label\n        properties:\n          \"text\": \"{{ '--' if states('input_select.fan_presets') in ['unavailable', 'unknown'] else state_attr('fan.scent_diffuser_intensity','percentage') }}\"\n          \"opacity\": \"{{ 255 if is_state('fan.scent_diffuser_intensity', 'on') else 95 }}\"\n</code></pre></p> <p>Note the condition in the Spinner configuration of the component:     <code>{% if is_state('openhasp.plate_test', '4') %}</code> - this is useful to only animate the spinner when the page containing it is actually shown. Since the spinner is being overlapped by a transparent PNG image, CPU usage is higher as it has to be completely redrawn every frame. CPU resources can be freed up this way - only animate when it can be seen.</p> <p>Attribution</p> <p>Icons are copyright from SVG Repo.</p>"},{"location":"integrations/home-assistant/sampl_conf/#using-tags","title":"Using tags","text":"<p>You can avoid too much code repetition when you have multiple similar objects on a page, doing the same thing with different entities, and you'd like to make accessible some advanced options too. Presenting everyting flat will overwhelm your user interface, so it would be better to just show the most used controls, and only display the advanced options in popups related to unique objects. Tag property was made to ease this task.</p>"},{"location":"integrations/home-assistant/sampl_conf/#colored-lights-panel","title":"Colored lights panel","text":"<p>In the example below we have four coloured lights. Squeezing the ON/OFF button, the color picker and the brightness selector for all four lights on a single page can be challenging - and the result will likely be useless on a small touch screen. Instead, we'll just place the toggle buttons with descriptive labels on the page, and we'll only display the color picker and the brightness selector on demand, in this case when the user touches the descriptive coloured label.</p> <p>While dynamically drawing these objects we're setting the <code>tag</code> property for the color picker and the slider to the <code>entity_id</code> of the light we want to adjust, so that when we're interacting with them, the Custom Component can know which light it has to send the adjustments to.</p> <p> </p> <p>relevant openHASP config: (screen size 240x320, UI Theme: Hasp Light) </p> <pre><code>{\"page\":5,\"id\":1,\"obj\":\"btn\",\"x\":0,\"y\":0,\"w\":240,\"h\":30,\"text\":\"COLOURED LIGHTS\",\"text_font\":16,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0,\"click\":0}\n{\"page\":5,\"id\":2,\"obj\":\"label\",\"x\":15,\"y\":40,\"w\":100,\"h\":60,\"text\":\"I.\",\"align\":\"center\",\"border_width\":1,\"radius\":8,\"border_color\":\"#bdbdbd\",\"bg_opa\":255,\"click\":true}\n{\"page\":5,\"id\":3,\"obj\":\"label\",\"x\":125,\"y\":40,\"w\":100,\"h\":60,\"text\":\"II.\",\"align\":\"center\",\"border_width\":1,\"radius\":8,\"border_color\":\"#bdbdbd\",\"bg_opa\":255,\"click\":true}\n{\"page\":5,\"id\":4,\"obj\":\"label\",\"x\":15,\"y\":165,\"w\":100,\"h\":60,\"text\":\"III.\",\"align\":\"center\",\"border_width\":1,\"radius\":8,\"border_color\":\"#bdbdbd\",\"bg_opa\":255,\"click\":true}\n{\"page\":5,\"id\":5,\"obj\":\"label\",\"x\":125,\"y\":165,\"w\":100,\"h\":60,\"text\":\"IV.\",\"align\":\"center\",\"border_width\":1,\"radius\":8,\"border_color\":\"#bdbdbd\",\"bg_opa\":255,\"click\":true}\n\n{\"page\":5,\"id\":11,\"obj\":\"btn\",\"x\":15,\"y\":90,\"w\":100,\"h\":60,\"toggle\":true,\"text\":\"\\uE335\",\"text_font\":32}\n{\"page\":5,\"id\":12,\"obj\":\"btn\",\"x\":125,\"y\":90,\"w\":100,\"h\":60,\"toggle\":true,\"text\":\"\\uE335\",\"text_font\":32}\n{\"page\":5,\"id\":13,\"obj\":\"btn\",\"x\":15,\"y\":220,\"w\":100,\"h\":60,\"toggle\":true,\"text\":\"\\uE335\",\"text_font\":32}\n{\"page\":5,\"id\":14,\"obj\":\"btn\",\"x\":125,\"y\":220,\"w\":100,\"h\":60,\"toggle\":true,\"text\":\"\\uE335\",\"text_font\":32}\n</code></pre> <p>relevant openHASP-custom-component config: (read comments) <pre><code>      - obj: \"p5b11\" # toggle button for ON/OFF switching of light I.\n        properties:\n          \"val\": '{{ 1 if is_state(\"light.dmx_vbar_1\", \"on\") else 0 }}'\n        event:\n          \"down\":\n            - service: homeassistant.toggle\n              entity_id: \"light.dmx_vbar_1\"\n\n      - obj: \"p5b12\" # toggle button for ON/OFF switching of light II.\n        properties:\n          \"val\": '{{ 1 if is_state(\"light.dmx_vbar_2\", \"on\") else 0 }}'\n        event:\n          \"down\":\n            - service: homeassistant.toggle\n              entity_id: \"light.dmx_vbar_2\"\n\n      - obj: \"p5b13\" # toggle button for ON/OFF switching of light III.\n        properties:\n          \"val\": '{{ 1 if is_state(\"light.dmx_vbar_3\", \"on\") else 0 }}'\n        event:\n          \"down\":\n            - service: homeassistant.toggle\n              entity_id: \"light.dmx_vbar_3\"\n\n      - obj: \"p5b14\" # toggle button for ON/OFF switching of light IV.\n        properties:\n          \"val\": '{{ 1 if is_state(\"light.dmx_vbar_4\", \"on\") else 0 }}'\n        event:\n          \"down\":\n            - service: homeassistant.toggle\n              entity_id: \"light.dmx_vbar_4\"\n\n      - obj: \"p5b2\" # label showing the current color of light I.\n        properties:\n          \"bg_color\": &gt;\n            {% if is_state('light.dmx_vbar_1','on') %}\n            {% set rgb = state_attr('light.dmx_vbar_1','rgb_color') %}\n            {{ \"#%02x%02x%02x\" | format(rgb[0],rgb[1],rgb[2]) }}\n            {% endif %}\n        event:\n          \"down\":\n            - service: light.turn_on\n              data:\n                entity_id: light.dmx_vbar_1\n            - service: openhasp.command # display the on-demand pop-up with color picker and brightness slider, tagged with the entity_id of light I.\n              target:\n                entity_id: openhasp.plate_test\n              data:\n                keyword: jsonl\n                parameters: &gt;-\n                  {\"page\":5,\"id\":200,\"obj\":\"obj\",\"x\":0,\"y\":0,\"w\":240,\"h\":320,\"radius\":0,\"bg_grad_dir\":0,\"opacity\":150,\"bg_color\":\"black\"}\n                  {\"page\":5,\"id\":210,\"obj\":\"obj\",\"parentid\":200,\"x\":10,\"y\":15,\"w\":220,\"h\":270,\"opacity\":255,\"click\":0,\"radius\":10,\"shadow_opa\":255,\"shadow_color\":\"black\",\"shadow_width\":20,\"shadow_spread\":0}\n                  {\"page\":5,\"id\":211,\"obj\":\"label\",\"parentid\":210,\"x\":0,\"y\":8,\"w\":220,\"h\":20,\"click\":0,\"align\":\"center\",\"text\":\"Color settings for light I.\"}\n                  {\"page\":5,\"id\":201,\"obj\":\"cpicker\",\"parentid\":210,\"x\":20,\"y\":35,\"w\":180,\"h\":180,\"tag\":\"light.dmx_vbar_1\",\"color\":\n                  {% set rgb = state_attr('light.dmx_vbar_1','rgb_color') -%}\n                  \"{{ \"#%02x%02x%02x\" | format(rgb[0],rgb[1],rgb[2]) }}\"\n                  }\n                  {\"page\":5,\"id\":202,\"obj\":\"slider\",\"parentid\":210,\"x\":20,\"y\":225,\"w\":180,\"h\":30,\"min\":1,\"max\":255,\"tag\":\"light.dmx_vbar_1\",\"val\":\n                  {{- state_attr('light.dmx_vbar_1', 'brightness') -}}\n                  }\n\n      - obj: \"p5b3\" # label showing the current color of light II.\n        properties:\n          \"bg_color\": &gt;\n            {% if is_state('light.dmx_vbar_2','on') %}\n            {% set rgb = state_attr('light.dmx_vbar_2','rgb_color') %}\n            {{ \"#%02x%02x%02x\" | format(rgb[0],rgb[1],rgb[2]) }}\n            {% endif %}\n        event:\n          \"down\":\n            - service: light.turn_on\n              data:\n                entity_id: light.dmx_vbar_2\n            - service: openhasp.command # display the on-demand pop-up with color picker and brightness slider, tagged with the entity_id of light II.\n              target:\n                entity_id: openhasp.plate_test\n              data:\n                keyword: jsonl\n                parameters: &gt;-\n                  {\"page\":5,\"id\":200,\"obj\":\"obj\",\"x\":0,\"y\":0,\"w\":240,\"h\":320,\"radius\":0,\"bg_grad_dir\":0,\"opacity\":150,\"bg_color\":\"black\"}\n                  {\"page\":5,\"id\":210,\"obj\":\"obj\",\"parentid\":200,\"x\":10,\"y\":15,\"w\":220,\"h\":270,\"opacity\":255,\"click\":0,\"radius\":10,\"shadow_opa\":255,\"shadow_color\":\"black\",\"shadow_width\":20,\"shadow_spread\":0}\n                  {\"page\":5,\"id\":211,\"obj\":\"label\",\"parentid\":210,\"x\":0,\"y\":8,\"w\":220,\"h\":20,\"click\":0,\"align\":\"center\",\"text\":\"Color settings for light II.\"}\n                  {\"page\":5,\"id\":201,\"obj\":\"cpicker\",\"parentid\":210,\"x\":20,\"y\":35,\"w\":180,\"h\":180,\"tag\":\"light.dmx_vbar_2\",\"color\":\n                  {% set rgb = state_attr('light.dmx_vbar_2','rgb_color') -%}\n                  \"{{ \"#%02x%02x%02x\" | format(rgb[0],rgb[1],rgb[2]) }}\"\n                  }\n                  {\"page\":5,\"id\":202,\"obj\":\"slider\",\"parentid\":210,\"x\":20,\"y\":225,\"w\":180,\"h\":30,\"min\":1,\"max\":255,\"tag\":\"light.dmx_vbar_2\",\"val\":\n                  {{- state_attr('light.dmx_vbar_2', 'brightness') -}}\n                  }\n\n      - obj: \"p5b4\" # label showing the current color of light III.\n        properties:\n          \"bg_color\": &gt;\n            {% if is_state('light.dmx_vbar_3','on') %}\n            {% set rgb = state_attr('light.dmx_vbar_3','rgb_color') %}\n            {{ \"#%02x%02x%02x\" | format(rgb[0],rgb[1],rgb[2]) }}\n            {% endif %}\n        event:\n          \"down\":\n            - service: light.turn_on\n              data:\n                entity_id: light.dmx_vbar_3\n            - service: openhasp.command # display the on-demand pop-up with color picker and brightness slider, tagged with the entity_id of light III.\n              target:\n                entity_id: openhasp.plate_test\n              data:\n                keyword: jsonl\n                parameters: &gt;-\n                  {\"page\":5,\"id\":200,\"obj\":\"obj\",\"x\":0,\"y\":0,\"w\":240,\"h\":320,\"radius\":0,\"bg_grad_dir\":0,\"opacity\":150,\"bg_color\":\"black\"}\n                  {\"page\":5,\"id\":210,\"obj\":\"obj\",\"parentid\":200,\"x\":10,\"y\":15,\"w\":220,\"h\":270,\"opacity\":255,\"click\":0,\"radius\":10,\"shadow_opa\":255,\"shadow_color\":\"black\",\"shadow_width\":20,\"shadow_spread\":0}\n                  {\"page\":5,\"id\":211,\"obj\":\"label\",\"parentid\":210,\"x\":0,\"y\":8,\"w\":220,\"h\":20,\"click\":0,\"align\":\"center\",\"text\":\"Color settings for light III.\"}\n                  {\"page\":5,\"id\":201,\"obj\":\"cpicker\",\"parentid\":210,\"x\":20,\"y\":35,\"w\":180,\"h\":180,\"tag\":\"light.dmx_vbar_3\",\"color\":\n                  {% set rgb = state_attr('light.dmx_vbar_3','rgb_color') -%}\n                  \"{{ \"#%02x%02x%02x\" | format(rgb[0],rgb[1],rgb[2]) }}\"\n                  }\n                  {\"page\":5,\"id\":202,\"obj\":\"slider\",\"parentid\":210,\"x\":20,\"y\":225,\"w\":180,\"h\":30,\"min\":1,\"max\":255,\"tag\":\"light.dmx_vbar_3\",\"val\":\n                  {{- state_attr('light.dmx_vbar_3', 'brightness') -}}\n                  }\n\n      - obj: \"p5b5\" # label showing the current color of light IV.\n        properties:\n          \"bg_color\": &gt;\n            {% if is_state('light.dmx_vbar_4','on') %}\n            {% set rgb = state_attr('light.dmx_vbar_4','rgb_color') %}\n            {{ \"#%02x%02x%02x\" | format(rgb[0],rgb[1],rgb[2]) }}\n            {% endif %}\n        event:\n          \"down\":\n            - service: light.turn_on\n              data:\n                entity_id: light.dmx_vbar_4\n            - service: openhasp.command # display the on-demand pop-up with color picker and brightness slider, tagged with the entity_id of light IV.\n              target:\n                entity_id: openhasp.plate_test\n              data:\n                keyword: jsonl\n                parameters: &gt;-\n                  {\"page\":5,\"id\":200,\"obj\":\"obj\",\"x\":0,\"y\":0,\"w\":240,\"h\":320,\"radius\":0,\"bg_grad_dir\":0,\"opacity\":150,\"bg_color\":\"black\"}\n                  {\"page\":5,\"id\":210,\"obj\":\"obj\",\"parentid\":200,\"x\":10,\"y\":15,\"w\":220,\"h\":270,\"opacity\":255,\"click\":0,\"radius\":10,\"shadow_opa\":255,\"shadow_color\":\"black\",\"shadow_width\":20,\"shadow_spread\":0}\n                  {\"page\":5,\"id\":211,\"obj\":\"label\",\"parentid\":210,\"x\":0,\"y\":8,\"w\":220,\"h\":20,\"click\":0,\"align\":\"center\",\"text\":\"Color settings for light IV.\"}\n                  {\"page\":5,\"id\":201,\"obj\":\"cpicker\",\"parentid\":210,\"x\":20,\"y\":35,\"w\":180,\"h\":180,\"tag\":\"light.dmx_vbar_4\",\"color\":\n                  {% set rgb = state_attr('light.dmx_vbar_4','rgb_color') -%}\n                  \"{{ \"#%02x%02x%02x\" | format(rgb[0],rgb[1],rgb[2]) }}\"\n                  }\n                  {\"page\":5,\"id\":202,\"obj\":\"slider\",\"parentid\":210,\"x\":20,\"y\":225,\"w\":180,\"h\":30,\"min\":1,\"max\":255,\"tag\":\"light.dmx_vbar_4\",\"val\":\n                  {{- state_attr('light.dmx_vbar_4', 'brightness') -}}\n                  }\n\n      - obj: \"p5b200\" # the background of the popup. when touched directly, will close the popup by deleting its objects\n        event:\n          \"down\":\n            - service: openhasp.command\n              target:\n                entity_id: openhasp.plate_test\n              data:\n                keyword: p5b200.delete\n\n      - obj: \"p5b201\" # set the color of the light entity_id extracted from the tag set previously, when displayed, then delete the popup objects\n        event:\n          \"changed\":\n            - service: light.turn_on\n              data:\n                entity_id: \"{{ tag }}\"\n                rgb_color: \"[{{ r }},{{ g }},{{ b }}]\"\n          \"up\":\n            - service: openhasp.command\n              target:\n                entity_id: openhasp.plate_test\n              data:\n                keyword: p5b200.delete\n\n      - obj: \"p5b202\" # set the brightness of the light entity_id extracted from the tag set previously, when displayed, then delete the popup objects\n        event:\n          \"changed\":\n            - service: light.turn_on\n              data:\n                entity_id: \"{{ tag }}\"\n                brightness:  \"{{ val }}\"\n          \"up\":\n            - service: openhasp.command\n              target:\n                entity_id: openhasp.plate_test\n              data:\n                keyword: p5b200.delete\n</code></pre></p> <p>Without tags, the last 3 object definitions would have to be added for each light, and also it would be needed to be drawn separately for each light, initially invisible, then toggle visibility at each one. That would have resulted in a much bigger Custom Component configuration, and also plate design.</p>"},{"location":"integrations/home-assistant/sampl_conf/#shutter-control-panel","title":"Shutter control panel","text":"<p>In the second example, we have five windows with motorized shutters. In addition to the usual UP/STOP/DOWN buttons, the inhabitants want to have three shortcut positions for each shutter, and also a slider for free positioning. Useless to say that it's impossible to put all these on a page, and also it would be a pity to use up 5 pages just for these.</p> <p>We'll just put the most used, UP/STOP/DOWN buttons on the page (this already looks a bit much...) and we'll use a long press event on the middle STOP button to show a pop-up with the extra required settings related to the desired shutter.</p> <p>The <code>tag</code> here will be a JSON object referencing both the <code>entity_id</code> and the position specific to the desired shutter, eg. <code>\"tag\":{\"cover\":\"cover.bigroom_i\",\"position\":\"15\"}</code>, this will be set for the buttons and the slider appearing in the popup. Since the shutters are different sizes and types, the same intermediate physical position may correspond to different numeric values in Home Assistant.</p> <p> </p> <p>relevant openHASP config: (screen size 240x320, UI Theme: Hasp Light) </p> <pre><code>{\"page\":2,\"id\":1,\"obj\":\"btn\",\"x\":0,\"y\":0,\"w\":240,\"h\":30,\"text\":\"MOTORIZED COVERS\",\"text_font\":16,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0,\"click\":0}\n{\"page\":2,\"id\":2,\"obj\":\"label\",\"x\":7,\"y\":36,\"w\":42,\"h\":20,\"text\":\"I.\",\"align\":\"center\"}\n{\"page\":2,\"id\":3,\"obj\":\"label\",\"x\":53,\"y\":36,\"w\":42,\"h\":20,\"text\":\"II.\",\"align\":\"center\"}\n{\"page\":2,\"id\":4,\"obj\":\"label\",\"x\":99,\"y\":36,\"w\":42,\"h\":20,\"text\":\"III.\",\"align\":\"center\"}\n{\"page\":2,\"id\":5,\"obj\":\"label\",\"x\":145,\"y\":36,\"w\":42,\"h\":20,\"text\":\"IV.\",\"align\":\"center\"}\n{\"page\":2,\"id\":6,\"obj\":\"label\",\"x\":191,\"y\":36,\"w\":42,\"h\":20,\"text\":\"V.\",\"align\":\"center\"}\n\n{\"page\":2,\"id\":11,\"obj\":\"btn\",\"x\":7,\"y\":60,\"w\":42,\"h\":68,\"toggle\":false,\"text\":\"\\uE05D\",\"text_font\":32}\n{\"page\":2,\"id\":12,\"obj\":\"btn\",\"x\":7,\"y\":136,\"w\":42,\"h\":68,\"toggle\":false,\"text\":\"\\uE4DB\",\"text_font\":32}\n{\"page\":2,\"id\":13,\"obj\":\"btn\",\"x\":7,\"y\":212,\"w\":42,\"h\":68,\"toggle\":false,\"text\":\"\\uE045\",\"text_font\":32}\n\n{\"page\":2,\"id\":21,\"obj\":\"btn\",\"x\":53,\"y\":60,\"w\":42,\"h\":68,\"toggle\":false,\"text\":\"\\uE05D\",\"text_font\":32}\n{\"page\":2,\"id\":22,\"obj\":\"btn\",\"x\":53,\"y\":136,\"w\":42,\"h\":68,\"toggle\":false,\"text\":\"\\uE4DB\",\"text_font\":32}\n{\"page\":2,\"id\":23,\"obj\":\"btn\",\"x\":53,\"y\":212,\"w\":42,\"h\":68,\"toggle\":false,\"text\":\"\\uE045\",\"text_font\":32}\n\n{\"page\":2,\"id\":31,\"obj\":\"btn\",\"x\":99,\"y\":60,\"w\":42,\"h\":68,\"toggle\":false,\"text\":\"\\uE05D\",\"text_font\":32}\n{\"page\":2,\"id\":32,\"obj\":\"btn\",\"x\":99,\"y\":136,\"w\":42,\"h\":68,\"toggle\":false,\"text\":\"\\uE4DB\",\"text_font\":32}\n{\"page\":2,\"id\":33,\"obj\":\"btn\",\"x\":99,\"y\":212,\"w\":42,\"h\":68,\"toggle\":false,\"text\":\"\\uE045\",\"text_font\":32}\n\n{\"page\":2,\"id\":41,\"obj\":\"btn\",\"x\":145,\"y\":60,\"w\":42,\"h\":68,\"toggle\":false,\"text\":\"\\uE05D\",\"text_font\":32}\n{\"page\":2,\"id\":42,\"obj\":\"btn\",\"x\":145,\"y\":136,\"w\":42,\"h\":68,\"toggle\":false,\"text\":\"\\uE4DB\",\"text_font\":32}\n{\"page\":2,\"id\":43,\"obj\":\"btn\",\"x\":145,\"y\":212,\"w\":42,\"h\":68,\"toggle\":false,\"text\":\"\\uE045\",\"text_font\":32}\n\n{\"page\":2,\"id\":51,\"obj\":\"btn\",\"x\":191,\"y\":60,\"w\":42,\"h\":68,\"toggle\":false,\"text\":\"\\uE05D\",\"text_font\":32}\n{\"page\":2,\"id\":52,\"obj\":\"btn\",\"x\":191,\"y\":136,\"w\":42,\"h\":68,\"toggle\":false,\"text\":\"\\uE4DB\",\"text_font\":32}\n{\"page\":2,\"id\":53,\"obj\":\"btn\",\"x\":191,\"y\":212,\"w\":42,\"h\":68,\"toggle\":false,\"text\":\"\\uE045\",\"text_font\":32}\n</code></pre> <p>relevant openHASP-custom-component config: (read comments)</p> <p><pre><code>      - obj: \"p2b11\" # shutter I. up button\n        properties:\n          \"text_color\": \"{{ '#FFFF00' if is_state('cover.bigroom_i', 'opening') else '#FFFFFF' }}\"\n          \"text_opa\": \"{{ '80' if is_state_attr('cover.bigroom_i','current_position', 100) else '255' }}\"\n        event:\n          \"down\":\n            - service: cover.open_cover\n              target:\n                entity_id: \"cover.bigroom_i\"\n      - obj: \"p2b13\" # shutter I. down button\n        properties:\n          \"text_color\": \"{{ '#FFFF00' if is_state('cover.bigroom_i', 'closing') else '#FFFFFF' }}\"\n          \"text_opa\": \"{{ '80' if is_state_attr('cover.bigroom_i','current_position', 0) else '255' }}\"\n        event:\n          \"down\":\n            - service: cover.close_cover\n              target:\n                entity_id: \"cover.bigroom_i\"\n      - obj: \"p2b12\" # shutter I. middle stop button\n        properties:\n          \"text\": &gt;\n            {% if is_state('cover.bigroom_i', 'closing') %}\n            {{ \"\\uE4DB\" | e }}\n            {%-elif is_state('cover.bigroom_i', 'opening') %}\n            {{ \"\\uE4DB\" | e }}\n            {%-elif is_state('cover.bigroom_i', 'closed') %}\n            {{ \"\\uF11C\" | e }}\n            {%-elif is_state('cover.bigroom_i', 'open') %}\n            {{ \"\\uF11E\" | e }}\n            {% endif %}\n        event:\n          \"down\":\n            - service: cover.stop_cover\n              target:\n                entity_id: \"cover.bigroom_i\"\n          \"long\":\n            - service: openhasp.command # display the on-demand pop-up with extra setting objects, tagged with the entity_id and specific positions in JSON objects\n              target:\n                entity_id: openhasp.plate_bigroom\n              data:\n                keyword: jsonl\n                parameters: &gt;-\n                  {\"page\":2,\"id\":200,\"obj\":\"obj\",\"x\":0,\"y\":0,\"w\":240,\"h\":320,\"radius\":0,\"bg_grad_dir\":0,\"opacity\":150,\"bg_color\":\"black\"}\n                  {\"page\":2,\"id\":210,\"obj\":\"obj\",\"parentid\":200,\"x\":5,\"y\":55,\"w\":230,\"h\":190,\"opacity\":255,\"click\":0,\"radius\":10,\"shadow_opa\":255,\"shadow_color\":\"black\",\"shadow_width\":20,\"shadow_spread\":0}\n                  {\"page\":2,\"id\":211,\"obj\":\"label\",\"parentid\":210,\"x\":10,\"y\":10,\"w\":210,\"h\":20,\"click\":0,\"align\":\"center\",\"text\":\"Position preset - I.\"}\n                  {\"page\":2,\"id\":201,\"obj\":\"btn\",\"parentid\":210,\"x\":10,\"y\":110,\"w\":150,\"h\":60,\"toggle\":false,\"text_font\":24,\"text\":\"Middle\",\"tag\":{\"cover\":\"cover.bigroom_i\",\"position\":\"15\"}}\n                  {\"page\":2,\"id\":202,\"obj\":\"btn\",\"parentid\":210,\"x\":10,\"y\":40,\"w\":70,\"h\":60,\"toggle\":false,\"text_font\":24,\"text\":\"2/3\",\"tag\":{\"cover\":\"cover.bigroom_i\",\"position\":\"90\"}}\n                  {\"page\":2,\"id\":203,\"obj\":\"btn\",\"parentid\":210,\"x\":90,\"y\":40,\"w\":70,\"h\":60,\"toggle\":false,\"text_font\":24,\"text\":\"1/3\",\"tag\":{\"cover\":\"cover.bigroom_i\",\"position\":\"54\"}}\n                  {\"page\":2,\"id\":204,\"obj\":\"slider\",\"parentid\":210,\"x\":180,\"y\":40,\"w\":30,\"h\":130,\"min\":1,\"max\":100,\"pad_left20\":\"13\",\"pad_right20\":\"13\",\"tag\":{\"cover\":\"cover.bigroom_i\",\"position\":\"50\"},\"val\":\n                  {{- state_attr('cover.bigroom_i','current_position') -}}\n                  }\n\n      - obj: \"p2b21\" # shutter II.\n        properties:\n          \"text_color\": \"{{ '#FFFF00' if is_state('cover.bigroom_ii', 'opening') else '#FFFFFF' }}\"\n          \"text_opa\": \"{{ '80' if is_state_attr('cover.bigroom_ii','current_position', 100) else '255' }}\"\n        event:\n          \"down\":\n            - service: cover.open_cover\n              target:\n                entity_id: \"cover.bigroom_ii\"\n      - obj: \"p2b23\"\n        properties:\n          \"text_color\": \"{{ '#FFFF00' if is_state('cover.bigroom_ii', 'closing') else '#FFFFFF' }}\"\n          \"text_opa\": \"{{ '80' if is_state_attr('cover.bigroom_ii','current_position', 0) else '255' }}\"\n        event:\n          \"down\":\n            - service: cover.close_cover\n              target:\n                entity_id: \"cover.bigroom_ii\"\n      - obj: \"p2b22\"\n        properties:\n          \"text\": &gt;\n            {% if is_state('cover.bigroom_ii', 'closing') %}\n            {{ \"\\uE4DB\" | e }}\n            {%-elif is_state('cover.bigroom_ii', 'opening') %}\n            {{ \"\\uE4DB\" | e }}\n            {%-elif is_state('cover.bigroom_ii', 'closed') %}\n            {{ \"\\uF11C\" | e }}\n            {%-elif is_state('cover.bigroom_ii', 'open') %}\n            {{ \"\\uF11E\" | e }}\n            {% endif %}\n        event:\n          \"down\":\n            - service: cover.stop_cover\n              target:\n                entity_id: \"cover.bigroom_ii\"\n          \"long\":\n            - service: openhasp.command # display the on-demand pop-up with extra setting objects, tagged with the entity_id and specific positions in JSON objects\n              target:\n                entity_id: openhasp.plate_bigroom\n              data:\n                keyword: jsonl\n                parameters: &gt;-\n                  {\"page\":2,\"id\":200,\"obj\":\"obj\",\"x\":0,\"y\":0,\"w\":240,\"h\":320,\"radius\":0,\"bg_grad_dir\":0,\"opacity\":150,\"bg_color\":\"black\"}\n                  {\"page\":2,\"id\":210,\"obj\":\"obj\",\"parentid\":200,\"x\":5,\"y\":55,\"w\":230,\"h\":190,\"opacity\":255,\"click\":0,\"radius\":10,\"shadow_opa\":255,\"shadow_color\":\"black\",\"shadow_width\":20,\"shadow_spread\":0}\n                  {\"page\":2,\"id\":211,\"obj\":\"label\",\"parentid\":210,\"x\":10,\"y\":10,\"w\":210,\"h\":20,\"click\":0,\"align\":\"center\",\"text\":\"Position preset - II.\",\"align\":\"center\"}\n                  {\"page\":2,\"id\":201,\"obj\":\"btn\",\"parentid\":210,\"x\":10,\"y\":110,\"w\":150,\"h\":60,\"toggle\":false,\"text_font\":24,\"text\":\"Middle\",\"tag\":{\"cover\":\"cover.bigroom_ii\",\"position\":\"18\"}}\n                  {\"page\":2,\"id\":202,\"obj\":\"btn\",\"parentid\":210,\"x\":10,\"y\":40,\"w\":70,\"h\":60,\"toggle\":false,\"text_font\":24,\"text\":\"2/3\",\"tag\":{\"cover\":\"cover.bigroom_ii\",\"position\":\"90\"}}\n                  {\"page\":2,\"id\":203,\"obj\":\"btn\",\"parentid\":210,\"x\":90,\"y\":40,\"w\":70,\"h\":60,\"toggle\":false,\"text_font\":24,\"text\":\"1/3\",\"tag\":{\"cover\":\"cover.bigroom_ii\",\"position\":\"53\"}}\n                  {\"page\":2,\"id\":204,\"obj\":\"slider\",\"parentid\":210,\"x\":180,\"y\":40,\"w\":30,\"h\":130,\"min\":1,\"max\":100,\"pad_left20\":\"13\",\"pad_right20\":\"13\",\"tag\":{\"cover\":\"cover.bigroom_ii\",\"position\":\"50\"},\"val\":\n                  {{- state_attr('cover.bigroom_ii','current_position') -}}\n                  }\n\n      - obj: \"p2b31\" # shutter III.\n        properties:\n          \"text_color\": \"{{ '#FFFF00' if is_state('cover.bigroom_iii', 'opening') else '#FFFFFF' }}\"\n          \"text_opa\": \"{{ '80' if is_state_attr('cover.bigroom_iii','current_position', 100) else '255' }}\"\n        event:\n          \"down\":\n            - service: cover.open_cover\n              target:\n                entity_id: \"cover.bigroom_iii\"\n      - obj: \"p2b33\"\n        properties:\n          \"text_color\": \"{{ '#FFFF00' if is_state('cover.bigroom_iii', 'closing') else '#FFFFFF' }}\"\n          \"text_opa\": \"{{ '80' if is_state_attr('cover.bigroom_iii','current_position', 0) else '255' }}\"\n        event:\n          \"down\":\n            - service: cover.close_cover\n              target:\n                entity_id: \"cover.bigroom_iii\"\n      - obj: \"p2b32\"\n        properties:\n          \"text\": &gt;\n            {% if is_state('cover.bigroom_iii', 'closing') %}\n            {{ \"\\uE4DB\" | e }}\n            {%-elif is_state('cover.bigroom_iii', 'opening') %}\n            {{ \"\\uE4DB\" | e }}\n            {%-elif is_state('cover.bigroom_iii', 'closed') %}\n            {{ \"\\uF11C\" | e }}\n            {%-elif is_state('cover.bigroom_iii', 'open') %}\n            {{ \"\\uF11E\" | e }}\n            {% endif %}\n        event:\n          \"down\":\n            - service: cover.stop_cover\n              target:\n                entity_id: \"cover.bigroom_iii\"\n          \"long\":\n            - service: openhasp.command # display the on-demand pop-up with extra setting objects, tagged with the entity_id and specific positions in JSON objects\n              target:\n                entity_id: openhasp.plate_bigroom\n              data:\n                keyword: jsonl\n                parameters: &gt;-\n                  {\"page\":2,\"id\":200,\"obj\":\"obj\",\"x\":0,\"y\":0,\"w\":240,\"h\":320,\"radius\":0,\"bg_grad_dir\":0,\"opacity\":150,\"bg_color\":\"black\"}\n                  {\"page\":2,\"id\":210,\"obj\":\"obj\",\"parentid\":200,\"x\":5,\"y\":55,\"w\":230,\"h\":190,\"opacity\":255,\"click\":0,\"radius\":10,\"shadow_opa\":255,\"shadow_color\":\"black\",\"shadow_width\":20,\"shadow_spread\":0}\n                  {\"page\":2,\"id\":211,\"obj\":\"label\",\"parentid\":210,\"x\":10,\"y\":10,\"w\":210,\"h\":20,\"click\":0,\"align\":\"center\",\"text\":\"Position preset - III.\"}\n                  {\"page\":2,\"id\":201,\"obj\":\"btn\",\"parentid\":210,\"x\":10,\"y\":110,\"w\":150,\"h\":60,\"toggle\":false,\"text_font\":24,\"text\":\"Middle\",\"tag\":{\"cover\":\"cover.bigroom_iii\",\"position\":\"17\"}}\n                  {\"page\":2,\"id\":202,\"obj\":\"btn\",\"parentid\":210,\"x\":10,\"y\":40,\"w\":70,\"h\":60,\"toggle\":false,\"text_font\":24,\"text\":\"2/3\",\"tag\":{\"cover\":\"cover.bigroom_iii\",\"position\":\"90\"}}\n                  {\"page\":2,\"id\":203,\"obj\":\"btn\",\"parentid\":210,\"x\":90,\"y\":40,\"w\":70,\"h\":60,\"toggle\":false,\"text_font\":24,\"text\":\"1/3\",\"tag\":{\"cover\":\"cover.bigroom_iii\",\"position\":\"53\"}}\n                  {\"page\":2,\"id\":204,\"obj\":\"slider\",\"parentid\":210,\"x\":180,\"y\":40,\"w\":30,\"h\":130,\"min\":1,\"max\":100,\"pad_left20\":\"13\",\"pad_right20\":\"13\",\"tag\":{\"cover\":\"cover.bigroom_iii\",\"position\":\"50\"},\"val\":\n                  {{- state_attr('cover.bigroom_iii','current_position') -}}\n                  }\n\n      - obj: \"p2b41\" # shutter IV.\n        properties:\n          \"text_color\": \"{{ '#FFFF00' if is_state('cover.bigroom_iv', 'opening') else '#FFFFFF' }}\"\n          \"text_opa\": \"{{ '80' if is_state_attr('cover.bigroom_iv','current_position', 100) else '255' }}\"\n        event:\n          \"down\":\n            - service: cover.open_cover\n              target:\n                entity_id: \"cover.bigroom_iv\"\n      - obj: \"p2b43\"\n        properties:\n          \"text_color\": \"{{ '#FFFF00' if is_state('cover.bigroom_iv', 'closing') else '#FFFFFF' }}\"\n          \"text_opa\": \"{{ '80' if is_state_attr('cover.bigroom_iv','current_position', 0) else '255' }}\"\n        event:\n          \"down\":\n            - service: cover.close_cover\n              target:\n                entity_id: \"cover.bigroom_iv\"\n      - obj: \"p2b42\"\n        properties:\n          \"text\": &gt;\n            {% if is_state('cover.bigroom_iv', 'closing') %}\n            {{ \"\\uE4DB\" | e }}\n            {%-elif is_state('cover.bigroom_iv', 'opening') %}\n            {{ \"\\uE4DB\" | e }}\n            {%-elif is_state('cover.bigroom_iv', 'closed') %}\n            {{ \"\\uF11C\" | e }}\n            {%-elif is_state('cover.bigroom_iv', 'open') %}\n            {{ \"\\uF11E\" | e }}\n            {% endif %}\n        event:\n          \"down\":\n            - service: cover.stop_cover\n              target:\n                entity_id: \"cover.bigroom_iv\"\n          \"long\":\n            - service: openhasp.command # display the on-demand pop-up with extra setting objects, tagged with the entity_id and specific positions in JSON objects\n              target:\n                entity_id: openhasp.plate_bigroom\n              data:\n                keyword: jsonl\n                parameters: &gt;-\n                  {\"page\":2,\"id\":200,\"obj\":\"obj\",\"x\":0,\"y\":0,\"w\":240,\"h\":320,\"radius\":0,\"bg_grad_dir\":0,\"opacity\":150,\"bg_color\":\"black\"}\n                  {\"page\":2,\"id\":210,\"obj\":\"obj\",\"parentid\":200,\"x\":5,\"y\":55,\"w\":230,\"h\":190,\"opacity\":255,\"click\":0,\"radius\":10,\"shadow_opa\":255,\"shadow_color\":\"black\",\"shadow_width\":20,\"shadow_spread\":0}\n                  {\"page\":2,\"id\":211,\"obj\":\"label\",\"parentid\":210,\"x\":10,\"y\":10,\"w\":210,\"h\":20,\"click\":0,\"align\":\"center\",\"text\":\"Position preset - IV.\"}\n                  {\"page\":2,\"id\":201,\"obj\":\"btn\",\"parentid\":210,\"x\":10,\"y\":110,\"w\":150,\"h\":60,\"toggle\":false,\"text_font\":24,\"text\":\"Middle\",\"tag\":{\"cover\":\"cover.bigroom_iv\",\"position\":\"15\"}}\n                  {\"page\":2,\"id\":202,\"obj\":\"btn\",\"parentid\":210,\"x\":10,\"y\":40,\"w\":70,\"h\":60,\"toggle\":false,\"text_font\":24,\"text\":\"2/3\",\"tag\":{\"cover\":\"cover.bigroom_iv\",\"position\":\"90\"}}\n                  {\"page\":2,\"id\":203,\"obj\":\"btn\",\"parentid\":210,\"x\":90,\"y\":40,\"w\":70,\"h\":60,\"toggle\":false,\"text_font\":24,\"text\":\"1/3\",\"tag\":{\"cover\":\"cover.bigroom_iv\",\"position\":\"53\"}}\n                  {\"page\":2,\"id\":204,\"obj\":\"slider\",\"parentid\":210,\"x\":180,\"y\":40,\"w\":30,\"h\":130,\"min\":1,\"max\":100,\"pad_left20\":\"13\",\"pad_right20\":\"13\",\"tag\":{\"cover\":\"cover.bigroom_iv\",\"position\":\"50\"},\"val\":\n                  {{- state_attr('cover.bigroom_iv','current_position') -}}\n                  }\n\n      - obj: \"p2b51\" # shutter V.\n        properties:\n          \"text_color\": \"{{ '#FFFF00' if is_state('cover.bigroom_v', 'opening') else '#FFFFFF' }}\"\n          \"text_opa\": \"{{ '80' if is_state_attr('cover.bigroom_v','current_position', 100) else '255' }}\"\n        event:\n          \"down\":\n            - service: cover.open_cover\n              target:\n                entity_id: \"cover.bigroom_v\"\n      - obj: \"p2b53\"\n        properties:\n          \"text_color\": \"{{ '#FFFF00' if is_state('cover.bigroom_v', 'closing') else '#FFFFFF' }}\"\n          \"text_opa\": \"{{ '80' if is_state_attr('cover.bigroom_v','current_position', 0) else '255' }}\"\n        event:\n          \"down\":\n            - service: cover.close_cover\n              target:\n                entity_id: \"cover.bigroom_v\"\n      - obj: \"p2b52\"\n        properties:\n          \"text\": &gt;\n            {% if is_state('cover.bigroom_v', 'closing') %}\n            {{ \"\\uE4DB\" | e }}\n            {%-elif is_state('cover.bigroom_v', 'opening') %}\n            {{ \"\\uE4DB\" | e }}\n            {%-elif is_state('cover.bigroom_v', 'closed') %}\n            {{ \"\\uF11C\" | e }}\n            {%-elif is_state('cover.bigroom_v', 'open') %}\n            {{ \"\\uF11E\" | e }}\n            {% endif %}\n        event:\n          \"down\":\n            - service: cover.stop_cover\n              target:\n                entity_id: \"cover.bigroom_v\"\n          \"long\":\n            - service: openhasp.command # display the on-demand pop-up with extra setting objects, tagged with the entity_id and specific positions in JSON objects\n              target:\n                entity_id: openhasp.plate_bigroom\n              data:\n                keyword: jsonl\n                parameters: &gt;-\n                  {\"page\":2,\"id\":200,\"obj\":\"obj\",\"x\":0,\"y\":0,\"w\":240,\"h\":320,\"radius\":0,\"bg_grad_dir\":0,\"opacity\":150,\"bg_color\":\"black\"}\n                  {\"page\":2,\"id\":210,\"obj\":\"obj\",\"parentid\":200,\"x\":5,\"y\":55,\"w\":230,\"h\":190,\"opacity\":255,\"click\":0,\"radius\":10,\"shadow_opa\":255,\"shadow_color\":\"black\",\"shadow_width\":20,\"shadow_spread\":0}\n                  {\"page\":2,\"id\":211,\"obj\":\"label\",\"parentid\":210,\"x\":10,\"y\":10,\"w\":210,\"h\":20,\"click\":0,\"align\":\"center\",\"text\":\"Position preset - V.\"}\n                  {\"page\":2,\"id\":201,\"obj\":\"btn\",\"parentid\":210,\"x\":10,\"y\":110,\"w\":150,\"h\":60,\"toggle\":false,\"text_font\":24,\"text\":\"Middle\",\"tag\":{\"cover\":\"cover.bigroom_v\",\"position\":\"17\"}}\n                  {\"page\":2,\"id\":202,\"obj\":\"btn\",\"parentid\":210,\"x\":10,\"y\":40,\"w\":70,\"h\":60,\"toggle\":false,\"text_font\":24,\"text\":\"2/3\",\"tag\":{\"cover\":\"cover.bigroom_v\",\"position\":\"90\"}}\n                  {\"page\":2,\"id\":203,\"obj\":\"btn\",\"parentid\":210,\"x\":90,\"y\":40,\"w\":70,\"h\":60,\"toggle\":false,\"text_font\":24,\"text\":\"1/3\",\"tag\":{\"cover\":\"cover.bigroom_v\",\"position\":\"55\"}}\n                  {\"page\":2,\"id\":204,\"obj\":\"slider\",\"parentid\":210,\"x\":180,\"y\":40,\"w\":30,\"h\":130,\"min\":1,\"max\":100,\"pad_left20\":\"13\",\"pad_right20\":\"13\",\"tag\":{\"cover\":\"cover.bigroom_v\",\"position\":\"19\"},\"val\":\n                  {{- state_attr('cover.bigroom_v','current_position') -}}\n                  }\n\n      - obj: \"p2b200\" # the background of the popup. when touched directly, will close the popup by deleting its objects\n        event:\n          \"down\":\n            - service: openhasp.command\n              target:\n                entity_id: openhasp.plate_bigroom\n              data:\n                keyword: p2b200.delete\n\n\n      - obj: \"p2b201\" # set the shutter position for entity_id extracted from the JSON oject in tag set when displayed, then delete the popup objects\n        event:\n          \"down\":\n            - service: cover.set_cover_position\n              data:\n                entity_id: \"{{ tag.cover }}\"\n                position: \"{{ tag.position }}\"\n            - service: openhasp.command\n              target:\n                entity_id: openhasp.plate_bigroom\n              data:\n                keyword: p2b200.delete\n\n      - obj: \"p2b202\" # set the shutter position for entity_id extracted from the JSON oject in tag set when displayed, then delete the popup objects\n        event:\n          \"down\":\n            - service: cover.set_cover_position\n              data:\n                entity_id: \"{{ tag.cover }}\"\n                position: \"{{ tag.position }}\"\n            - service: openhasp.command\n              target:\n                entity_id: openhasp.plate_bigroom\n              data:\n                keyword: p2b200.delete\n\n      - obj: \"p2b203\" # set the shutter position for entity_id extracted from the JSON oject in tag set when displayed, then delete the popup objects\n        event:\n          \"down\":\n            - service: cover.set_cover_position\n              data:\n                entity_id: \"{{ tag.cover }}\"\n                position: \"{{ tag.position }}\"\n            - service: openhasp.command\n              target:\n                entity_id: openhasp.plate_bigroom\n              data:\n                keyword: p2b200.delete\n\n      - obj: \"p2b204\" # set the shutter position from the slider for entity_id extracted from the JSON oject in tag set when displayed, then delete the popup objects\n        event:\n          \"up\":\n            - service: cover.set_cover_position\n              data:\n                entity_id: \"{{ tag.cover }}\"\n                position: \"{{ val | int }}\"\n            - service: openhasp.command\n              target:\n                entity_id: openhasp.plate_bigroom\n              data:\n                keyword: p2b200.delete\n</code></pre> Again - without tags, the last 5 object definitions would have to be added for each shutter, and also it would be needed to be drawn separately for each one, initially invisible, then toggle visibility at each one. That would have resulted in a much bigger Custom Component configuration, and also plate design.</p> <p>Note</p> <p>Some examples below may generate errors during Home Assistant startup. Log messages like <code>Error while processing template</code> or <code>Template variable error: 'None' has no attribute 'last_changed'</code> etc. can be caused by the fact that openHASP component loads faster than the other integrations you have set up, from where you want to pull data. Because the data required by openHASP component is not yet available, an error is generated. But as soon as Home Assistant finishes loading everything, and all the data you've configured is available, things will be normal. Nevertheless the log should be checked regularly to find repetitive problems.</p>"},{"location":"integrations/node-red/","title":"Node-RED","text":"<p>You can integrate an openHASP plate in Node-RED by subscribing and publishing to its MQTT topics.</p> <p>The following is an example of how to use Node-RED to read PIN numbers from an alarm button matrix on page 12, and display those numbers back to the screen on p12b2.</p> <p>First we define p12b1 as the matrix, and p12b2 as the area where to re-display the PIN.  Add the following to <code>pages_online.jsonl</code></p> <pre><code>{\"comment\":\" ----------- Page 12 layout ------------\"}\n\n{\"page\":12,\"id\":1,\"obj\":\"btnmatrix\",\"x\":10,\"y\":40,\"w\":220,\"h\":220,\"options\":[\"1\",\"2\",\"3\",\"\\n\",\"4\",\"5\",\"6\",\"\\n\",\"7\",\"8\",\"9\",\"\\n\",\"Home\",\"0\",\"Away\"],\"toggle\":false,\"one_check\":false}\n{\"page\":12,\"id\":2,\"obj\":\"label\",\"x\":104,\"y\":22,\"h\":30,\"w\":40,\"text\":\"    \",\"text_color\":\"white\",\"align\":0,\"bg_color\":\"#2C3E50\"}\n</code></pre> <p></p> <p></p> <p>The following jsonl is for 13 Lanbon L8 panels and can be imported</p> <pre><code>[\n    {\n        \"id\": \"0b80aa53cbe8e6e2\",\n        \"type\": \"tab\",\n        \"label\": \"Lanbon Security Panel\",\n        \"disabled\": false,\n        \"info\": \"\",\n        \"env\": []\n    },\n    {\n        \"id\": \"e7faec55927cd35a\",\n        \"type\": \"mqtt in\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"\",\n        \"topic\": \"hasp/livingroom/state/p12b1\",\n        \"qos\": \"0\",\n        \"datatype\": \"utf8\",\n        \"broker\": \"441d674c9c4a7f07\",\n        \"nl\": false,\n        \"rap\": true,\n        \"rh\": 0,\n        \"inputs\": 0,\n        \"x\": 140,\n        \"y\": 80,\n        \"wires\": [\n            [\n                \"8ac3fdee648284fe\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"99cabcc7d52bfc9b\",\n        \"type\": \"debug\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"\",\n        \"active\": true,\n        \"tosidebar\": true,\n        \"console\": false,\n        \"tostatus\": false,\n        \"complete\": \"payload\",\n        \"targetType\": \"msg\",\n        \"statusVal\": \"\",\n        \"statusType\": \"auto\",\n        \"x\": 1290,\n        \"y\": 200,\n        \"wires\": []\n    },\n    {\n        \"id\": \"ac7b661dc1513061\",\n        \"type\": \"change\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"MakeNums\",\n        \"rules\": [\n            {\n                \"t\": \"change\",\n                \"p\": \"payload\",\n                \"pt\": \"msg\",\n                \"from\": \"{\\\"event\\\":\\\"down\\\",\\\"val\\\":0,\\\"text\\\":\\\"1\\\"}\",\n                \"fromt\": \"str\",\n                \"to\": \"1\",\n                \"tot\": \"str\"\n            },\n            {\n                \"t\": \"change\",\n                \"p\": \"payload\",\n                \"pt\": \"msg\",\n                \"from\": \"{\\\"event\\\":\\\"down\\\",\\\"val\\\":1,\\\"text\\\":\\\"2\\\"}\",\n                \"fromt\": \"str\",\n                \"to\": \"2\",\n                \"tot\": \"str\"\n            },\n            {\n                \"t\": \"change\",\n                \"p\": \"payload\",\n                \"pt\": \"msg\",\n                \"from\": \"{\\\"event\\\":\\\"down\\\",\\\"val\\\":2,\\\"text\\\":\\\"3\\\"}\",\n                \"fromt\": \"str\",\n                \"to\": \"3\",\n                \"tot\": \"str\"\n            },\n            {\n                \"t\": \"change\",\n                \"p\": \"payload\",\n                \"pt\": \"msg\",\n                \"from\": \"{\\\"event\\\":\\\"down\\\",\\\"val\\\":3,\\\"text\\\":\\\"4\\\"}\",\n                \"fromt\": \"str\",\n                \"to\": \"4\",\n                \"tot\": \"str\"\n            },\n            {\n                \"t\": \"change\",\n                \"p\": \"payload\",\n                \"pt\": \"msg\",\n                \"from\": \"{\\\"event\\\":\\\"down\\\",\\\"val\\\":4,\\\"text\\\":\\\"5\\\"}\",\n                \"fromt\": \"str\",\n                \"to\": \"5\",\n                \"tot\": \"str\"\n            },\n            {\n                \"t\": \"change\",\n                \"p\": \"payload\",\n                \"pt\": \"msg\",\n                \"from\": \"{\\\"event\\\":\\\"down\\\",\\\"val\\\":5,\\\"text\\\":\\\"6\\\"}\",\n                \"fromt\": \"str\",\n                \"to\": \"6\",\n                \"tot\": \"str\"\n            },\n            {\n                \"t\": \"change\",\n                \"p\": \"payload\",\n                \"pt\": \"msg\",\n                \"from\": \"{\\\"event\\\":\\\"down\\\",\\\"val\\\":6,\\\"text\\\":\\\"7\\\"}\",\n                \"fromt\": \"str\",\n                \"to\": \"7\",\n                \"tot\": \"str\"\n            },\n            {\n                \"t\": \"change\",\n                \"p\": \"payload\",\n                \"pt\": \"msg\",\n                \"from\": \"{\\\"event\\\":\\\"down\\\",\\\"val\\\":7,\\\"text\\\":\\\"8\\\"}\",\n                \"fromt\": \"str\",\n                \"to\": \"8\",\n                \"tot\": \"str\"\n            },\n            {\n                \"t\": \"change\",\n                \"p\": \"payload\",\n                \"pt\": \"msg\",\n                \"from\": \"{\\\"event\\\":\\\"down\\\",\\\"val\\\":8,\\\"text\\\":\\\"9\\\"}\",\n                \"fromt\": \"str\",\n                \"to\": \"9\",\n                \"tot\": \"str\"\n            },\n            {\n                \"t\": \"change\",\n                \"p\": \"payload\",\n                \"pt\": \"msg\",\n                \"from\": \"{\\\"event\\\":\\\"down\\\",\\\"val\\\":10,\\\"text\\\":\\\"0\\\"}\",\n                \"fromt\": \"str\",\n                \"to\": \"0\",\n                \"tot\": \"str\"\n            }\n        ],\n        \"action\": \"\",\n        \"property\": \"\",\n        \"from\": \"\",\n        \"to\": \"\",\n        \"reg\": false,\n        \"x\": 450,\n        \"y\": 160,\n        \"wires\": [\n            [\n                \"9739abb6f93766f6\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"d23a2c349910face\",\n        \"type\": \"function\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"BuildPIN\",\n        \"func\": \"var pin=global.get('pin') || \\\"\\\";\\n\\nvar count=global.get('count') || 0;\\ncount +=1;\\nglobal.set('count',count)\\n\\npin = pin+msg.payload;\\nglobal.set('pin',pin)\\n\\n\\nif (count &gt;= 4) {\\n  msg.payload=pin;\\n  global.set('count',undefined)\\n  global.set('pin',undefined)\\n  return msg;\\n}\\n\",\n        \"outputs\": 1,\n        \"noerr\": 0,\n        \"initialize\": \"\",\n        \"finalize\": \"\",\n        \"libs\": [],\n        \"x\": 680,\n        \"y\": 180,\n        \"wires\": [\n            [\n                \"194eed57a4506f13\",\n                \"eaa539f1f670e8ea\",\n                \"978adaf5813fc4c9\",\n                \"421fb70f969f4c42\",\n                \"4b8a2bd06dcf1342\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"8ac3fdee648284fe\",\n        \"type\": \"switch\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"OnDown\",\n        \"property\": \"payload\",\n        \"propertyType\": \"msg\",\n        \"rules\": [\n            {\n                \"t\": \"cont\",\n                \"v\": \"{\\\"event\\\":\\\"down\\\"\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"checkall\": \"true\",\n        \"repair\": false,\n        \"outputs\": 1,\n        \"x\": 420,\n        \"y\": 80,\n        \"wires\": [\n            [\n                \"5249d096ebe1aab7\",\n                \"ac7b661dc1513061\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"978adaf5813fc4c9\",\n        \"type\": \"api-call-service\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"Disarm Alarm\",\n        \"server\": \"669eed80.4f9844\",\n        \"version\": 5,\n        \"debugenabled\": false,\n        \"domain\": \"alarm_control_panel\",\n        \"service\": \"alarm_disarm\",\n        \"areaId\": [],\n        \"deviceId\": [],\n        \"entityId\": [\n            \"alarm_control_panel.alarm\"\n        ],\n        \"data\": \"{\\\"code\\\":msg.payload}\",\n        \"dataType\": \"jsonata\",\n        \"mergeContext\": \"\",\n        \"mustacheAltTags\": false,\n        \"outputProperties\": [],\n        \"queue\": \"none\",\n        \"x\": 920,\n        \"y\": 200,\n        \"wires\": [\n            [\n                \"99cabcc7d52bfc9b\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"8b34728627566066\",\n        \"type\": \"mqtt in\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"\",\n        \"topic\": \"hasp/mainhall/state/p12b1\",\n        \"qos\": \"0\",\n        \"datatype\": \"utf8\",\n        \"broker\": \"441d674c9c4a7f07\",\n        \"nl\": false,\n        \"rap\": true,\n        \"rh\": 0,\n        \"inputs\": 0,\n        \"x\": 150,\n        \"y\": 140,\n        \"wires\": [\n            [\n                \"8ac3fdee648284fe\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"da5ff263f7265cee\",\n        \"type\": \"mqtt in\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"\",\n        \"topic\": \"hasp/ensuite/state/p12b1\",\n        \"qos\": \"0\",\n        \"datatype\": \"utf8\",\n        \"broker\": \"441d674c9c4a7f07\",\n        \"nl\": false,\n        \"rap\": true,\n        \"rh\": 0,\n        \"inputs\": 0,\n        \"x\": 150,\n        \"y\": 200,\n        \"wires\": [\n            [\n                \"8ac3fdee648284fe\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"16c2241ebfe6d928\",\n        \"type\": \"mqtt in\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"\",\n        \"topic\": \"hasp/mbr/state/p12b1\",\n        \"qos\": \"0\",\n        \"datatype\": \"utf8\",\n        \"broker\": \"441d674c9c4a7f07\",\n        \"nl\": false,\n        \"rap\": true,\n        \"rh\": 0,\n        \"inputs\": 0,\n        \"x\": 160,\n        \"y\": 260,\n        \"wires\": [\n            [\n                \"8ac3fdee648284fe\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"9152a3b91fa4ce8a\",\n        \"type\": \"mqtt in\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"\",\n        \"topic\": \"hasp/porch/state/p12b1\",\n        \"qos\": \"0\",\n        \"datatype\": \"utf8\",\n        \"broker\": \"441d674c9c4a7f07\",\n        \"nl\": false,\n        \"rap\": true,\n        \"rh\": 0,\n        \"inputs\": 0,\n        \"x\": 150,\n        \"y\": 320,\n        \"wires\": [\n            [\n                \"8ac3fdee648284fe\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"df2df457211af7fa\",\n        \"type\": \"mqtt in\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"\",\n        \"topic\": \"hasp/dining/state/p12b1\",\n        \"qos\": \"0\",\n        \"datatype\": \"utf8\",\n        \"broker\": \"441d674c9c4a7f07\",\n        \"nl\": false,\n        \"rap\": true,\n        \"rh\": 0,\n        \"inputs\": 0,\n        \"x\": 150,\n        \"y\": 380,\n        \"wires\": [\n            [\n                \"8ac3fdee648284fe\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"ef006a2ad5f4033f\",\n        \"type\": \"mqtt in\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"\",\n        \"topic\": \"hasp/downbath/state/p12b1\",\n        \"qos\": \"0\",\n        \"datatype\": \"utf8\",\n        \"broker\": \"441d674c9c4a7f07\",\n        \"nl\": false,\n        \"rap\": true,\n        \"rh\": 0,\n        \"inputs\": 0,\n        \"x\": 140,\n        \"y\": 440,\n        \"wires\": [\n            [\n                \"8ac3fdee648284fe\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"6dc9dabe1edb7af5\",\n        \"type\": \"mqtt in\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"\",\n        \"topic\": \"hasp/kitchen/state/p12b1\",\n        \"qos\": \"0\",\n        \"datatype\": \"utf8\",\n        \"broker\": \"441d674c9c4a7f07\",\n        \"nl\": false,\n        \"rap\": true,\n        \"rh\": 0,\n        \"inputs\": 0,\n        \"x\": 150,\n        \"y\": 500,\n        \"wires\": [\n            [\n                \"8ac3fdee648284fe\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"fb8196aa68104765\",\n        \"type\": \"mqtt in\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"\",\n        \"topic\": \"hasp/garage/state/p12b1\",\n        \"qos\": \"0\",\n        \"datatype\": \"utf8\",\n        \"broker\": \"441d674c9c4a7f07\",\n        \"nl\": false,\n        \"rap\": true,\n        \"rh\": 0,\n        \"inputs\": 0,\n        \"x\": 150,\n        \"y\": 560,\n        \"wires\": [\n            [\n                \"8ac3fdee648284fe\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"a416144df4052b42\",\n        \"type\": \"mqtt in\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"\",\n        \"topic\": \"hasp/downhall/state/p12b1\",\n        \"qos\": \"0\",\n        \"datatype\": \"utf8\",\n        \"broker\": \"441d674c9c4a7f07\",\n        \"nl\": false,\n        \"rap\": true,\n        \"rh\": 0,\n        \"inputs\": 0,\n        \"x\": 140,\n        \"y\": 620,\n        \"wires\": [\n            [\n                \"8ac3fdee648284fe\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"9305a215bd8a3a87\",\n        \"type\": \"mqtt out\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"MQTTPublishMood\",\n        \"topic\": \"hasp/plates/command\",\n        \"qos\": \"0\",\n        \"retain\": \"\",\n        \"respTopic\": \"\",\n        \"contentType\": \"\",\n        \"userProps\": \"\",\n        \"correl\": \"\",\n        \"expiry\": \"\",\n        \"broker\": \"441d674c9c4a7f07\",\n        \"x\": 1310,\n        \"y\": 40,\n        \"wires\": []\n    },\n    {\n        \"id\": \"5249d096ebe1aab7\",\n        \"type\": \"change\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"White\",\n        \"rules\": [\n            {\n                \"t\": \"set\",\n                \"p\": \"payload\",\n                \"pt\": \"msg\",\n                \"to\": \"moodlight {\\\"state\\\": true, \\\"r\\\": 255, \\\"g\\\": 255, \\\"b\\\": 255, \\\"brightness\\\": 255}\",\n                \"tot\": \"str\"\n            }\n        ],\n        \"action\": \"\",\n        \"property\": \"\",\n        \"from\": \"\",\n        \"to\": \"\",\n        \"reg\": false,\n        \"x\": 650,\n        \"y\": 40,\n        \"wires\": [\n            [\n                \"1c99afe47fe6da11\",\n                \"9305a215bd8a3a87\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"3a59fcd31e572bb0\",\n        \"type\": \"change\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"Black\",\n        \"rules\": [\n            {\n                \"t\": \"set\",\n                \"p\": \"payload\",\n                \"pt\": \"msg\",\n                \"to\": \"moodlight {\\\"state\\\": true, \\\"r\\\": 0, \\\"g\\\": 0, \\\"b\\\": 0, \\\"brightness\\\": 255}\",\n                \"tot\": \"str\"\n            }\n        ],\n        \"action\": \"\",\n        \"property\": \"\",\n        \"from\": \"\",\n        \"to\": \"\",\n        \"reg\": false,\n        \"x\": 810,\n        \"y\": 80,\n        \"wires\": [\n            [\n                \"9305a215bd8a3a87\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"197cb8bad0ea98a3\",\n        \"type\": \"api-call-service\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"ArmAway\",\n        \"server\": \"669eed80.4f9844\",\n        \"version\": 5,\n        \"debugenabled\": false,\n        \"domain\": \"alarm_control_panel\",\n        \"service\": \"alarm_arm_away\",\n        \"areaId\": [],\n        \"deviceId\": [],\n        \"entityId\": [\n            \"alarm_control_panel.alarm\"\n        ],\n        \"data\": \"{\\\"code\\\":\\\"1776\\\"}\",\n        \"dataType\": \"jsonata\",\n        \"mergeContext\": \"\",\n        \"mustacheAltTags\": false,\n        \"outputProperties\": [],\n        \"queue\": \"none\",\n        \"x\": 940,\n        \"y\": 320,\n        \"wires\": [\n            [\n                \"99cabcc7d52bfc9b\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"eaa539f1f670e8ea\",\n        \"type\": \"change\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"Purple\",\n        \"rules\": [\n            {\n                \"t\": \"set\",\n                \"p\": \"payload\",\n                \"pt\": \"msg\",\n                \"to\": \"moodlight {\\\"state\\\": true, \\\"r\\\": 255, \\\"g\\\": 0, \\\"b\\\": 255, \\\"brightness\\\": 255}\",\n                \"tot\": \"str\"\n            }\n        ],\n        \"action\": \"\",\n        \"property\": \"\",\n        \"from\": \"\",\n        \"to\": \"\",\n        \"reg\": false,\n        \"x\": 950,\n        \"y\": 380,\n        \"wires\": [\n            [\n                \"9305a215bd8a3a87\",\n                \"cae42e223294ce38\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"194eed57a4506f13\",\n        \"type\": \"function\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"Reset\",\n        \"func\": \"  global.set('count',undefined)\\n  global.set('pin',undefined)\\n  msg.payload = \\\"\\\"\",\n        \"outputs\": 1,\n        \"noerr\": 0,\n        \"initialize\": \"\",\n        \"finalize\": \"\",\n        \"libs\": [],\n        \"x\": 670,\n        \"y\": 240,\n        \"wires\": [\n            [\n                \"421fb70f969f4c42\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"9739abb6f93766f6\",\n        \"type\": \"switch\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"0-9HomeAway\",\n        \"property\": \"payload\",\n        \"propertyType\": \"msg\",\n        \"rules\": [\n            {\n                \"t\": \"btwn\",\n                \"v\": \"0\",\n                \"vt\": \"num\",\n                \"v2\": \"9\",\n                \"v2t\": \"num\"\n            },\n            {\n                \"t\": \"eq\",\n                \"v\": \"{\\\"event\\\":\\\"down\\\",\\\"val\\\":9,\\\"text\\\":\\\"Home\\\"}\",\n                \"vt\": \"str\"\n            },\n            {\n                \"t\": \"eq\",\n                \"v\": \"{\\\"event\\\":\\\"down\\\",\\\"val\\\":11,\\\"text\\\":\\\"Away\\\"}\",\n                \"vt\": \"str\"\n            }\n        ],\n        \"checkall\": \"true\",\n        \"repair\": false,\n        \"outputs\": 3,\n        \"x\": 440,\n        \"y\": 240,\n        \"wires\": [\n            [\n                \"d23a2c349910face\",\n                \"f9f85bc88ea6f404\"\n            ],\n            [\n                \"194eed57a4506f13\"\n            ],\n            [\n                \"194eed57a4506f13\",\n                \"c861944aac699e3e\",\n                \"206a424a07c9fb22\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"11dad534fd1a944e\",\n        \"type\": \"change\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"Black\",\n        \"rules\": [\n            {\n                \"t\": \"set\",\n                \"p\": \"payload\",\n                \"pt\": \"msg\",\n                \"to\": \"moodlight {\\\"state\\\": true, \\\"r\\\": 0, \\\"g\\\": 0, \\\"b\\\": 0, \\\"brightness\\\": 255}\",\n                \"tot\": \"str\"\n            }\n        ],\n        \"action\": \"\",\n        \"property\": \"\",\n        \"from\": \"\",\n        \"to\": \"\",\n        \"reg\": false,\n        \"x\": 1010,\n        \"y\": 440,\n        \"wires\": [\n            [\n                \"9305a215bd8a3a87\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"cae42e223294ce38\",\n        \"type\": \"delay\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"\",\n        \"pauseType\": \"delay\",\n        \"timeout\": \"1\",\n        \"timeoutUnits\": \"seconds\",\n        \"rate\": \"1\",\n        \"nbRateUnits\": \"1\",\n        \"rateUnits\": \"second\",\n        \"randomFirst\": \"1\",\n        \"randomLast\": \"5\",\n        \"randomUnits\": \"seconds\",\n        \"drop\": false,\n        \"allowrate\": false,\n        \"outputs\": 1,\n        \"x\": 880,\n        \"y\": 440,\n        \"wires\": [\n            [\n                \"11dad534fd1a944e\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"4b8a2bd06dcf1342\",\n        \"type\": \"mqtt out\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"MQTTPublishPIN\",\n        \"topic\": \"hasp/plates/command/p12b2.text\",\n        \"qos\": \"0\",\n        \"retain\": \"\",\n        \"respTopic\": \"\",\n        \"contentType\": \"\",\n        \"userProps\": \"\",\n        \"correl\": \"\",\n        \"expiry\": \"\",\n        \"broker\": \"441d674c9c4a7f07\",\n        \"x\": 1310,\n        \"y\": 120,\n        \"wires\": []\n    },\n    {\n        \"id\": \"f9f85bc88ea6f404\",\n        \"type\": \"function\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"DisplayPIN\",\n        \"func\": \"var pin=global.get('pin')\\n// pin = pin+msg.payload;\\nmsg.payload = pin;\\nreturn msg;\",\n        \"outputs\": 1,\n        \"noerr\": 0,\n        \"initialize\": \"\",\n        \"finalize\": \"\",\n        \"libs\": [],\n        \"x\": 690,\n        \"y\": 140,\n        \"wires\": [\n            [\n                \"4b8a2bd06dcf1342\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"149782424f319147\",\n        \"type\": \"change\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"\",\n        \"rules\": [\n            {\n                \"t\": \"set\",\n                \"p\": \"payload\",\n                \"pt\": \"msg\",\n                \"to\": \"****\",\n                \"tot\": \"str\"\n            }\n        ],\n        \"action\": \"\",\n        \"property\": \"\",\n        \"from\": \"\",\n        \"to\": \"\",\n        \"reg\": false,\n        \"x\": 1040,\n        \"y\": 500,\n        \"wires\": [\n            [\n                \"4b8a2bd06dcf1342\",\n                \"88031b2f0bea8fef\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"421fb70f969f4c42\",\n        \"type\": \"delay\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"\",\n        \"pauseType\": \"delay\",\n        \"timeout\": \"500\",\n        \"timeoutUnits\": \"milliseconds\",\n        \"rate\": \"1\",\n        \"nbRateUnits\": \"1\",\n        \"rateUnits\": \"second\",\n        \"randomFirst\": \"1\",\n        \"randomLast\": \"5\",\n        \"randomUnits\": \"seconds\",\n        \"drop\": false,\n        \"allowrate\": false,\n        \"outputs\": 1,\n        \"x\": 870,\n        \"y\": 500,\n        \"wires\": [\n            [\n                \"149782424f319147\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"88031b2f0bea8fef\",\n        \"type\": \"delay\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"\",\n        \"pauseType\": \"delay\",\n        \"timeout\": \"500\",\n        \"timeoutUnits\": \"milliseconds\",\n        \"rate\": \"1\",\n        \"nbRateUnits\": \"1\",\n        \"rateUnits\": \"second\",\n        \"randomFirst\": \"1\",\n        \"randomLast\": \"5\",\n        \"randomUnits\": \"seconds\",\n        \"drop\": false,\n        \"allowrate\": false,\n        \"outputs\": 1,\n        \"x\": 870,\n        \"y\": 560,\n        \"wires\": [\n            [\n                \"bf47160c100015ca\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"bf47160c100015ca\",\n        \"type\": \"change\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"\",\n        \"rules\": [\n            {\n                \"t\": \"set\",\n                \"p\": \"payload\",\n                \"pt\": \"msg\",\n                \"to\": \"    \",\n                \"tot\": \"str\"\n            }\n        ],\n        \"action\": \"\",\n        \"property\": \"\",\n        \"from\": \"\",\n        \"to\": \"\",\n        \"reg\": false,\n        \"x\": 1040,\n        \"y\": 560,\n        \"wires\": [\n            [\n                \"4b8a2bd06dcf1342\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"c861944aac699e3e\",\n        \"type\": \"delay\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"\",\n        \"pauseType\": \"delay\",\n        \"timeout\": \"15\",\n        \"timeoutUnits\": \"seconds\",\n        \"rate\": \"1\",\n        \"nbRateUnits\": \"1\",\n        \"rateUnits\": \"second\",\n        \"randomFirst\": \"1\",\n        \"randomLast\": \"5\",\n        \"randomUnits\": \"seconds\",\n        \"drop\": false,\n        \"allowrate\": false,\n        \"outputs\": 1,\n        \"x\": 660,\n        \"y\": 300,\n        \"wires\": [\n            [\n                \"371b17d0dd9918dc\",\n                \"24f9431e18e5d5f2\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"1c99afe47fe6da11\",\n        \"type\": \"delay\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"\",\n        \"pauseType\": \"delay\",\n        \"timeout\": \"300\",\n        \"timeoutUnits\": \"milliseconds\",\n        \"rate\": \"1\",\n        \"nbRateUnits\": \"1\",\n        \"rateUnits\": \"second\",\n        \"randomFirst\": \"1\",\n        \"randomLast\": \"5\",\n        \"randomUnits\": \"seconds\",\n        \"drop\": false,\n        \"allowrate\": false,\n        \"outputs\": 1,\n        \"x\": 670,\n        \"y\": 80,\n        \"wires\": [\n            [\n                \"3a59fcd31e572bb0\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"206a424a07c9fb22\",\n        \"type\": \"change\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"30 sec\",\n        \"rules\": [\n            {\n                \"t\": \"set\",\n                \"p\": \"payload\",\n                \"pt\": \"msg\",\n                \"to\": \"Alarm will arm away in 30 seconds\",\n                \"tot\": \"str\"\n            }\n        ],\n        \"action\": \"\",\n        \"property\": \"\",\n        \"from\": \"\",\n        \"to\": \"\",\n        \"reg\": false,\n        \"x\": 410,\n        \"y\": 300,\n        \"wires\": [\n            []\n        ]\n    },\n    {\n        \"id\": \"24f9431e18e5d5f2\",\n        \"type\": \"change\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"15 sec\",\n        \"rules\": [\n            {\n                \"t\": \"set\",\n                \"p\": \"payload\",\n                \"pt\": \"msg\",\n                \"to\": \"15 seconds\",\n                \"tot\": \"str\"\n            }\n        ],\n        \"action\": \"\",\n        \"property\": \"\",\n        \"from\": \"\",\n        \"to\": \"\",\n        \"reg\": false,\n        \"x\": 410,\n        \"y\": 360,\n        \"wires\": [\n            []\n        ]\n    },\n    {\n        \"id\": \"371b17d0dd9918dc\",\n        \"type\": \"delay\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"\",\n        \"pauseType\": \"delay\",\n        \"timeout\": \"10\",\n        \"timeoutUnits\": \"seconds\",\n        \"rate\": \"1\",\n        \"nbRateUnits\": \"1\",\n        \"rateUnits\": \"second\",\n        \"randomFirst\": \"1\",\n        \"randomLast\": \"5\",\n        \"randomUnits\": \"seconds\",\n        \"drop\": false,\n        \"allowrate\": false,\n        \"outputs\": 1,\n        \"x\": 660,\n        \"y\": 360,\n        \"wires\": [\n            [\n                \"b8098924ec49405c\",\n                \"56b96ab40a26daeb\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"b8098924ec49405c\",\n        \"type\": \"delay\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"\",\n        \"pauseType\": \"delay\",\n        \"timeout\": \"5\",\n        \"timeoutUnits\": \"seconds\",\n        \"rate\": \"1\",\n        \"nbRateUnits\": \"1\",\n        \"rateUnits\": \"second\",\n        \"randomFirst\": \"1\",\n        \"randomLast\": \"5\",\n        \"randomUnits\": \"seconds\",\n        \"drop\": false,\n        \"allowrate\": false,\n        \"outputs\": 1,\n        \"x\": 660,\n        \"y\": 420,\n        \"wires\": [\n            [\n                \"197cb8bad0ea98a3\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"56b96ab40a26daeb\",\n        \"type\": \"change\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"5 Secs\",\n        \"rules\": [\n            {\n                \"t\": \"set\",\n                \"p\": \"payload\",\n                \"pt\": \"msg\",\n                \"to\": \"5 Seconds\",\n                \"tot\": \"str\"\n            }\n        ],\n        \"action\": \"\",\n        \"property\": \"\",\n        \"from\": \"\",\n        \"to\": \"\",\n        \"reg\": false,\n        \"x\": 410,\n        \"y\": 420,\n        \"wires\": [\n            []\n        ]\n    },\n    {\n        \"id\": \"0b8f9dbd664953e2\",\n        \"type\": \"api-call-service\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"ArmHome\",\n        \"server\": \"669eed80.4f9844\",\n        \"version\": 5,\n        \"debugenabled\": false,\n        \"domain\": \"alarm_control_panel\",\n        \"service\": \"alarm_arm_home\",\n        \"areaId\": [],\n        \"deviceId\": [],\n        \"entityId\": [\n            \"alarm_control_panel.alarm\"\n        ],\n        \"data\": \"{\\\"code\\\":\\\"1776\\\"}\",\n        \"dataType\": \"jsonata\",\n        \"mergeContext\": \"\",\n        \"mustacheAltTags\": false,\n        \"outputProperties\": [],\n        \"queue\": \"none\",\n        \"x\": 940,\n        \"y\": 260,\n        \"wires\": [\n            [\n                \"99cabcc7d52bfc9b\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"0bf633ce2d98dd79\",\n        \"type\": \"mqtt in\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"\",\n        \"topic\": \"hasp/upbath/state/p12b1\",\n        \"qos\": \"0\",\n        \"datatype\": \"utf8\",\n        \"broker\": \"441d674c9c4a7f07\",\n        \"nl\": false,\n        \"rap\": true,\n        \"rh\": 0,\n        \"inputs\": 0,\n        \"x\": 150,\n        \"y\": 680,\n        \"wires\": [\n            [\n                \"8ac3fdee648284fe\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"e3bf26032c55a701\",\n        \"type\": \"debug\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"debug 1\",\n        \"active\": false,\n        \"tosidebar\": true,\n        \"console\": false,\n        \"tostatus\": false,\n        \"complete\": \"false\",\n        \"statusVal\": \"\",\n        \"statusType\": \"auto\",\n        \"x\": 640,\n        \"y\": 580,\n        \"wires\": []\n    },\n    {\n        \"id\": \"9a8d3eea339efbdc\",\n        \"type\": \"mqtt in\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"\",\n        \"topic\": \"hasp/allys_room/state/p12b1\",\n        \"qos\": \"0\",\n        \"datatype\": \"utf8\",\n        \"broker\": \"441d674c9c4a7f07\",\n        \"nl\": false,\n        \"rap\": true,\n        \"rh\": 0,\n        \"inputs\": 0,\n        \"x\": 140,\n        \"y\": 740,\n        \"wires\": [\n            [\n                \"8ac3fdee648284fe\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"7aac330a4bb67fe8\",\n        \"type\": \"mqtt in\",\n        \"z\": \"0b80aa53cbe8e6e2\",\n        \"name\": \"\",\n        \"topic\": \"hasp/victorias_room/state/p12b1\",\n        \"qos\": \"0\",\n        \"datatype\": \"utf8\",\n        \"broker\": \"441d674c9c4a7f07\",\n        \"nl\": false,\n        \"rap\": true,\n        \"rh\": 0,\n        \"inputs\": 0,\n        \"x\": 130,\n        \"y\": 800,\n        \"wires\": [\n            [\n                \"8ac3fdee648284fe\"\n            ]\n        ]\n    },\n    {\n        \"id\": \"441d674c9c4a7f07\",\n        \"type\": \"mqtt-broker\",\n        \"name\": \"192.168.0.21\",\n        \"broker\": \"192.168.0.21\",\n        \"port\": \"1883\",\n        \"clientid\": \"\",\n        \"autoConnect\": true,\n        \"usetls\": false,\n        \"protocolVersion\": \"4\",\n        \"keepalive\": \"60\",\n        \"cleansession\": true,\n        \"birthTopic\": \"\",\n        \"birthQos\": \"0\",\n        \"birthPayload\": \"\",\n        \"birthMsg\": {},\n        \"closeTopic\": \"\",\n        \"closeQos\": \"0\",\n        \"closePayload\": \"\",\n        \"closeMsg\": {},\n        \"willTopic\": \"\",\n        \"willQos\": \"0\",\n        \"willPayload\": \"\",\n        \"willMsg\": {},\n        \"sessionExpiry\": \"\"\n    },\n    {\n        \"id\": \"669eed80.4f9844\",\n        \"type\": \"server\",\n        \"name\": \"Home Assistant\",\n        \"version\": 5,\n        \"addon\": true,\n        \"rejectUnauthorizedCerts\": true,\n        \"ha_boolean\": \"y|yes|true|on|home|open\",\n        \"connectionDelay\": false,\n        \"cacheJson\": false,\n        \"heartbeat\": false,\n        \"heartbeatInterval\": 30,\n        \"areaSelector\": \"friendlyName\",\n        \"deviceSelector\": \"friendlyName\",\n        \"entitySelector\": \"friendlyName\",\n        \"statusSeparator\": \"at: \",\n        \"statusYear\": \"hidden\",\n        \"statusMonth\": \"short\",\n        \"statusDay\": \"numeric\",\n        \"statusHourCycle\": \"h23\",\n        \"statusTimeFormat\": \"h:m\",\n        \"enableGlobalContextStore\": true\n    }\n]\n</code></pre>"},{"location":"integrations/openhab/integration_openhab/","title":"openHAB Integration","text":""},{"location":"integrations/openhab/integration_openhab/#page-layout","title":"Page Layout","text":"<p>We call plate any device running openHASP in your system.</p>"},{"location":"integrations/openhab/integration_openhab/#installation","title":"Installation","text":"<p>The openHAB configuration files to have this demo load automatically can be found here.</p> <p>Update the IP-address for your MQTT-broker in the <code>haspLVGL_demo.things</code> file. </p> <p>Make sure you have your plate connected to the network and to your MQTT boker, and your topic is set to <code>demo_plate</code>.</p>"},{"location":"integrations/openhab/integration_openhab/#code","title":"Code","text":"<p>To add an openHASP plate to your installation with Jaffa Sunrise sample configuration, upload a <code>pages.jsonl</code> file with the folowing content to your plate:</p> <ul> <li>in the plate's web UI select <code>Mono</code> UI theme and reboot,</li> <li>upload a <code>pages.jsonl</code> file with the folowing content to your plate and reboot:</li> </ul> <pre><code>{\"page\":1,\"comment\":\"---------- Page 1 ----------\"}\n{\"obj\":\"btn\",\"id\":4,\"x\":5,\"y\":5,\"w\":230,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius01\":10,\"radius02\":10,\"text\":\"Lights On\",\"value_ofs_x\":-85,\"value_font\":32,\"value_str\":\"\\uE6E8\",\"value_color\":\"#B6B6B6\",\"text_color\":\"#B6B6B6\",\"text_font\":24}\n{\"obj\":\"btn\",\"id\":5,\"x\":5,\"y\":68,\"w\":230,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius01\":10,\"radius02\":10,\"text\":\"Daylight\",\"value_ofs_x\":-85,\"value_font\":32,\"value_str\":\"\\uE599\",\"value_color\":\"#B6B6B6\",\"text_color\":\"#B6B6B6\",\"text_font\":24}\n{\"obj\":\"btn\",\"id\":6,\"x\":5,\"y\":131,\"w\":230,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius01\":10,\"radius02\":10,\"text\":\"Night\",\"value_ofs_x\":-85,\"value_font\":32,\"value_str\":\"\\uE594\",\"value_color\":\"#B6B6B6\",\"text_color\":\"#B6B6B6\",\"text_font\":24}\n{\"obj\":\"btn\",\"id\":7,\"x\":5,\"y\":194,\"w\":230,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius01\":10,\"radius02\":10,\"text\":\"Lights Off\",\"value_ofs_x\":-85,\"value_font\":32,\"value_str\":\"\\uE335\",\"value_color\":\"#B6B6B6\",\"text_color\":\"#B6B6B6\",\"text_font\":24}\n\n{\"page\":2,\"comment\":\"---------- Page 2 ----------\"}\n{\"obj\":\"label\",\"id\":8,\"x\":5,\"y\":5,\"w\":230,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"text\":\"Kitchen Dimmer\",\"text_color\":\"#B6B6B6\",\"text_font\":24}\n{\"obj\":\"label\",\"id\":9,\"x\":5,\"y\":80,\"w\":230,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"text\":\"Dining Dimmer\",\"text_color\":\"#B6B6B6\",\"text_font\":24}\n{\"obj\":\"label\",\"id\":10,\"x\":5,\"y\":165,\"w\":230,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"text\":\"Front Blinds\",\"text_color\":\"#B6B6B6\",\"text_font\":24}\n{\"obj\":\"slider\",\"id\":11,\"x\":20,\"y\":40,\"w\":200,\"h\":30,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius10\":15,\"radius20\":20,\"text_font\":1,\"val\":80,\"bg_color10\":\"#FFAC00\",\"bg_color20\":\"#DC5C05\"}\n{\"obj\":\"slider\",\"id\":12,\"x\":20,\"y\":120,\"w\":200,\"h\":30,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius10\":15,\"radius20\":20,\"text_font\":1,\"val\":65,\"bg_color10\":\"#FFAC00\",\"bg_color20\":\"#DC5C05\"}\n{\"obj\":\"slider\",\"id\":13,\"x\":20,\"y\":205,\"w\":200,\"h\":30,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius10\":15,\"radius20\":20,\"text_font\":1,\"val\":25,\"bg_color10\":\"#FFAC00\",\"bg_color20\":\"#DC5C05\"}\n\n{\"page\":3,\"comment\":\"---------- Page 3 ----------\"}\n{\"obj\":\"label\",\"id\":14,\"x\":42,\"y\":10,\"w\":236,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"text\":\"Gold\",\"text_color\":\"#C7BAA7\",\"text_font\":24}\n{\"obj\":\"label\",\"id\":15,\"x\":42,\"y\":60,\"mode\":\"scroll\",\"w\":236,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"text\":\"Chet Faker\",\"text_color\":\"#C7BAA7\",\"text_font\":24}\n{\"obj\":\"btn\",\"id\":16,\"x\":2,\"y\":140,\"w\":76,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius10\":10,\"radius20\":10,\"text\":\"\\uE4AE\",\"text_color\":\"#C7BAA7\",\"text_font\":32}\n{\"obj\":\"btn\",\"id\":17,\"x\":82,\"y\":140,\"w\":76,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius10\":10,\"radius20\":10,\"text\":\"\\uE3E4\",\"text_color\":\"#C7BAA7\",\"text_font\":32}\n{\"obj\":\"btn\",\"id\":18,\"x\":162,\"y\":140,\"w\":76,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius10\":10,\"radius20\":10,\"text\":\"\\uE4AD\",\"text_color\":\"#C7BAA7\",\"text_font\":32}\n{\"obj\":\"bar\",\"id\":19,\"x\":2,\"y\":105,\"w\":236,\"h\":20,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius10\":15,\"radius20\":15,\"text_font\":1,\"val\":65,\"bg_color10\":\"#FFAC00\"}\n{\"obj\":\"slider\",\"id\":20,\"x\":35,\"y\":220,\"w\":170,\"h\":30,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius10\":15,\"radius20\":20,\"text_font\":1,\"val\":30,\"bg_color10\":\"#FFAC00\",\"bg_color20\":\"#DC5C05\"}\n{\"obj\":\"label\",\"id\":21,\"x\":2,\"y\":10,\"w\":40,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"text\":\"\\uE75A\",\"text_color\":\"#C7BAA7\",\"text_font\":24}\n{\"obj\":\"label\",\"id\":22,\"x\":2,\"y\":60,\"w\":36,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"text\":\"\\uE004\",\"text_color\":\"#C7BAA7\",\"text_font\":24}\n{\"obj\":\"label\",\"id\":23,\"x\":5,\"y\":224,\"w\":25,\"h\":40,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"text\":\"\\uE75F\",\"text_color\":\"#C7BAA7\",\"text_font\":24}\n{\"obj\":\"label\",\"id\":24,\"x\":210,\"y\":224,\"w\":25,\"h\":40,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"text\":\"\\uE57E\",\"text_color\":\"#C7BAA7\",\"text_font\":24}\n\n{\"page\":0,\"comment\":\"---------- All pages ----------\"}\n{\"obj\":\"btn\",\"id\":1,\"x\":5,\"y\":257,\"w\":73,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius10\":10,\"radius20\":10,\"text\":\"\\uE04D\",\"text_color\":\"#978B7D\",\"text_font\":32}\n{\"obj\":\"btn\",\"id\":2,\"x\":83,\"y\":257,\"w\":73,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius10\":10,\"radius20\":10,\"text\":\"\\uE2DC\",\"text_color\":\"#978B7D\",\"text_font\":32}\n{\"obj\":\"btn\",\"id\":3,\"x\":161,\"y\":257,\"w\":73,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius10\":10,\"radius20\":10,\"text\":\"\\uE054\",\"text_color\":\"#978B7D\",\"text_font\":32}\n</code></pre> <p>Restart the plate and the demo page should load automatically to your device.</p>"}]}