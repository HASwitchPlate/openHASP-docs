{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"openHASP 0.6.1 Control your home-automation devices from a customizable touchscreen UI connected via MQTT. openHASP is a re-implementation of the popular HASwitchPlate sketch created by aderusha. The HASPone project uses a Wemos D1 mini and requires a Nextion/TJC HMI display. This rewrite removes the Nextion/TJC requirement by using the Light and Versatile Graphics Library on the MCU to drive a commodity display. This project also adds ESP32 and STM32F4 support to take advantage of the additional hardware capabilities. Demo Screens ~ Features ~ Feature ESP8266 ESP32 STM32F4 SPI display yes yes yes Parallel display no yes yes PWM Screen dimming yes yes yes Maximum Page Count 4 12 12 Object Types / Widgets 21 21 21 Dynamic Objects yes yes yes Theme Support yes yes yes Custom .zi V5 font yes (latin1) yes (latin1) no MDI Icons yes yes no PNG images no yes yes Network Wi-Fi Wi-Fi Ethernet Support ~ For support using openHASP please find us on Github, Discord or Home Assistant: Github Discussions :material-discord: Discord Chat Home Assistant Forum","title":"Home"},{"location":"#demo-screens","text":"","title":"Demo Screens"},{"location":"#features","text":"Feature ESP8266 ESP32 STM32F4 SPI display yes yes yes Parallel display no yes yes PWM Screen dimming yes yes yes Maximum Page Count 4 12 12 Object Types / Widgets 21 21 21 Dynamic Objects yes yes yes Theme Support yes yes yes Custom .zi V5 font yes (latin1) yes (latin1) no MDI Icons yes yes no PNG images no yes yes Network Wi-Fi Wi-Fi Ethernet","title":"Features"},{"location":"#support","text":"For support using openHASP please find us on Github, Discord or Home Assistant: Github Discussions :material-discord: Discord Chat Home Assistant Forum","title":"Support"},{"location":"commands/","text":"Commands are not related to an object on the screen but can get or set global properties or invoke system commands on the device. Issuing commands ~ Commands can be issued via the Serial commandline, telnet commandline or MQTT. For MQTT, use the hasp/<nodename>/command topic with payload <keyword> <parameter(s)> Batch processinng ~ Commands can be processed in batch one after another from .cmd script files located in the flash storage of the plate. General rules when creating .cmd batch scripts: can contain any command empty lines are ignored # or // can be used for comments space or tab in front of a command is ignored lines starting with { are processed as jsonl payloads lines starting with [ are processed as json payloads other lines are processed as <command> <payload> CR , LF or CRLF line endings allowed UTF8 encoding is required for special characters To start a batch script, use run command. System scripts ~ If any of the following scripts is present on the filesystem, it will be run automatically according to the rules below: /online.cmd will be executed after connection to the network was successfull /offline.cmd will be executed after connection to the WiFi is lost This makes it possible to disable or hide buttons, load a special offline page, etc. See example . Global commands ~ run ~ accepted parameters: name of a .cmd or .jsonl file present on the flash filesystem of the plate. Filename must be preceeded by the / character Run a batch script or load a jsonl page. Example run /script.cmd run /pages_party_mode.jsonl jsonl ~ accepted parameters: one or more json formatted lines Create new objects or update the properties of an existing object. When updating an existing object the obj property is not required and will be ignored. Each line in the jsonl payload defines one object and has to be in the json format. If the payload exceeds the MQTT buffer of 2 kB it will be cut off to fit, don't send too many lines in a single payload, you can always sends multiple jsonl commands. Example 1 jso nl { \"obj\" : \"btn\" , \"id\" : 14 , \"x\" : 120 , \"y\" : 1 , \"w\" : 30 , \"h\" : 40 , \"text_font\" : \"2\" , \"text\" : \"Test\" , \"text_color\" : \"gray\" , \"bg_opa\" : 0 , \"border_width\" : 0 } For more details see Pages and Objects . json ~ accepted parameters: json array of strings Use the json command to send multiple commands as an array of strings in one payload. Example 1 jso n [ 'page 3 ' , 'backligh t { \"state\" : \"OFF\" , \"brightness\" : 100 } ' , 'idle o ff ' ] This command will change to page 3, turn the backlight on at ~40% brightness and reset the idle timer. page ~ accepted parameters: [1-12] , prev , next or back Switches the display to show the objects from a different page and return the page number in state/page . Calling the page command without a parameter will return the value of the current page in state/page . clearpage ~ accepted parameters: [0-12] or all Deletes all objects on a given page. If no page number is specified, it clears the current page. Use clearpage all to clear all objects on all pages. To delete individual objects, you can issue the pXbY.delete command. backlight ~ accepted json keys: state: on / off , true / false , 0 / 1 , yes / no brightness: 1..255 Example backlight {\"state\":\"on\",\"brightness\":128} sets the display to half the brightness. Instead of a json payload, you can use a simple payload. To change the state, use either on / off , true / false , 0 , yes / no . A simple integer payload of 1..255 will adjust the brightness. Example backlight off backlight 200 sets the display brightness to ~80%. moodlight ~ accepted json keys: state: on / off , true / false , 0 / 1 , yes / no brightness: 1..255 color or r, g, b: 0..255 An RGB moodlight can be controlled by configuring 3 GPIO pins as type Mood Red , Mood Green and Mood blue . These leds can then be controlled together using the moodlight command. Example 1 2 3 4 moodligh t { \"state\" : \"off\" , \"color\" : \"green\" } moodligh t { \"state\" : true , \"color\" : \"#ff00e7\" } moodligh t { \"color\" : 12345 } moodligh t { \"state\" : \"on\" , \"r\" : 255 , \"g\" : 0 , \"b\" : 255 } The state key accepts boolean values to turn the moodlight on or off The brightness key can be set between 1 and 255 to dim the moodlight The color key accepts color values to set the RGB channels at once Individual r , g and b keys can also be used to set each channel seperately Calling the moodlight command without parameters (or sending an empty payload to the hasp/<nodename>/command/moodlight topic) returns the current state: Example 1 \"state/moodlight\" { \"state\" : \"ON\" , \"brightness\" : 255 , \"color\" : \"#ff0000\" , \"r\" : 255 , \"g\" : 0 , \"b\" : 0 } The color is returned as a hexadecimal value and as individual RGB channels. idle ~ accepted parameters: off Clears the idle state of the device and publishes a state/idle = OFF status message. It resets the idle counter as if a touch event occurred on the device. This is helpful e.g. when you want to wake up the display when an external event has occurred, like a PIR motion sensor. Calling the idle command without a parameter will return the current idle state short , long or off in the state/idle topic. output[x] ~ where [x] is number of the gpio pin (0-39) accepted json keys: state: on / off , true / false , 0 / 1 , yes / no val: 0..255 Changes the state GPIO pin to on or off . If the pin is configured as a LED or Serial Dimmer then the val key will control the brightness. Note If the GPIO is assigned to a group then objects and other GPIOs that share the same groupid will change state accordingly. input[x] ~ where [x] is number of the gpio pin (0-39) read-only Returns a JSON object containing the current state of the input, either on or off Example 1 i n pu t 4 => { \"state\" : \"on\" } System Commands ~ calibrate ~ Start on-screen touch calibration. You need to issue a soft reboot command to save the new calibration settings. If you do a hard reset of the device, the calibration settings will be lost. screenshot ~ Saves a picture of the current screen to the flash filesystem. You can retrieve it via http://<ip-address>/screenshot.bmp. This can be handy for bug reporting or documentation. The previous screenshot is overwritten. statusupdate ~ Reports the status of the MCU. The response will be posted to the state topic. Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \"hasp/<platename>/state/statusupdate\" => { \"node\" : \"plate35\" , \"idle\" : \"short\" , \"version\" : \"0.5.1\" , \"uptime\" : 1813 , \"ssid\" : \"network\" , \"rssi\" : -63 , \"ip\" : \"192.168.4.2\" , \"heapFree\" : 125820 , \"heapFrag\" : 35 , \"core\" : \"v3.3.5-1-g85c43024c\" , \"canUpdate\" : \"false\" , \"page\" : 1 , \"numPages\" : 12 , \"tftDriver\" : \"ST7789\" , \"tftWidth\" : 240 , \"tftHeight\" : 320 } unzip ~ Unzip a file-packgage on the plate. You can upload uncompressed ZIP files to the flash space of your plate and unzip them locally. This is useful for cases when you need a lot of small files to be uploaded - putting them in an uncompressed zip allows to upload them in one go, and then extract them with a single command: Example 1 unzip /openhasp-weathericons-day.zip service ~ Start or stop some of the processes running on the plate. Currently supported parameters: start stop Currently supported services: http (web interface) telnet (remote console) console (serial console) Example To stop the web interface of the plate, send to topic hasp/<your_plate>/command/service the string stop http . To start the web interface of the plate, send to topic hasp/<your_plate>/command/service the string start http . Tip Once these services are stopped, connection is lost/not possible to the plate through them. They can be started at any time by sending service start commands in through MQTT. It's possible to create self-built firmware binaries which have services stopped by default at boot, using customization . reboot or restart ~ Saves any changes in the configuration file and reboots the device. update ~ accepted parameters: [url] Update the firmware from the url provided. Reboots when update was successful. factoryreset ~ Clear the filesystem and EEPROM and reboot the device in its initial state. Warning There is no confirmation prompt nor an undo function! Configuration Settings ~ Wi-FI ~ ssid ~ Set network name of the access point to connect to. pass ~ Set the optional password for the access point to connect to. MQTT ~ nodename ~ Set the nodename of the device and mqtt topic for the node to hasp/<nodename>/ mqtthost ~ Set the IP address or nodename of the mqtt broker. mqttport ~ Set the port of the mqtt broker. mqttuser ~ Set the optional username for the mqtt broker. mqttpass ~ Set the optional password for the mqtt broker. config/submodule ~ You can get or set the configuration of an openHASP submodule in json format. To get the configuration, use the command config/<submodule> : config/wifi config/mqtt config/http config/mdns config/hasp config/gui config/debug config/gpio The result will be published to hasp/<nodename>/state/config . Passwords will be omitted from the result. To update the configuration simply issue the same command config/<submodule> with updated json payload. Example config/gui {\"idle2\":0} disable long idle (don't turn off the screen completely) config/debug {\"tele\":300} set the telemetry period to 300 seconds config/hasp {\"startdim\":255} to set the startup brightness to 255","title":"Commands"},{"location":"commands/#issuing-commands","text":"Commands can be issued via the Serial commandline, telnet commandline or MQTT. For MQTT, use the hasp/<nodename>/command topic with payload <keyword> <parameter(s)>","title":"Issuing commands"},{"location":"commands/#batch-processinng","text":"Commands can be processed in batch one after another from .cmd script files located in the flash storage of the plate. General rules when creating .cmd batch scripts: can contain any command empty lines are ignored # or // can be used for comments space or tab in front of a command is ignored lines starting with { are processed as jsonl payloads lines starting with [ are processed as json payloads other lines are processed as <command> <payload> CR , LF or CRLF line endings allowed UTF8 encoding is required for special characters To start a batch script, use run command.","title":"Batch processinng"},{"location":"commands/#system-scripts","text":"If any of the following scripts is present on the filesystem, it will be run automatically according to the rules below: /online.cmd will be executed after connection to the network was successfull /offline.cmd will be executed after connection to the WiFi is lost This makes it possible to disable or hide buttons, load a special offline page, etc. See example .","title":"System scripts"},{"location":"commands/#global-commands","text":"","title":"Global commands"},{"location":"commands/#run","text":"accepted parameters: name of a .cmd or .jsonl file present on the flash filesystem of the plate. Filename must be preceeded by the / character Run a batch script or load a jsonl page. Example run /script.cmd run /pages_party_mode.jsonl","title":"run"},{"location":"commands/#jsonl","text":"accepted parameters: one or more json formatted lines Create new objects or update the properties of an existing object. When updating an existing object the obj property is not required and will be ignored. Each line in the jsonl payload defines one object and has to be in the json format. If the payload exceeds the MQTT buffer of 2 kB it will be cut off to fit, don't send too many lines in a single payload, you can always sends multiple jsonl commands. Example 1 jso nl { \"obj\" : \"btn\" , \"id\" : 14 , \"x\" : 120 , \"y\" : 1 , \"w\" : 30 , \"h\" : 40 , \"text_font\" : \"2\" , \"text\" : \"Test\" , \"text_color\" : \"gray\" , \"bg_opa\" : 0 , \"border_width\" : 0 } For more details see Pages and Objects .","title":"jsonl"},{"location":"commands/#json","text":"accepted parameters: json array of strings Use the json command to send multiple commands as an array of strings in one payload. Example 1 jso n [ 'page 3 ' , 'backligh t { \"state\" : \"OFF\" , \"brightness\" : 100 } ' , 'idle o ff ' ] This command will change to page 3, turn the backlight on at ~40% brightness and reset the idle timer.","title":"json"},{"location":"commands/#page","text":"accepted parameters: [1-12] , prev , next or back Switches the display to show the objects from a different page and return the page number in state/page . Calling the page command without a parameter will return the value of the current page in state/page .","title":"page"},{"location":"commands/#clearpage","text":"accepted parameters: [0-12] or all Deletes all objects on a given page. If no page number is specified, it clears the current page. Use clearpage all to clear all objects on all pages. To delete individual objects, you can issue the pXbY.delete command.","title":"clearpage"},{"location":"commands/#backlight","text":"accepted json keys: state: on / off , true / false , 0 / 1 , yes / no brightness: 1..255 Example backlight {\"state\":\"on\",\"brightness\":128} sets the display to half the brightness. Instead of a json payload, you can use a simple payload. To change the state, use either on / off , true / false , 0 , yes / no . A simple integer payload of 1..255 will adjust the brightness. Example backlight off backlight 200 sets the display brightness to ~80%.","title":"backlight "},{"location":"commands/#moodlight","text":"accepted json keys: state: on / off , true / false , 0 / 1 , yes / no brightness: 1..255 color or r, g, b: 0..255 An RGB moodlight can be controlled by configuring 3 GPIO pins as type Mood Red , Mood Green and Mood blue . These leds can then be controlled together using the moodlight command. Example 1 2 3 4 moodligh t { \"state\" : \"off\" , \"color\" : \"green\" } moodligh t { \"state\" : true , \"color\" : \"#ff00e7\" } moodligh t { \"color\" : 12345 } moodligh t { \"state\" : \"on\" , \"r\" : 255 , \"g\" : 0 , \"b\" : 255 } The state key accepts boolean values to turn the moodlight on or off The brightness key can be set between 1 and 255 to dim the moodlight The color key accepts color values to set the RGB channels at once Individual r , g and b keys can also be used to set each channel seperately Calling the moodlight command without parameters (or sending an empty payload to the hasp/<nodename>/command/moodlight topic) returns the current state: Example 1 \"state/moodlight\" { \"state\" : \"ON\" , \"brightness\" : 255 , \"color\" : \"#ff0000\" , \"r\" : 255 , \"g\" : 0 , \"b\" : 0 } The color is returned as a hexadecimal value and as individual RGB channels.","title":"moodlight"},{"location":"commands/#idle","text":"accepted parameters: off Clears the idle state of the device and publishes a state/idle = OFF status message. It resets the idle counter as if a touch event occurred on the device. This is helpful e.g. when you want to wake up the display when an external event has occurred, like a PIR motion sensor. Calling the idle command without a parameter will return the current idle state short , long or off in the state/idle topic.","title":"idle "},{"location":"commands/#outputx","text":"where [x] is number of the gpio pin (0-39) accepted json keys: state: on / off , true / false , 0 / 1 , yes / no val: 0..255 Changes the state GPIO pin to on or off . If the pin is configured as a LED or Serial Dimmer then the val key will control the brightness. Note If the GPIO is assigned to a group then objects and other GPIOs that share the same groupid will change state accordingly.","title":"output[x] "},{"location":"commands/#inputx","text":"where [x] is number of the gpio pin (0-39) read-only Returns a JSON object containing the current state of the input, either on or off Example 1 i n pu t 4 => { \"state\" : \"on\" }","title":"input[x] "},{"location":"commands/#system-commands","text":"","title":"System Commands"},{"location":"commands/#calibrate","text":"Start on-screen touch calibration. You need to issue a soft reboot command to save the new calibration settings. If you do a hard reset of the device, the calibration settings will be lost.","title":"calibrate"},{"location":"commands/#screenshot","text":"Saves a picture of the current screen to the flash filesystem. You can retrieve it via http://<ip-address>/screenshot.bmp. This can be handy for bug reporting or documentation. The previous screenshot is overwritten.","title":"screenshot"},{"location":"commands/#statusupdate","text":"Reports the status of the MCU. The response will be posted to the state topic. Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \"hasp/<platename>/state/statusupdate\" => { \"node\" : \"plate35\" , \"idle\" : \"short\" , \"version\" : \"0.5.1\" , \"uptime\" : 1813 , \"ssid\" : \"network\" , \"rssi\" : -63 , \"ip\" : \"192.168.4.2\" , \"heapFree\" : 125820 , \"heapFrag\" : 35 , \"core\" : \"v3.3.5-1-g85c43024c\" , \"canUpdate\" : \"false\" , \"page\" : 1 , \"numPages\" : 12 , \"tftDriver\" : \"ST7789\" , \"tftWidth\" : 240 , \"tftHeight\" : 320 }","title":"statusupdate"},{"location":"commands/#unzip","text":"Unzip a file-packgage on the plate. You can upload uncompressed ZIP files to the flash space of your plate and unzip them locally. This is useful for cases when you need a lot of small files to be uploaded - putting them in an uncompressed zip allows to upload them in one go, and then extract them with a single command: Example 1 unzip /openhasp-weathericons-day.zip","title":"unzip"},{"location":"commands/#service","text":"Start or stop some of the processes running on the plate. Currently supported parameters: start stop Currently supported services: http (web interface) telnet (remote console) console (serial console) Example To stop the web interface of the plate, send to topic hasp/<your_plate>/command/service the string stop http . To start the web interface of the plate, send to topic hasp/<your_plate>/command/service the string start http . Tip Once these services are stopped, connection is lost/not possible to the plate through them. They can be started at any time by sending service start commands in through MQTT. It's possible to create self-built firmware binaries which have services stopped by default at boot, using customization .","title":"service"},{"location":"commands/#reboot-or-restart","text":"Saves any changes in the configuration file and reboots the device.","title":"reboot or restart"},{"location":"commands/#update","text":"accepted parameters: [url] Update the firmware from the url provided. Reboots when update was successful.","title":"update"},{"location":"commands/#factoryreset","text":"Clear the filesystem and EEPROM and reboot the device in its initial state. Warning There is no confirmation prompt nor an undo function!","title":"factoryreset"},{"location":"commands/#configuration-settings","text":"","title":"Configuration Settings"},{"location":"commands/#wi-fi","text":"","title":"Wi-FI"},{"location":"commands/#mqtt","text":"","title":"MQTT"},{"location":"commands/#configsubmodule","text":"You can get or set the configuration of an openHASP submodule in json format. To get the configuration, use the command config/<submodule> : config/wifi config/mqtt config/http config/mdns config/hasp config/gui config/debug config/gpio The result will be published to hasp/<nodename>/state/config . Passwords will be omitted from the result. To update the configuration simply issue the same command config/<submodule> with updated json payload. Example config/gui {\"idle2\":0} disable long idle (don't turn off the screen completely) config/debug {\"tele\":300} set the telemetry period to 300 seconds config/hasp {\"startdim\":255} to set the startup brightness to 255","title":"config/submodule"},{"location":"commands.nl/","text":"Commando's ~ Commands are not related to an object on the screen but can get or set global properties or invoke system commands on the device. Commands can be issued via the Serial commandline, telnet commandline or MQTT. For MQTT, use the hasp/<nodename>/command topic with payload <keyword> <parameter(s)> jsonl ~ accepted parameters: one or more json formatted lines Create new objects or update the properties of an existing object. When updating an existing object the obj property is not required and will be ignored. Each line in the jsonl payload defines one object and has to be in the json format. If the payload exceeds the MQTT buffer of 2 kB it will be cut off to fit, don't send too many lines in a single payload, you can always sends multiple jsonl commands. Example: 1 jso nl { \"obj\" : \"btn\" , \"id\" : 14 , \"x\" : 120 , \"y\" : 1 , \"w\" : 30 , \"h\" : 40 , \"text_font\" : \"2\" , \"text\" : \"Test\" , \"text_color\" : \"gray\" , \"bg_opa\" : 0 , \"border_width\" : 0 } For more details see Pages and Objects json ~ accepted parameters: json array of strings Use the json command to send multiple commands as an array of strings in one payload. Example: 1 jso n [ 'page 3 ' , 'backligh t { \"state\" : \"OFF\" , \"brightness\" : 100 } ' , 'idle o ff ' ] This command will change to page 3, turn the backlight on at ~40% brightness and reset the idle timer. page ~ accepted parameters: [1-12] , prev , next or back Switches the display to show the objects from a different page and return the page number in state/page . Calling the page command without a parameter will return the value of the current page in state/page . clearpage ~ accepted parameters: [0-12] or all Deletes all objects on a given page. If no page number is specified, it clears the current page. Use clearpage all to clear all objects on all pages. To delete individual objects, you can issue the pXbY.delete command. dim ~ Deprecated, use backlight instead light ~ Deprecated, use backlight instead backlight ~ accepted json keys: state: on / off , true / false , 0 / 1 , yes / no brightness: 1..255 Example backlight {\"state\":\"on\",\"brightness\":128} sets the display to half the brightness. Instead of a json payload, you can use a simple payload. To change the state, use either on / off , true / false , 0 , yes / no . A simple integer payload of 1..255 will adjust the brightness. Example backlight off backlight 200 sets the display brightness to ~80%. moodlight ~ accepted json keys: state: on / off , true / false , 0 / 1 , yes / no brightness: 1..255 color or r, g, b: 0..255 An RGB moodlight can be controlled by configuring 3 GPIO pins as type Mood Red , Mood Green and Mood blue . These leds can then be controlled together using the moodlight command. 1 2 3 4 moodligh t { \"state\" : \"off\" , \"color\" : \"green\" } moodligh t { \"state\" : true , \"color\" : \"#ff00e7\" } moodligh t { \"color\" : 12345 } moodligh t { \"state\" : \"on\" , \"r\" : 255 , \"g\" : 0 , \"b\" : 255 } The state key accepts boolean values to turn the moodlight on or off The brightness key can be set between 1 and 255 to dim the moodlight The color key accepts color values to set the RGB channels at once Individual r , g and b keys can also be used to set each channel seperately Calling the moodlight command without parameters (or sending an empty payload to the hasp/<nodename>/command/moodlight topic) returns the current state: 1 \"state/moodlight\" { \"state\" : \"ON\" , \"brightness\" : 255 , \"color\" : \"#ff0000\" , \"r\" : 255 , \"g\" : 0 , \"b\" : 0 } The color is returned as a hexadecimal value and as individual RGB channels. idle ~ accepted parameters: off Clears the idle state of the device and publishes a state/idle = OFF status message. It resets the idle counter as if a touch event occurred on the device. This is helpful e.g. when you want to wake up the display when an external event has occurred, like a PIR motion sensor. Calling the idle command without a parameter will return the current idle state short , long or off in the state/idle topic. wakeup ~ Deprecated, use the idle off command instead output[x] ~ where [x] is number of the gpio pin (0-39) accepted parameters: 1 or 0 , on or off , true or false Sets all GPIO's assigned to the group number <x> in Configuration -> GPIO Configuration to \"0\" or \"1\". GUI objects that are assigned to the same group using groupid during object creation will change state accordingly. System Commands ~ calibrate Start on-screen touch calibration. You need to issue a soft reboot command to save the new calibration settings. If you do a hard reset of the device, the calibration settings will be lost. screenshot Saves a picture of the current screen to the flash filesystem. You can retrieve it via http://<ip-address>/screenshot.bmp. This can be handy for bug reporting or documentation. The previous screenshot is overwritten. statusupdate Reports the status of the MCU. The response will be posted to the state topic. For example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \"hasp/<platename>/state/statusupdate\" => { \"node\" : \"plate35\" , \"idle\" : \"short\" , \"version\" : \"0.5.1\" , \"uptime\" : 1813 , \"ssid\" : \"network\" , \"rssi\" : -63 , \"ip\" : \"192.168.4.2\" , \"heapFree\" : 125820 , \"heapFrag\" : 35 , \"core\" : \"v3.3.5-1-g85c43024c\" , \"canUpdate\" : \"false\" , \"page\" : 1 , \"numPages\" : 12 , \"tftDriver\" : \"ST7789\" , \"tftWidth\" : 240 , \"tftHeight\" : 320 } reboot or restart Saves any changes in the configuration file and reboots the device. !!! danger \" update accepted parameters: [url] Update the firmware from the url provided. Reboots when update was successful. factoryreset Clear the filesystem and EEPROM and reboot the device in its initial state. Warning There is no confirmation prompt nor an undo function! Configuration Settings ~ Wi-FI ~ ssid Set network name of the access point to connect to. pass Set the optional password for the access point to connect to. MQTT ~ nodename Set the nodename of the device and mqtt topic for the node to hasp/<nodename>/ mqtthost Set the IP address or nodename of the mqtt broker. mqttport Set the port of the mqtt broker. mqttuser Set the optional username for the mqtt broker. mqttpass Set the optional password for the mqtt broker. config/submodule ~ You can get or set the configuration of an openHASP submodule in json format. To get the configuration, use the command config/<submodule> . The result will be published to hasp/<nodename>/state/config . Passwords will be omitted from the result. 1 2 3 4 5 6 7 8 co nf ig/wi f i co nf ig/mq tt co nf ig/h tt p co nf ig/md ns co nf ig/hasp { \"startdim\" : 255 } co nf ig/gui co nf ig/debug { \"tele\" : 300 } co nf ig/gpio To update the configuration simply issue the same command config/<submodule> with updated json payload.","title":"Commando's"},{"location":"commands.nl/#commandos","text":"Commands are not related to an object on the screen but can get or set global properties or invoke system commands on the device. Commands can be issued via the Serial commandline, telnet commandline or MQTT. For MQTT, use the hasp/<nodename>/command topic with payload <keyword> <parameter(s)>","title":"Commando's"},{"location":"commands.nl/#jsonl","text":"accepted parameters: one or more json formatted lines Create new objects or update the properties of an existing object. When updating an existing object the obj property is not required and will be ignored. Each line in the jsonl payload defines one object and has to be in the json format. If the payload exceeds the MQTT buffer of 2 kB it will be cut off to fit, don't send too many lines in a single payload, you can always sends multiple jsonl commands. Example: 1 jso nl { \"obj\" : \"btn\" , \"id\" : 14 , \"x\" : 120 , \"y\" : 1 , \"w\" : 30 , \"h\" : 40 , \"text_font\" : \"2\" , \"text\" : \"Test\" , \"text_color\" : \"gray\" , \"bg_opa\" : 0 , \"border_width\" : 0 } For more details see Pages and Objects","title":"jsonl"},{"location":"commands.nl/#json","text":"accepted parameters: json array of strings Use the json command to send multiple commands as an array of strings in one payload. Example: 1 jso n [ 'page 3 ' , 'backligh t { \"state\" : \"OFF\" , \"brightness\" : 100 } ' , 'idle o ff ' ] This command will change to page 3, turn the backlight on at ~40% brightness and reset the idle timer.","title":"json"},{"location":"commands.nl/#page","text":"accepted parameters: [1-12] , prev , next or back Switches the display to show the objects from a different page and return the page number in state/page . Calling the page command without a parameter will return the value of the current page in state/page .","title":"page"},{"location":"commands.nl/#clearpage","text":"accepted parameters: [0-12] or all Deletes all objects on a given page. If no page number is specified, it clears the current page. Use clearpage all to clear all objects on all pages. To delete individual objects, you can issue the pXbY.delete command.","title":"clearpage"},{"location":"commands.nl/#dim","text":"Deprecated, use backlight instead","title":"dim"},{"location":"commands.nl/#light","text":"Deprecated, use backlight instead","title":"light"},{"location":"commands.nl/#backlight","text":"accepted json keys: state: on / off , true / false , 0 / 1 , yes / no brightness: 1..255 Example backlight {\"state\":\"on\",\"brightness\":128} sets the display to half the brightness. Instead of a json payload, you can use a simple payload. To change the state, use either on / off , true / false , 0 , yes / no . A simple integer payload of 1..255 will adjust the brightness. Example backlight off backlight 200 sets the display brightness to ~80%.","title":"backlight"},{"location":"commands.nl/#moodlight","text":"accepted json keys: state: on / off , true / false , 0 / 1 , yes / no brightness: 1..255 color or r, g, b: 0..255 An RGB moodlight can be controlled by configuring 3 GPIO pins as type Mood Red , Mood Green and Mood blue . These leds can then be controlled together using the moodlight command. 1 2 3 4 moodligh t { \"state\" : \"off\" , \"color\" : \"green\" } moodligh t { \"state\" : true , \"color\" : \"#ff00e7\" } moodligh t { \"color\" : 12345 } moodligh t { \"state\" : \"on\" , \"r\" : 255 , \"g\" : 0 , \"b\" : 255 } The state key accepts boolean values to turn the moodlight on or off The brightness key can be set between 1 and 255 to dim the moodlight The color key accepts color values to set the RGB channels at once Individual r , g and b keys can also be used to set each channel seperately Calling the moodlight command without parameters (or sending an empty payload to the hasp/<nodename>/command/moodlight topic) returns the current state: 1 \"state/moodlight\" { \"state\" : \"ON\" , \"brightness\" : 255 , \"color\" : \"#ff0000\" , \"r\" : 255 , \"g\" : 0 , \"b\" : 0 } The color is returned as a hexadecimal value and as individual RGB channels.","title":"moodlight"},{"location":"commands.nl/#idle","text":"accepted parameters: off Clears the idle state of the device and publishes a state/idle = OFF status message. It resets the idle counter as if a touch event occurred on the device. This is helpful e.g. when you want to wake up the display when an external event has occurred, like a PIR motion sensor. Calling the idle command without a parameter will return the current idle state short , long or off in the state/idle topic.","title":"idle"},{"location":"commands.nl/#wakeup","text":"Deprecated, use the idle off command instead","title":"wakeup"},{"location":"commands.nl/#outputx","text":"where [x] is number of the gpio pin (0-39) accepted parameters: 1 or 0 , on or off , true or false Sets all GPIO's assigned to the group number <x> in Configuration -> GPIO Configuration to \"0\" or \"1\". GUI objects that are assigned to the same group using groupid during object creation will change state accordingly.","title":"output[x]"},{"location":"commands.nl/#system-commands","text":"calibrate Start on-screen touch calibration. You need to issue a soft reboot command to save the new calibration settings. If you do a hard reset of the device, the calibration settings will be lost. screenshot Saves a picture of the current screen to the flash filesystem. You can retrieve it via http://<ip-address>/screenshot.bmp. This can be handy for bug reporting or documentation. The previous screenshot is overwritten. statusupdate Reports the status of the MCU. The response will be posted to the state topic. For example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \"hasp/<platename>/state/statusupdate\" => { \"node\" : \"plate35\" , \"idle\" : \"short\" , \"version\" : \"0.5.1\" , \"uptime\" : 1813 , \"ssid\" : \"network\" , \"rssi\" : -63 , \"ip\" : \"192.168.4.2\" , \"heapFree\" : 125820 , \"heapFrag\" : 35 , \"core\" : \"v3.3.5-1-g85c43024c\" , \"canUpdate\" : \"false\" , \"page\" : 1 , \"numPages\" : 12 , \"tftDriver\" : \"ST7789\" , \"tftWidth\" : 240 , \"tftHeight\" : 320 } reboot or restart Saves any changes in the configuration file and reboots the device. !!! danger \" update accepted parameters: [url] Update the firmware from the url provided. Reboots when update was successful. factoryreset Clear the filesystem and EEPROM and reboot the device in its initial state. Warning There is no confirmation prompt nor an undo function!","title":"System Commands"},{"location":"commands.nl/#configuration-settings","text":"","title":"Configuration Settings"},{"location":"commands.nl/#wi-fi","text":"ssid Set network name of the access point to connect to. pass Set the optional password for the access point to connect to.","title":"Wi-FI"},{"location":"commands.nl/#mqtt","text":"nodename Set the nodename of the device and mqtt topic for the node to hasp/<nodename>/ mqtthost Set the IP address or nodename of the mqtt broker. mqttport Set the port of the mqtt broker. mqttuser Set the optional username for the mqtt broker. mqttpass Set the optional password for the mqtt broker.","title":"MQTT"},{"location":"commands.nl/#configsubmodule","text":"You can get or set the configuration of an openHASP submodule in json format. To get the configuration, use the command config/<submodule> . The result will be published to hasp/<nodename>/state/config . Passwords will be omitted from the result. 1 2 3 4 5 6 7 8 co nf ig/wi f i co nf ig/mq tt co nf ig/h tt p co nf ig/md ns co nf ig/hasp { \"startdim\" : 255 } co nf ig/gui co nf ig/debug { \"tele\" : 300 } co nf ig/gpio To update the configuration simply issue the same command config/<submodule> with updated json payload.","title":"config/submodule"},{"location":"faq/","text":"Frequently Asked Questions The font looks tiny ~ On ESP8266, the out-of-the box font is Unscii 8pt because this font takes up very little space in memory and on flash. This default font is just intended to get the device setup, then you can Upload your own .zi font. On ESP32, the default font is Roboto Condensed 12. How to use Fontawesome icons? ~ Upload another .zi file named fontawesome xx .zi of the same point size as the normal text .zi font. e.g. If your custom font is arial24.zi\u00b4, you should also add a fontawesome24.zi` file. You can download fontawesome.zip from the HMI Font Pack repository. Is there a file browser built-in? ~ Since v0.6.0 there is a native file browser included on ESP32. You can use it to upload, download and edit files on the flash partition of the ESP32. Using that webpage, you can right-click and delete files: Click on the File Editor button on the Main Webpage: How to delete files from flash? ~ Yes: See: Is there a file browser built-in?","title":"FAQ"},{"location":"faq/#the-font-looks-tiny","text":"On ESP8266, the out-of-the box font is Unscii 8pt because this font takes up very little space in memory and on flash. This default font is just intended to get the device setup, then you can Upload your own .zi font. On ESP32, the default font is Roboto Condensed 12.","title":"The font looks tiny"},{"location":"faq/#how-to-use-fontawesome-icons","text":"Upload another .zi file named fontawesome xx .zi of the same point size as the normal text .zi font. e.g. If your custom font is arial24.zi\u00b4, you should also add a fontawesome24.zi` file. You can download fontawesome.zip from the HMI Font Pack repository.","title":"How to use Fontawesome icons?"},{"location":"faq/#is-there-a-file-browser-built-in","text":"Since v0.6.0 there is a native file browser included on ESP32. You can use it to upload, download and edit files on the flash partition of the ESP32. Using that webpage, you can right-click and delete files: Click on the File Editor button on the Main Webpage:","title":"Is there a file browser built-in?"},{"location":"faq/#how-to-delete-files-from-flash","text":"Yes: See: Is there a file browser built-in?","title":"How to delete files from flash?"},{"location":"gallery/","text":"","title":"Gallery"},{"location":"getting-started/","text":"Getting Started openHASP supports the ESP32, ESP8266 and STM32F4 families of microcontrollers. It needs a compatible micro-controller with drivers supporting the attached display, touch controller, storage and network. Below is a list of recommended development boards and a TFT touchscreen to get you up-and-running in no time. Recommended Boards ~ table th:first-of-type { width: 12%; } table th:nth-of-type(2) { width: 22%; } table th:nth-of-type(3) { width: 22%; } table th:nth-of-type(4) { width: 22%; } table th:last-of-type { width: 22%; } Basic Standard Capacity Dev. Board* D1 mini ESP32 TTGO T7 v1.5 Mini32 Lolin D32 Pro V2.0 MCU ESP32-WROOM ESP32-WROVER ESP32-WROVER CPU Freq. 240Mhz 240Mhz 240Mhz Ram 520Kb 520Kb 520Kb PSRam no yes yes Flash 4MB 4MB or 16MB 16MB Display ILI9341 SPI ILI9341 SPI ILI9341 SPI Touch XPT2046 SPI XPT2046 SPI XPT2046 SPI Network Wi-Fi Wi-Fi Wi-Fi Firmware Download Download Download Note Due to the large number of possible hardware options a selection of 3 popular ESP development boards has been made for the precompiled binaries. For new projects we recommend ESP32-WROVER boards with PSram and 8MB of flash. Tip Advanced users can build and compile custom configurations using PlatformIO locally or online with Gitpod , however this is not currently supported. Recommended Display ~ Lolin TFT 2.4\" ~ ILI9341 SPI touchscreens with backlight dimming via PWM are quite cheap to get. An ILI9341 TFT display with SPI is required when using a pre-built binary. The touch controller needs to be the XPT2046 Resistive Touch driver. The Lolin TFT 2.4\" is plug-and-play with the 3 recommended ESP development boards. If you have another ESP or MCU, you can still use this display using jumper cables. You can also solder a row of headers at the bottom of the display to plug it into a breadboard. Therefor the Lolin TFT 2.4 Touch Shield is used as the development display of choice. Backlight Control ~ To use PWM dimming on the Lolin TFT 2.4\" you must connect the TFT-LED pin to either D1, D2 or D4. D1 is recommended for backlight control and configured by default. Do not use D3 for backlight control because it is already in use for touch! It is not recommended to use D4 for backlight control because it is already in use for PSram on the ESP32-Wrover. The D1-mini has D4 connected to on-board LED and boot fails if pulled LOW Compatible ESP boards ~ The Lolin TFT 2.4\" header is plug-and-play compatible with these development boards, no need to use any jumper cables: ESP32: Wemos D1 Mini ESP32 ( only solder the inner row of pin headers) TTGO T7 V1.5 MINI32 ESP32 ( only solder the inner row of pin headers) LOLIN D32 Pro V2.0.0 using an additional TFT cable ESP8266: Wemos D1 Mini ESP8266 Lolin D1 Mini Pro ESP8266 V2.0.0 Note If you have a Lolin TFT 2.4\" Display and a compatible ESP development board, you have all the hardware that is needed. In that case you can skip ahead to the Firmware Installation . Alternative SPI Display ~ Any common ILI9341 320x240 4-wire SPI touchscreen with XPT2046 Resistive Touch driver can be used, like: 2.4\" SKU: MSP2402 2.8\" SKU: MSP2807 3.2\" SKU: MSP3218 You will need to connect the GPIO pins using jumper wires. Ready-made devices ~ Some manufacturers offer IoT devices which are ready to go with openHASP: ESP32-Touchdown FreeTouchDeck Lanbon L8","title":"Getting started"},{"location":"getting-started/#recommended-boards","text":"table th:first-of-type { width: 12%; } table th:nth-of-type(2) { width: 22%; } table th:nth-of-type(3) { width: 22%; } table th:nth-of-type(4) { width: 22%; } table th:last-of-type { width: 22%; } Basic Standard Capacity Dev. Board* D1 mini ESP32 TTGO T7 v1.5 Mini32 Lolin D32 Pro V2.0 MCU ESP32-WROOM ESP32-WROVER ESP32-WROVER CPU Freq. 240Mhz 240Mhz 240Mhz Ram 520Kb 520Kb 520Kb PSRam no yes yes Flash 4MB 4MB or 16MB 16MB Display ILI9341 SPI ILI9341 SPI ILI9341 SPI Touch XPT2046 SPI XPT2046 SPI XPT2046 SPI Network Wi-Fi Wi-Fi Wi-Fi Firmware Download Download Download Note Due to the large number of possible hardware options a selection of 3 popular ESP development boards has been made for the precompiled binaries. For new projects we recommend ESP32-WROVER boards with PSram and 8MB of flash. Tip Advanced users can build and compile custom configurations using PlatformIO locally or online with Gitpod , however this is not currently supported.","title":"Recommended Boards"},{"location":"getting-started/#recommended-display","text":"","title":"Recommended Display"},{"location":"getting-started/#lolin-tft-24","text":"ILI9341 SPI touchscreens with backlight dimming via PWM are quite cheap to get. An ILI9341 TFT display with SPI is required when using a pre-built binary. The touch controller needs to be the XPT2046 Resistive Touch driver. The Lolin TFT 2.4\" is plug-and-play with the 3 recommended ESP development boards. If you have another ESP or MCU, you can still use this display using jumper cables. You can also solder a row of headers at the bottom of the display to plug it into a breadboard. Therefor the Lolin TFT 2.4 Touch Shield is used as the development display of choice.","title":"Lolin TFT 2.4\""},{"location":"getting-started/#compatible-esp-boards","text":"The Lolin TFT 2.4\" header is plug-and-play compatible with these development boards, no need to use any jumper cables: ESP32: Wemos D1 Mini ESP32 ( only solder the inner row of pin headers) TTGO T7 V1.5 MINI32 ESP32 ( only solder the inner row of pin headers) LOLIN D32 Pro V2.0.0 using an additional TFT cable ESP8266: Wemos D1 Mini ESP8266 Lolin D1 Mini Pro ESP8266 V2.0.0 Note If you have a Lolin TFT 2.4\" Display and a compatible ESP development board, you have all the hardware that is needed. In that case you can skip ahead to the Firmware Installation .","title":"Compatible ESP boards"},{"location":"getting-started/#alternative-spi-display","text":"Any common ILI9341 320x240 4-wire SPI touchscreen with XPT2046 Resistive Touch driver can be used, like: 2.4\" SKU: MSP2402 2.8\" SKU: MSP2807 3.2\" SKU: MSP3218 You will need to connect the GPIO pins using jumper wires.","title":"Alternative SPI Display"},{"location":"getting-started/#ready-made-devices","text":"Some manufacturers offer IoT devices which are ready to go with openHASP: ESP32-Touchdown FreeTouchDeck Lanbon L8","title":"Ready-made devices"},{"location":"getting-started.nl/","text":"Starten met openHASP openHASP supports the ESP32, ESP8266 and STM32F4 families of microcontrollers. It needs a compatible micro-controller with drivers supporting the attached display, touch controller, storage and network. Below is a list of recommended development boards and a TFT touchscreen to get you up-and-running in no time. Recommended Boards ~ table th:first-of-type { width: 12%; } table th:nth-of-type(2) { width: 22%; } table th:nth-of-type(3) { width: 22%; } table th:nth-of-type(4) { width: 22%; } table th:last-of-type { width: 22%; } Minimal Basic Standard MCU ESP8266 ESP32-WROOM ESP32-WROVER CPU Freq. 80Mhz 240Mhz 240Mhz Ram 80Kb 520Kb 520Kb PSRam no no yes Minimal Flash 4MB 4MB 4MB Display ILI9341 SPI ILI9341 SPI ILI9341 SPI Touch XPT2046 SPI XPT2046 SPI XPT2046 SPI Network Wi-Fi Wi-Fi Wi-Fi Dev. Board* D1 mini ESP8266 D1 mini ESP32 TTGO T7 v1.5 Mini32 Firmware Download Download Download Due to the large number of possible hardware options a selection of 3 popular ESP development boards has been made for the precompiled binaries. For new projects we recommend ESP32-WROVER boards with PSram. The performance of the ESP8266 will be slow due to its low memory and CPU frequency. It is okay for getting started, for small project where speed is not needed or when you have one at hand. Tip Advanced users can build and compile custom configurations using PlatformIO locally or online with Gitpod , however this is not currently supported. Recommended Display ~ Lolin TFT 2.4\" ~ ILI9341 SPI touchscreens with backlight dimming via PWM are quite cheap to get. An ILI9341 TFT display with SPI is required when using a pre-built binary. The touch controller needs to be the XPT2046 Resistive Touch driver. The Lolin TFT 2.4\" is plug-and-play with the 3 recommended ESP development boards. If you have another ESP or MCU, you can still use this display using jumper cables. You can also solder a row of headers at the bottom of the display to plug it into a breadboard. Therefor the Lolin TFT 2.4 Touch Shield is used as the development display of choice. Backlight Control ~ To use PWM dimming on the Lolin TFT 2.4\" you must connect the TFT-LED pin to either D1, D2 or D4. D1 is recommended for backlight control and configured by default. Do not use D3 for backlight control because it is already in use for touch! It is not recommended to use D4 for backlight control because it is already in use for PSram on the ESP32-Wrover. The D1-mini has D4 connected to on-board LED and boot fails if pulled LOW Compatible ESP boards ~ The Lolin TFT 2.4\" header is plug-and-play compatible with these development boards, no need to use any jumper cables: ESP32: Wemos D1 Mini ESP32 ( only solder the inner row of pin headers) TTGO T7 V1.5 MINI32 ESP32 ( only solder the inner row of pin headers) LOLIN D32 Pro V2.0.0 using an additional TFT cable ESP8266: Wemos D1 Mini ESP8266 Lolin D1 Mini Pro ESP8266 V2.0.0 Note If you have a Lolin TFT 2.4\" Display and a compatible ESP development board, you have all the hardware that is needed. In that case you can skip ahead to the Firmware Installation . Alternative SPI Display ~ Any common ILI9341 320x240 4-wire SPI touchscreen with XPT2046 Resistive Touch driver can be used, like: 2.4\" SKU: MSP2402 2.8\" SKU: MSP2807 3.2\" SKU: MSP3218 You will need to connect the GPIO pins using jumper wires. Ready-made devices ~ Some manufacturers offer IoT devices which are ready to go with openHASP: FreeTouchDeck Lanbon L8 ESP32-Touchdown","title":"Getting started.nl"},{"location":"getting-started.nl/#recommended-boards","text":"table th:first-of-type { width: 12%; } table th:nth-of-type(2) { width: 22%; } table th:nth-of-type(3) { width: 22%; } table th:nth-of-type(4) { width: 22%; } table th:last-of-type { width: 22%; } Minimal Basic Standard MCU ESP8266 ESP32-WROOM ESP32-WROVER CPU Freq. 80Mhz 240Mhz 240Mhz Ram 80Kb 520Kb 520Kb PSRam no no yes Minimal Flash 4MB 4MB 4MB Display ILI9341 SPI ILI9341 SPI ILI9341 SPI Touch XPT2046 SPI XPT2046 SPI XPT2046 SPI Network Wi-Fi Wi-Fi Wi-Fi Dev. Board* D1 mini ESP8266 D1 mini ESP32 TTGO T7 v1.5 Mini32 Firmware Download Download Download Due to the large number of possible hardware options a selection of 3 popular ESP development boards has been made for the precompiled binaries. For new projects we recommend ESP32-WROVER boards with PSram. The performance of the ESP8266 will be slow due to its low memory and CPU frequency. It is okay for getting started, for small project where speed is not needed or when you have one at hand. Tip Advanced users can build and compile custom configurations using PlatformIO locally or online with Gitpod , however this is not currently supported.","title":"Recommended Boards"},{"location":"getting-started.nl/#recommended-display","text":"","title":"Recommended Display"},{"location":"getting-started.nl/#lolin-tft-24","text":"ILI9341 SPI touchscreens with backlight dimming via PWM are quite cheap to get. An ILI9341 TFT display with SPI is required when using a pre-built binary. The touch controller needs to be the XPT2046 Resistive Touch driver. The Lolin TFT 2.4\" is plug-and-play with the 3 recommended ESP development boards. If you have another ESP or MCU, you can still use this display using jumper cables. You can also solder a row of headers at the bottom of the display to plug it into a breadboard. Therefor the Lolin TFT 2.4 Touch Shield is used as the development display of choice.","title":"Lolin TFT 2.4\""},{"location":"getting-started.nl/#compatible-esp-boards","text":"The Lolin TFT 2.4\" header is plug-and-play compatible with these development boards, no need to use any jumper cables: ESP32: Wemos D1 Mini ESP32 ( only solder the inner row of pin headers) TTGO T7 V1.5 MINI32 ESP32 ( only solder the inner row of pin headers) LOLIN D32 Pro V2.0.0 using an additional TFT cable ESP8266: Wemos D1 Mini ESP8266 Lolin D1 Mini Pro ESP8266 V2.0.0 Note If you have a Lolin TFT 2.4\" Display and a compatible ESP development board, you have all the hardware that is needed. In that case you can skip ahead to the Firmware Installation .","title":"Compatible ESP boards"},{"location":"getting-started.nl/#alternative-spi-display","text":"Any common ILI9341 320x240 4-wire SPI touchscreen with XPT2046 Resistive Touch driver can be used, like: 2.4\" SKU: MSP2402 2.8\" SKU: MSP2807 3.2\" SKU: MSP3218 You will need to connect the GPIO pins using jumper wires.","title":"Alternative SPI Display"},{"location":"getting-started.nl/#ready-made-devices","text":"Some manufacturers offer IoT devices which are ready to go with openHASP: FreeTouchDeck Lanbon L8 ESP32-Touchdown","title":"Ready-made devices"},{"location":"index.nl/","text":"openHASP Control your home-automation devices from a customizable touchscreen UI connected via MQTT. openHASP is a re-implementation of the popular HASwitchPlate sketch created by aderusha. The HASPone project uses a Wemos D1 mini and requires a Nextion/TJC HMI display. This rewrite removes the Nextion/TJC requirement by using the Light and Versatile Graphics Library on the MCU to drive a commodity display. This project also adds ESP32 and STM32F4 support to take advantage of the additional hardware capabilities. Demo Screens ~ Features ~ Feature ESP8266 ESP32 STM32F4 SPI display yes yes yes Parallel display no yes yes PWM Screen dimming yes yes yes Maximum Page Count 4 12 12 Object Types / Widgets 14 15 15 Dynamic Objects yes yes yes Theme Support yes yes yes Custom .zi V5 font yes (latin1) yes (latin1) no MDI and FontAwesome Icons 1300+ 1300+ no PNG images no tbd tbd Network Wi-Fi Wi-Fi Ethernet Support ~ For support using openHASP, please join the #openHASP channel on Discord or use Discussions on Github.","title":"Index.nl"},{"location":"index.nl/#demo-screens","text":"","title":"Demo Screens"},{"location":"index.nl/#features","text":"Feature ESP8266 ESP32 STM32F4 SPI display yes yes yes Parallel display no yes yes PWM Screen dimming yes yes yes Maximum Page Count 4 12 12 Object Types / Widgets 14 15 15 Dynamic Objects yes yes yes Theme Support yes yes yes Custom .zi V5 font yes (latin1) yes (latin1) no MDI and FontAwesome Icons 1300+ 1300+ no PNG images no tbd tbd Network Wi-Fi Wi-Fi Ethernet","title":"Features"},{"location":"index.nl/#support","text":"For support using openHASP, please join the #openHASP channel on Discord or use Discussions on Github.","title":"Support"},{"location":"license/","text":"License MIT License ~ openHASP is Copyright\u00a9 2019-2021 fvanroie, netwize.be and contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Components ~ openHASP is building upon the existing work of the following open source developers: Core ~ HASwitchPlate , the original Arduino project, Copyright\u00a9 2019 Allen Derusha. HASwitchPlate is distributed under the terms of the MIT License . LVGL graphics library, Copyright\u00a9 2021 LVGL Kft LVGL is distributed under the terms of the MIT License . ArduinoJson Copyright\u00a9 2014-2021 Benoit BLANCHON MIT License . MCU ~ TFT_eSPI display library, Copyright\u00a9 2020 Bodmer ( https://github.com/Bodmer ) All rights reserved. TFT_eSPI is distributed under the terms of the FreeBSD License and includes parts from the Adafruit_GFX library , Copyright\u00a9 2012 Adafruit Industries. All rights reserved. Adafruit_GFX is distributed under the terms of the BSD License zi Font Engine Copyright\u00a9 2020 fvanroie, netwize.be MIT License . PubSubClient Copyright\u00a9 2008-2020 Nicholas O'Leary MIT License . Logging engine is based on ArduinoLog , Copyright\u00a9 2017,2018 Thijs Elenbaas, MrRobot62, rahuldeo2047, NOX73, dhylands, Josha blemasle, mfalkvidd with modifications by fvanroie, netwize.be. ArduinoLog is distributed under the terms of the MIT License . QR Code generator Copyright\u00a9 Project Nayuki MIT License . AceButton Copyright\u00a9 2018 Brian T. Park MIT License . ArduinoStreamUtils Copyright\u00a9 2019 Benoit BLANCHON MIT License . Native Application ~ paho.mqtt.c client library Copyright\u00a9 Eclipse Foundation Paho is distributed under the terms of the Eclipse Public License v2.0 Simple DirectMedia Layer library Copyright\u00a9 1997-2021 Sam Lantinga slouken@libsdl.org SDL 2.0 and newer are available under the zlib license Native Windows Application ~ mingw-w64 GCC for Windows 64 & 32 bits Copyright\u00a9 2009 - 2013 by the mingw-w64 project Mingw-w64 is free software and permissively-licensed. The details are located in the sources themselves. Assets ~ Built-in font unscii (8pt) Copyright\u00a9 viznut. A public domain bitmapped Unicode font Built-in font Roboto Consensed Copyright\u00a9 2011 Google Inc. All Rights Reserved. Ubuntu Consensed is licensed under the Apache License, Version 2.0 . Custom zi fonts and built-in fonts incorporate Font Awesome , Copyright\u00a9 2017 Dave Gandy. Font Awesome is distributed under the terms of the SIL OFL 1.1 and MIT License . The bootscreen uses the MaterialDesign Icons font, Copyright\u00a9 2014, Austin Andrews. MaterialDesign Icons font is licensed under the SIL Open Font License, Version 1.1.","title":"License"},{"location":"license/#mit-license","text":"openHASP is Copyright\u00a9 2019-2021 fvanroie, netwize.be and contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"license/#components","text":"openHASP is building upon the existing work of the following open source developers:","title":"Components"},{"location":"license/#core","text":"HASwitchPlate , the original Arduino project, Copyright\u00a9 2019 Allen Derusha. HASwitchPlate is distributed under the terms of the MIT License . LVGL graphics library, Copyright\u00a9 2021 LVGL Kft LVGL is distributed under the terms of the MIT License . ArduinoJson Copyright\u00a9 2014-2021 Benoit BLANCHON MIT License .","title":"Core"},{"location":"license/#mcu","text":"TFT_eSPI display library, Copyright\u00a9 2020 Bodmer ( https://github.com/Bodmer ) All rights reserved. TFT_eSPI is distributed under the terms of the FreeBSD License and includes parts from the Adafruit_GFX library , Copyright\u00a9 2012 Adafruit Industries. All rights reserved. Adafruit_GFX is distributed under the terms of the BSD License zi Font Engine Copyright\u00a9 2020 fvanroie, netwize.be MIT License . PubSubClient Copyright\u00a9 2008-2020 Nicholas O'Leary MIT License . Logging engine is based on ArduinoLog , Copyright\u00a9 2017,2018 Thijs Elenbaas, MrRobot62, rahuldeo2047, NOX73, dhylands, Josha blemasle, mfalkvidd with modifications by fvanroie, netwize.be. ArduinoLog is distributed under the terms of the MIT License . QR Code generator Copyright\u00a9 Project Nayuki MIT License . AceButton Copyright\u00a9 2018 Brian T. Park MIT License . ArduinoStreamUtils Copyright\u00a9 2019 Benoit BLANCHON MIT License .","title":"MCU"},{"location":"license/#native-application","text":"paho.mqtt.c client library Copyright\u00a9 Eclipse Foundation Paho is distributed under the terms of the Eclipse Public License v2.0 Simple DirectMedia Layer library Copyright\u00a9 1997-2021 Sam Lantinga slouken@libsdl.org SDL 2.0 and newer are available under the zlib license","title":"Native Application"},{"location":"license/#native-windows-application","text":"mingw-w64 GCC for Windows 64 & 32 bits Copyright\u00a9 2009 - 2013 by the mingw-w64 project Mingw-w64 is free software and permissively-licensed. The details are located in the sources themselves.","title":"Native Windows Application"},{"location":"license/#assets","text":"Built-in font unscii (8pt) Copyright\u00a9 viznut. A public domain bitmapped Unicode font Built-in font Roboto Consensed Copyright\u00a9 2011 Google Inc. All Rights Reserved. Ubuntu Consensed is licensed under the Apache License, Version 2.0 . Custom zi fonts and built-in fonts incorporate Font Awesome , Copyright\u00a9 2017 Dave Gandy. Font Awesome is distributed under the terms of the SIL OFL 1.1 and MIT License . The bootscreen uses the MaterialDesign Icons font, Copyright\u00a9 2014, Austin Andrews. MaterialDesign Icons font is licensed under the SIL Open Font License, Version 1.1.","title":"Assets"},{"location":"license.nl/","text":"Licentie MIT License ~ openHASP is Copyright\u00a9 2019-2021 fvanroie, netwize.be and contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Components ~ Core ~ openHASP is based on the existing work of the following open source developers: HASwitchPlate , the original Arduino project, Copyright\u00a9 2019 Allen Derusha. HASwitchPlate is distributed under the terms of the MIT License . LVGL graphics library, Copyright\u00a9 2016 G\u00e1bor Kiss-V\u00e1mosi and Copyright\u00a9 2020 LVGL LLC. LVGL is distributed under the terms of the MIT License . ArduinoJson Copyright\u00a9 2014-2020 Benoit BLANCHON MIT License . MCU ~ TFT_eSPI display library, Copyright\u00a9 2020 Bodmer (https://github.com/Bodmer) All rights reserved. TFT_eSPI is distributed under the terms of the FreeBSD License and includes parts from the Adafruit_GFX library , Copyright\u00a9 2012 Adafruit Industries. All rights reserved. Adafruit_GFX is distributed under the terms of the BSD License zi Font Engine Copyright\u00a9 2020 fvanroie, netwize.be MIT License . PubSubClient Copyright\u00a9 2008-2015 Nicholas O'Leary MIT License . Logging engine is based on ArduinoLog , Copyright\u00a9 2017,2018 Thijs Elenbaas, MrRobot62, rahuldeo2047, NOX73, dhylands, Josha blemasle, mfalkvidd with modifications by fvanroie, netwize.be. ArduinoLog is distributed under the terms of the MIT License . QR Code generator Copyright\u00a9 Project Nayuki MIT License . AceButton Copyright\u00a9 2018 Brian T. Park MIT License . ArduinoStreamUtils Copyright\u00a9 2019 Benoit BLANCHON MIT License . Native Application ~ paho.mqtt.c client library Copyright\u00a9 Eclipse Foundation Paho is distributed under the terms of the Eclipse Public License v2.0 Simple DirectMedia Layer library Copyright\u00a9 1997-2021 Sam Lantinga slouken@libsdl.org SDL 2.0 and newer are available under the zlib license Native Windows Application ~ mingw-w64 GCC for Windows 64 & 32 bits Copyright\u00a9 2009 - 2013 by the mingw-w64 project Mingw-w64 is free software and permissively-licensed. The details are located in the sources themselves. Assets ~ Built-in font unscii (8pt) Copyright\u00a9 viznut. A public domain bitmapped Unicode font Built-in font Roboto Consensed Copyright\u00a9 2011 Google Inc. All Rights Reserved. Ubuntu Consensed is licensed under the Apache License, Version 2.0 . Custom zi fonts and built-in fonts incorporate Font Awesome , Copyright\u00a9 2017 Dave Gandy. Font Awesome is distributed under the terms of the SIL OFL 1.1 and MIT License . The bootscreen uses the MaterialDesign Icons font, Copyright\u00a9 2014, Austin Andrews. MaterialDesign Icons font is licensed under the SIL Open Font License, Version 1.1.","title":"License.nl"},{"location":"license.nl/#mit-license","text":"openHASP is Copyright\u00a9 2019-2021 fvanroie, netwize.be and contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"license.nl/#components","text":"","title":"Components"},{"location":"license.nl/#core","text":"openHASP is based on the existing work of the following open source developers: HASwitchPlate , the original Arduino project, Copyright\u00a9 2019 Allen Derusha. HASwitchPlate is distributed under the terms of the MIT License . LVGL graphics library, Copyright\u00a9 2016 G\u00e1bor Kiss-V\u00e1mosi and Copyright\u00a9 2020 LVGL LLC. LVGL is distributed under the terms of the MIT License . ArduinoJson Copyright\u00a9 2014-2020 Benoit BLANCHON MIT License .","title":"Core"},{"location":"license.nl/#mcu","text":"TFT_eSPI display library, Copyright\u00a9 2020 Bodmer (https://github.com/Bodmer) All rights reserved. TFT_eSPI is distributed under the terms of the FreeBSD License and includes parts from the Adafruit_GFX library , Copyright\u00a9 2012 Adafruit Industries. All rights reserved. Adafruit_GFX is distributed under the terms of the BSD License zi Font Engine Copyright\u00a9 2020 fvanroie, netwize.be MIT License . PubSubClient Copyright\u00a9 2008-2015 Nicholas O'Leary MIT License . Logging engine is based on ArduinoLog , Copyright\u00a9 2017,2018 Thijs Elenbaas, MrRobot62, rahuldeo2047, NOX73, dhylands, Josha blemasle, mfalkvidd with modifications by fvanroie, netwize.be. ArduinoLog is distributed under the terms of the MIT License . QR Code generator Copyright\u00a9 Project Nayuki MIT License . AceButton Copyright\u00a9 2018 Brian T. Park MIT License . ArduinoStreamUtils Copyright\u00a9 2019 Benoit BLANCHON MIT License .","title":"MCU"},{"location":"license.nl/#native-application","text":"paho.mqtt.c client library Copyright\u00a9 Eclipse Foundation Paho is distributed under the terms of the Eclipse Public License v2.0 Simple DirectMedia Layer library Copyright\u00a9 1997-2021 Sam Lantinga slouken@libsdl.org SDL 2.0 and newer are available under the zlib license","title":"Native Application"},{"location":"license.nl/#native-windows-application","text":"mingw-w64 GCC for Windows 64 & 32 bits Copyright\u00a9 2009 - 2013 by the mingw-w64 project Mingw-w64 is free software and permissively-licensed. The details are located in the sources themselves.","title":"Native Windows Application"},{"location":"license.nl/#assets","text":"Built-in font unscii (8pt) Copyright\u00a9 viznut. A public domain bitmapped Unicode font Built-in font Roboto Consensed Copyright\u00a9 2011 Google Inc. All Rights Reserved. Ubuntu Consensed is licensed under the Apache License, Version 2.0 . Custom zi fonts and built-in fonts incorporate Font Awesome , Copyright\u00a9 2017 Dave Gandy. Font Awesome is distributed under the terms of the SIL OFL 1.1 and MIT License . The bootscreen uses the MaterialDesign Icons font, Copyright\u00a9 2014, Austin Andrews. MaterialDesign Icons font is licensed under the SIL Open Font License, Version 1.1.","title":"Assets"},{"location":"assets/users/icons/","text":"For assets usable by endusers.","title":"Icons"},{"location":"assets/videos/videos/","text":"directory for videos","title":"Videos"},{"location":"compiling/customize/","text":"Customization ~ The file include\\user_config_override-template.h lists the options you have to customize your build. Settings applied here will act as factory defaults in the firmware. Check the file for the self-explanatory options. Some of the available possibilities are: WiFi Settings MQTT Settings OTA Server Settings Syslog Settings Timezone Interface Language Web interface coloring Built-in fonts choice GPIO Templates Services startup Copy it to include\\user_config_override.h and change the settins per your needs. Uncomment -DUSE_CONFIG_OVERRIDE in platformio_override.ini to ensure that the config overrides are taken into account during the compilation process.","title":"Customization"},{"location":"compiling/customize/#customization","text":"The file include\\user_config_override-template.h lists the options you have to customize your build. Settings applied here will act as factory defaults in the firmware. Check the file for the self-explanatory options. Some of the available possibilities are: WiFi Settings MQTT Settings OTA Server Settings Syslog Settings Timezone Interface Language Web interface coloring Built-in fonts choice GPIO Templates Services startup Copy it to include\\user_config_override.h and change the settins per your needs. Uncomment -DUSE_CONFIG_OVERRIDE in platformio_override.ini to ensure that the config overrides are taken into account during the compilation process.","title":"Customization"},{"location":"compiling/gitpod/","text":"Compiling online with Gitpod ~ Even though openHASP is available in several pre-compiled firmware variants, sometimes the ready-to-flash binaries aren't enough. If you need to customize some features, or simply change some parameters, then you need to compile a firmware binary yourself. If you don't want to install an IDE (Integrated Development Environment) like PlatformIO or ATOM on your computer, compiling your own firmware is a breeze using Gitpod . Gitpod is a web browser based online IDE. All you need to use it is to link your GitHub account (or make a new one here ). Gitpod will take care of all the necessary software package dependencies for you. Load openHASP project in Gitpod ~ Click on one of the links below, and that will automatically load Gitpod with openHASP prepared for creating your custom build: Release (for example 0.6.1): https://gitpod.io#https://github.com/HASwitchPlate/openHASP/tree/0.6.1 Development ( main branch): https://gitpod.io#https://github.com/HASwitchPlate/openHASP After Gitpod loads the project, you will be greeted by the main window. Choose the version you need ~ A copy of platformio_override-template.ini to platformio_override.ini will be readily prepared for you. Click platformio_override.ini to open it, and to select your firmware flavour for your hardware uncomment in the extra_configs section the platform of your hadware, for example for ESP32: 1 2 3 4 5 6 7 [platformio] extra_configs = ; Uncomment or edit the lines to show more User Setups in the PIO sidebar ; user_setups/darwin_sdl/*.ini user_setups/esp32/*.ini ; user_setups/esp8266/*.ini ; user_setups/linux_sdl/*.ini If you use customization , remove the comment from the line -DUSE_CONFIG_OVERRIDE and make sure you have your own user_config_override.h in place: (please consider before saving your wifi and mqtt credentials to an online cloud) 1 2 3 4 5 [override] ; -- Hasp config options -------------------------------------- build_flags = ; -- Uncomment the next line to use the file include/user_config_override.h settings -DUSE_CONFIG_OVERRIDE And finally select your supported hardware from the extra_default_envs section by uncommenting the corresponding line. For example to build firmware for Lanbon L8, you should remove that comment only: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 extra_default_envs = ; Comment unneeded environments or create extra ; arduitouch-esp32_ili9341 ; d1-mini-esp32_ili9341 ; d1-mini-esp8266_ili9341 ; d132-unoshield ; esp12e-st7735 ; esp32dev-mrb3511 ; esp32dev-ili9488 lanbon_l8 ; lolin-d32-pro_ili9341 ; my_custom_build ; nodemcu32s-raspi ; wt32-sc01 ; ttgo_esp32_poe-ili9341 Save the file by pressing Ctrl + S or selecting Save from the top-left menu. Note You can of course uncomment multiple lines, the system will make builds for each. Note that these environments rely on the platforms above so double-check that your hardware has the correct platform enabled in the extra_configs section! Warning If you build from a development branch, you may not get the expected results, as it may contain undocumented or buggy features. Also, most likely a development branch has verbose logging enabled by default which adversely affects performance (for example setting HASP_LOG_LEVEL back to LOG_LEVEL_TRACE may bring speed to normal, otherwise the plate may become laggy). Build the firmware ~ To generate your customized firmware build, type platformio run in the command line area at the bottom, and press Enter key. Download the build ~ After the build successfully finishes, you will be able to find the downloadable binaries on the left panel, in the build_output\\firmware folder.","title":"Compiling online with Gitpod"},{"location":"compiling/gitpod/#compiling-online-with-gitpod","text":"Even though openHASP is available in several pre-compiled firmware variants, sometimes the ready-to-flash binaries aren't enough. If you need to customize some features, or simply change some parameters, then you need to compile a firmware binary yourself. If you don't want to install an IDE (Integrated Development Environment) like PlatformIO or ATOM on your computer, compiling your own firmware is a breeze using Gitpod . Gitpod is a web browser based online IDE. All you need to use it is to link your GitHub account (or make a new one here ). Gitpod will take care of all the necessary software package dependencies for you.","title":"Compiling online with Gitpod"},{"location":"compiling/gitpod/#load-openhasp-project-in-gitpod","text":"Click on one of the links below, and that will automatically load Gitpod with openHASP prepared for creating your custom build: Release (for example 0.6.1): https://gitpod.io#https://github.com/HASwitchPlate/openHASP/tree/0.6.1 Development ( main branch): https://gitpod.io#https://github.com/HASwitchPlate/openHASP After Gitpod loads the project, you will be greeted by the main window.","title":"Load openHASP project in Gitpod"},{"location":"compiling/gitpod/#choose-the-version-you-need","text":"A copy of platformio_override-template.ini to platformio_override.ini will be readily prepared for you. Click platformio_override.ini to open it, and to select your firmware flavour for your hardware uncomment in the extra_configs section the platform of your hadware, for example for ESP32: 1 2 3 4 5 6 7 [platformio] extra_configs = ; Uncomment or edit the lines to show more User Setups in the PIO sidebar ; user_setups/darwin_sdl/*.ini user_setups/esp32/*.ini ; user_setups/esp8266/*.ini ; user_setups/linux_sdl/*.ini If you use customization , remove the comment from the line -DUSE_CONFIG_OVERRIDE and make sure you have your own user_config_override.h in place: (please consider before saving your wifi and mqtt credentials to an online cloud) 1 2 3 4 5 [override] ; -- Hasp config options -------------------------------------- build_flags = ; -- Uncomment the next line to use the file include/user_config_override.h settings -DUSE_CONFIG_OVERRIDE And finally select your supported hardware from the extra_default_envs section by uncommenting the corresponding line. For example to build firmware for Lanbon L8, you should remove that comment only: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 extra_default_envs = ; Comment unneeded environments or create extra ; arduitouch-esp32_ili9341 ; d1-mini-esp32_ili9341 ; d1-mini-esp8266_ili9341 ; d132-unoshield ; esp12e-st7735 ; esp32dev-mrb3511 ; esp32dev-ili9488 lanbon_l8 ; lolin-d32-pro_ili9341 ; my_custom_build ; nodemcu32s-raspi ; wt32-sc01 ; ttgo_esp32_poe-ili9341 Save the file by pressing Ctrl + S or selecting Save from the top-left menu. Note You can of course uncomment multiple lines, the system will make builds for each. Note that these environments rely on the platforms above so double-check that your hardware has the correct platform enabled in the extra_configs section! Warning If you build from a development branch, you may not get the expected results, as it may contain undocumented or buggy features. Also, most likely a development branch has verbose logging enabled by default which adversely affects performance (for example setting HASP_LOG_LEVEL back to LOG_LEVEL_TRACE may bring speed to normal, otherwise the plate may become laggy).","title":"Choose the version you need"},{"location":"compiling/gitpod/#build-the-firmware","text":"To generate your customized firmware build, type platformio run in the command line area at the bottom, and press Enter key.","title":"Build the firmware"},{"location":"compiling/gitpod/#download-the-build","text":"After the build successfully finishes, you will be able to find the downloadable binaries on the left panel, in the build_output\\firmware folder.","title":"Download the build"},{"location":"compiling/local/","text":"Compiling locally ~ Even though openHASP is available in several pre-compiled firmware variants, sometimes the ready-to-flash binaries aren't enough. If you need to customize some features, or simply change some parameters, then you need to compile a firmware binary yourself. The guide below will describe how to make your own build from source on your local PC. Install Visual Studio Code ~ on Linux on MacOS on Windows Additional packages on Linux: 1 2 sudo apt update sudo apt install git python3-venv Clone openHASP ~ Make sure to add the --recursive parameter when cloning the project from GitHub. Otherwise git will not download the required submodules in the /lib subdirectory. To clone the current development version ( main branch): 1 git clone --recursive https://github.com/HASwitchPlate/openHASP If you already cloned openHASP without the submodules, you can fetch the submodules seperately using: 1 git submodule update --init --recursive To switch to a different branch (for example 0.6.1 release) use: 1 2 3 4 git clone --recursive https://github.com/HASwitchPlate/openHASP cd openHASP git checkout 0 .6.1 git submodule update --init --recursive Open in PlatformIO ~ Open the project folder in Visual Studio Code . You will receive a popup to install PlatformIO IDE if it is not already installed. This will automatically install all PlatformIO dependencies and the MCU compiler frameworks needed. Restart Visual Studio Code when the PIO installation completes. Create a configuration ~ Copy platformio_override-template.ini to platformio_override.ini and uncomment the platforms for esp32 and esp8266 : 1 2 3 4 5 6 [platformio] extra_configs = ; Uncomment or edit the lines to show more User Setups in the PIO sidebar user_setups/esp32/*.ini user_setups/esp8266/*.ini ; user_setups/stm32f4xx/*.ini If you use customization , remove the comment from the line -DUSE_CONFIG_OVERRIDE : 1 2 3 4 5 [override] ; -- Hasp config options -------------------------------------- build_flags = ; -- Uncomment the next line to use the file include/user_config_override.h settings -DUSE_CONFIG_OVERRIDE Then Click on the \"Refresh Project tasks\" icon in PlatformIO to list all the configured environments. Compiling ~ MCU Environments ~ You can now run \"Build\" or \"Build All\" in PlatformIO to compile (all) the firmware. Native Linux build ~ For native linux_sdl builds, you also need: 1 2 sudo apt update sudo apt install build-essential libsdl2-dev Native MacOS build ~ For native darwin_sdl builds, you also need Homebrew : 1 brew install gcc sdl2 Native Windows build ~ For native windows_sdl builds, you also need MingW: Use MSYS2 1 pacman -S mingw-w64-x86_64-gcc mingw-w64-x86_64-SDL2 Add the path to your Mingw-w64 bin folder to the Windows PATH environment variable (usually C:\\msys64\\mingw64\\bin ). See instruction, 4 .","title":"Compiling locally"},{"location":"compiling/local/#compiling-locally","text":"Even though openHASP is available in several pre-compiled firmware variants, sometimes the ready-to-flash binaries aren't enough. If you need to customize some features, or simply change some parameters, then you need to compile a firmware binary yourself. The guide below will describe how to make your own build from source on your local PC.","title":"Compiling locally"},{"location":"compiling/local/#install-visual-studio-code","text":"on Linux on MacOS on Windows Additional packages on Linux: 1 2 sudo apt update sudo apt install git python3-venv","title":"Install Visual Studio Code"},{"location":"compiling/local/#clone-openhasp","text":"Make sure to add the --recursive parameter when cloning the project from GitHub. Otherwise git will not download the required submodules in the /lib subdirectory. To clone the current development version ( main branch): 1 git clone --recursive https://github.com/HASwitchPlate/openHASP If you already cloned openHASP without the submodules, you can fetch the submodules seperately using: 1 git submodule update --init --recursive To switch to a different branch (for example 0.6.1 release) use: 1 2 3 4 git clone --recursive https://github.com/HASwitchPlate/openHASP cd openHASP git checkout 0 .6.1 git submodule update --init --recursive","title":"Clone openHASP"},{"location":"compiling/local/#open-in-platformio","text":"Open the project folder in Visual Studio Code . You will receive a popup to install PlatformIO IDE if it is not already installed. This will automatically install all PlatformIO dependencies and the MCU compiler frameworks needed. Restart Visual Studio Code when the PIO installation completes.","title":"Open in PlatformIO"},{"location":"compiling/local/#create-a-configuration","text":"Copy platformio_override-template.ini to platformio_override.ini and uncomment the platforms for esp32 and esp8266 : 1 2 3 4 5 6 [platformio] extra_configs = ; Uncomment or edit the lines to show more User Setups in the PIO sidebar user_setups/esp32/*.ini user_setups/esp8266/*.ini ; user_setups/stm32f4xx/*.ini If you use customization , remove the comment from the line -DUSE_CONFIG_OVERRIDE : 1 2 3 4 5 [override] ; -- Hasp config options -------------------------------------- build_flags = ; -- Uncomment the next line to use the file include/user_config_override.h settings -DUSE_CONFIG_OVERRIDE Then Click on the \"Refresh Project tasks\" icon in PlatformIO to list all the configured environments.","title":"Create a configuration"},{"location":"compiling/local/#compiling","text":"","title":"Compiling"},{"location":"compiling/local/#mcu-environments","text":"You can now run \"Build\" or \"Build All\" in PlatformIO to compile (all) the firmware.","title":"MCU Environments"},{"location":"compiling/local/#native-linux-build","text":"For native linux_sdl builds, you also need: 1 2 sudo apt update sudo apt install build-essential libsdl2-dev","title":"Native Linux build"},{"location":"compiling/local/#native-macos-build","text":"For native darwin_sdl builds, you also need Homebrew : 1 brew install gcc sdl2","title":"Native MacOS build"},{"location":"compiling/local/#native-windows-build","text":"For native windows_sdl builds, you also need MingW: Use MSYS2 1 pacman -S mingw-w64-x86_64-gcc mingw-w64-x86_64-SDL2 Add the path to your Mingw-w64 bin folder to the Windows PATH environment variable (usually C:\\msys64\\mingw64\\bin ). See instruction, 4 .","title":"Native Windows build"},{"location":"configuration/debug/","text":"Debug Settings ~ Web UI ~ With the upload function you can upload 2 types of files * .jsonl This file contains the layout for the pages See 'pages' section for more information on this file * .zi These are font files used in the Nextion/TJC HMI disp. Serial Speed ~ Select one of the built-in themes to select the general style for the HASP interface. With the Hue slider you can select the base color for the built-in theme. Syslog Server ~ Enter the filename of the .jsonl you have uploaded to enables the layout on startup. Syslog Port ~ Select to what page the display should switch on startup. Syslog Protocol ~ Select the brightness level of the display on startup. Please note that the display must support dim feature and GPIO for dim is set in display setup. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"Debug Settings"},{"location":"configuration/debug/#debug-settings","text":"","title":"Debug Settings"},{"location":"configuration/debug/#web-ui","text":"With the upload function you can upload 2 types of files * .jsonl This file contains the layout for the pages See 'pages' section for more information on this file * .zi These are font files used in the Nextion/TJC HMI disp.","title":"Web UI"},{"location":"configuration/debug/#serial-speed","text":"Select one of the built-in themes to select the general style for the HASP interface. With the Hue slider you can select the base color for the built-in theme.","title":"Serial Speed"},{"location":"configuration/debug/#syslog-server","text":"Enter the filename of the .jsonl you have uploaded to enables the layout on startup.","title":"Syslog Server"},{"location":"configuration/debug/#syslog-port","text":"Select to what page the display should switch on startup.","title":"Syslog Port"},{"location":"configuration/debug/#syslog-protocol","text":"Select the brightness level of the display on startup. Please note that the display must support dim feature and GPIO for dim is set in display setup. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"Syslog Protocol"},{"location":"configuration/display/","text":"Display Settings ~ Define the overal settings of the display driver. Web UI ~ Short Idle ~ When the display has not been touched for the Short Idle amount of seconds, an idle = short event will be sent out. Long Idle ~ When the display has not been touched for Long + Short Idle amount of seconds, an idle = long event will be sent out. The Long Idle period begins to count after the Short Idle period. Orientation ~ Rotate the display by the set number of degrees and optionally mirror the display as well. Show Pointer ~ Enable this option to show a mouse pointer. This helps with checking if the touches are correctly detected. Backlight Control ~ Sets the GPIO pin which is used for PWM dimming of the backlight. Calibrate ~ Only available with XPT2046 resistive touchscreen controllers. Starts an onscreen calibration sequence. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"Display Settings"},{"location":"configuration/display/#display-settings","text":"Define the overal settings of the display driver.","title":"Display Settings"},{"location":"configuration/display/#web-ui","text":"","title":"Web UI"},{"location":"configuration/display/#short-idle","text":"When the display has not been touched for the Short Idle amount of seconds, an idle = short event will be sent out.","title":"Short Idle"},{"location":"configuration/display/#long-idle","text":"When the display has not been touched for Long + Short Idle amount of seconds, an idle = long event will be sent out. The Long Idle period begins to count after the Short Idle period.","title":"Long Idle"},{"location":"configuration/display/#orientation","text":"Rotate the display by the set number of degrees and optionally mirror the display as well.","title":"Orientation"},{"location":"configuration/display/#show-pointer","text":"Enable this option to show a mouse pointer. This helps with checking if the touches are correctly detected.","title":"Show Pointer"},{"location":"configuration/display/#backlight-control","text":"Sets the GPIO pin which is used for PWM dimming of the backlight.","title":"Backlight Control"},{"location":"configuration/display/#calibrate","text":"Only available with XPT2046 resistive touchscreen controllers. Starts an onscreen calibration sequence. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"Calibrate"},{"location":"configuration/gpio/","text":"GPIO Settings ~ GPIO Overview ~ You can attach external devices like buttons, switches, relays, lights or LEDs using the GPIO pins of the ESP. The Devices section of the documentation contains pin descriptions and ways to set them up for specific hardware configurations. When integrated with Home Assistant , the configured GPIOs will be added automatically during discovery as appropriate entities in the system. Input Pin ~ Pin ~ Select the GPIO number of the input pin to use. Note Pins known to be in use will be hidden from this list of available pins. Check the documentation of your board to see which pins are free to be used as GPIO. Group ~ GPIOs and objects can be grouped together by specifying a groupid . The state of objects in the same group is altered by the value of this input. This allows for simple action-reaction scenarios without relying on a home automation system: Link a switch and relay together Link a push button and doorbell together The state of a digital input can only be on or off and will set all group members to either 100% or 0% of their maximum value. Note The grouping of multiple gpios and objects together is intended for simple actions only. More complex actions should be performed by a home automation system, without linking groupids together. Example jsonl To act on the relays directly from the switch objects on the screen, try this very simple pages.jsonl : 1 2 3 { \"page\" : 1 , \"id\" : 1 , \"obj\" : \"switch\" , \"x\" : 30 , \"y\" : 40 , \"w\" : 180 , \"h\" : 75 , \"radius\" : 40 , \"radius2\" : 40 , \"groupid\" : 1 } { \"page\" : 1 , \"id\" : 2 , \"obj\" : \"switch\" , \"x\" : 30 , \"y\" : 122 , \"w\" : 180 , \"h\" : 75 , \"radius\" : 40 , \"radius2\" : 40 , \"groupid\" : 2 } { \"page\" : 1 , \"id\" : 3 , \"obj\" : \"switch\" , \"x\" : 30 , \"y\" : 205 , \"w\" : 180 , \"h\" : 75 , \"radius\" : 40 , \"radius2\" : 40 , \"groupid\" : 3 } Default state ~ The state of the input when it is not being engaged: i.e. the switch, button or sensor is idle (not active) : Normally Open : The default state interrupts the circuit Normally Closed : The default state completes the circuit Resistor ~ To avoid ghost events and RF interference each input should either have a pullup or pulldown resistor. This ensures the signal in the default state is always HIGH or LOW respectively. Most input pins have either an internal pullup or pulldown resistor that can be activated by the firmware. Check the documentation of your MCU whether the pin you want to use provides this functionality. If an internal pullup or pulldown resistor is not available on that pin you must add an external resistor and connect it either to 3.3V or GND . Internal Pullup : The pin is pulled HIGH internally by the firmware Internal Pulldown : The pin is pulled LOW internally by the firmware External Pullup : The pin is pulled HIGH by an external resistor External Pulldown : The pin is pulled LOW by an external resistor Type ~ Button A button gpio sends events to topic input# where # is the pin number. GPIO buttons send out events while they occur. The possible events are: down : Occurs when a button goes from depressed to pressed up : The button was released within a short time i.e. a short click has occurred long : A single LONG event is send when the button is still being pressed after the threshold time of 400ms release : The button is released after being pressing for a LONG threshold time. The values of objects or gpios with the same groupid will be set to maximum when the button is being pressed and to minimum when the button is released. Switch A switch gpio sends events to input# where # is the groupnumber. GPIO Switches send out their value when toggled: {\"val\":\"0\"} or {\"val\":\"1\"}. The values of objects or gpios in the same group will be set to maximum when the switch is turned on and to minimum when the switch is turned off. Idle State The input pins do not affect the idle state of the device. Only interacting with the touchscreen automatically resets the idle state. If you want a GPIO pin to wakeup the device then you should monitor its mqtt topic and use the idle and backlight commands appropriately. Output Pin ~ Pin ~ Select the GPIO number of the output pin to use. Note Pins known to be in use will be hidden from this list of available pins. Check the documentation of your board to see which pins are free to be used as GPIO. Group ~ The applied value is normalized and proportionate to the value of the input object, much like a percentage: Binary objects, like a switch, checkbox or toggle button only pass along 0% and 100% values. Range objects, like a slider, arc slider, roller or drop-down list pass along a value between 0-65535, depending on their current min , max and val attributes. Type ~ Dimmable Lights: ~ Led L8-HD (EU) L8-HD (AU) Set the brightness of the light or LED between 0 and 255 when a value is received on output# where # is the groupnumber. When a led is controlled by a button or switch in the same group, it will be turned ON or OFF according to the state of the button or switch. When a led is controlled by a range object (slider, arc slider, roller, drop-down list) in the same group, the brightness will be proportional to the .val value of the object within its range ( min-max ). Example Consider a roller or drop-down list with 4 options: OFF , Low , Medium and High . The .val values can range from 0 to 3. These will set the brightness of the led to 0 (0%), 84 (33%), 170 (66%) and 255 (100%) respectively. For a roller or drop-down list with 5 options, .val ranges between 0 and 4. The brightness of the led increases 25% with each step. Moodlight: ~ Mood Red Mood Green Mood Blue Assigns the pin to an RGB channel of the moodlight. The three RGB channels can be controlled together using the moodlight command. Relays: ~ Light Relay Power Relay Set the relay ON or OFF when an event is received on output# where # is the groupnumber or from another group intput . When a relay is grouped with a button or switch in the same group, it will be turned ON or OFF according to the state of the button or switch. When a relay is controlled by a range object (slider, arc slider, roller, drop-down list) within the same group, the state will be be ON if the val value is larger then its min value. The various relay types (Light, Power) denote only the device class you want them to be autodetected as in Home Assistant: light vs. switch etc. Warning Attaching devices to mains power can be dangerous! Configuring gpios is done on your own responsibility . Be sure to test any system thoroughly using low voltages first. By using the firmware you accept the License . Use the hasp/ /command/output[x] topic (where x is the pin number) with an empty payload to query the current state of the relay. 1 2 hasp/my_plate/command/output27 hasp/my_plate/state/output27 {\"state\":\"off\"} PWM ~ Experimental Set the duty cycle of the pin between 0 and 4095 when a value is received on output# where # is the groupnumber or from another group intput . When the PWM gpio is grouped with a button or switch, its duty cycle is either set to full-duty or off according to the state of the button or switch. When the PWM gpio is grouped with range object (slider, arc slider, roller, drop-down list), the duty cycle is proportional to the .val value of the object within its range ( min-max ). Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"GPIO Settings"},{"location":"configuration/gpio/#gpio-settings","text":"","title":"GPIO Settings"},{"location":"configuration/gpio/#gpio-overview","text":"You can attach external devices like buttons, switches, relays, lights or LEDs using the GPIO pins of the ESP. The Devices section of the documentation contains pin descriptions and ways to set them up for specific hardware configurations. When integrated with Home Assistant , the configured GPIOs will be added automatically during discovery as appropriate entities in the system.","title":"GPIO Overview"},{"location":"configuration/gpio/#input-pin","text":"","title":"Input Pin"},{"location":"configuration/gpio/#pin","text":"Select the GPIO number of the input pin to use. Note Pins known to be in use will be hidden from this list of available pins. Check the documentation of your board to see which pins are free to be used as GPIO.","title":"Pin"},{"location":"configuration/gpio/#group","text":"GPIOs and objects can be grouped together by specifying a groupid . The state of objects in the same group is altered by the value of this input. This allows for simple action-reaction scenarios without relying on a home automation system: Link a switch and relay together Link a push button and doorbell together The state of a digital input can only be on or off and will set all group members to either 100% or 0% of their maximum value. Note The grouping of multiple gpios and objects together is intended for simple actions only. More complex actions should be performed by a home automation system, without linking groupids together. Example jsonl To act on the relays directly from the switch objects on the screen, try this very simple pages.jsonl : 1 2 3 { \"page\" : 1 , \"id\" : 1 , \"obj\" : \"switch\" , \"x\" : 30 , \"y\" : 40 , \"w\" : 180 , \"h\" : 75 , \"radius\" : 40 , \"radius2\" : 40 , \"groupid\" : 1 } { \"page\" : 1 , \"id\" : 2 , \"obj\" : \"switch\" , \"x\" : 30 , \"y\" : 122 , \"w\" : 180 , \"h\" : 75 , \"radius\" : 40 , \"radius2\" : 40 , \"groupid\" : 2 } { \"page\" : 1 , \"id\" : 3 , \"obj\" : \"switch\" , \"x\" : 30 , \"y\" : 205 , \"w\" : 180 , \"h\" : 75 , \"radius\" : 40 , \"radius2\" : 40 , \"groupid\" : 3 }","title":"Group"},{"location":"configuration/gpio/#default-state","text":"The state of the input when it is not being engaged: i.e. the switch, button or sensor is idle (not active) : Normally Open : The default state interrupts the circuit Normally Closed : The default state completes the circuit","title":"Default state"},{"location":"configuration/gpio/#resistor","text":"To avoid ghost events and RF interference each input should either have a pullup or pulldown resistor. This ensures the signal in the default state is always HIGH or LOW respectively. Most input pins have either an internal pullup or pulldown resistor that can be activated by the firmware. Check the documentation of your MCU whether the pin you want to use provides this functionality. If an internal pullup or pulldown resistor is not available on that pin you must add an external resistor and connect it either to 3.3V or GND . Internal Pullup : The pin is pulled HIGH internally by the firmware Internal Pulldown : The pin is pulled LOW internally by the firmware External Pullup : The pin is pulled HIGH by an external resistor External Pulldown : The pin is pulled LOW by an external resistor","title":"Resistor"},{"location":"configuration/gpio/#type","text":"Button A button gpio sends events to topic input# where # is the pin number. GPIO buttons send out events while they occur. The possible events are: down : Occurs when a button goes from depressed to pressed up : The button was released within a short time i.e. a short click has occurred long : A single LONG event is send when the button is still being pressed after the threshold time of 400ms release : The button is released after being pressing for a LONG threshold time. The values of objects or gpios with the same groupid will be set to maximum when the button is being pressed and to minimum when the button is released. Switch A switch gpio sends events to input# where # is the groupnumber. GPIO Switches send out their value when toggled: {\"val\":\"0\"} or {\"val\":\"1\"}. The values of objects or gpios in the same group will be set to maximum when the switch is turned on and to minimum when the switch is turned off. Idle State The input pins do not affect the idle state of the device. Only interacting with the touchscreen automatically resets the idle state. If you want a GPIO pin to wakeup the device then you should monitor its mqtt topic and use the idle and backlight commands appropriately.","title":"Type"},{"location":"configuration/gpio/#output-pin","text":"","title":"Output Pin"},{"location":"configuration/gpio/#pin_1","text":"Select the GPIO number of the output pin to use. Note Pins known to be in use will be hidden from this list of available pins. Check the documentation of your board to see which pins are free to be used as GPIO.","title":"Pin"},{"location":"configuration/gpio/#group_1","text":"The applied value is normalized and proportionate to the value of the input object, much like a percentage: Binary objects, like a switch, checkbox or toggle button only pass along 0% and 100% values. Range objects, like a slider, arc slider, roller or drop-down list pass along a value between 0-65535, depending on their current min , max and val attributes.","title":"Group"},{"location":"configuration/gpio/#type_1","text":"","title":"Type"},{"location":"configuration/hasp/","text":"HASP Design ~ You can configure the general look and feel for the interface by uploading you favorite fonts and selecting your favorite theme and color. Web UI ~ Upload ~ With the upload function you can upload 2 types of files * .jsonl This file contains the layout for the pages See 'pages' section for more information on this file * .zi These are font files used in the Nextion/TJC HMI disp. UI Theme and Hue ~ Select one of the built-in themes to select the general style for the HASP interface. With the Hue slider you can select the base color for the built-in theme. Startup layout ~ Enter the filename of the .jsonl you have uploaded to enables the layout on startup. Startup Page ~ Select to what page the display should switch on startup. Startup brightness ~ Select the brightness level of the display on startup. Please note that the display must support dim feature and GPIO for dim is set in display setup. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"HASP Design"},{"location":"configuration/hasp/#hasp-design","text":"You can configure the general look and feel for the interface by uploading you favorite fonts and selecting your favorite theme and color.","title":"HASP Design"},{"location":"configuration/hasp/#web-ui","text":"","title":"Web UI"},{"location":"configuration/http/","text":"HTTP Settings ~ To restrict access to the web user interface you can set a Username and Password. Web UI ~ Click 'Save Settings' to activate immediately. If the username and/or password have been changed you need to enter the new values. Note Please note that all http communication is unencrypted and that this is only a simple security measure","title":"HTTP Settings"},{"location":"configuration/http/#http-settings","text":"To restrict access to the web user interface you can set a Username and Password.","title":"HTTP Settings"},{"location":"configuration/http/#web-ui","text":"Click 'Save Settings' to activate immediately. If the username and/or password have been changed you need to enter the new values. Note Please note that all http communication is unencrypted and that this is only a simple security measure","title":"Web UI"},{"location":"configuration/mqtt/","text":"MQTT Settings ~ All communication between HASP Open Display and your Home Automation service is done over MQTT. You will need an already working MQTT Broker. Note Learn more about the protocol on MQTT Essentials Web UI ~ HASP Node Name ~ The Node Name is the unique identifier of your device on your MQTT Broker. For example, setting the Node Name to plate35 will make the device listen and communicate on the main topic hasp/plate35/ Group Name ~ The Group Name is the unique identifier for a Group of devices. For example, the default Group Name is plates . This will make all devices in this group listen on the main topic hasp/plates/ This way you can send a command to all devices in the group at the same moment. Each devices will only respond on their own main Node Name topic. MQTT Broker ~ Set the IP or hostname of your MQTT Broker MQTT Port ~ Set the port for your MQTT Broker MQTT User and Password ~ Enter credentials if your MQTT Broker requires a Username and Password. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings. Commandline ~ You can also configure the mqtt settings via the serial or telnet console: 1 2 3 4 5 6 hostname myPlateName mqtthost 192 .168.0.123 mqttport 1883 mqttuser myUsername mqttpass myPassword reboot","title":"MQTT Settings"},{"location":"configuration/mqtt/#mqtt-settings","text":"All communication between HASP Open Display and your Home Automation service is done over MQTT. You will need an already working MQTT Broker. Note Learn more about the protocol on MQTT Essentials","title":"MQTT Settings"},{"location":"configuration/mqtt/#web-ui","text":"","title":"Web UI"},{"location":"configuration/mqtt/#hasp-node-name","text":"The Node Name is the unique identifier of your device on your MQTT Broker. For example, setting the Node Name to plate35 will make the device listen and communicate on the main topic hasp/plate35/","title":"HASP Node Name"},{"location":"configuration/mqtt/#group-name","text":"The Group Name is the unique identifier for a Group of devices. For example, the default Group Name is plates . This will make all devices in this group listen on the main topic hasp/plates/ This way you can send a command to all devices in the group at the same moment. Each devices will only respond on their own main Node Name topic.","title":"Group Name"},{"location":"configuration/mqtt/#mqtt-broker","text":"Set the IP or hostname of your MQTT Broker","title":"MQTT Broker"},{"location":"configuration/mqtt/#mqtt-port","text":"Set the port for your MQTT Broker","title":"MQTT Port"},{"location":"configuration/mqtt/#mqtt-user-and-password","text":"Enter credentials if your MQTT Broker requires a Username and Password. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"MQTT User and Password"},{"location":"configuration/mqtt/#commandline","text":"You can also configure the mqtt settings via the serial or telnet console: 1 2 3 4 5 6 hostname myPlateName mqtthost 192 .168.0.123 mqttport 1883 mqttuser myUsername mqttpass myPassword reboot","title":"Commandline"},{"location":"configuration/wifi/","text":"Wifi Settings ~ When using a wireless network adapter, you need to configure the SSID to connect. Web UI ~ SSID ~ The name of the access point to connect to. Password ~ Optional password for the access point, if required. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings. Commandline ~ You can also configure the wifi settings via the serial or telnet console: 1 2 3 ssid myAccessPointName pass myWifiPassword reboot","title":"Wifi Settings"},{"location":"configuration/wifi/#wifi-settings","text":"When using a wireless network adapter, you need to configure the SSID to connect.","title":"Wifi Settings"},{"location":"configuration/wifi/#web-ui","text":"","title":"Web UI"},{"location":"configuration/wifi/#ssid","text":"The name of the access point to connect to.","title":"SSID"},{"location":"configuration/wifi/#password","text":"Optional password for the access point, if required. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"Password"},{"location":"configuration/wifi/#commandline","text":"You can also configure the wifi settings via the serial or telnet console: 1 2 3 ssid myAccessPointName pass myWifiPassword reboot","title":"Commandline"},{"location":"design/characters/","text":"Languages Encoding ~ The character sets are encoded in UTF-8. All character sets contain the ASCII 0x20-0x7E characters and the non-braking-space (NBSP). Each set contains roughly the same extended characters from its equivalent iso-8859 standard . For example: To display the \u00f7 character on the plate you need to use \\u00F7 in json or jsonl commands, or send the encoded UTF-8 bytes 0xC3 0xB7 in other commands. All character sets also contain about 100 standaard Material Design Icons for home automation use. The default font in pre-compiled binaries is Roboto-Condensed-Regular with the Latin 1 character set. There is no support for right-to-left scipts. Ascii ~ Includes all ASCII 0x20-0x7E characters extended with these 11 universal symbols: NBSP \u00a3 \u00b0 \u00b1 \u00b2 \u00b3 \u00b5 \u00d7 \u00f7 \u20ac \u2022 Latin 1 ~ Includes all characters and symbols from the ASCII range above. Covers Northern, Western and Southern European languages: English (en), French (fr), Spanish (es), Portuguese (pt), Italian (it), Dutch (nl), German (de), Danish (da), Swedish (sv), Norwegian (no), Finnish (fi), Turkish (tr) \u00a1 \u00bf \u00c0 \u00c1 \u00c2 \u00c3 \u00c4 \u00c5 \u00c6 \u00c7 \u00c8 \u00c9 \u00ca \u00cb \u00cc \u00cd \u00ce \u00cf \u00d1 \u00d2 \u00d3 \u00d4 \u00d5 \u00d6 \u00d8 \u00d9 \u00da \u00db \u00dc \u00dd \u00de \u00df \u00e0 \u00e1 \u00e2 \u00e3 \u00e4 \u00e5 \u00e6 \u00e7 \u00e8 \u00e9 \u00ea \u00eb \u00ec \u00ed \u00ee \u00ef \u00f0 \u00f1 \u00f2 \u00f3 \u00f4 \u00f5 \u00f6 \u00f8 \u00f9 \u00fa \u00fb \u00fc \u00fd \u00fe \u00ff \u011e \u011f \u0130 \u0131 \u0152 \u0153 \u015e \u015f \u0160 \u0161 \u017d \u017e \u1e9e Latin 2 ~ Includes all characters and symbols from the ASCII range above. Covers Central and Eastern European languages: Czech (cs), Hungarian (hu), Polish (pl), Romanian (ro), Croatian (hr), Slovak (sk), Slovenian (sl), Sorbian \u00c1 \u00c2 \u00c4 \u00c9 \u00cd \u00ce \u00d3 \u00d4 \u00d6 \u00da \u00dc \u00dd \u00e1 \u00e2 \u00e4 \u00e9 \u00ed \u00ee \u00f3 \u00f4 \u00f6 \u00fa \u00fc \u00fd \u0102 \u0103 \u0104 \u0105 \u0106 \u0107 \u010c \u010d \u010e \u010f \u0110 \u0111 \u0114 \u0115 \u0118 \u0119 \u011a \u011b \u0139 \u013a \u013d \u013e \u0141 \u0142 \u0143 \u0144 \u0147 \u0148 \u0150 \u0151 \u0154 \u0155 \u0158 \u0159 \u015a \u015b \u015e \u015f \u0160 \u0161 \u0162 \u0163 \u0164 \u0165 \u016e \u016f \u0170 \u0171 \u0179 \u017a \u017b \u017c \u017d \u017e \u01cd \u01ce \u0200 \u0201 \u0202 \u0203 \u0204 \u0205 \u0206 \u0207 \u0208 \u0209 \u020a \u020b \u020c \u020d \u020e \u020f \u0210 \u0211 \u0212 \u0213 \u0214 \u0215 \u0216 \u0217 \u0218 \u0219 \u021a \u021b Chinese ~ Includes all characters and symbols from the ASCII range above, plus 650 most common CJK radicals: \u4e00 \u4e03 \u4e09 \u4e0a \u4e0b \u4e0d \u4e14 \u4e16 \u4e26 \u4e2d \u4e3b \u4e45 \u4e4b \u4e4e \u4e4f \u4e5f \u4e86 \u4e8b \u4e8c \u4e94 \u4e9b \u4ea4 \u4ea6 \u4eac \u4eba \u4ec0 \u4ecd \u4ed6 \u4ee3 \u4ee4 \u4ee5 \u4ef6 \u4efb \u4efd \u4f01 \u4f0a \u4f3c \u4f46 \u4f4d \u4f4e \u4f4f \u4f55 \u4f5c \u4f60 \u4f7f \u4f86 \u4f8b \u4f9b \u4f9d \u4fbf \u4fc2 \u4fdd \u4fe1 \u500b \u5011 \u5019 \u503c \u505a \u5065 \u5099 \u50b3 \u50c5 \u50cf \u50f9 \u5143 \u5145 \u5148 \u514b \u514d \u5152 \u5165 \u5167 \u5168 \u5169 \u516b \u516c \u516d \u5171 \u5176 \u5177 \u518d \u51fa \u5206 \u5207 \u5217 \u5225 \u5229 \u5230 \u5236 \u5247 \u524d \u525b \u5275 \u5283 \u529b \u529f \u52a0 \u52a9 \u52aa \u52d5 \u52d9 \u52f5 \u5305 \u5316 \u5317 \u5340 \u5341 \u534a \u5354 \u5373 \u537b \u539f \u53bb \u53c3 \u53c8 \u53ca \u53cb \u53cd \u53d6 \u53d7 \u53e3 \u53e5 \u53e6 \u53ea \u53eb \u53ef \u53f0 \u53f2 \u53f8 \u5403 \u5404 \u5408 \u540c \u540d \u5411 \u5426 \u5427 \u5440 \u544a \u5462 \u547d \u548c \u54c1 \u54e1 \u54ea \u5546 \u554a \u554f \u5566 \u5584 \u559c \u559d \u55ae \u55ce \u55ef \u561b \u56b4 \u56db \u56de \u56e0 \u570b \u570d \u5712 \u5718 \u571f \u5728 \u5730 \u5747 \u5750 \u57df \u57f7 \u57fa \u5831 \u5834 \u584a \u5883 \u589e \u58d3 \u58eb \u5916 \u591a \u5920 \u5927 \u5929 \u592a \u592e \u5957 \u5973 \u5979 \u597d \u5982 \u59b3 \u59cb \u59d0 \u59d4 \u5a66 \u5a92 \u5abd \u5b50 \u5b57 \u5b58 \u5b69 \u5b78 \u5b83 \u5b89 \u5b8c \u5b98 \u5b9a \u5bb6 \u5bb9 \u5bcc \u5bdf \u5be6 \u5beb \u5c07 \u5c08 \u5c0d \u5c0e \u5c0f \u5c11 \u5c1a \u5c24 \u5c31 \u5c3a \u5c45 \u5c55 \u5c6c \u5c71 \u5de5 \u5df1 \u5df2 \u5e02 \u5e0c \u5e2b \u5e36 \u5e38 \u5e74 \u5e7e \u5e95 \u5e9c \u5ea6 \u5ea7 \u5ead \u5eb7 \u5ee0 \u5efa \u5f0f \u5f15 \u5f35 \u5f37 \u5f62 \u5f71 \u5f7c \u5f80 \u5f88 \u5f8c \u5f97 \u5f9e \u5fc3 \u5fc5 \u5feb \u5ff5 \u600e \u6015 \u601d \u6027 \u60a8 \u60c5 \u60f3 \u6108 \u610f \u611b \u611f \u614b \u6167 \u616e \u61c9 \u6210 \u6211 \u6216 \u6230 \u6240 \u624b \u624d \u6253 \u627e \u6280 \u628a \u6295 \u62c9 \u62ec \u62ff \u6301 \u6307 \u6388 \u6392 \u63a1 \u63a5 \u63a7 \u63a8 \u63d0 \u63ee \u64c1 \u64c7 \u64d4 \u64da \u652f \u6539 \u653e \u653f \u6545 \u6548 \u6559 \u6562 \u6574 \u6587 \u6599 \u65b0 \u65b7 \u65b9 \u65bc \u65bd \u65c1 \u65cf \u65e2 \u65e5 \u65e9 \u660e \u6613 \u662f \u6642 \u667a \u66f4 \u66f8 \u66fe \u6700 \u6703 \u6708 \u6709 \u670b \u670d \u671b \u671f \u672a \u672c \u675f \u6771 \u6790 \u679c \u67d0 \u67e5 \u6821 \u6839 \u683c \u689d \u695a \u696d \u6975 \u6982 \u69cb \u6a02 \u6a19 \u6a23 \u6a39 \u6a5f \u6b21 \u6b50 \u6b61 \u6b63 \u6b64 \u6b65 \u6b72 \u6b77 \u6b7b \u6b8a \u6bb5 \u6bcd \u6bcf \u6bd4 \u6c11 \u6c34 \u6c38 \u6c42 \u6c7a \u6c92 \u6cbb \u6cc1 \u6cd5 \u6ce8 \u6d32 \u6d3b \u6d88 \u6df1 \u6e05 \u6e1b \u6e2f \u6e90 \u6e96 \u6e9d \u6eff \u6f38 \u6fdf \u7063 \u70ba \u7121 \u7136 \u71df \u722d \u7236 \u7238 \u7247 \u7260 \u7269 \u7279 \u72c0 \u7372 \u73a9 \u73fe \u7403 \u7406 \u74b0 \u751a \u751f \u7522 \u7528 \u7531 \u7533 \u7537 \u754c \u756b \u7576 \u767c \u7684 \u7686 \u76ee \u76f4 \u76f8 \u770b \u771f \u773e \u77e5 \u7814 \u78ba \u793a \u793e \u795e \u79d1 \u7a0b \u7a2e \u7a4d \u7a76 \u7a7a \u7acb \u7ad9 \u7ae5 \u7b11 \u7b49 \u7b56 \u7ba1 \u7bc0 \u7bc4 \u7c21 \u7cbe \u7cfb \u7d04 \u7d20 \u7d42 \u7d44 \u7d50 \u7d66 \u7d71 \u7d93 \u7dad \u7db2 \u7df4 \u7e3d \u7e3e \u7e54 \u7e7c \u7e8c \u7f3a \u7f8e \u7fa9 \u7fd2 \u8001 \u8003 \u8005 \u800c \u805e \u806f \u8072 \u807d \u80af \u80b2 \u80fd \u8166 \u81c9 \u81ea \u81f3 \u81fa \u8207 \u8208 \u8209 \u822c \u8272 \u82e5 \u8336 \u8457 \u85dd \u8607 \u8655 \u884c \u8853 \u8868 \u88ab \u88e1 \u88fd \u897f \u8981 \u898b \u898f \u8996 \u89aa \u89ba \u89c0 \u89d2 \u89e3 \u8a00 \u8a08 \u8a0a \u8a0e \u8a13 \u8a18 \u8a2d \u8a31 \u8a34 \u8a71 \u8a72 \u8a8d \u8a9e \u8aaa \u8ab0 \u8ab2 \u8abf \u8ac7 \u8acb \u8ad6 \u8b02 \u8b1b \u8b1d \u8b58 \u8b70 \u8b77 \u8b8a \u8b93 \u8c50 \u8c61 \u8ca0 \u8cac \u8cb7 \u8cbb \u8cc7 \u8cea \u8cfd \u8d70 \u8d77 \u8d85 \u8d8a \u8da3 \u8db3 \u8ddf \u8def \u8eab \u8eca \u8edf \u8f03 \u8f15 \u8fa6 \u8fce \u8fd1 \u8ffd \u900f \u9010 \u9019 \u901a \u9020 \u9023 \u9032 \u904b \u904e \u9053 \u9054 \u9060 \u9069 \u9078 \u907f \u9084 \u908a \u90a3 \u90e8 \u90fd \u914d \u91ab \u91cd \u91cf \u91dd \u9280 \u9322 \u932f \u9577 \u958b \u9593 \u95dc \u9644 \u9662 \u9664 \u9678 \u968e \u969b \u96a8 \u96bb \u96d6 \u96d9 \u96e3 \u96fb \u9700 \u975e \u9762 \u9769 \u97f3 \u97ff \u9805 \u9808 \u9817 \u9818 \u982d \u984c \u9858 \u985e \u986f \u9999 \u9a57 \u9ad4 \u9ad8 \u9e97 \u9ebc \u9ede \u9ee8 \u9f13 \u4e00 \u4e03 \u4e09 \u4e0a \u4e0b \u4e0d \u4e14 \u4e16 \u4e26 \u4e2d \u4e3b \u4e45 \u4e4b \u4e4e \u4e4f \u4e5f \u4e86 \u4e8b \u4e8c \u4e94 \u4e9b \u4ea4 \u4ea6 \u4eac \u4eba \u4ec0 \u4ecd \u4ed6 \u4ee3 \u4ee4 \u4ee5 \u4ef6 \u4efb \u4efd \u4f01 \u4f0a \u4f3c \u4f46 \u4f4d \u4f4e \u4f4f \u4f55 \u4f5c \u4f60 \u4f7f \u4f86 \u4f8b \u4f9b \u4f9d \u4fbf \u4fc2 \u4fdd \u4fe1 \u500b \u5011 \u5019 \u503c \u505a \u5065 \u5099 \u50b3 \u50c5 \u50cf \u50f9 \u5143 \u5145 \u5148 \u514b \u514d \u5152 \u5165 \u5167 \u5168 \u5169 \u516b \u516c \u516d \u5171 \u5176 \u5177 \u518d \u51fa \u5206 \u5207 \u5217 \u5225 \u5229 \u5230 \u5236 \u5247 \u524d \u525b \u5275 \u5283 \u529b \u529f \u52a0 \u52a9 \u52aa \u52d5 \u52d9 \u52f5 \u5305 \u5316 \u5317 \u5340 \u5341 \u534a \u5354 \u5373 \u537b \u539f \u53bb \u53c3 \u53c8 \u53ca \u53cb \u53cd \u53d6 \u53d7 \u53e3 \u53e5 \u53e6 \u53ea \u53eb \u53ef \u53f0 \u53f2 \u53f8 \u5403 \u5404 \u5408 \u540c \u540d \u5411 \u5426 \u5427 \u5440 \u544a \u5462 \u547d \u548c \u54c1 \u54e1 \u54ea \u5546 \u554a \u554f \u5566 \u5584 \u559c \u559d \u55ae \u55ce \u55ef \u561b \u56b4 \u56db \u56de \u56e0 \u570b \u570d \u5712 \u5718 \u571f \u5728 \u5730 \u5747 \u5750 \u57df \u57f7 \u57fa \u5831 \u5834 \u584a \u5883 \u589e \u58d3 \u58eb \u5916 \u591a \u5920 \u5927 \u5929 \u592a \u592e \u5957 \u5973 \u5979 \u597d \u5982 \u59b3 \u59cb \u59d0 \u59d4 \u5a66 \u5a92 \u5abd \u5b50 \u5b57 \u5b58 \u5b69 \u5b78 \u5b83 \u5b89 \u5b8c \u5b98 \u5b9a \u5bb6 \u5bb9 \u5bcc \u5bdf \u5be6 \u5beb \u5c07 \u5c08 \u5c0d \u5c0e \u5c0f \u5c11 \u5c1a \u5c24 \u5c31 \u5c3a \u5c45 \u5c55 \u5c6c \u5c71 \u5de5 \u5df1 \u5df2 \u5e02 \u5e0c \u5e2b \u5e36 \u5e38 \u5e74 \u5e7e \u5e95 \u5e9c \u5ea6 \u5ea7 \u5ead \u5eb7 \u5ee0 \u5efa \u5f0f \u5f15 \u5f35 \u5f37 \u5f62 \u5f71 \u5f7c \u5f80 \u5f88 \u5f8c \u5f97 \u5f9e \u5fc3 \u5fc5 \u5feb \u5ff5 \u600e \u6015 \u601d \u6027 \u60a8 \u60c5 \u60f3 \u6108 \u610f \u611b \u611f \u614b \u6167 \u616e \u61c9 \u6210 \u6211 \u6216 \u6230 \u6240 \u624b \u624d \u6253 \u627e \u6280 \u628a \u6295 \u62c9 \u62ec \u62ff \u6301 \u6307 \u6388 \u6392 \u63a1 \u63a5 \u63a7 \u63a8 \u63d0 \u63ee \u64c1 \u64c7 \u64d4 \u64da \u652f \u6539 \u653e \u653f \u6545 \u6548 \u6559 \u6562 \u6574 \u6587 \u6599 \u65b0 \u65b7 \u65b9 \u65bc \u65bd \u65c1 \u65cf \u65e2 \u65e5 \u65e9 \u660e \u6613 \u662f \u6642 \u667a \u66f4 \u66f8 \u66fe \u6700 \u6703 \u6708 \u6709 \u670b \u670d \u671b \u671f \u672a \u672c \u675f \u6771 \u6790 \u679c \u67d0 \u67e5 \u6821 \u6839 \u683c \u689d \u695a \u696d \u6975 \u6982 \u69cb \u6a02 \u6a19 \u6a23 \u6a39 \u6a5f \u6b21 \u6b50 \u6b61 \u6b63 \u6b64 \u6b65 \u6b72 \u6b77 \u6b7b \u6b8a \u6bb5 \u6bcd \u6bcf \u6bd4 \u6c11 \u6c34 \u6c38 \u6c42 \u6c7a \u6c92 \u6cbb \u6cc1 \u6cd5 \u6ce8 \u6d32 \u6d3b \u6d88 \u6df1 \u6e05 \u6e1b \u6e2f \u6e90 \u6e96 \u6e9d \u6eff \u6f38 \u6fdf \u7063 \u70ba \u7121 \u7136 \u71df \u722d \u7236 \u7238 \u7247 \u7260 \u7269 \u7279 \u72c0 \u7372 \u73a9 \u73fe \u7403 \u7406 \u74b0 \u751a \u751f \u7522 \u7528 \u7531 \u7533 \u7537 \u754c \u756b \u7576 \u767c \u7684 \u7686 \u76ee \u76f4 \u76f8 \u770b \u771f \u773e \u77e5 \u7814 \u78ba \u793a \u793e \u795e \u79d1 \u7a0b \u7a2e \u7a4d \u7a76 \u7a7a \u7acb \u7ad9 \u7ae5 \u7b11 \u7b49 \u7b56 \u7ba1 \u7bc0 \u7bc4 \u7c21 \u7cbe \u7cfb \u7d04 \u7d20 \u7d42 \u7d44 \u7d50 \u7d66 \u7d71 \u7d93 \u7dad \u7db2 \u7df4 \u7e3d \u7e3e \u7e54 \u7e7c \u7e8c \u7f3a \u7f8e \u7fa9 \u7fd2 \u8001 \u8003 \u8005 \u800c \u805e \u806f \u8072 \u807d \u80af \u80b2 \u80fd \u8166 \u81c9 \u81ea \u81f3 \u81fa \u8207 \u8208 \u8209 \u822c \u8272 \u82e5 \u8336 \u8457 \u85dd \u8607 \u8655 \u884c \u8853 \u8868 \u88ab \u88e1 \u88fd \u897f \u8981 \u898b \u898f \u8996 \u89aa \u89ba \u89c0 \u89d2 \u89e3 \u8a00 \u8a08 \u8a0a \u8a0e \u8a13 \u8a18 \u8a2d \u8a31 \u8a34 \u8a71 \u8a72 \u8a8d \u8a9e \u8aaa \u8ab0 \u8ab2 \u8abf \u8ac7 \u8acb \u8ad6 \u8b02 \u8b1b \u8b1d \u8b58 \u8b70 \u8b77 \u8b8a \u8b93 \u8c50 \u8c61 \u8ca0 \u8cac \u8cb7 \u8cbb \u8cc7 \u8cea \u8cfd \u8d70 \u8d77 \u8d85 \u8d8a \u8da3 \u8db3 \u8ddf \u8def \u8eab \u8eca \u8edf \u8f03 \u8f15 \u8fa6 \u8fce \u8fd1 \u8ffd \u900f \u9010 \u9019 \u901a \u9020 \u9023 \u9032 \u904b \u904e \u9053 \u9054 \u9060 \u9069 \u9078 \u907f \u9084 \u908a \u90a3 \u90e8 \u90fd \u914d \u91ab \u91cd \u91cf \u91dd \u9280 \u9322 \u932f \u9577 \u958b \u9593 \u95dc \u9644 \u9662 \u9664 \u9678 \u968e \u969b \u96a8 \u96bb \u96d6 \u96d9 \u96e3 \u96fb \u9700 \u975e \u9762 \u9769 \u97f3 \u97ff \u9805 \u9808 \u9817 \u9818 \u982d \u984c \u9858 \u985e \u986f \u9999 \u9a57 \u9ad4 \u9ad8 \u9e97 \u9ebc \u9ede \u9ee8 \u9f13 Characters ~ UTF-8 Char Description CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00A0 Non-breaking space CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00A1 \u00a1 Inverted exclamation mark ES 00A2 \u00a2 Cent sign 00A3 \u00a3 Pound sign 00A4 \u00a4 Currency sign 00A5 \u00a5 Yen sign 00A6 \u00a6 Broken bar 00A7 \u00a7 Section sign 00A8 \u00a8 Diaeresis 00A9 \u00a9 Copyright sign 00AA \u00aa Feminine Ordinal Indicator 00AB \u00ab Left-pointing double angle quotation mark 00AC \u00ac Not sign 00AD \u00ad Soft hyphen 00AE \u00ae Registered sign 00AF \u00af Macron 00B0 \u00b0 Degree symbol CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00B1 \u00b1 Plus-minus sign CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00B2 \u00b2 Superscript two 00B3 \u00b3 Superscript three 00B4 \u00b4 Acute accent DA 00B5 \u00b5 Micro sign CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00B6 \u00b6 Pilcrow sign 00B7 \u00b7 Middle dot CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00B8 \u00b8 Cedilla 00B9 \u00b9 Superscript one 00BA \u00ba Masculine ordinal indicator 00BB \u00bb Right-pointing double-angle quotation mark 00BC \u00bc Vulgar fraction one quarter CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00BD \u00bd Vulgar fraction one half CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00BE \u00be Vulgar fraction three quarters CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00BF \u00bf Inverted question mark ES 00C0 \u00c0 Capital A with grave PT IT FR 00C1 \u00c1 Capital A with acute HU ES PT FR 00C2 \u00c2 Capital A with circumflex RO NO PT FR 00C3 \u00c3 Capital A with tilde PT 00C4 \u00c4 Capital A with diaeresis DE SV FI DA 00C5 \u00c5 Capital A with ring above SV FI DA NO 00C6 \u00c6 Capital AE DA NO 00C7 \u00c7 Capital C with cedilla PT FR 00C8 \u00c8 Capital E with grave NO IT FR 00C9 \u00c9 Capital E with acute NO HU ES PT IT FR 00CA \u00ca Capital E with circumflex NO PT FR 00CB \u00cb Capital E with diaeresis FR 00CC \u00cc Capital I with grave IT 00CD \u00cd Capital I with acute HU ES PT 00CE \u00ce Capital I with circumflex RO FR 00CF \u00cf Capital I with diaeresis FR 00D0 \u00d0 Capital Eth 00D1 \u00d1 Capital N with tilde ES 00D2 \u00d2 Capital O with grave NO IT 00D3 \u00d3 Capital O with acute NO HU ES PT 00D4 \u00d4 Capital O with circumflex NO PT FR 00D5 \u00d5 Capital O with tilde PT FR 00D6 \u00d6 Capital O with diaeresis DE SV FI DA HU 00D7 \u00d7 Multiplication sign CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00D8 \u00d8 Capital O with stroke DA NO 00D9 \u00d9 Capital U with grave IT 00DA \u00da Capital U with acute HU ES PT 00DB \u00db Capital U with circumflex 00DC \u00dc Capital U with diaeresis DE DA HU ES PT 00DD \u00dd Capital Y with acute CZ ES 00DE \u00de Capital Thorn 00DF \u00df Small sharp S DE 00E0 \u00e0 Small A with grave PT IT FR 00E1 \u00e1 Small A with acute HU ES PT FR 00E2 \u00e2 Small A with circumflex RO NO PT FR 00E3 \u00e3 Small A with tilde PT 00E4 \u00e4 Small A with diaeresis DE SV FI DA 00E5 \u00e5 Small A with ring above SV FI DA NO 00E6 \u00e6 Small AE DA NO 00E7 \u00e7 Small C with cedilla PT FR 00E8 \u00e8 Small E with grave NO IT FR 00E9 \u00e9 Small E with acute DA NO HU ES PT IT FR 00EA \u00ea Small E with circumflex NO PT FR 00EB \u00eb Small E with diaeresis 00EC \u00ec Small I with grave IT 00ED \u00ed Small I with acute HU ES PT FR 00EE \u00ee Small I with circumflex RO FR 00EF \u00ef Small I with diaeresis FR 00F0 \u00f0 Small Eth 00F1 \u00f1 Small N with tilde ES EN NL 00F2 \u00f2 Small O with grave NO IT 00F3 \u00f3 Small O with acute NO HU ES PT FR 00F4 \u00f4 Small O with circumflex NO PT FR 00F5 \u00f5 Small O with tilde PT 00F6 \u00f6 Small O with diaeresis DE SV FI DA HU 00F7 \u00f7 Division sign CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00F8 \u00f8 Small O with stroke DA NO 00F9 \u00f9 Small U with grave IT FR 00FA \u00fa Small U with acute HU ES PT FR 00FB \u00fb Small U with circumflex FR 00FC \u00fc Small U with diaeresis DE DA HU ES PT 00FD \u00fd Small Y with acute ES 00FE \u00fe Small Thorn 00FF \u00ff Small Y with diaeresis 0100 \u0100 Capital A with macron 0101 \u0101 Small A with macron 0102 \u0102 Capital A with breve RO 0103 \u0103 Small A with breve RO 0104 \u0104 Capital A with ogonek 0105 \u0105 Small A with ogonek 0106 \u0106 Capital C with acute 0107 \u0107 Small C with acute 0108 \u0108 Capital C with circumflex 0109 \u0109 Small C with circumflex 010A \u010a Capital C with dot above 010B \u010b Small C with dot above 010C \u010c Capital C with caron SL 010D \u010d Small C with caron SL 010E \u010e Capital D with caron 010F \u010f Small D with caron 0110 \u0110 Capital D with stroke 0111 \u0111 Small D with stroke 0112 \u0112 Capital E with macron 0113 \u0113 Small E with macron 0114 \u0114 Capital E with breve CZ 0115 \u0115 Small E with breve CZ 0116 \u0116 Capital E with dot above 0117 \u0117 Small E with dot above 0118 \u0118 Capital E with ogonek 0119 \u0119 Small E with ogonek 011A \u011a Capital E with caron 011B \u011b Small E with caron 011C \u011c Capital G with circumflex 011D \u011d Small G with circumflex 011E \u011e Capital G with breve 011F \u011f Small G with breve 0120 \u0120 Capital G with dot above 0121 \u0121 Small G with dot above 0122 \u0122 Capital G with cedilla 0123 \u0123 Small G with cedilla 0124 \u0124 Capital H with circumflex 0125 \u0125 Small H with circumflex 0126 \u0126 Capital H with stroke 0127 \u0127 Small H with stroke 0128 \u0128 Capital I with tilde 0129 \u0129 Small I with tilde 012A \u012a Capital I with macron 012B \u012b Small I with macron 012C \u012c Capital I with breve 012D \u012d Small I with breve 012E \u012e Capital I with ogonek 012F \u012f Small I with ogonek 0130 \u0130 Capital I with dot above 0131 \u0131 Small dotless I 0132 \u0132 Capital Ligature IJ 0133 \u0133 Small Ligature IJ 0134 \u0134 Capital J with circumflex 0135 \u0135 Small J with circumflex 0136 \u0136 Capital K with cedilla 0137 \u0137 Small K with cedilla 0138 \u0138 Small Kra 0139 \u0139 Capital L with acute 013A \u013a Small L with acute 013B \u013b Capital L with cedilla 013C \u013c Small L with cedilla 013D \u013d Capital L with caron 013E \u013e Small L with caron 013F \u013f Capital L with middle dot 0140 \u0140 Small L with middle dot 0141 \u0141 Capital L with stroke 0142 \u0142 Small L with stroke 0143 \u0143 Capital N with acute 0144 \u0144 Small N with acute 0145 \u0145 Capital N with cedilla 0146 \u0146 Small N with cedilla 0147 \u0147 Capital N with caron CZ 0148 \u0148 Small N with caron CZ 0149 \u0149 Small N preceded by apostrophe 014A \u014a Capital Eng 014B \u014b Small Eng 014C \u014c Capital O with macron 014D \u014d Small O with macron 014E \u014e Capital O with breve 014F \u014f Small O with breve 0150 \u0150 Capital O with double acute HU 0151 \u0151 Small O with double acute HU 0152 \u0152 Capital Ligature OE FR 0153 \u0153 Small Ligature OE FR 0154 \u0154 Capital R with acute 0155 \u0155 Small R with acute 0156 \u0156 Capital R with cedilla 0157 \u0157 Small R with cedilla 0158 \u0158 Capital R with caron 0159 \u0159 Small R with caron 015A \u015a Capital S with acute 015B \u015b Small S with acute 015C \u015c Capital S with circumflex 015D \u015d Small S with circumflex 015E \u015e Capital S with cedilla RO 015F \u015f Small S with cedilla RO 0160 \u0160 Capital S with caron SL FI 0161 \u0161 Small S with caron SL FI 0162 \u0162 Capital T with cedilla RO 0163 \u0163 Small T with cedilla RO 0164 \u0164 Capital T with caron 0165 \u0165 Small T with caron 0166 \u0166 Capital T with stroke 0167 \u0167 Small T with stroke 0168 \u0168 Capital U with tilde 0169 \u0169 Small U with tilde 016A \u016a Capital U with macron 016B \u016b Small U with macron 016C \u016c Capital U with breve 016D \u016d Small U with breve 016E \u016e Capital U with ring above CZ 016F \u016f Small U with ring above CZ 0170 \u0170 Capital U with double acute HU 0171 \u0171 Small U with double acute HU 0172 \u0172 Capital U with ogonek 0173 \u0173 Small U with ogonek 0174 \u0174 Capital W with circumflex 0175 \u0175 Small W with circumflex 0176 \u0176 Capital Y with circumflex 0177 \u0177 Small Y with circumflex 0178 \u0178 Capital Y with diaeresis 0179 \u0179 Capital Z with acute 017A \u017a Small Z with acute 017B \u017b Capital Z with dot above 017C \u017c Small Z with dot above 017D \u017d Capital Z with caron SL FI 017E \u017e Small Z with caron SL FI 017F \u017f Small long S 01C4 \u01c4 Capital DZ with Caron HR 01C5 \u01c5 Capital D with Small Z with Caron HR 01C6 \u01c6 Small DZ with Caron HR 01C7 \u01c7 Capital LJ HR 01C8 \u01c8 Capital L with Small J HR 01C9 \u01c9 Small LJ HR 01CA \u01ca Capital NJ HR 01CB \u01cb Capital N with Small J HR 01CC \u01cc Small NJ HR 01CD \u01cd Capital A with Caron RO 01CE \u01ce Small A with Caron RO 01CF \u01cf Capital I with Caron 01D0 \u01d0 Small I with Caron 01D1 \u01d1 Capital O with Caron 01D2 \u01d2 Small O with Caron 01D3 \u01d3 Capital U with Caron 01D4 \u01d4 Small U with Caron 01D5 \u01d5 Capital U with Diaeresis and Macron 01D6 \u01d6 Small U with Diaeresis and Macron 01D7 \u01d7 Capital U with Diaeresis and Acute 01D8 \u01d8 Small U with Diaeresis and Acute 01D9 \u01d9 Capital U with Diaeresis and Caron 01DA \u01da Small U with Diaeresis and Caron 01DB \u01db Capital U with Diaeresis and Grave 01DC \u01dc Small U with Diaeresis and Grave 01DD \u01dd Small Turned E 01DE \u01de Capital A with Diaeresis and Macron 01DF \u01df Small A with Diaeresis and Macron 01E0 \u01e0 Capital A with Dot Above and Macron 01E1 \u01e1 Small A with Dot Above and Macron 01E2 \u01e2 Capital AE with Macron 01E3 \u01e3 Small AE with Macron 01E4 \u01e4 Capital G with Stroke 01E5 \u01e5 Small G with Stroke 01E6 \u01e6 Capital G with Caron 01E7 \u01e7 Small G with Caron 01E8 \u01e8 Capital K with Caron 01E9 \u01e9 Small K with Caron 01EA \u01ea Capital O with Ogonek 01EB \u01eb Small O with Ogonek 01EC \u01ec Capital O with Ogonek and Macron 01ED \u01ed Small O with Ogonek and Macron 01EE \u01ee Capital Ezh with Caron 01EF \u01ef Small Ezh with Caron 01F0 \u01f0 Small J with Caron 01F1 \u01f1 Capital DZ 01F2 \u01f2 Capital D with Small Z 01F3 \u01f3 Small DZ 01F4 \u01f4 Capital G with Acute 01F5 \u01f5 Small G with Acute 01F6 \u01f6 Capital Hwair 01F7 \u01f7 Capital Wynn 01F8 \u01f8 Capital N with Grave 01F9 \u01f9 Small N with Grave 01FA \u01fa Capital A with Ring Above and Acute 01FB \u01fb Small A with Ring Above and Acute 01FC \u01fc Capital AE with Acute 01FD \u01fd Small AE with Acute 01FE \u01fe Capital O with Stroke and Acute 01FF \u01ff Small O with Stroke and Acute 0200 \u0200 Capital A with Double Grave HR SL 0201 \u0201 Small A with Double Grave HR SL 0202 \u0202 Capital A with Inverted Breve RO HR SL 0203 \u0203 Small A with Inverted Breve RO HR SL 0204 \u0204 Capital E with Double Grave HR SL 0205 \u0205 Small E with Double Grave HR SL 0206 \u0206 Capital E with Inverted Breve HR SL 0207 \u0207 Small E with Inverted Breve HR SL 0208 \u0208 Capital I with Double Grave HR SL 0209 \u0209 Small I with Double Grave HR SL 020A \u020a Capital I with Inverted Breve RO HR SL 020B \u020b Small I with Inverted Breve RO HR SL 020C \u020c Capital O with Double Grave HR SL 020D \u020d Small O with Double Grave HR SL 020E \u020e Capital O with Inverted Breve HR SL 020F \u020f Small O with Inverted Breve HR SL 0210 \u0210 Capital R with Double Grave HR SL 0211 \u0211 Small R with Double Grave HR SL 0212 \u0212 Capital R with Inverted Breve HR SL 0213 \u0213 Small R with Inverted Breve HR SL 0214 \u0214 Capital U with Double Grave HR SL 0215 \u0215 Small U with Double Grave HR SL 0216 \u0216 Capital U with Inverted Breve HR SL 0217 \u0217 Small U with Inverted Breve HR SL 0218 \u0218 Capital S with Comma Below RO 0219 \u0219 Small S with Comma Below RO 021A \u021a Capital T with Comma Below RO 021B \u021b Small T with Comma Below RO 021C \u021c Capital Yogh 021D \u021d Small Yogh 021E \u021e Capital H with Caron 021F \u021f Small H with Caron 0220 \u0220 Capital N with Long Right Leg 0221 \u0221 Small D with Curl 0222 \u0222 Capital OU 0223 \u0223 Small OU 0224 \u0224 Capital Z with Hook 0225 \u0225 Small Z with Hook 0226 \u0226 Capital A with Dot Above 0227 \u0227 Small A with Dot Above 0228 \u0228 Capital E with Cedilla 0229 \u0229 Small E with Cedilla 022A \u022a Capital O with Diaeresis and Macron 022B \u022b Small O with Diaeresis and Macron 022C \u022c Capital O with Tilde and Macron 022D \u022d Small O with Tilde and Macron 022E \u022e Capital O with Dot Above 022F \u022f Small O with Dot Above 0230 \u0230 Capital O with Dot Above and Macron 0231 \u0231 Small O with Dot Above and Macron 0232 \u0232 Capital Y with Macron 0233 \u0233 Small Y with Macron 0234 \u0234 Small L with Curl 0235 \u0235 Small N with Curl 0236 \u0236 Small T with Curl 0237 \u0237 Small Dotless J 0238 \u0238 Small DB Digraph 0239 \u0239 Small QP Digraph 023A \u023a Capital A with Stroke 023B \u023b Capital C with Stroke 023C \u023c Small C with Stroke 023D \u023d Capital L with Bar 023E \u023e Capital T with Diagonal Stroke 023F \u023f Small S with Swash Tail 0240 \u0240 Small Z with Swash Tail 0241 \u0241 Capital Glottal Stop 0242 \u0242 Small Glottal Stop 0243 \u0243 Capital B with Stroke 0244 \u0244 Capital U Bar 0245 \u0245 Capital Turned V 0246 \u0246 Capital E with Stroke 0247 \u0247 Small E with Stroke 0248 \u0248 Capital J with Stroke 0249 \u0249 Small J with Stroke 024A \u024a Capital Q with Hook Tail 024B \u024b Small Q with Hook Tail 024C \u024c Capital R with Stroke 024D \u024d Small R with Stroke 024E \u024e Capital Y with Stroke 024F \u024f Small Y with Stroke 1E9E \u1e9e Capital Letter Sharp S DE","title":"Characters"},{"location":"design/characters/#encoding","text":"The character sets are encoded in UTF-8. All character sets contain the ASCII 0x20-0x7E characters and the non-braking-space (NBSP). Each set contains roughly the same extended characters from its equivalent iso-8859 standard . For example: To display the \u00f7 character on the plate you need to use \\u00F7 in json or jsonl commands, or send the encoded UTF-8 bytes 0xC3 0xB7 in other commands. All character sets also contain about 100 standaard Material Design Icons for home automation use. The default font in pre-compiled binaries is Roboto-Condensed-Regular with the Latin 1 character set. There is no support for right-to-left scipts.","title":"Encoding"},{"location":"design/characters/#ascii","text":"Includes all ASCII 0x20-0x7E characters extended with these 11 universal symbols: NBSP \u00a3 \u00b0 \u00b1 \u00b2 \u00b3 \u00b5 \u00d7 \u00f7 \u20ac \u2022","title":"Ascii"},{"location":"design/characters/#latin-1","text":"Includes all characters and symbols from the ASCII range above. Covers Northern, Western and Southern European languages: English (en), French (fr), Spanish (es), Portuguese (pt), Italian (it), Dutch (nl), German (de), Danish (da), Swedish (sv), Norwegian (no), Finnish (fi), Turkish (tr) \u00a1 \u00bf \u00c0 \u00c1 \u00c2 \u00c3 \u00c4 \u00c5 \u00c6 \u00c7 \u00c8 \u00c9 \u00ca \u00cb \u00cc \u00cd \u00ce \u00cf \u00d1 \u00d2 \u00d3 \u00d4 \u00d5 \u00d6 \u00d8 \u00d9 \u00da \u00db \u00dc \u00dd \u00de \u00df \u00e0 \u00e1 \u00e2 \u00e3 \u00e4 \u00e5 \u00e6 \u00e7 \u00e8 \u00e9 \u00ea \u00eb \u00ec \u00ed \u00ee \u00ef \u00f0 \u00f1 \u00f2 \u00f3 \u00f4 \u00f5 \u00f6 \u00f8 \u00f9 \u00fa \u00fb \u00fc \u00fd \u00fe \u00ff \u011e \u011f \u0130 \u0131 \u0152 \u0153 \u015e \u015f \u0160 \u0161 \u017d \u017e \u1e9e","title":"Latin 1"},{"location":"design/characters/#latin-2","text":"Includes all characters and symbols from the ASCII range above. Covers Central and Eastern European languages: Czech (cs), Hungarian (hu), Polish (pl), Romanian (ro), Croatian (hr), Slovak (sk), Slovenian (sl), Sorbian \u00c1 \u00c2 \u00c4 \u00c9 \u00cd \u00ce \u00d3 \u00d4 \u00d6 \u00da \u00dc \u00dd \u00e1 \u00e2 \u00e4 \u00e9 \u00ed \u00ee \u00f3 \u00f4 \u00f6 \u00fa \u00fc \u00fd \u0102 \u0103 \u0104 \u0105 \u0106 \u0107 \u010c \u010d \u010e \u010f \u0110 \u0111 \u0114 \u0115 \u0118 \u0119 \u011a \u011b \u0139 \u013a \u013d \u013e \u0141 \u0142 \u0143 \u0144 \u0147 \u0148 \u0150 \u0151 \u0154 \u0155 \u0158 \u0159 \u015a \u015b \u015e \u015f \u0160 \u0161 \u0162 \u0163 \u0164 \u0165 \u016e \u016f \u0170 \u0171 \u0179 \u017a \u017b \u017c \u017d \u017e \u01cd \u01ce \u0200 \u0201 \u0202 \u0203 \u0204 \u0205 \u0206 \u0207 \u0208 \u0209 \u020a \u020b \u020c \u020d \u020e \u020f \u0210 \u0211 \u0212 \u0213 \u0214 \u0215 \u0216 \u0217 \u0218 \u0219 \u021a \u021b","title":"Latin 2"},{"location":"design/characters/#chinese","text":"Includes all characters and symbols from the ASCII range above, plus 650 most common CJK radicals: \u4e00 \u4e03 \u4e09 \u4e0a \u4e0b \u4e0d \u4e14 \u4e16 \u4e26 \u4e2d \u4e3b \u4e45 \u4e4b \u4e4e \u4e4f \u4e5f \u4e86 \u4e8b \u4e8c \u4e94 \u4e9b \u4ea4 \u4ea6 \u4eac \u4eba \u4ec0 \u4ecd \u4ed6 \u4ee3 \u4ee4 \u4ee5 \u4ef6 \u4efb \u4efd \u4f01 \u4f0a \u4f3c \u4f46 \u4f4d \u4f4e \u4f4f \u4f55 \u4f5c \u4f60 \u4f7f \u4f86 \u4f8b \u4f9b \u4f9d \u4fbf \u4fc2 \u4fdd \u4fe1 \u500b \u5011 \u5019 \u503c \u505a \u5065 \u5099 \u50b3 \u50c5 \u50cf \u50f9 \u5143 \u5145 \u5148 \u514b \u514d \u5152 \u5165 \u5167 \u5168 \u5169 \u516b \u516c \u516d \u5171 \u5176 \u5177 \u518d \u51fa \u5206 \u5207 \u5217 \u5225 \u5229 \u5230 \u5236 \u5247 \u524d \u525b \u5275 \u5283 \u529b \u529f \u52a0 \u52a9 \u52aa \u52d5 \u52d9 \u52f5 \u5305 \u5316 \u5317 \u5340 \u5341 \u534a \u5354 \u5373 \u537b \u539f \u53bb \u53c3 \u53c8 \u53ca \u53cb \u53cd \u53d6 \u53d7 \u53e3 \u53e5 \u53e6 \u53ea \u53eb \u53ef \u53f0 \u53f2 \u53f8 \u5403 \u5404 \u5408 \u540c \u540d \u5411 \u5426 \u5427 \u5440 \u544a \u5462 \u547d \u548c \u54c1 \u54e1 \u54ea \u5546 \u554a \u554f \u5566 \u5584 \u559c \u559d \u55ae \u55ce \u55ef \u561b \u56b4 \u56db \u56de \u56e0 \u570b \u570d \u5712 \u5718 \u571f \u5728 \u5730 \u5747 \u5750 \u57df \u57f7 \u57fa \u5831 \u5834 \u584a \u5883 \u589e \u58d3 \u58eb \u5916 \u591a \u5920 \u5927 \u5929 \u592a \u592e \u5957 \u5973 \u5979 \u597d \u5982 \u59b3 \u59cb \u59d0 \u59d4 \u5a66 \u5a92 \u5abd \u5b50 \u5b57 \u5b58 \u5b69 \u5b78 \u5b83 \u5b89 \u5b8c \u5b98 \u5b9a \u5bb6 \u5bb9 \u5bcc \u5bdf \u5be6 \u5beb \u5c07 \u5c08 \u5c0d \u5c0e \u5c0f \u5c11 \u5c1a \u5c24 \u5c31 \u5c3a \u5c45 \u5c55 \u5c6c \u5c71 \u5de5 \u5df1 \u5df2 \u5e02 \u5e0c \u5e2b \u5e36 \u5e38 \u5e74 \u5e7e \u5e95 \u5e9c \u5ea6 \u5ea7 \u5ead \u5eb7 \u5ee0 \u5efa \u5f0f \u5f15 \u5f35 \u5f37 \u5f62 \u5f71 \u5f7c \u5f80 \u5f88 \u5f8c \u5f97 \u5f9e \u5fc3 \u5fc5 \u5feb \u5ff5 \u600e \u6015 \u601d \u6027 \u60a8 \u60c5 \u60f3 \u6108 \u610f \u611b \u611f \u614b \u6167 \u616e \u61c9 \u6210 \u6211 \u6216 \u6230 \u6240 \u624b \u624d \u6253 \u627e \u6280 \u628a \u6295 \u62c9 \u62ec \u62ff \u6301 \u6307 \u6388 \u6392 \u63a1 \u63a5 \u63a7 \u63a8 \u63d0 \u63ee \u64c1 \u64c7 \u64d4 \u64da \u652f \u6539 \u653e \u653f \u6545 \u6548 \u6559 \u6562 \u6574 \u6587 \u6599 \u65b0 \u65b7 \u65b9 \u65bc \u65bd \u65c1 \u65cf \u65e2 \u65e5 \u65e9 \u660e \u6613 \u662f \u6642 \u667a \u66f4 \u66f8 \u66fe \u6700 \u6703 \u6708 \u6709 \u670b \u670d \u671b \u671f \u672a \u672c \u675f \u6771 \u6790 \u679c \u67d0 \u67e5 \u6821 \u6839 \u683c \u689d \u695a \u696d \u6975 \u6982 \u69cb \u6a02 \u6a19 \u6a23 \u6a39 \u6a5f \u6b21 \u6b50 \u6b61 \u6b63 \u6b64 \u6b65 \u6b72 \u6b77 \u6b7b \u6b8a \u6bb5 \u6bcd \u6bcf \u6bd4 \u6c11 \u6c34 \u6c38 \u6c42 \u6c7a \u6c92 \u6cbb \u6cc1 \u6cd5 \u6ce8 \u6d32 \u6d3b \u6d88 \u6df1 \u6e05 \u6e1b \u6e2f \u6e90 \u6e96 \u6e9d \u6eff \u6f38 \u6fdf \u7063 \u70ba \u7121 \u7136 \u71df \u722d \u7236 \u7238 \u7247 \u7260 \u7269 \u7279 \u72c0 \u7372 \u73a9 \u73fe \u7403 \u7406 \u74b0 \u751a \u751f \u7522 \u7528 \u7531 \u7533 \u7537 \u754c \u756b \u7576 \u767c \u7684 \u7686 \u76ee \u76f4 \u76f8 \u770b \u771f \u773e \u77e5 \u7814 \u78ba \u793a \u793e \u795e \u79d1 \u7a0b \u7a2e \u7a4d \u7a76 \u7a7a \u7acb \u7ad9 \u7ae5 \u7b11 \u7b49 \u7b56 \u7ba1 \u7bc0 \u7bc4 \u7c21 \u7cbe \u7cfb \u7d04 \u7d20 \u7d42 \u7d44 \u7d50 \u7d66 \u7d71 \u7d93 \u7dad \u7db2 \u7df4 \u7e3d \u7e3e \u7e54 \u7e7c \u7e8c \u7f3a \u7f8e \u7fa9 \u7fd2 \u8001 \u8003 \u8005 \u800c \u805e \u806f \u8072 \u807d \u80af \u80b2 \u80fd \u8166 \u81c9 \u81ea \u81f3 \u81fa \u8207 \u8208 \u8209 \u822c \u8272 \u82e5 \u8336 \u8457 \u85dd \u8607 \u8655 \u884c \u8853 \u8868 \u88ab \u88e1 \u88fd \u897f \u8981 \u898b \u898f \u8996 \u89aa \u89ba \u89c0 \u89d2 \u89e3 \u8a00 \u8a08 \u8a0a \u8a0e \u8a13 \u8a18 \u8a2d \u8a31 \u8a34 \u8a71 \u8a72 \u8a8d \u8a9e \u8aaa \u8ab0 \u8ab2 \u8abf \u8ac7 \u8acb \u8ad6 \u8b02 \u8b1b \u8b1d \u8b58 \u8b70 \u8b77 \u8b8a \u8b93 \u8c50 \u8c61 \u8ca0 \u8cac \u8cb7 \u8cbb \u8cc7 \u8cea \u8cfd \u8d70 \u8d77 \u8d85 \u8d8a \u8da3 \u8db3 \u8ddf \u8def \u8eab \u8eca \u8edf \u8f03 \u8f15 \u8fa6 \u8fce \u8fd1 \u8ffd \u900f \u9010 \u9019 \u901a \u9020 \u9023 \u9032 \u904b \u904e \u9053 \u9054 \u9060 \u9069 \u9078 \u907f \u9084 \u908a \u90a3 \u90e8 \u90fd \u914d \u91ab \u91cd \u91cf \u91dd \u9280 \u9322 \u932f \u9577 \u958b \u9593 \u95dc \u9644 \u9662 \u9664 \u9678 \u968e \u969b \u96a8 \u96bb \u96d6 \u96d9 \u96e3 \u96fb \u9700 \u975e \u9762 \u9769 \u97f3 \u97ff \u9805 \u9808 \u9817 \u9818 \u982d \u984c \u9858 \u985e \u986f \u9999 \u9a57 \u9ad4 \u9ad8 \u9e97 \u9ebc \u9ede \u9ee8 \u9f13 \u4e00 \u4e03 \u4e09 \u4e0a \u4e0b \u4e0d \u4e14 \u4e16 \u4e26 \u4e2d \u4e3b \u4e45 \u4e4b \u4e4e \u4e4f \u4e5f \u4e86 \u4e8b \u4e8c \u4e94 \u4e9b \u4ea4 \u4ea6 \u4eac \u4eba \u4ec0 \u4ecd \u4ed6 \u4ee3 \u4ee4 \u4ee5 \u4ef6 \u4efb \u4efd \u4f01 \u4f0a \u4f3c \u4f46 \u4f4d \u4f4e \u4f4f \u4f55 \u4f5c \u4f60 \u4f7f \u4f86 \u4f8b \u4f9b \u4f9d \u4fbf \u4fc2 \u4fdd \u4fe1 \u500b \u5011 \u5019 \u503c \u505a \u5065 \u5099 \u50b3 \u50c5 \u50cf \u50f9 \u5143 \u5145 \u5148 \u514b \u514d \u5152 \u5165 \u5167 \u5168 \u5169 \u516b \u516c \u516d \u5171 \u5176 \u5177 \u518d \u51fa \u5206 \u5207 \u5217 \u5225 \u5229 \u5230 \u5236 \u5247 \u524d \u525b \u5275 \u5283 \u529b \u529f \u52a0 \u52a9 \u52aa \u52d5 \u52d9 \u52f5 \u5305 \u5316 \u5317 \u5340 \u5341 \u534a \u5354 \u5373 \u537b \u539f \u53bb \u53c3 \u53c8 \u53ca \u53cb \u53cd \u53d6 \u53d7 \u53e3 \u53e5 \u53e6 \u53ea \u53eb \u53ef \u53f0 \u53f2 \u53f8 \u5403 \u5404 \u5408 \u540c \u540d \u5411 \u5426 \u5427 \u5440 \u544a \u5462 \u547d \u548c \u54c1 \u54e1 \u54ea \u5546 \u554a \u554f \u5566 \u5584 \u559c \u559d \u55ae \u55ce \u55ef \u561b \u56b4 \u56db \u56de \u56e0 \u570b \u570d \u5712 \u5718 \u571f \u5728 \u5730 \u5747 \u5750 \u57df \u57f7 \u57fa \u5831 \u5834 \u584a \u5883 \u589e \u58d3 \u58eb \u5916 \u591a \u5920 \u5927 \u5929 \u592a \u592e \u5957 \u5973 \u5979 \u597d \u5982 \u59b3 \u59cb \u59d0 \u59d4 \u5a66 \u5a92 \u5abd \u5b50 \u5b57 \u5b58 \u5b69 \u5b78 \u5b83 \u5b89 \u5b8c \u5b98 \u5b9a \u5bb6 \u5bb9 \u5bcc \u5bdf \u5be6 \u5beb \u5c07 \u5c08 \u5c0d \u5c0e \u5c0f \u5c11 \u5c1a \u5c24 \u5c31 \u5c3a \u5c45 \u5c55 \u5c6c \u5c71 \u5de5 \u5df1 \u5df2 \u5e02 \u5e0c \u5e2b \u5e36 \u5e38 \u5e74 \u5e7e \u5e95 \u5e9c \u5ea6 \u5ea7 \u5ead \u5eb7 \u5ee0 \u5efa \u5f0f \u5f15 \u5f35 \u5f37 \u5f62 \u5f71 \u5f7c \u5f80 \u5f88 \u5f8c \u5f97 \u5f9e \u5fc3 \u5fc5 \u5feb \u5ff5 \u600e \u6015 \u601d \u6027 \u60a8 \u60c5 \u60f3 \u6108 \u610f \u611b \u611f \u614b \u6167 \u616e \u61c9 \u6210 \u6211 \u6216 \u6230 \u6240 \u624b \u624d \u6253 \u627e \u6280 \u628a \u6295 \u62c9 \u62ec \u62ff \u6301 \u6307 \u6388 \u6392 \u63a1 \u63a5 \u63a7 \u63a8 \u63d0 \u63ee \u64c1 \u64c7 \u64d4 \u64da \u652f \u6539 \u653e \u653f \u6545 \u6548 \u6559 \u6562 \u6574 \u6587 \u6599 \u65b0 \u65b7 \u65b9 \u65bc \u65bd \u65c1 \u65cf \u65e2 \u65e5 \u65e9 \u660e \u6613 \u662f \u6642 \u667a \u66f4 \u66f8 \u66fe \u6700 \u6703 \u6708 \u6709 \u670b \u670d \u671b \u671f \u672a \u672c \u675f \u6771 \u6790 \u679c \u67d0 \u67e5 \u6821 \u6839 \u683c \u689d \u695a \u696d \u6975 \u6982 \u69cb \u6a02 \u6a19 \u6a23 \u6a39 \u6a5f \u6b21 \u6b50 \u6b61 \u6b63 \u6b64 \u6b65 \u6b72 \u6b77 \u6b7b \u6b8a \u6bb5 \u6bcd \u6bcf \u6bd4 \u6c11 \u6c34 \u6c38 \u6c42 \u6c7a \u6c92 \u6cbb \u6cc1 \u6cd5 \u6ce8 \u6d32 \u6d3b \u6d88 \u6df1 \u6e05 \u6e1b \u6e2f \u6e90 \u6e96 \u6e9d \u6eff \u6f38 \u6fdf \u7063 \u70ba \u7121 \u7136 \u71df \u722d \u7236 \u7238 \u7247 \u7260 \u7269 \u7279 \u72c0 \u7372 \u73a9 \u73fe \u7403 \u7406 \u74b0 \u751a \u751f \u7522 \u7528 \u7531 \u7533 \u7537 \u754c \u756b \u7576 \u767c \u7684 \u7686 \u76ee \u76f4 \u76f8 \u770b \u771f \u773e \u77e5 \u7814 \u78ba \u793a \u793e \u795e \u79d1 \u7a0b \u7a2e \u7a4d \u7a76 \u7a7a \u7acb \u7ad9 \u7ae5 \u7b11 \u7b49 \u7b56 \u7ba1 \u7bc0 \u7bc4 \u7c21 \u7cbe \u7cfb \u7d04 \u7d20 \u7d42 \u7d44 \u7d50 \u7d66 \u7d71 \u7d93 \u7dad \u7db2 \u7df4 \u7e3d \u7e3e \u7e54 \u7e7c \u7e8c \u7f3a \u7f8e \u7fa9 \u7fd2 \u8001 \u8003 \u8005 \u800c \u805e \u806f \u8072 \u807d \u80af \u80b2 \u80fd \u8166 \u81c9 \u81ea \u81f3 \u81fa \u8207 \u8208 \u8209 \u822c \u8272 \u82e5 \u8336 \u8457 \u85dd \u8607 \u8655 \u884c \u8853 \u8868 \u88ab \u88e1 \u88fd \u897f \u8981 \u898b \u898f \u8996 \u89aa \u89ba \u89c0 \u89d2 \u89e3 \u8a00 \u8a08 \u8a0a \u8a0e \u8a13 \u8a18 \u8a2d \u8a31 \u8a34 \u8a71 \u8a72 \u8a8d \u8a9e \u8aaa \u8ab0 \u8ab2 \u8abf \u8ac7 \u8acb \u8ad6 \u8b02 \u8b1b \u8b1d \u8b58 \u8b70 \u8b77 \u8b8a \u8b93 \u8c50 \u8c61 \u8ca0 \u8cac \u8cb7 \u8cbb \u8cc7 \u8cea \u8cfd \u8d70 \u8d77 \u8d85 \u8d8a \u8da3 \u8db3 \u8ddf \u8def \u8eab \u8eca \u8edf \u8f03 \u8f15 \u8fa6 \u8fce \u8fd1 \u8ffd \u900f \u9010 \u9019 \u901a \u9020 \u9023 \u9032 \u904b \u904e \u9053 \u9054 \u9060 \u9069 \u9078 \u907f \u9084 \u908a \u90a3 \u90e8 \u90fd \u914d \u91ab \u91cd \u91cf \u91dd \u9280 \u9322 \u932f \u9577 \u958b \u9593 \u95dc \u9644 \u9662 \u9664 \u9678 \u968e \u969b \u96a8 \u96bb \u96d6 \u96d9 \u96e3 \u96fb \u9700 \u975e \u9762 \u9769 \u97f3 \u97ff \u9805 \u9808 \u9817 \u9818 \u982d \u984c \u9858 \u985e \u986f \u9999 \u9a57 \u9ad4 \u9ad8 \u9e97 \u9ebc \u9ede \u9ee8 \u9f13","title":"Chinese"},{"location":"design/characters/#characters","text":"UTF-8 Char Description CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00A0 Non-breaking space CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00A1 \u00a1 Inverted exclamation mark ES 00A2 \u00a2 Cent sign 00A3 \u00a3 Pound sign 00A4 \u00a4 Currency sign 00A5 \u00a5 Yen sign 00A6 \u00a6 Broken bar 00A7 \u00a7 Section sign 00A8 \u00a8 Diaeresis 00A9 \u00a9 Copyright sign 00AA \u00aa Feminine Ordinal Indicator 00AB \u00ab Left-pointing double angle quotation mark 00AC \u00ac Not sign 00AD \u00ad Soft hyphen 00AE \u00ae Registered sign 00AF \u00af Macron 00B0 \u00b0 Degree symbol CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00B1 \u00b1 Plus-minus sign CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00B2 \u00b2 Superscript two 00B3 \u00b3 Superscript three 00B4 \u00b4 Acute accent DA 00B5 \u00b5 Micro sign CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00B6 \u00b6 Pilcrow sign 00B7 \u00b7 Middle dot CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00B8 \u00b8 Cedilla 00B9 \u00b9 Superscript one 00BA \u00ba Masculine ordinal indicator 00BB \u00bb Right-pointing double-angle quotation mark 00BC \u00bc Vulgar fraction one quarter CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00BD \u00bd Vulgar fraction one half CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00BE \u00be Vulgar fraction three quarters CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00BF \u00bf Inverted question mark ES 00C0 \u00c0 Capital A with grave PT IT FR 00C1 \u00c1 Capital A with acute HU ES PT FR 00C2 \u00c2 Capital A with circumflex RO NO PT FR 00C3 \u00c3 Capital A with tilde PT 00C4 \u00c4 Capital A with diaeresis DE SV FI DA 00C5 \u00c5 Capital A with ring above SV FI DA NO 00C6 \u00c6 Capital AE DA NO 00C7 \u00c7 Capital C with cedilla PT FR 00C8 \u00c8 Capital E with grave NO IT FR 00C9 \u00c9 Capital E with acute NO HU ES PT IT FR 00CA \u00ca Capital E with circumflex NO PT FR 00CB \u00cb Capital E with diaeresis FR 00CC \u00cc Capital I with grave IT 00CD \u00cd Capital I with acute HU ES PT 00CE \u00ce Capital I with circumflex RO FR 00CF \u00cf Capital I with diaeresis FR 00D0 \u00d0 Capital Eth 00D1 \u00d1 Capital N with tilde ES 00D2 \u00d2 Capital O with grave NO IT 00D3 \u00d3 Capital O with acute NO HU ES PT 00D4 \u00d4 Capital O with circumflex NO PT FR 00D5 \u00d5 Capital O with tilde PT FR 00D6 \u00d6 Capital O with diaeresis DE SV FI DA HU 00D7 \u00d7 Multiplication sign CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00D8 \u00d8 Capital O with stroke DA NO 00D9 \u00d9 Capital U with grave IT 00DA \u00da Capital U with acute HU ES PT 00DB \u00db Capital U with circumflex 00DC \u00dc Capital U with diaeresis DE DA HU ES PT 00DD \u00dd Capital Y with acute CZ ES 00DE \u00de Capital Thorn 00DF \u00df Small sharp S DE 00E0 \u00e0 Small A with grave PT IT FR 00E1 \u00e1 Small A with acute HU ES PT FR 00E2 \u00e2 Small A with circumflex RO NO PT FR 00E3 \u00e3 Small A with tilde PT 00E4 \u00e4 Small A with diaeresis DE SV FI DA 00E5 \u00e5 Small A with ring above SV FI DA NO 00E6 \u00e6 Small AE DA NO 00E7 \u00e7 Small C with cedilla PT FR 00E8 \u00e8 Small E with grave NO IT FR 00E9 \u00e9 Small E with acute DA NO HU ES PT IT FR 00EA \u00ea Small E with circumflex NO PT FR 00EB \u00eb Small E with diaeresis 00EC \u00ec Small I with grave IT 00ED \u00ed Small I with acute HU ES PT FR 00EE \u00ee Small I with circumflex RO FR 00EF \u00ef Small I with diaeresis FR 00F0 \u00f0 Small Eth 00F1 \u00f1 Small N with tilde ES EN NL 00F2 \u00f2 Small O with grave NO IT 00F3 \u00f3 Small O with acute NO HU ES PT FR 00F4 \u00f4 Small O with circumflex NO PT FR 00F5 \u00f5 Small O with tilde PT 00F6 \u00f6 Small O with diaeresis DE SV FI DA HU 00F7 \u00f7 Division sign CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00F8 \u00f8 Small O with stroke DA NO 00F9 \u00f9 Small U with grave IT FR 00FA \u00fa Small U with acute HU ES PT FR 00FB \u00fb Small U with circumflex FR 00FC \u00fc Small U with diaeresis DE DA HU ES PT 00FD \u00fd Small Y with acute ES 00FE \u00fe Small Thorn 00FF \u00ff Small Y with diaeresis 0100 \u0100 Capital A with macron 0101 \u0101 Small A with macron 0102 \u0102 Capital A with breve RO 0103 \u0103 Small A with breve RO 0104 \u0104 Capital A with ogonek 0105 \u0105 Small A with ogonek 0106 \u0106 Capital C with acute 0107 \u0107 Small C with acute 0108 \u0108 Capital C with circumflex 0109 \u0109 Small C with circumflex 010A \u010a Capital C with dot above 010B \u010b Small C with dot above 010C \u010c Capital C with caron SL 010D \u010d Small C with caron SL 010E \u010e Capital D with caron 010F \u010f Small D with caron 0110 \u0110 Capital D with stroke 0111 \u0111 Small D with stroke 0112 \u0112 Capital E with macron 0113 \u0113 Small E with macron 0114 \u0114 Capital E with breve CZ 0115 \u0115 Small E with breve CZ 0116 \u0116 Capital E with dot above 0117 \u0117 Small E with dot above 0118 \u0118 Capital E with ogonek 0119 \u0119 Small E with ogonek 011A \u011a Capital E with caron 011B \u011b Small E with caron 011C \u011c Capital G with circumflex 011D \u011d Small G with circumflex 011E \u011e Capital G with breve 011F \u011f Small G with breve 0120 \u0120 Capital G with dot above 0121 \u0121 Small G with dot above 0122 \u0122 Capital G with cedilla 0123 \u0123 Small G with cedilla 0124 \u0124 Capital H with circumflex 0125 \u0125 Small H with circumflex 0126 \u0126 Capital H with stroke 0127 \u0127 Small H with stroke 0128 \u0128 Capital I with tilde 0129 \u0129 Small I with tilde 012A \u012a Capital I with macron 012B \u012b Small I with macron 012C \u012c Capital I with breve 012D \u012d Small I with breve 012E \u012e Capital I with ogonek 012F \u012f Small I with ogonek 0130 \u0130 Capital I with dot above 0131 \u0131 Small dotless I 0132 \u0132 Capital Ligature IJ 0133 \u0133 Small Ligature IJ 0134 \u0134 Capital J with circumflex 0135 \u0135 Small J with circumflex 0136 \u0136 Capital K with cedilla 0137 \u0137 Small K with cedilla 0138 \u0138 Small Kra 0139 \u0139 Capital L with acute 013A \u013a Small L with acute 013B \u013b Capital L with cedilla 013C \u013c Small L with cedilla 013D \u013d Capital L with caron 013E \u013e Small L with caron 013F \u013f Capital L with middle dot 0140 \u0140 Small L with middle dot 0141 \u0141 Capital L with stroke 0142 \u0142 Small L with stroke 0143 \u0143 Capital N with acute 0144 \u0144 Small N with acute 0145 \u0145 Capital N with cedilla 0146 \u0146 Small N with cedilla 0147 \u0147 Capital N with caron CZ 0148 \u0148 Small N with caron CZ 0149 \u0149 Small N preceded by apostrophe 014A \u014a Capital Eng 014B \u014b Small Eng 014C \u014c Capital O with macron 014D \u014d Small O with macron 014E \u014e Capital O with breve 014F \u014f Small O with breve 0150 \u0150 Capital O with double acute HU 0151 \u0151 Small O with double acute HU 0152 \u0152 Capital Ligature OE FR 0153 \u0153 Small Ligature OE FR 0154 \u0154 Capital R with acute 0155 \u0155 Small R with acute 0156 \u0156 Capital R with cedilla 0157 \u0157 Small R with cedilla 0158 \u0158 Capital R with caron 0159 \u0159 Small R with caron 015A \u015a Capital S with acute 015B \u015b Small S with acute 015C \u015c Capital S with circumflex 015D \u015d Small S with circumflex 015E \u015e Capital S with cedilla RO 015F \u015f Small S with cedilla RO 0160 \u0160 Capital S with caron SL FI 0161 \u0161 Small S with caron SL FI 0162 \u0162 Capital T with cedilla RO 0163 \u0163 Small T with cedilla RO 0164 \u0164 Capital T with caron 0165 \u0165 Small T with caron 0166 \u0166 Capital T with stroke 0167 \u0167 Small T with stroke 0168 \u0168 Capital U with tilde 0169 \u0169 Small U with tilde 016A \u016a Capital U with macron 016B \u016b Small U with macron 016C \u016c Capital U with breve 016D \u016d Small U with breve 016E \u016e Capital U with ring above CZ 016F \u016f Small U with ring above CZ 0170 \u0170 Capital U with double acute HU 0171 \u0171 Small U with double acute HU 0172 \u0172 Capital U with ogonek 0173 \u0173 Small U with ogonek 0174 \u0174 Capital W with circumflex 0175 \u0175 Small W with circumflex 0176 \u0176 Capital Y with circumflex 0177 \u0177 Small Y with circumflex 0178 \u0178 Capital Y with diaeresis 0179 \u0179 Capital Z with acute 017A \u017a Small Z with acute 017B \u017b Capital Z with dot above 017C \u017c Small Z with dot above 017D \u017d Capital Z with caron SL FI 017E \u017e Small Z with caron SL FI 017F \u017f Small long S 01C4 \u01c4 Capital DZ with Caron HR 01C5 \u01c5 Capital D with Small Z with Caron HR 01C6 \u01c6 Small DZ with Caron HR 01C7 \u01c7 Capital LJ HR 01C8 \u01c8 Capital L with Small J HR 01C9 \u01c9 Small LJ HR 01CA \u01ca Capital NJ HR 01CB \u01cb Capital N with Small J HR 01CC \u01cc Small NJ HR 01CD \u01cd Capital A with Caron RO 01CE \u01ce Small A with Caron RO 01CF \u01cf Capital I with Caron 01D0 \u01d0 Small I with Caron 01D1 \u01d1 Capital O with Caron 01D2 \u01d2 Small O with Caron 01D3 \u01d3 Capital U with Caron 01D4 \u01d4 Small U with Caron 01D5 \u01d5 Capital U with Diaeresis and Macron 01D6 \u01d6 Small U with Diaeresis and Macron 01D7 \u01d7 Capital U with Diaeresis and Acute 01D8 \u01d8 Small U with Diaeresis and Acute 01D9 \u01d9 Capital U with Diaeresis and Caron 01DA \u01da Small U with Diaeresis and Caron 01DB \u01db Capital U with Diaeresis and Grave 01DC \u01dc Small U with Diaeresis and Grave 01DD \u01dd Small Turned E 01DE \u01de Capital A with Diaeresis and Macron 01DF \u01df Small A with Diaeresis and Macron 01E0 \u01e0 Capital A with Dot Above and Macron 01E1 \u01e1 Small A with Dot Above and Macron 01E2 \u01e2 Capital AE with Macron 01E3 \u01e3 Small AE with Macron 01E4 \u01e4 Capital G with Stroke 01E5 \u01e5 Small G with Stroke 01E6 \u01e6 Capital G with Caron 01E7 \u01e7 Small G with Caron 01E8 \u01e8 Capital K with Caron 01E9 \u01e9 Small K with Caron 01EA \u01ea Capital O with Ogonek 01EB \u01eb Small O with Ogonek 01EC \u01ec Capital O with Ogonek and Macron 01ED \u01ed Small O with Ogonek and Macron 01EE \u01ee Capital Ezh with Caron 01EF \u01ef Small Ezh with Caron 01F0 \u01f0 Small J with Caron 01F1 \u01f1 Capital DZ 01F2 \u01f2 Capital D with Small Z 01F3 \u01f3 Small DZ 01F4 \u01f4 Capital G with Acute 01F5 \u01f5 Small G with Acute 01F6 \u01f6 Capital Hwair 01F7 \u01f7 Capital Wynn 01F8 \u01f8 Capital N with Grave 01F9 \u01f9 Small N with Grave 01FA \u01fa Capital A with Ring Above and Acute 01FB \u01fb Small A with Ring Above and Acute 01FC \u01fc Capital AE with Acute 01FD \u01fd Small AE with Acute 01FE \u01fe Capital O with Stroke and Acute 01FF \u01ff Small O with Stroke and Acute 0200 \u0200 Capital A with Double Grave HR SL 0201 \u0201 Small A with Double Grave HR SL 0202 \u0202 Capital A with Inverted Breve RO HR SL 0203 \u0203 Small A with Inverted Breve RO HR SL 0204 \u0204 Capital E with Double Grave HR SL 0205 \u0205 Small E with Double Grave HR SL 0206 \u0206 Capital E with Inverted Breve HR SL 0207 \u0207 Small E with Inverted Breve HR SL 0208 \u0208 Capital I with Double Grave HR SL 0209 \u0209 Small I with Double Grave HR SL 020A \u020a Capital I with Inverted Breve RO HR SL 020B \u020b Small I with Inverted Breve RO HR SL 020C \u020c Capital O with Double Grave HR SL 020D \u020d Small O with Double Grave HR SL 020E \u020e Capital O with Inverted Breve HR SL 020F \u020f Small O with Inverted Breve HR SL 0210 \u0210 Capital R with Double Grave HR SL 0211 \u0211 Small R with Double Grave HR SL 0212 \u0212 Capital R with Inverted Breve HR SL 0213 \u0213 Small R with Inverted Breve HR SL 0214 \u0214 Capital U with Double Grave HR SL 0215 \u0215 Small U with Double Grave HR SL 0216 \u0216 Capital U with Inverted Breve HR SL 0217 \u0217 Small U with Inverted Breve HR SL 0218 \u0218 Capital S with Comma Below RO 0219 \u0219 Small S with Comma Below RO 021A \u021a Capital T with Comma Below RO 021B \u021b Small T with Comma Below RO 021C \u021c Capital Yogh 021D \u021d Small Yogh 021E \u021e Capital H with Caron 021F \u021f Small H with Caron 0220 \u0220 Capital N with Long Right Leg 0221 \u0221 Small D with Curl 0222 \u0222 Capital OU 0223 \u0223 Small OU 0224 \u0224 Capital Z with Hook 0225 \u0225 Small Z with Hook 0226 \u0226 Capital A with Dot Above 0227 \u0227 Small A with Dot Above 0228 \u0228 Capital E with Cedilla 0229 \u0229 Small E with Cedilla 022A \u022a Capital O with Diaeresis and Macron 022B \u022b Small O with Diaeresis and Macron 022C \u022c Capital O with Tilde and Macron 022D \u022d Small O with Tilde and Macron 022E \u022e Capital O with Dot Above 022F \u022f Small O with Dot Above 0230 \u0230 Capital O with Dot Above and Macron 0231 \u0231 Small O with Dot Above and Macron 0232 \u0232 Capital Y with Macron 0233 \u0233 Small Y with Macron 0234 \u0234 Small L with Curl 0235 \u0235 Small N with Curl 0236 \u0236 Small T with Curl 0237 \u0237 Small Dotless J 0238 \u0238 Small DB Digraph 0239 \u0239 Small QP Digraph 023A \u023a Capital A with Stroke 023B \u023b Capital C with Stroke 023C \u023c Small C with Stroke 023D \u023d Capital L with Bar 023E \u023e Capital T with Diagonal Stroke 023F \u023f Small S with Swash Tail 0240 \u0240 Small Z with Swash Tail 0241 \u0241 Capital Glottal Stop 0242 \u0242 Small Glottal Stop 0243 \u0243 Capital B with Stroke 0244 \u0244 Capital U Bar 0245 \u0245 Capital Turned V 0246 \u0246 Capital E with Stroke 0247 \u0247 Small E with Stroke 0248 \u0248 Capital J with Stroke 0249 \u0249 Small J with Stroke 024A \u024a Capital Q with Hook Tail 024B \u024b Small Q with Hook Tail 024C \u024c Capital R with Stroke 024D \u024d Small R with Stroke 024E \u024e Capital Y with Stroke 024F \u024f Small Y with Stroke 1E9E \u1e9e Capital Letter Sharp S DE","title":"Characters"},{"location":"design/data-types/","text":"Data Types ~ There are 5 major data types that openHASP uses when communicating over MQTT: Boolean ~ Properties with a boolean data type accept these values and are case insensitive: true / ON / 1 / yes false / OFF / 0 / no The return value will be either 1 / 0 or on / off depending on the context. Integer ~ Numeric properties have integer values with a variable minimum and maximum input value. Certain object properties also support negative values. Details int8 (signed) supports values ranging from -128 to 127. uint8 (unsigned) supports values ranging from 0 to 255. int16 (signed) supports values ranging from -32768 to 32767. uint16 (unsigned) supports values ranging from 0 to 65535. String ~ Properties that accept textual input. When sending raw text in the MQTT payload or as command parameter no quotes are needed. Only when a text value is included in a jsonl or json command, it needs to be quoted accoring to JSON rules. JSON Object ~ Some properties can be set or retrieved in JSON format too. The JSON object has several keys that have a boolean, integer or string data type. Colors ~ Color values can be: Short names (from table below) RGB hex code ( #rrggbb ) Short hex code ( #rgb ) RGB565 number format ( 0..65535 ) Hex Code Short Name Hex Code Short Name #00FFFF Cyan or Aqua #FFC0CB Pink #00FF00 Lime #DDA0DD Plum #008000 Green #DA70D6 Orchid #008080 Teal #EE82EE Violet #0000FF Blue #FF00FF Magenta or Fuchsia #000080 Navy #800080 Purple #808000 Olive #4B0082 Indigo #CD853F Peru #B00000 Blush #A0522D Sienna #FF0000 Red #A52A2A Brown #FF6347 Tomato #800000 Maroon #FA8072 Salmon #FFFFFF White #FF7F50 Coral #FFFAFA Snow #FFA500 Orange #FFFFF0 Ivory #FFD700 Gold #FAF0E6 Linen #FFFF00 Yellow #F5F5DC Beige #F0E68C Khaki #F0FFFF Azure #FFE4C4 Bisque #C0C0C0 Silver #F5DEB3 Wheat #808080 Gray or Grey #D2B48C Tan #000000 Black Setting Color ~ Examples: 1 2 3 4 p 0 b 2. value_color= 13891 p 1 b 5. te x t _color=silver p 2 b 3. bg_color=#C 042 A 3 p 2 b 4. border_color=# 9 f 9 Return values ~ When retrieving the color of an object, both the HTML representation as the RGB values are returned seperately. The format will be a json object with components: color : 6 digit hexadecimal code preceeded by a hash # sign. r : byte value for red ( 0..255 ) g : byte value for green ( 0..255 ) b : byte value for blue ( 0..255 ) For example, the color returned by a color picker change event is: 1 { \"color\" : \"#00fff6\" , \"r\" : 0 , \"g\" : 255 , \"b\" : 246 } Variables ~ Some properties can be set with variable data at plate runtime. Use the strings below to retrieve data: %ip% - IP address of the plate %hostname% - hostname (nodename) %ssid% - SSID of the network connected to %model% - plate model (set in the firmware) %version% - firmware version number","title":"Data Types"},{"location":"design/data-types/#data-types","text":"There are 5 major data types that openHASP uses when communicating over MQTT:","title":"Data Types"},{"location":"design/data-types/#boolean","text":"Properties with a boolean data type accept these values and are case insensitive: true / ON / 1 / yes false / OFF / 0 / no The return value will be either 1 / 0 or on / off depending on the context.","title":"Boolean"},{"location":"design/data-types/#integer","text":"Numeric properties have integer values with a variable minimum and maximum input value. Certain object properties also support negative values. Details int8 (signed) supports values ranging from -128 to 127. uint8 (unsigned) supports values ranging from 0 to 255. int16 (signed) supports values ranging from -32768 to 32767. uint16 (unsigned) supports values ranging from 0 to 65535.","title":"Integer"},{"location":"design/data-types/#string","text":"Properties that accept textual input. When sending raw text in the MQTT payload or as command parameter no quotes are needed. Only when a text value is included in a jsonl or json command, it needs to be quoted accoring to JSON rules.","title":"String"},{"location":"design/data-types/#json-object","text":"Some properties can be set or retrieved in JSON format too. The JSON object has several keys that have a boolean, integer or string data type.","title":"JSON Object"},{"location":"design/data-types/#colors","text":"Color values can be: Short names (from table below) RGB hex code ( #rrggbb ) Short hex code ( #rgb ) RGB565 number format ( 0..65535 ) Hex Code Short Name Hex Code Short Name #00FFFF Cyan or Aqua #FFC0CB Pink #00FF00 Lime #DDA0DD Plum #008000 Green #DA70D6 Orchid #008080 Teal #EE82EE Violet #0000FF Blue #FF00FF Magenta or Fuchsia #000080 Navy #800080 Purple #808000 Olive #4B0082 Indigo #CD853F Peru #B00000 Blush #A0522D Sienna #FF0000 Red #A52A2A Brown #FF6347 Tomato #800000 Maroon #FA8072 Salmon #FFFFFF White #FF7F50 Coral #FFFAFA Snow #FFA500 Orange #FFFFF0 Ivory #FFD700 Gold #FAF0E6 Linen #FFFF00 Yellow #F5F5DC Beige #F0E68C Khaki #F0FFFF Azure #FFE4C4 Bisque #C0C0C0 Silver #F5DEB3 Wheat #808080 Gray or Grey #D2B48C Tan #000000 Black","title":"Colors"},{"location":"design/data-types/#setting-color","text":"Examples: 1 2 3 4 p 0 b 2. value_color= 13891 p 1 b 5. te x t _color=silver p 2 b 3. bg_color=#C 042 A 3 p 2 b 4. border_color=# 9 f 9","title":"Setting Color"},{"location":"design/data-types/#return-values","text":"When retrieving the color of an object, both the HTML representation as the RGB values are returned seperately. The format will be a json object with components: color : 6 digit hexadecimal code preceeded by a hash # sign. r : byte value for red ( 0..255 ) g : byte value for green ( 0..255 ) b : byte value for blue ( 0..255 ) For example, the color returned by a color picker change event is: 1 { \"color\" : \"#00fff6\" , \"r\" : 0 , \"g\" : 255 , \"b\" : 246 }","title":"Return values"},{"location":"design/data-types/#variables","text":"Some properties can be set with variable data at plate runtime. Use the strings below to retrieve data: %ip% - IP address of the plate %hostname% - hostname (nodename) %ssid% - SSID of the network connected to %model% - plate model (set in the firmware) %version% - firmware version number","title":"Variables"},{"location":"design/fonts-mdi/","text":"Fonts Built-in Fonts ~ The ESP8266 firmware only has 1 built-in font: Unscii with font size 8pt. The ESP32 additionally contains the Ubuntu Condensed font in these font sizes: 12, 16, 22 and 28pt. The built-in fonts can be set by using the pointsize as parameter: for example: 1 2 p 4 b 1. te x t _ f o nt = 16 p 4 b 2. value_ f o nt = 8 Proposed built-in Icons ~ Top 80~100 icons will be included in the built-in font sizes, this means importance >=45 or >=35: img haspCP name importance mdiCP purpose remarks E12C check 100 0xf012c btn-nav lvgl keyboard E140 chevron-down 100 0xf0140 arrow lvgl keyboard E141 chevron-left 100 0xf0141 arrow lvgl keyboard E142 chevron-right 100 0xf0142 arrow lvgl keyboard E143 chevron-up 100 0xf0143 arrow lvgl keyboard E156 close 100 0xf0156 btn-nav lvgl keyboard E045 arrow-down 95 0xf0045 arrow navigation E04D arrow-left 95 0xf004d arrow navigation E054 arrow-right 95 0xf0054 arrow navigation E05D arrow-up 95 0xf005d arrow navigation E2DC home 95 0xf02dc btn-nav place E374 minus 95 0xf0374 btn-nav controls E415 plus 95 0xf0415 btn-nav controls E717 snowflake 95 0xf0717 climate scene and weather E60C subdirectory-arrow-left 95 0xf060c arrow use lvgl keyboard-return E599 weather-sunny 95 0xf0599 climate scene and weather E5A8 white-balance-sunny 95 0xf05a8 climate scene; controls and weather E335 lightbulb 90 0xf0335 light home control E6E8 lightbulb-on 90 0xf06e8 light home control E50F thermometer 90 0xf050f climate sensor display E58E water-percent 90 0xf058e climate sensor display E594 weather-night 90 0xf0594 climate scene and weather F40B lightning-bolt 80 0xf140b energy sensor display E5A9 wifi 80 0xf05a9 wireless connectivity display E11C cellphone 75 0xf011c device presence E425 power 75 0xf0425 energy home control E769 ceiling-light 70 0xf0769 light home control E81B door-closed 70 0xf081b security sensor display F0AF door-closed-lock 70 0xf10af security sensor display E81C door-open 70 0xf081c security sensor display E322 laptop 70 0xf0322 device presence E6A5 power-plug 70 0xf06a5 energy home control E150 clock-outline 65 0xf0150 time sensor display F2D4 garage-open-variant 65 0xf12d4 control home control F2D3 garage-variant 65 0xf12d3 control home control F11C window-shutter 65 0xf111c control home control F11D window-shutter-alert 65 0xf111d control home control F11E window-shutter-open 65 0xf111e control home control E10B car 60 0xf010b place E33E lock 60 0xf033e security sensor display EFC6 lock-open-variant 60 0xf0fc6 security sensor display F054 outdoor-lamp 60 0xf1054 light nan E70D robot-vacuum 60 0xf070d device home control E99D shield-lock 60 0xf099d security E01B air-conditioner 55 0xf001b climate E026 alert 55 0xf0026 security sensor display E09A bell 55 0xf009a device home control E30B key-variant 55 0xf030b security E32A leaf 55 0xf032a energy sensor/eco display E438 radiator 55 0xf0438 climate home control EAD7 radiator-disabled 55 0xf0ad7 climate home control E68A shield-home 55 0xf068a security E4AD skip-next 55 0xf04ad sound home device control E4AE skip-previous 55 0xf04ae sound home device control E502 television 55 0xf0502 device E0AC blinds 50 0xf00ac control home control F011 blinds-open 50 0xf1011 control home control E70E run 50 0xf070e presence motion sensor display E565 shield-check 50 0xf0565 security EA70 silverware-fork-knife 50 0xf0a70 place E75F volume-mute 50 0xf075f sound E4B9 sofa 49 0xf04b9 place E004 account 48 0xf0004 presence interaction - media player - artist E2E3 bed 48 0xf02e3 place E64A human-greeting 48 0xf064a presence interaction E9A0 shower 48 0xf09a0 place E606 pool 46 0xf0606 place F020 coach-lamp 45 0xf1020 light E8DD floor-lamp 45 0xf08dd light E6B5 lamp 45 0xf06b5 light E456 repeat 45 0xf0456 sound home device control E457 repeat-off 45 0xf0457 sound home device control E458 repeat-once 45 0xf0458 sound home device control F1F3 robot-mower-outline 45 0xf11f3 device home control E49D shuffle 45 0xf049d sound home device control E49E shuffle-disabled 45 0xf049e sound home device control E4C3 speaker 45 0xf04c3 sound home device control EA7A trash-can-outline 45 0xF0A7A device trash tank full F1E1 vanity-light 45 0xf11e1 light E57E volume-high 45 0xf057e sound home device control E91C wall-sconce 45 0xf091c light E0AF bluetooth 40 0xf00af wireless connectivity display E493 cog 40 0xf0493 btn-nav navigation E210 fan 40 0xf0210 device home control E238 fire 40 0xf0238 climate heating / fireplace E3E4 pause 40 0xf03e4 sound home device control E40A play 40 0xf040a sound home device control E4DB stop 40 0xf04db sound home device status E4DE stove 40 0xf04de device nan E580 volume-medium 40 0xf0580 sound home device status E72A washing-machine 39 0xf072a device nan E917 tumble-dryer 38 0xf0917 device nan EAAC dishwasher 37 0xf0aac device nan E28F fridge-outline 36 0xF028F device nan EC99 microwave 36 0xF0C99 device nan E95F desk-lamp 35 0xf095f light E5F1 ev-station 35 0xf05f1 energy sensor display/control E9AB toilet 35 0xf09ab place E58C water 35 0xf058c climate sensor display/control E176 coffee 34 0xf0176 place F2BA string-lights 34 0xf12ba light E51B timer-outline 33 0xf051b time F1DB window-closed-variant 33 0xF11DB security alarm / sensor E08E battery-outline 32 0xf008e energy sensor display E6A1 home-outline 32 0xf06a1 btn-nav use normal version instead E96B fountain 31 0xF096B device nan E5FA kettle 31 0xf05fa device nan E75A music 31 0xf075a sound media player -song E58F water-pump 31 0xf058f device E6C0 arrow-down-box 30 0xf06c0 arrow control E6C3 arrow-up-box 30 0xf06c3 arrow control F2A3 battery-high 30 0xf12a3 energy sensor display F2A1 battery-low 30 0xf12a1 energy sensor display F2A2 battery-medium 30 0xf12a2 energy sensor display E0ED calendar 29 0xF00ED time date E7AE cctv 29 0xF07AE security nan E2DA history 29 0xF02DA time nan E1D9 dots-vertical 28 0xf01d9 navigation menu E1FA engine 28 0xf01fa device nan EF5F monitor-speaker 28 0xf0f5f sound home device control To use an icon in a text you need to prefix the UTF-8 value with \\u . To ensure proper decoding the payload should be used with a json or jsonl command. jsonl example: 1 { \"page\" : 2 , \"id\" : 1 , \"obj\" : \"label\" , \"x\" : 0 , \"y\" : 50 , \"w\" : 150 , \"h\" : 50 , \"text\" : \"\\uE64A Hello world!\" } json example: 1 [ \"p2b1.text=\\uE64A Hello world!\" ] Custom Fonts ~ You can add a custom .zi font by uploading it to the internal flash. Apply it as the default font on the Configuration > HASP Settings page. To use it, set the pointsize parameter of the property to 0 .","title":"Fonts mdi"},{"location":"design/fonts-mdi/#built-in-fonts","text":"The ESP8266 firmware only has 1 built-in font: Unscii with font size 8pt. The ESP32 additionally contains the Ubuntu Condensed font in these font sizes: 12, 16, 22 and 28pt. The built-in fonts can be set by using the pointsize as parameter: for example: 1 2 p 4 b 1. te x t _ f o nt = 16 p 4 b 2. value_ f o nt = 8","title":"Built-in Fonts"},{"location":"design/fonts-mdi/#proposed-built-in-icons","text":"Top 80~100 icons will be included in the built-in font sizes, this means importance >=45 or >=35: img haspCP name importance mdiCP purpose remarks E12C check 100 0xf012c btn-nav lvgl keyboard E140 chevron-down 100 0xf0140 arrow lvgl keyboard E141 chevron-left 100 0xf0141 arrow lvgl keyboard E142 chevron-right 100 0xf0142 arrow lvgl keyboard E143 chevron-up 100 0xf0143 arrow lvgl keyboard E156 close 100 0xf0156 btn-nav lvgl keyboard E045 arrow-down 95 0xf0045 arrow navigation E04D arrow-left 95 0xf004d arrow navigation E054 arrow-right 95 0xf0054 arrow navigation E05D arrow-up 95 0xf005d arrow navigation E2DC home 95 0xf02dc btn-nav place E374 minus 95 0xf0374 btn-nav controls E415 plus 95 0xf0415 btn-nav controls E717 snowflake 95 0xf0717 climate scene and weather E60C subdirectory-arrow-left 95 0xf060c arrow use lvgl keyboard-return E599 weather-sunny 95 0xf0599 climate scene and weather E5A8 white-balance-sunny 95 0xf05a8 climate scene; controls and weather E335 lightbulb 90 0xf0335 light home control E6E8 lightbulb-on 90 0xf06e8 light home control E50F thermometer 90 0xf050f climate sensor display E58E water-percent 90 0xf058e climate sensor display E594 weather-night 90 0xf0594 climate scene and weather F40B lightning-bolt 80 0xf140b energy sensor display E5A9 wifi 80 0xf05a9 wireless connectivity display E11C cellphone 75 0xf011c device presence E425 power 75 0xf0425 energy home control E769 ceiling-light 70 0xf0769 light home control E81B door-closed 70 0xf081b security sensor display F0AF door-closed-lock 70 0xf10af security sensor display E81C door-open 70 0xf081c security sensor display E322 laptop 70 0xf0322 device presence E6A5 power-plug 70 0xf06a5 energy home control E150 clock-outline 65 0xf0150 time sensor display F2D4 garage-open-variant 65 0xf12d4 control home control F2D3 garage-variant 65 0xf12d3 control home control F11C window-shutter 65 0xf111c control home control F11D window-shutter-alert 65 0xf111d control home control F11E window-shutter-open 65 0xf111e control home control E10B car 60 0xf010b place E33E lock 60 0xf033e security sensor display EFC6 lock-open-variant 60 0xf0fc6 security sensor display F054 outdoor-lamp 60 0xf1054 light nan E70D robot-vacuum 60 0xf070d device home control E99D shield-lock 60 0xf099d security E01B air-conditioner 55 0xf001b climate E026 alert 55 0xf0026 security sensor display E09A bell 55 0xf009a device home control E30B key-variant 55 0xf030b security E32A leaf 55 0xf032a energy sensor/eco display E438 radiator 55 0xf0438 climate home control EAD7 radiator-disabled 55 0xf0ad7 climate home control E68A shield-home 55 0xf068a security E4AD skip-next 55 0xf04ad sound home device control E4AE skip-previous 55 0xf04ae sound home device control E502 television 55 0xf0502 device E0AC blinds 50 0xf00ac control home control F011 blinds-open 50 0xf1011 control home control E70E run 50 0xf070e presence motion sensor display E565 shield-check 50 0xf0565 security EA70 silverware-fork-knife 50 0xf0a70 place E75F volume-mute 50 0xf075f sound E4B9 sofa 49 0xf04b9 place E004 account 48 0xf0004 presence interaction - media player - artist E2E3 bed 48 0xf02e3 place E64A human-greeting 48 0xf064a presence interaction E9A0 shower 48 0xf09a0 place E606 pool 46 0xf0606 place F020 coach-lamp 45 0xf1020 light E8DD floor-lamp 45 0xf08dd light E6B5 lamp 45 0xf06b5 light E456 repeat 45 0xf0456 sound home device control E457 repeat-off 45 0xf0457 sound home device control E458 repeat-once 45 0xf0458 sound home device control F1F3 robot-mower-outline 45 0xf11f3 device home control E49D shuffle 45 0xf049d sound home device control E49E shuffle-disabled 45 0xf049e sound home device control E4C3 speaker 45 0xf04c3 sound home device control EA7A trash-can-outline 45 0xF0A7A device trash tank full F1E1 vanity-light 45 0xf11e1 light E57E volume-high 45 0xf057e sound home device control E91C wall-sconce 45 0xf091c light E0AF bluetooth 40 0xf00af wireless connectivity display E493 cog 40 0xf0493 btn-nav navigation E210 fan 40 0xf0210 device home control E238 fire 40 0xf0238 climate heating / fireplace E3E4 pause 40 0xf03e4 sound home device control E40A play 40 0xf040a sound home device control E4DB stop 40 0xf04db sound home device status E4DE stove 40 0xf04de device nan E580 volume-medium 40 0xf0580 sound home device status E72A washing-machine 39 0xf072a device nan E917 tumble-dryer 38 0xf0917 device nan EAAC dishwasher 37 0xf0aac device nan E28F fridge-outline 36 0xF028F device nan EC99 microwave 36 0xF0C99 device nan E95F desk-lamp 35 0xf095f light E5F1 ev-station 35 0xf05f1 energy sensor display/control E9AB toilet 35 0xf09ab place E58C water 35 0xf058c climate sensor display/control E176 coffee 34 0xf0176 place F2BA string-lights 34 0xf12ba light E51B timer-outline 33 0xf051b time F1DB window-closed-variant 33 0xF11DB security alarm / sensor E08E battery-outline 32 0xf008e energy sensor display E6A1 home-outline 32 0xf06a1 btn-nav use normal version instead E96B fountain 31 0xF096B device nan E5FA kettle 31 0xf05fa device nan E75A music 31 0xf075a sound media player -song E58F water-pump 31 0xf058f device E6C0 arrow-down-box 30 0xf06c0 arrow control E6C3 arrow-up-box 30 0xf06c3 arrow control F2A3 battery-high 30 0xf12a3 energy sensor display F2A1 battery-low 30 0xf12a1 energy sensor display F2A2 battery-medium 30 0xf12a2 energy sensor display E0ED calendar 29 0xF00ED time date E7AE cctv 29 0xF07AE security nan E2DA history 29 0xF02DA time nan E1D9 dots-vertical 28 0xf01d9 navigation menu E1FA engine 28 0xf01fa device nan EF5F monitor-speaker 28 0xf0f5f sound home device control To use an icon in a text you need to prefix the UTF-8 value with \\u . To ensure proper decoding the payload should be used with a json or jsonl command. jsonl example: 1 { \"page\" : 2 , \"id\" : 1 , \"obj\" : \"label\" , \"x\" : 0 , \"y\" : 50 , \"w\" : 150 , \"h\" : 50 , \"text\" : \"\\uE64A Hello world!\" } json example: 1 [ \"p2b1.text=\\uE64A Hello world!\" ]","title":"Proposed built-in Icons"},{"location":"design/fonts-mdi/#custom-fonts","text":"You can add a custom .zi font by uploading it to the internal flash. Apply it as the default font on the Configuration > HASP Settings page. To use it, set the pointsize parameter of the property to 0 .","title":"Custom Fonts"},{"location":"design/fonts/","text":".md-typeset table:not([class]) td { padding: 0.5em 0.25m; line-height: 1.25; vertical-align: middle; } .md-typeset table:not([class]) th { min-width: 5%; padding: 0.5em 0.25m; } th:nth-child(3n+1) { width: 8%; text-align: center;} th:nth-child(3n+2) { width: 8%; text-align: center;} th:nth-child(3n+3) { width: 34%; text-align: left; } td:nth-child(3n+2) { white-space: nowrap; } Fonts Built-in Fonts ~ The ESP8266 firmware only has 1 built-in font: Unscii with font size 8pt. The ESP32 firmware builds additionally contain the Roboto Condensed font in four font sizes depending on the display resolution: 320x240: 12, 16, 24 and 32pt 480x320: 16, 24, 32 and 48pt Including selected glyphs of Latin-1 character set and MaterialDesign icons below. The built-in fonts can be set by using the pointsize as parameter. For example: 1 2 p 4 b 1. te x t _ f o nt = 24 p 4 b 2. value_ f o nt = 12 Note It is possible to create custom builds with built-in fonts of other sizes (choose any four of 12, 14, 16, 20, 22, 24, 26, 28, 32, 36, 38, 40, 44, 48) and supporting Latin-2 or Cyrillic character sets (even combined) by customizing user_config_override.h . Built-in Icons ~ The icons in the list below are included with the built-in font sizes. Included are a range of arrows, navigation, climate, controls, devices, energy, lights, places, presence, security, sound, time and wireless icons. Icon Code Name Icon Code Name E045 arrow-down F2A3 battery-high E6C0 arrow-down-box F2A1 battery-low E04D arrow-left F2A2 battery-medium E054 arrow-right E08E battery-outline E05D arrow-up E5F1 ev-station E6C3 arrow-up-box E32A leaf E140 chevron-down F40B lightning-bolt E141 chevron-left E425 power E142 chevron-right E6A5 power-plug E143 chevron-up E769 ceiling-light E60C subdirectory-arrow-left F020 coach-lamp E01B air-conditioner E95F desk-lamp E957 cloud-search-outline E8DD floor-lamp E238 fire E6B5 lamp E438 radiator E335 lightbulb EAD7 radiator-disabled E6E8 lightbulb-on E717 snowflake F054 outdoor-lamp E50F thermometer F2BA string-lights E58C water F1E1 vanity-light E58E water-percent E91C wall-sconce E590 weather-cloudy E12C check E591 weather-fog E156 close E592 weather-hail E493 cog E593 weather-lightning E1D9 dots-vertical E67E weather-lightning-rainy E2DC home E594 weather-night E6A1 home-outline E595 weather-partly-cloudy E374 minus E596 weather-pouring E415 plus E597 weather-rainy E2E3 bed E598 weather-snowy E10B car E67F weather-snowy-rainy E176 coffee E599 weather-sunny E606 pool E59D weather-windy E9A0 shower E59E weather-windy-variant EA70 silverware-fork-knife E5A8 white-balance-sunny E4B9 sofa E0ED calendar E9AB toilet E150 clock-outline E004 account E2DA history E64A human-greeting E51B timer-outline E70E run E0AF bluetooth E026 alert E5A9 wifi E7AE cctv E0AC blinds E81B door-closed F011 blinds-open F0AF door-closed-lock F2D4 garage-open-variant E81C door-open F2D3 garage-variant E30B key-variant F11C window-shutter E33E lock F11D window-shutter-alert EFC6 lock-open-variant F11E window-shutter-open E565 shield-check E09A bell E68A shield-home E11C cellphone E99D shield-lock EAAC dishwasher F1DB window-closed-variant E1FA engine EF5F monitor-speaker E210 fan E75A music E96B fountain E3E4 pause E28F fridge-outline E40A play E5FA kettle E456 repeat E322 laptop E457 repeat-off EC99 microwave E458 repeat-once F39D recycle-variant E49D shuffle F1F3 robot-mower-outline E49E shuffle-disabled E70D robot-vacuum E4AD skip-next E4DE stove E4AE skip-previous E502 television E4C3 speaker EA7A trash-can-outline E4DB stop E917 tumble-dryer E57E volume-high E72A washing-machine E580 volume-medium E58F water-pump E75F volume-mute To use an icon in a text you need to prefix the UTF-8 character code with \\u . To ensure proper decoding the payload should be used with a json or jsonl command. jsonl example: 1 { \"page\" : 2 , \"id\" : 1 , \"obj\" : \"label\" , \"x\" : 10 , \"y\" : 50 , \"w\" : 150 , \"h\" : 50 , \"text\" : \"\\uE64A Hello world!\" , \"text_font\" : 24 } json example: 1 [ \"p2b1.text=\\uE64A Hello world!\" ] Character Sets ~ The characters are encoded in UTF-8. All character sets include the Ascii 0x20-0x7E characters, the non-braking-space (NBSP) and 10 universal symbols. Each set contains roughly the same extended characters from its equivalent iso-8859 standard . All character sets also contain about 130 standard Material Design Icons for home automation use. The default font in pre-compiled binaries is Roboto-Condensed-Regular with the Latin 1 character set. There is no support for right-to-left scipts. For example: To display the \u00f7 character on the plate you need to use \\u00F7 in json or jsonl commands, or send the encoded UTF-8 bytes 0xC3 0xB7 in other commands. Ascii ~ Includes all ASCII 0x20-0x7E characters extended with these 11 universal symbols: NBSP \u00a3 \u00b0 \u00b1 \u00b2 \u00b3 \u00b5 \u00d7 \u00f7 \u20ac \u2022 Latin 1 ~ The default character set for the pre-compiled firmware binary files. Includes all characters and symbols from the Ascii range above. Covers Northern, Western and Southern European languages: English (en), French (fr), Spanish (es), Portuguese (pt), Italian (it), Dutch (nl), German (de), Danish (da), Swedish (sv), Norwegian (no), Finnish (fi), Albanian (sq), Turkish (tr) \u00a1 \u00bf \u00c0 \u00c1 \u00c2 \u00c3 \u00c4 \u00c5 \u00c6 \u00c7 \u00c8 \u00c9 \u00ca \u00cb \u00cc \u00cd \u00ce \u00cf \u00d1 \u00d2 \u00d3 \u00d4 \u00d5 \u00d6 \u00d8 \u00d9 \u00da \u00db \u00dc \u00dd \u00de \u00df \u00e0 \u00e1 \u00e2 \u00e3 \u00e4 \u00e5 \u00e6 \u00e7 \u00e8 \u00e9 \u00ea \u00eb \u00ec \u00ed \u00ee \u00ef \u00f0 \u00f1 \u00f2 \u00f3 \u00f4 \u00f5 \u00f6 \u00f8 \u00f9 \u00fa \u00fb \u00fc \u00fd \u00fe \u00ff \u011e \u011f \u0130 \u0131 \u0152 \u0153 \u015e \u015f \u0160 \u0161 \u017d \u017e \u1e9e Latin 2 ~ Needs compiling with customization . Includes all characters and symbols from the Ascii range above. Covers Central and Eastern European languages: Czech (cs), Hungarian (hu), Polish (pl), Romanian (ro), Croatian (hr), Slovak (sk), Slovenian (sl), Sorbian (sb) \u00c1 \u00c2 \u00c4 \u00c9 \u00cd \u00ce \u00d3 \u00d4 \u00d6 \u00da \u00dc \u00dd \u00e1 \u00e2 \u00e4 \u00e9 \u00ed \u00ee \u00f3 \u00f4 \u00f6 \u00fa \u00fc \u00fd \u0102 \u0103 \u0104 \u0105 \u0106 \u0107 \u010c \u010d \u010e \u010f \u0110 \u0111 \u0114 \u0115 \u0118 \u0119 \u011a \u011b \u0139 \u013a \u013d \u013e \u0141 \u0142 \u0143 \u0144 \u0147 \u0148 \u0150 \u0151 \u0154 \u0155 \u0158 \u0159 \u015a \u015b \u015e \u015f \u0160 \u0161 \u0162 \u0163 \u0164 \u0165 \u016e \u016f \u0170 \u0171 \u0179 \u017a \u017b \u017c \u017d \u017e \u01cd \u01ce \u0200 \u0201 \u0202 \u0203 \u0204 \u0205 \u0206 \u0207 \u0208 \u0209 \u020a \u020b \u020c \u020d \u020e \u020f \u0210 \u0211 \u0212 \u0213 \u0214 \u0215 \u0216 \u0217 \u0218 \u0219 \u021a \u021b Cyrillic ~ Needs compiling with customization . Includes all characters and symbols from the Ascii range above. Covers the Slavic languages that use a Cyrillic alphabet, including Belarusian, Bulgarian, Macedonian, Russian, Serbian, and Ukrainian \u0400 \u0401 \u0402 \u0403 \u0404 \u0405 \u0406 \u0407 \u0408 \u0409 \u040a \u040b \u040c \u040d \u040e \u040f \u0410 \u0411 \u0412 \u0413 \u0414 \u0415 \u0416 \u0417 \u0418 \u0419 \u041a \u041b \u041c \u041d \u041e \u041f \u0420 \u0421 \u0422 \u0423 \u0424 \u0425 \u0426 \u0427 \u0428 \u0429 \u042a \u042b \u042c \u042d \u042e \u042f \u0430 \u0431 \u0432 \u0433 \u0434 \u0435 \u0436 \u0437 \u0438 \u0439 \u043a \u043b \u043c \u043d \u043e \u043f \u0440 \u0441 \u0442 \u0443 \u0444 \u0445 \u0446 \u0447 \u0448 \u0449 \u044a \u044b \u044c \u044d \u044e \u044f \u0450 \u0451 \u0452 \u0453 \u0454 \u0455 \u0456 \u0457 \u0458 \u0459 \u045a \u045b \u045c \u045d \u045e \u045f Greek ~ Needs compiling with customization . Includes all characters and symbols from the Ascii range above. Covers the Greek (el) language: \u0386 \u0388 \u0389 \u038a \u038c \u038e \u038f \u0390 \u0391 \u0392 \u0393 \u0394 \u0395 \u0396 \u0397 \u0398 \u0399 \u039a \u039b \u039c \u039d \u039e \u039f \u03a0 \u03a1 \u03a3 \u03a4 \u03a5 \u03a6 \u03a7 \u03a8 \u03a9 \u03ac \u03ad \u03ae \u03af \u03b0 \u03b1 \u03b2 \u03b3 \u03b4 \u03b5 \u03b6 \u03b7 \u03b8 \u03b9 \u03ba \u03bb \u03bc \u03bd \u03be \u03bf \u03c0 \u03c1 \u03c2 \u03c3 \u03c4 \u03c5 \u03c6 \u03c7 \u03c8 \u03c9 \u03ca \u03cb \u03cc \u03cd \u03ce External Fonts ~ You can also add a custom .zi font by uploading it to the internal flash. Apply it as the default font on the Configuration > HASP Settings page. To use it, set the pointsize parameter of the property to 0 .","title":"Fonts"},{"location":"design/fonts/#built-in-fonts","text":"The ESP8266 firmware only has 1 built-in font: Unscii with font size 8pt. The ESP32 firmware builds additionally contain the Roboto Condensed font in four font sizes depending on the display resolution: 320x240: 12, 16, 24 and 32pt 480x320: 16, 24, 32 and 48pt Including selected glyphs of Latin-1 character set and MaterialDesign icons below. The built-in fonts can be set by using the pointsize as parameter. For example: 1 2 p 4 b 1. te x t _ f o nt = 24 p 4 b 2. value_ f o nt = 12 Note It is possible to create custom builds with built-in fonts of other sizes (choose any four of 12, 14, 16, 20, 22, 24, 26, 28, 32, 36, 38, 40, 44, 48) and supporting Latin-2 or Cyrillic character sets (even combined) by customizing user_config_override.h .","title":"Built-in Fonts"},{"location":"design/fonts/#built-in-icons","text":"The icons in the list below are included with the built-in font sizes. Included are a range of arrows, navigation, climate, controls, devices, energy, lights, places, presence, security, sound, time and wireless icons. Icon Code Name Icon Code Name E045 arrow-down F2A3 battery-high E6C0 arrow-down-box F2A1 battery-low E04D arrow-left F2A2 battery-medium E054 arrow-right E08E battery-outline E05D arrow-up E5F1 ev-station E6C3 arrow-up-box E32A leaf E140 chevron-down F40B lightning-bolt E141 chevron-left E425 power E142 chevron-right E6A5 power-plug E143 chevron-up E769 ceiling-light E60C subdirectory-arrow-left F020 coach-lamp E01B air-conditioner E95F desk-lamp E957 cloud-search-outline E8DD floor-lamp E238 fire E6B5 lamp E438 radiator E335 lightbulb EAD7 radiator-disabled E6E8 lightbulb-on E717 snowflake F054 outdoor-lamp E50F thermometer F2BA string-lights E58C water F1E1 vanity-light E58E water-percent E91C wall-sconce E590 weather-cloudy E12C check E591 weather-fog E156 close E592 weather-hail E493 cog E593 weather-lightning E1D9 dots-vertical E67E weather-lightning-rainy E2DC home E594 weather-night E6A1 home-outline E595 weather-partly-cloudy E374 minus E596 weather-pouring E415 plus E597 weather-rainy E2E3 bed E598 weather-snowy E10B car E67F weather-snowy-rainy E176 coffee E599 weather-sunny E606 pool E59D weather-windy E9A0 shower E59E weather-windy-variant EA70 silverware-fork-knife E5A8 white-balance-sunny E4B9 sofa E0ED calendar E9AB toilet E150 clock-outline E004 account E2DA history E64A human-greeting E51B timer-outline E70E run E0AF bluetooth E026 alert E5A9 wifi E7AE cctv E0AC blinds E81B door-closed F011 blinds-open F0AF door-closed-lock F2D4 garage-open-variant E81C door-open F2D3 garage-variant E30B key-variant F11C window-shutter E33E lock F11D window-shutter-alert EFC6 lock-open-variant F11E window-shutter-open E565 shield-check E09A bell E68A shield-home E11C cellphone E99D shield-lock EAAC dishwasher F1DB window-closed-variant E1FA engine EF5F monitor-speaker E210 fan E75A music E96B fountain E3E4 pause E28F fridge-outline E40A play E5FA kettle E456 repeat E322 laptop E457 repeat-off EC99 microwave E458 repeat-once F39D recycle-variant E49D shuffle F1F3 robot-mower-outline E49E shuffle-disabled E70D robot-vacuum E4AD skip-next E4DE stove E4AE skip-previous E502 television E4C3 speaker EA7A trash-can-outline E4DB stop E917 tumble-dryer E57E volume-high E72A washing-machine E580 volume-medium E58F water-pump E75F volume-mute To use an icon in a text you need to prefix the UTF-8 character code with \\u . To ensure proper decoding the payload should be used with a json or jsonl command. jsonl example: 1 { \"page\" : 2 , \"id\" : 1 , \"obj\" : \"label\" , \"x\" : 10 , \"y\" : 50 , \"w\" : 150 , \"h\" : 50 , \"text\" : \"\\uE64A Hello world!\" , \"text_font\" : 24 } json example: 1 [ \"p2b1.text=\\uE64A Hello world!\" ]","title":"Built-in Icons"},{"location":"design/fonts/#character-sets","text":"The characters are encoded in UTF-8. All character sets include the Ascii 0x20-0x7E characters, the non-braking-space (NBSP) and 10 universal symbols. Each set contains roughly the same extended characters from its equivalent iso-8859 standard . All character sets also contain about 130 standard Material Design Icons for home automation use. The default font in pre-compiled binaries is Roboto-Condensed-Regular with the Latin 1 character set. There is no support for right-to-left scipts. For example: To display the \u00f7 character on the plate you need to use \\u00F7 in json or jsonl commands, or send the encoded UTF-8 bytes 0xC3 0xB7 in other commands.","title":"Character Sets"},{"location":"design/fonts/#ascii","text":"Includes all ASCII 0x20-0x7E characters extended with these 11 universal symbols: NBSP \u00a3 \u00b0 \u00b1 \u00b2 \u00b3 \u00b5 \u00d7 \u00f7 \u20ac \u2022","title":"Ascii"},{"location":"design/fonts/#latin-1","text":"The default character set for the pre-compiled firmware binary files. Includes all characters and symbols from the Ascii range above. Covers Northern, Western and Southern European languages: English (en), French (fr), Spanish (es), Portuguese (pt), Italian (it), Dutch (nl), German (de), Danish (da), Swedish (sv), Norwegian (no), Finnish (fi), Albanian (sq), Turkish (tr) \u00a1 \u00bf \u00c0 \u00c1 \u00c2 \u00c3 \u00c4 \u00c5 \u00c6 \u00c7 \u00c8 \u00c9 \u00ca \u00cb \u00cc \u00cd \u00ce \u00cf \u00d1 \u00d2 \u00d3 \u00d4 \u00d5 \u00d6 \u00d8 \u00d9 \u00da \u00db \u00dc \u00dd \u00de \u00df \u00e0 \u00e1 \u00e2 \u00e3 \u00e4 \u00e5 \u00e6 \u00e7 \u00e8 \u00e9 \u00ea \u00eb \u00ec \u00ed \u00ee \u00ef \u00f0 \u00f1 \u00f2 \u00f3 \u00f4 \u00f5 \u00f6 \u00f8 \u00f9 \u00fa \u00fb \u00fc \u00fd \u00fe \u00ff \u011e \u011f \u0130 \u0131 \u0152 \u0153 \u015e \u015f \u0160 \u0161 \u017d \u017e \u1e9e","title":"Latin 1"},{"location":"design/fonts/#latin-2","text":"Needs compiling with customization . Includes all characters and symbols from the Ascii range above. Covers Central and Eastern European languages: Czech (cs), Hungarian (hu), Polish (pl), Romanian (ro), Croatian (hr), Slovak (sk), Slovenian (sl), Sorbian (sb) \u00c1 \u00c2 \u00c4 \u00c9 \u00cd \u00ce \u00d3 \u00d4 \u00d6 \u00da \u00dc \u00dd \u00e1 \u00e2 \u00e4 \u00e9 \u00ed \u00ee \u00f3 \u00f4 \u00f6 \u00fa \u00fc \u00fd \u0102 \u0103 \u0104 \u0105 \u0106 \u0107 \u010c \u010d \u010e \u010f \u0110 \u0111 \u0114 \u0115 \u0118 \u0119 \u011a \u011b \u0139 \u013a \u013d \u013e \u0141 \u0142 \u0143 \u0144 \u0147 \u0148 \u0150 \u0151 \u0154 \u0155 \u0158 \u0159 \u015a \u015b \u015e \u015f \u0160 \u0161 \u0162 \u0163 \u0164 \u0165 \u016e \u016f \u0170 \u0171 \u0179 \u017a \u017b \u017c \u017d \u017e \u01cd \u01ce \u0200 \u0201 \u0202 \u0203 \u0204 \u0205 \u0206 \u0207 \u0208 \u0209 \u020a \u020b \u020c \u020d \u020e \u020f \u0210 \u0211 \u0212 \u0213 \u0214 \u0215 \u0216 \u0217 \u0218 \u0219 \u021a \u021b","title":"Latin 2"},{"location":"design/fonts/#cyrillic","text":"Needs compiling with customization . Includes all characters and symbols from the Ascii range above. Covers the Slavic languages that use a Cyrillic alphabet, including Belarusian, Bulgarian, Macedonian, Russian, Serbian, and Ukrainian \u0400 \u0401 \u0402 \u0403 \u0404 \u0405 \u0406 \u0407 \u0408 \u0409 \u040a \u040b \u040c \u040d \u040e \u040f \u0410 \u0411 \u0412 \u0413 \u0414 \u0415 \u0416 \u0417 \u0418 \u0419 \u041a \u041b \u041c \u041d \u041e \u041f \u0420 \u0421 \u0422 \u0423 \u0424 \u0425 \u0426 \u0427 \u0428 \u0429 \u042a \u042b \u042c \u042d \u042e \u042f \u0430 \u0431 \u0432 \u0433 \u0434 \u0435 \u0436 \u0437 \u0438 \u0439 \u043a \u043b \u043c \u043d \u043e \u043f \u0440 \u0441 \u0442 \u0443 \u0444 \u0445 \u0446 \u0447 \u0448 \u0449 \u044a \u044b \u044c \u044d \u044e \u044f \u0450 \u0451 \u0452 \u0453 \u0454 \u0455 \u0456 \u0457 \u0458 \u0459 \u045a \u045b \u045c \u045d \u045e \u045f","title":"Cyrillic"},{"location":"design/fonts/#greek","text":"Needs compiling with customization . Includes all characters and symbols from the Ascii range above. Covers the Greek (el) language: \u0386 \u0388 \u0389 \u038a \u038c \u038e \u038f \u0390 \u0391 \u0392 \u0393 \u0394 \u0395 \u0396 \u0397 \u0398 \u0399 \u039a \u039b \u039c \u039d \u039e \u039f \u03a0 \u03a1 \u03a3 \u03a4 \u03a5 \u03a6 \u03a7 \u03a8 \u03a9 \u03ac \u03ad \u03ae \u03af \u03b0 \u03b1 \u03b2 \u03b3 \u03b4 \u03b5 \u03b6 \u03b7 \u03b8 \u03b9 \u03ba \u03bb \u03bc \u03bd \u03be \u03bf \u03c0 \u03c1 \u03c2 \u03c3 \u03c4 \u03c5 \u03c6 \u03c7 \u03c8 \u03c9 \u03ca \u03cb \u03cc \u03cd \u03ce","title":"Greek"},{"location":"design/fonts/#external-fonts","text":"You can also add a custom .zi font by uploading it to the internal flash. Apply it as the default font on the Configuration > HASP Settings page. To use it, set the pointsize parameter of the property to 0 .","title":"External Fonts"},{"location":"design/fonts.nl/","text":".md-typeset__table { min-width: 100%; } table th:first-child{ border-radius:5px 0 0 0; } table th:last-child{ border-radius:0 5px 0 0; } tbody tr:nth-child(even) { background: #88888811; } .md-typeset table:not([class]) { display: table; } .md-typeset table:not([class]) td { padding: 0.5em 0.25m; line-height: 1.25; vertical-align: middle; } .md-typeset table:not([class]) th { min-width: 5%; padding: 0.5em 0.25m; } th:nth-child(3n+1) { width: 8%; text-align: center;} th:nth-child(3n+2) { width: 8%; text-align: center;} th:nth-child(3n+3) { width: 34%; text-align: left; } td:nth-child(3n+2) { white-space: nowrap; } Lettertypen Built-in Fonts ~ The ESP8266 firmware only has 1 built-in font: Unscii with font size 8pt. The ESP32 firmware builds additionally contain the Roboto Condensed font in four font sizes depending on the display resolution: 320x240: 12, 16, 24 and 32pt including 480x320: 16, 24, 32 and 48pt including Including selected glyphs of Latin-1 character set and MaterialDesign icons below. The built-in fonts can be set by using the pointsize as parameter. For example: 1 2 p 4 b 1. te x t _ f o nt = 24 p 4 b 2. value_ f o nt = 12 Note It is possible to create custom builds with built-in fonts of other sizes (choose any four of 12, 14, 16, 20, 22, 24, 26, 28, 32, 36, 38, 40, 44, 48) and supporting Latin-2 or Cyrillic character sets (even combined) by customizing user_config_override.h . Built-in Icons ~ The icons in the list below are included with the built-in font sizes. Included are a range of arrows, navigation, climate, controls, devices, energy, lights, places, presence, security, sound, time and wireless icons. Icon Code Name Icon Code Name E045 arrow-down F2A3 battery-high E6C0 arrow-down-box F2A1 battery-low E04D arrow-left F2A2 battery-medium E054 arrow-right E08E battery-outline E05D arrow-up E5F1 ev-station E6C3 arrow-up-box E32A leaf E140 chevron-down F40B lightning-bolt E141 chevron-left E425 power E142 chevron-right E6A5 power-plug E143 chevron-up E769 ceiling-light E60C subdirectory-arrow-left F020 coach-lamp E01B air-conditioner E95F desk-lamp E957 cloud-search-outline E8DD floor-lamp E238 fire E6B5 lamp E438 radiator E335 lightbulb EAD7 radiator-disabled E6E8 lightbulb-on E717 snowflake F054 outdoor-lamp E50F thermometer F2BA string-lights E58C water F1E1 vanity-light E58E water-percent E91C wall-sconce E590 weather-cloudy E12C check E591 weather-fog E156 close E592 weather-hail E493 cog E593 weather-lightning E1D9 dots-vertical E67E weather-lightning-rainy E2DC home E594 weather-night E6A1 home-outline E595 weather-partly-cloudy E374 minus E596 weather-pouring E415 plus E597 weather-rainy E2E3 bed E598 weather-snowy E10B car E67F weather-snowy-rainy E176 coffee E599 weather-sunny E606 pool E59D weather-windy E9A0 shower E59E weather-windy-variant EA70 silverware-fork-knife E5A8 white-balance-sunny E4B9 sofa E0ED calendar E9AB toilet E150 clock-outline E004 account E2DA history E64A human-greeting E51B timer-outline E70E run E0AF bluetooth E026 alert E5A9 wifi E7AE cctv E0AC blinds E81B door-closed F011 blinds-open F0AF door-closed-lock F2D4 garage-open-variant E81C door-open F2D3 garage-variant E30B key-variant F11C window-shutter E33E lock F11D window-shutter-alert EFC6 lock-open-variant F11E window-shutter-open E565 shield-check E09A bell E68A shield-home E11C cellphone E99D shield-lock EAAC dishwasher F1DB window-closed-variant E1FA engine EF5F monitor-speaker E210 fan E75A music E96B fountain E3E4 pause E28F fridge-outline E40A play E5FA kettle E456 repeat E322 laptop E457 repeat-off EC99 microwave E458 repeat-once F39D recycle-variant E49D shuffle F1F3 robot-mower-outline E49E shuffle-disabled E70D robot-vacuum E4AD skip-next E4DE stove E4AE skip-previous E502 television E4C3 speaker EA7A trash-can-outline E4DB stop E917 tumble-dryer E57E volume-high E72A washing-machine E580 volume-medium E58F water-pump E75F volume-mute To use an icon in a text you need to prefix the UTF-8 character code with \\u . To ensure proper decoding the payload should be used with a json or jsonl command. jsonl example: 1 { \"page\" : 2 , \"id\" : 1 , \"obj\" : \"label\" , \"x\" : 10 , \"y\" : 50 , \"w\" : 150 , \"h\" : 50 , \"text\" : \"\\uE64A Hello world!\" , \"text_font\" : 24 } json example: 1 [ \"p2b1.text=\\uE64A Hello world!\" ] External Fonts ~ You can also add a custom .zi font by uploading it to the internal flash. Apply it as the default font on the Configuration > HASP Settings page. To use it, set the pointsize parameter of the property to 0 .","title":"Fonts.nl"},{"location":"design/fonts.nl/#built-in-fonts","text":"The ESP8266 firmware only has 1 built-in font: Unscii with font size 8pt. The ESP32 firmware builds additionally contain the Roboto Condensed font in four font sizes depending on the display resolution: 320x240: 12, 16, 24 and 32pt including 480x320: 16, 24, 32 and 48pt including Including selected glyphs of Latin-1 character set and MaterialDesign icons below. The built-in fonts can be set by using the pointsize as parameter. For example: 1 2 p 4 b 1. te x t _ f o nt = 24 p 4 b 2. value_ f o nt = 12 Note It is possible to create custom builds with built-in fonts of other sizes (choose any four of 12, 14, 16, 20, 22, 24, 26, 28, 32, 36, 38, 40, 44, 48) and supporting Latin-2 or Cyrillic character sets (even combined) by customizing user_config_override.h .","title":"Built-in Fonts"},{"location":"design/fonts.nl/#built-in-icons","text":"The icons in the list below are included with the built-in font sizes. Included are a range of arrows, navigation, climate, controls, devices, energy, lights, places, presence, security, sound, time and wireless icons. Icon Code Name Icon Code Name E045 arrow-down F2A3 battery-high E6C0 arrow-down-box F2A1 battery-low E04D arrow-left F2A2 battery-medium E054 arrow-right E08E battery-outline E05D arrow-up E5F1 ev-station E6C3 arrow-up-box E32A leaf E140 chevron-down F40B lightning-bolt E141 chevron-left E425 power E142 chevron-right E6A5 power-plug E143 chevron-up E769 ceiling-light E60C subdirectory-arrow-left F020 coach-lamp E01B air-conditioner E95F desk-lamp E957 cloud-search-outline E8DD floor-lamp E238 fire E6B5 lamp E438 radiator E335 lightbulb EAD7 radiator-disabled E6E8 lightbulb-on E717 snowflake F054 outdoor-lamp E50F thermometer F2BA string-lights E58C water F1E1 vanity-light E58E water-percent E91C wall-sconce E590 weather-cloudy E12C check E591 weather-fog E156 close E592 weather-hail E493 cog E593 weather-lightning E1D9 dots-vertical E67E weather-lightning-rainy E2DC home E594 weather-night E6A1 home-outline E595 weather-partly-cloudy E374 minus E596 weather-pouring E415 plus E597 weather-rainy E2E3 bed E598 weather-snowy E10B car E67F weather-snowy-rainy E176 coffee E599 weather-sunny E606 pool E59D weather-windy E9A0 shower E59E weather-windy-variant EA70 silverware-fork-knife E5A8 white-balance-sunny E4B9 sofa E0ED calendar E9AB toilet E150 clock-outline E004 account E2DA history E64A human-greeting E51B timer-outline E70E run E0AF bluetooth E026 alert E5A9 wifi E7AE cctv E0AC blinds E81B door-closed F011 blinds-open F0AF door-closed-lock F2D4 garage-open-variant E81C door-open F2D3 garage-variant E30B key-variant F11C window-shutter E33E lock F11D window-shutter-alert EFC6 lock-open-variant F11E window-shutter-open E565 shield-check E09A bell E68A shield-home E11C cellphone E99D shield-lock EAAC dishwasher F1DB window-closed-variant E1FA engine EF5F monitor-speaker E210 fan E75A music E96B fountain E3E4 pause E28F fridge-outline E40A play E5FA kettle E456 repeat E322 laptop E457 repeat-off EC99 microwave E458 repeat-once F39D recycle-variant E49D shuffle F1F3 robot-mower-outline E49E shuffle-disabled E70D robot-vacuum E4AD skip-next E4DE stove E4AE skip-previous E502 television E4C3 speaker EA7A trash-can-outline E4DB stop E917 tumble-dryer E57E volume-high E72A washing-machine E580 volume-medium E58F water-pump E75F volume-mute To use an icon in a text you need to prefix the UTF-8 character code with \\u . To ensure proper decoding the payload should be used with a json or jsonl command. jsonl example: 1 { \"page\" : 2 , \"id\" : 1 , \"obj\" : \"label\" , \"x\" : 10 , \"y\" : 50 , \"w\" : 150 , \"h\" : 50 , \"text\" : \"\\uE64A Hello world!\" , \"text_font\" : 24 } json example: 1 [ \"p2b1.text=\\uE64A Hello world!\" ]","title":"Built-in Icons"},{"location":"design/fonts.nl/#external-fonts","text":"You can also add a custom .zi font by uploading it to the internal flash. Apply it as the default font on the Configuration > HASP Settings page. To use it, set the pointsize parameter of the property to 0 .","title":"External Fonts"},{"location":"design/objects/","text":".md-typeset__table { min-width: 100%; } table th:first-child{ border-radius:5px 0 0 0; } table th:last-child{ border-radius:0 5px 0 0; } tbody tr:nth-child(even) { background: #88888811; } .md-typeset table:not([class]) { display: table; } .md-typeset table:not([class]) td { padding: 0.5em 1.25em; line-height: 1.25; } Objects There are two ways to create an object on the screen: Uploading a pages.jsonl file onto the internal flash Use the jsonl command (via MQTT, serial or telnet console) Cheatsheet ~ obj Type Description btn Binary Button switch Toggle Switch checkbox Toggle Checkbox label Visual Label led Visual LED spinner Visual Spinner obj Visual Base Object line Visual Line img Visual Image dropdown Selector Dropdown List roller Selector Roller btnmatrix Selector Button Matrix msgbox Selector Messagebox tabview Selector Tabview tab Selector Tab cpicker Selector Color picker bar Range Progress Bar slider Range Slider arc Range Arc linemeter Range Line Meter gauge Range Gauge Common Parameters ~ Common Properties ~ These are the common properties shared among all objects, but only the id and obj properties are required to create an object: Property Value Required Default Description id 1..254 yes n/a ID of the object on this page. 0 for the page itself. obj string yes n/a Name of the object type (see below) page 0..12 no n/a ID of the page the object appears on (see below) groupid 0..15 no 0 (none) ID of the GPIO group the object belongs to x int16 no 0 Horizontal position on the page y int16 no 0 Vertical position on the page w int16 no 0 Width of the object h int16 no 0 Height of the object hidden bool no false Object is hidden opacity 0..255 no 255 How much the the object is opaque action string no 0 Command handled locally (see below) swipe bool no false Page navigation using swipe gestures (see below) click bool no true Object is touch/clickable (also see enabled ) ext_click_h 0..255 no 0 Extended horizontal clickable are on the left and right ext_click_v 0..255 no 0 Extended vertical clickable are on the top and bottom parentid 0..255 no 0 Set the object to be the child of another object. x and y will be relative to the parent object. Property inheritance can affect the appearance of the of the children (more info in styling ) . Tip Further customizable properties can be found in styling . Ids start from 1 on each page . You can have a maximum of 254 ids on each page. You don't have to use them in ascending order, you can for example use them for logical numbering (start labels from 11, 12, 13, buttons from 21, 22, 23 etc.) Pages ~ If the page parameter is not present, the object is placed on the same page as the previous object . If page is not specified for the first object either, the current page being displayed is used. \"page\":0 indicates that the object is visible on all pages. It can be used for example to specify a static menu bar. You can still hide the object on select pages if needed. Objects on page 0 appear on top of any objects on the underlying page. Actions ~ Action commands are supported only by binary or visual type of objects and they are performed locally on the plate. The following actions can be set for these objects: p1 to p12 to switch to the corresponding page numbers directly (for ESP32; in case of ESP8266 it's only p1 to p4 ) prev to switch to the previous page next to switch to the next page back to go back to the home page Check out the example for how to implement actions. You can change the target pages using prev , back and next page attributes operation on the page object pXb0 . Swipe ~ Objects and page area ( p0bY ) support swipe property. Enabling this will process left , right and down swipes on the object as next , prev and back page changes, respectively. The start of the swipe needs to be on the element which has this property enabled for the feature to activate. Note Page id p0b0 is not valid to set this property as it has to be set on real elements. Events ~ All objects are touchable by default and respond to touch events. To disable touch events for an object set its enabled property to false . In this case the touch event \"goes through\" to the object on the layer below or to the page itself. Events (and values) are published in a state topic corresponding to the object, eg. hasp/<nodename>/state/p1b2 with payload in json format eg. {\"event\":\"up\",\"val\":1} . Possible events (depending on object type) are: Event Description down Occurs when a button goes from depressed to pressed (the moment of touch) up The button was released within a short time i.e. a short press has occurred release The button is released after being pressed for over the threshold time long Event is sent when the button is still being pressed after the threshold time of 400ms hold The HOLD event is repeated every 200ms while the button is still pressed changed Event is sent when the value of the object has changed during the event Tip To actively see the sent out events you can use an MQTT client app and subscribe to the hasp/# topic. Common Methods ~ These are the common methods shared among all objects, Method Parameters Description clear Delete the children from the object delete Delete the object and its children from the page to_front Bring the object to the front on the page to_back Send the object to the back on the page Example commands: 1 2 p 1 b 5. dele te p 1 b 3. t o_ fr o nt Object Types Each object type is an ID that indicates which object type that line represents. Besides the common properties listed above, each object type can have specific properties. Text Label ~ obj: label Property Value Default Description text string \"Text\" The text of the label, \\n for line break. Can also be a variable . mode string crop The wrapping mode of long text labels: expand Expand the object size to the text size break Keep the object width, break the too long lines and expand the object height dots Keep the size and write dots at the end if the text is too long scroll Keep the size and roll the text back and forth loop Keep the size and roll the text circularly crop Keep the size and crop the text out of it align string left Text alignment: left , center , right It's possible to set the color of characters in the text indvidually, just prefix the text to be re-colored with a #RRGGBB hexadecimal color code and a space, and close with a single hash # tag. Example jsonl 1 2 { \"page\" : 1 , \"id\" : 1 , \"obj\" : \"label\" , \"x\" : 10 , \"y\" : 5 , \"w\" : 150 , \"h\" : 50 , \"text\" : \"\\uE64A Hello world!\" } { \"page\" : 1 , \"id\" : 1 , \"obj\" : \"label\" , \"x\" : 10 , \"y\" : 5 , \"w\" : 150 , \"h\" : 50 , \"text\" : \"#0000FF \\uE64A# #FF0000 Hello# #008000 world#!\" } Button ~ obj: btn Property Value Default Description toggle bool false When enabled, creates a toggle-on/toggle-off button. If false, creates a normal button val int16 0 The value: 0 = untoggled, 1 = toggled text string \"\" The text of the label mode string expand The wrapping mode of long text labels. expand Expand the object size to the text size break Keep the object width, break the too long lines and expand the object height dots Keep the size and write dots at the end if the text is too long scroll Keep the size and roll the text back and forth loop Keep the size and roll the text circularly crop Keep the size and crop the text out of it align string left Text alignment: left , center , right Similar to the text label, it's possible to set the color of characters in the text indvidually, just prefix the text to be re-colored with a #RRGGBB hexadecimal color code and a space, and close with a single hash # tag. Example jsonl 1 2 { \"page\" : 1 , \"id\" : 2 , \"obj\" : \"btn\" , \"x\" : 10 , \"y\" : 40 , \"w\" : 105 , \"h\" : 90 , \"toggle\" : false , \"text\" : \"Normal Button\" , \"mode\" : \"break\" , \"align\" : \"center\" } { \"page\" : 1 , \"id\" : 3 , \"obj\" : \"btn\" , \"x\" : 125 , \"y\" : 40 , \"w\" : 105 , \"h\" : 90 , \"toggle\" : true , \"text\" : \"#FFD700 Toggle# Button\" , \"mode\" : \"break\" , \"align\" : \"center\" } Normal buttons ( toggle=false ) send touch events while they occur: Short touch: 1 2 { \"event\" : \"down\" } { \"event\" : \"up\" } Long press: 1 2 3 4 5 { \"event\" : \"down\" } { \"event\" : \"long\" } { \"event\" : \"hold\" } { \"event\" : \"hold\" } { \"event\" : \"release\" } Toggle buttons ( toggle=true ) send out the old value in the down event and the new value in the up event when released: Toggle ON: 1 2 { \"event\" : \"down\" , \"val\" : 0 } { \"event\" : \"up\" , \"val\" : 1 } Toggle OFF: 1 2 { \"event\" : \"down\" , \"val\" : 1 } { \"event\" : \"up\" , \"val\" : 0 } Switch ~ obj: switch Property Value Default Description val bool 0 1 = on, 0 = off bg_color1 color 0 changes indicator color bg_color2 color 0 changes knob color radius2 int16 depends on theme changes knob corner radius (also see radius ) Example jsonl 1 { \"page\" : 1 , \"id\" : 4 , \"obj\" : \"switch\" , \"x\" : 125 , \"y\" : 145 , \"w\" : 105 , \"h\" : 55 , \"radius\" : 15 } Events generated by switch are similar to the ones generate by the toggle buttons. Checkbox ~ obj: checkbox Property Value Default Description val int16 0 1 = checked 0 = unchecked text string \"Checkbox\" The label of the checkbox Note The checkbox object ignores the w and h attribute. These are calculated based on the font and text. Example jsonl 1 { \"page\" : 1 , \"id\" : 5 , \"obj\" : \"checkbox\" , \"x\" : 10 , \"y\" : 145 , \"w\" : 105 , \"text\" : \" Checkbox\" } Events generated by checkbox are similar to the ones generate by the toggle buttons. Progress Bar ~ obj: bar Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator start_value int16 0 optional minimal allowed value of the indicator Vertical bars can be created if the width of the object is smaller than its height. Note min , max , val and start_value support also negative values. Slider ~ obj: slider Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator start_value int16 0 optional minimal allowed value of the indicator Vertical sliders can be created if the width of the object is smaller than its height. Note min , max , val and start_value support also negative values. Example jsonl 1 { \"page\" : 1 , \"id\" : 6 , \"obj\" : \"slider\" , \"x\" : 20 , \"y\" : 250 , \"w\" : 200 , \"h\" : 20 , \"min\" : 15 , \"max\" : 35 } While pressing and dragging the slider object the following events are sent: down (old value), changed (repeatedly until released) and up (value at the moment of releasing it): 1 2 3 4 5 6 7 { \"event\" : \"down\" , \"val\" : 21 } { \"event\" : \"changed\" , \"val\" : 22 } { \"event\" : \"changed\" , \"val\" : 23 } { \"event\" : \"changed\" , \"val\" : 25 } { \"event\" : \"changed\" , \"val\" : 27 } { \"event\" : \"changed\" , \"val\" : 29 } { \"event\" : \"up\" , \"val\" : 31 } Arc ~ obj: arc Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator rotation int16 0 offset to the 0 degree position type 0-2 0 0 = normal, 1 = symmetrical, 2 = reverse adjustable bool false Add knob that the user can operate to change the value start_angle 0-360 start angle of the arc background (see note) end_angle 0-360 end angle of the arc background (see note) start_angle1 0-360 start angle of the arc indicator (see note) end_angle1 0-360 end angle of the arc indicator (see note) Note Zero degree is at the middle right (3 o'clock) of the object and the degrees are increasing in a clockwise direction. The angles should be in the [0-360] range. min , max and val support also negative values. Tip To adjust the size of the knob, use pad_top2 , pad_bottom2 , pad_left2 , pad_right2 styling properties. If you increase the knob beyond the margins of the object, you also need to increase pad_top , pad_bottom , pad_left , pad_right for the arc itself. Check out value styling to display a textual value in the middle of the arc. Example jsonl 1 { \"page\" : 1 , \"id\" : 9 , \"obj\" : \"arc\" , \"x\" : 20 , \"y\" : 75 , \"w\" : 200 , \"h\" : 200 , \"min\" : 15 , \"max\" : 35 , \"border_side\" : 0 , \"type\" : 0 , \"rotation\" : 0 , \"start_angle\" : 135 , \"end_angle\" : 45 , \"start_angle1\" : 135 , \"end_angle1\" : 45 , \"adjustable\" : true } While pressing and dragging the arc object the following events are sent: down (old value), changed (repeatedly until released) and up (value at the moment of releasing it): 1 2 3 4 5 6 7 { \"event\" : \"down\" , \"val\" : 21 } { \"event\" : \"changed\" , \"val\" : 22 } { \"event\" : \"changed\" , \"val\" : 23 } { \"event\" : \"changed\" , \"val\" : 25 } { \"event\" : \"changed\" , \"val\" : 27 } { \"event\" : \"changed\" , \"val\" : 29 } { \"event\" : \"up\" , \"val\" : 31 } Dropdown List ~ obj: dropdown Property Value Default Description options string \"\" List of items separated by \\n val int16 0 The number of the selected item text string \"\" Read-only The text of the selected item direction byte 0 Direction where the dropdown expands: 0 = down, 1 = up, 2 = left, 3 = right Note: up and down are superseeded by the screen size. show_selected bool true Show the selected option or a static text max_height int16 3/4 of screen height The maximum height of the open drop-down list Method Parameters Description open To manually open the drop-down list close To manually close the drop-down list To change the currently selected item, use the val attribute. To change the items in the list, use the options attribute. Example jsonl 1 { \"page\" : 1 , \"id\" : 10 , \"obj\" : \"dropdown\" , \"x\" : 10 , \"y\" : 205 , \"w\" : 105 , \"h\" : 30 , \"options\" : \"Apple\\nBanana\\nOrange\\nMelon\" } When the item is changed both val and text of the newly selected item are send out accompanied by the change event. Roller ~ obj: roller Property Value Default Description options string \"\" List of items separated by \\n val int16 0 The number of the selected item text string \"\" Read-only The text of the selected item rows int8 3 The number of rows that are visible Use this property instead of h to set object height mode 0..1 0 Roller mode: 0 = normal (finite), 1 = infinite align string center Text alignment: left , center , right To change the currently selected item, use the val attribute. To change the items in the list, use the options attribute. Example jsonl 1 { \"page\" : 1 , \"id\" : 11 , \"obj\" : \"roller\" , \"x\" : 125 , \"y\" : 205 , \"w\" : 105 , \"h\" : 30 , \"options\" : \"Apple\\nBanana\\nOrange\\nMelon\" , \"mode\" : 1 } When the item is changed both val and text of the newly selected item are send out accompanied by the change event. Line Meter ~ obj: linemeter Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator angle 0-360 240 angle between start and end of the scale line_count uint16 31 tick count of the scale rotation 0-360 0 offset for the scale angles to rotate it type 0-1 0 0 = indicator lines are activated clock-wise 1 = indicator lines are activated counter-clock-wise Use line and scale properties to customize. Note min , max and val support also negative values. Example jsonl 1 { \"page\" : 1 , \"id\" : 12 , \"obj\" : \"linemeter\" , \"x\" : 20 , \"y\" : 70 , \"w\" : 200 , \"h\" : 200 , \"value_str\" : \"Temp\" , \"val\" : 75 , \"line_count\" : 35 , \"line_rounded\" : 1 } Gauge ~ obj: gauge Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator critical_value int16 80 scale color will be changed to scale_end_color after this value angle 0-360 240 angle between start and end of the scale label_count uint8 number of labels (and major ticks) of the scale line_count uint16 31 number of minor ticks of the entire scale rotation 0-360 0 offset for the gauge's angles to rotate it format uint16 0 divider for major tick values To strip trailing zero's of major tick labels the format divider can be used to scale the values before printing: 0 : print the major tick value as is 1 : strip 1 zero, i.e. divide tick value by 10 before printing the major tick label 2 : strip 2 zeros, i.e. divide tick value by 100 before printing the major tick label 3 : strip 3 zeros, i.e. divide tick value by 1000 before printing the major tick label 4 : strip 4 zeros, i.e. divide tick value by 10000 before printing the major tick label Only these values are allowed, arbitrary numbers are not supported. Note min , max and val support also negative values. Example jsonl 1 { \"page\" : 1 , \"id\" : 13 , \"obj\" : \"gauge\" , \"x\" : 20 , \"y\" : 70 , \"w\" : 200 , \"h\" : 200 } Use scale properties to customize. Tabview ~ obj: tabview A tabview is an object that can hold multiple tab objects. You first create the tabview object and then add tab objects to it. Property Value Default Description val int8 0 The number of the active tab, starting at 0 text string \"\" The name of the active tab btn_pos 0..4 1 Position of the tab buttons: 0 = none 1 = top 2 = bottom 3 = left 4 = right count uint16 0 Read-only The number of tabs of the tabview To change the currently visible tab, use the val attribute after all tabs have been added. Note To adjust the height of the tab buttons row, use pad_top1 and pad_bottom1 styling properties. Accepts also negative values. To adjust the text size of the tab names, use the text_font1 styling property. Read further down to learn now to add tabs to the tabview. Tab ~ obj: tab Property Value Default Description parentid int8 0 The id of the tabview object to which this tab is added text string \"Tab\" The name of tab button Set the parent object (which tabview the tabs belong to) by referencing the parentid when creating the tab. To add other objects to these tabs, set the parentid when creating those objects to the id of the tab you wamt them to appear on. Example jsonl 1 2 3 4 5 6 7 { \"page\" : 1 , \"id\" : 14 , \"obj\" : \"tabview\" , \"btn_pos\" : 1 , \"y\" : 180 } { \"page\" : 1 , \"id\" : 51 , \"obj\" : \"tab\" , \"parentid\" : 14 , \"text\" : \"Tab 1\" } { \"page\" : 1 , \"id\" : 52 , \"obj\" : \"tab\" , \"parentid\" : 14 , \"text\" : \"Tab 2\" } { \"page\" : 1 , \"id\" : 53 , \"obj\" : \"tab\" , \"parentid\" : 14 , \"text\" : \"Tab 3\" } { \"page\" : 1 , \"id\" : 61 , \"obj\" : \"switch\" , \"x\" : 20 , \"y\" : 10 , \"w\" : 60 , \"h\" : 30 , \"parentid\" : 51 , \"radius\" : 25 , \"radius2\" : 25 } { \"page\" : 1 , \"id\" : 71 , \"obj\" : \"dropdown\" , \"x\" : 15 , \"y\" : 10 , \"w\" : 110 , \"h\" : 30 , \"parentid\" : 52 , \"options\" : \"Apple\\nBanana\\nOrange\\nMelon\" } { \"page\" : 1 , \"id\" : 81 , \"obj\" : \"checkbox\" , \"x\" : 15 , \"y\" : 10 , \"w\" : 110 , \"h\" : 30 , \"parentid\" : 53 , \"text\" : \" Nice tabview\" } Color picker ~ obj: cpicker Property Value Default Description color color 0 The selected color in html format #rrggbb scale_width uint16 25 The width of the color gradient of the circle pad_inner int16 10 The padding between the circle and the inner preview circle The object will automatically adjust based on the w and h properties: when the object is longer then it is height a rectangular color picker is created, otherwise it will be circular. By long pressing the inner preview circle, the color picker will through the color modes: hue > saturation > value. Double-click on the inner preview circle to reset the current value. Setting Color ~ Example MQTT commands: 1 2 3 hasp/< n ode na me>/comma n d/p 0 b 2. color 13891 hasp/< n ode na me>/comma n d/p 1 b 5. color silver hasp/< n ode na me>/comma n d/p 2 b 3. color #C 0 C 0 C 0 Events ~ While pressing and dragging the cpicker object the following events are sent: down (old color), changed (repeatedly until released) and up (value at the moment of releasing it): 1 2 3 4 { \"event\" : \"down\" , \"color\" : \"#8300ff\" , \"r\" : 131 , \"g\" : 0 , \"b\" : 255 } { \"event\" : \"changed\" , \"color\" : \"#7300ff\" , \"r\" : 115 , \"g\" : 0 , \"b\" : 255 } { \"event\" : \"changed\" , \"color\" : \"#6200ff\" , \"r\" : 98 , \"g\" : 0 , \"b\" : 255 } { \"event\" : \"up\" , \"color\" : \"#6200ff\" , \"r\" : 98 , \"g\" : 0 , \"b\" : 255 } Spinner ~ obj: spinner Property Value Default Description speed int16 1000 The time for 1 turn in ms direction int16 0 0 = clockwise, 1 = counter-clockwise angle 0-360 60 The length of the spinning segment in degrees line_width int16 20 The width of the background circle line_width1 int16 20 The width of the spinning segment line_color color depends on theme color of the background circle line_color1 color depends on theme color of the spinning segment Tip Check out background, border, and line styling to adjust other aspects of the appearance. Note Placing objects over/under the spinner will increase the CPU load because all objects need to be redrawn constantly. Example jsonl 1 { \"page\" : 1 , \"id\" : 15 , \"obj\" : \"spinner\" , \"x\" : 180 , \"y\" : 50 , \"w\" : 36 , \"h\" : 36 , \"bg_opa\" : 0 , \"border_width\" : 0 , \"line_width\" : 6 , \"line_width1\" : 6 , \"angle\" : 80 , \"line_color\" : \"white\" , \"line_color1\" : \"green\" } LED Indicator ~ obj: led Property Value Default Description val byte 0 The brightness of the indicator [ 0..255 ] Button Matrix ~ obj: btnmatrix Property Value Default Description options json array \"Text\" Json array of strings where each element is the label of a button. Use \"\\n\" for a new line of buttons align string center Text alignment: left , center , right toggle bool false All buttons behave as toggle buttons or normal buttons one_check bool false Allow only one button to be checked (toggled) at once val int8 0 The number of the active button, starting at 0. In conjunction with toggle and one_check set it to -1 to deactivate all buttons The styling properties apply to all buttons in the matrix. To change the color of a single label you can prefix the text with a #RRGGBB hexadecimal color code and close with a single hash # tag. Example jsonl 1 { \"page\" : 1 , \"id\" : 20 , \"obj\" : \"btnmatrix\" , \"x\" : 10 , \"y\" : 10 , \"w\" : 220 , \"h\" : 150 , \"options\" :[ \"#FF0000 Red Text#\" , \"#0000FF Cyan Text#\" , \"\\n\" , \"#FFFF00 Yellow Text#\" ], \"toggle\" : 1 , \"one_check\" : 1 } Messagebox ~ obj: msgbox Property Value Default Description text string \"\" The text of the message to be displayed. options json array [\"OK\"] Json array of string s where each element is the label of a button modal bool false Make the messagebox a modal dialog requiring user input auto_close int16 0 Close the pop-up message automatically after this number of milliseconds have passed The Message boxes act as a pop-up. The default width is the horizontal screen size, the height adjusts according to the contents of the message. The pop-up is centered on the screen. Note The messagebox object is automatically deleted when it is closed. You will need to create it again using jsonl to pop-up a new message. Example jsonl 1 { \"page\" : 1 , \"id\" : 24 , \"obj\" : \"msgbox\" , \"text\" : \"A message box with two buttons\" , \"options\" :[ \"Apply\" , \"Close\" ]} Line ~ obj: line Property Value Default Description points JSON array \"\" The name of the image file auto_size bool true Automatically set the size of the line object to the outer bounds y_invert bool false The y direction might be conter-intuitive in some cases so the y coordinates can be inverted The points parameter is a JSON array of [x,y] coordinates, for example [[10,25],[100,25],[100,0]] . Example jsonl 1 { \"page\" : 1 , \"id\" : 33 , \"obj\" : \"line\" , \"points\" :[[ 10 , 25 ],[ 100 , 25 ],[ 100 , 0 ]], \"auto_size\" : 0 , \"y_invert\" : 1 } Image ~ obj: img Property Value Default Description src string \"\" The name of the image file auto_size bool true Automatically set the size of the image object to the image source offset_x int16 0 Shift the picture horizontally relative to the image object offset_y int16 0 Shift the picture vertically relative to the image object Only PNG image files are supported, from flash. You can use image_recolor and image_recolor_opa from the image styling properties to apply a color overlay mask. Note The decoding of the images is done in memory, thus you'll be able to display full-screen images only if your microcontroller has installed PSram memory , else you will be limited to small icons. Example jsonl 1 { \"page\" : 1 , \"id\" : 34 , \"obj\" : \"img\" , \"src\" : \"/littlefs/image.png\" , \"auto_size\" : 0 , \"w\" : 50 } Base Object ~ obj: obj The Base Object can be directly used as a simple, empty widget. It is nothing more then a (rounded) rectangle. You can use it as a background shape for other objects by putting its jsonl line before the object. It catches touches! Example jsonl 1 { \"page\" : 1 , \"id\" : 50 , \"obj\" : \"obj\" , \"x\" : 5 , \"y\" : 35 , \"w\" : 230 , \"h\" : 250 , \"click\" : 0 }","title":"Objects"},{"location":"design/objects/#cheatsheet","text":"obj Type Description btn Binary Button switch Toggle Switch checkbox Toggle Checkbox label Visual Label led Visual LED spinner Visual Spinner obj Visual Base Object line Visual Line img Visual Image dropdown Selector Dropdown List roller Selector Roller btnmatrix Selector Button Matrix msgbox Selector Messagebox tabview Selector Tabview tab Selector Tab cpicker Selector Color picker bar Range Progress Bar slider Range Slider arc Range Arc linemeter Range Line Meter gauge Range Gauge","title":"Cheatsheet"},{"location":"design/objects/#common-parameters","text":"","title":"Common Parameters"},{"location":"design/objects/#common-properties","text":"These are the common properties shared among all objects, but only the id and obj properties are required to create an object: Property Value Required Default Description id 1..254 yes n/a ID of the object on this page. 0 for the page itself. obj string yes n/a Name of the object type (see below) page 0..12 no n/a ID of the page the object appears on (see below) groupid 0..15 no 0 (none) ID of the GPIO group the object belongs to x int16 no 0 Horizontal position on the page y int16 no 0 Vertical position on the page w int16 no 0 Width of the object h int16 no 0 Height of the object hidden bool no false Object is hidden opacity 0..255 no 255 How much the the object is opaque action string no 0 Command handled locally (see below) swipe bool no false Page navigation using swipe gestures (see below) click bool no true Object is touch/clickable (also see enabled ) ext_click_h 0..255 no 0 Extended horizontal clickable are on the left and right ext_click_v 0..255 no 0 Extended vertical clickable are on the top and bottom parentid 0..255 no 0 Set the object to be the child of another object. x and y will be relative to the parent object. Property inheritance can affect the appearance of the of the children (more info in styling ) . Tip Further customizable properties can be found in styling . Ids start from 1 on each page . You can have a maximum of 254 ids on each page. You don't have to use them in ascending order, you can for example use them for logical numbering (start labels from 11, 12, 13, buttons from 21, 22, 23 etc.)","title":"Common Properties"},{"location":"design/objects/#events","text":"All objects are touchable by default and respond to touch events. To disable touch events for an object set its enabled property to false . In this case the touch event \"goes through\" to the object on the layer below or to the page itself. Events (and values) are published in a state topic corresponding to the object, eg. hasp/<nodename>/state/p1b2 with payload in json format eg. {\"event\":\"up\",\"val\":1} . Possible events (depending on object type) are: Event Description down Occurs when a button goes from depressed to pressed (the moment of touch) up The button was released within a short time i.e. a short press has occurred release The button is released after being pressed for over the threshold time long Event is sent when the button is still being pressed after the threshold time of 400ms hold The HOLD event is repeated every 200ms while the button is still pressed changed Event is sent when the value of the object has changed during the event Tip To actively see the sent out events you can use an MQTT client app and subscribe to the hasp/# topic.","title":"Events"},{"location":"design/objects/#common-methods","text":"These are the common methods shared among all objects, Method Parameters Description clear Delete the children from the object delete Delete the object and its children from the page to_front Bring the object to the front on the page to_back Send the object to the back on the page Example commands: 1 2 p 1 b 5. dele te p 1 b 3. t o_ fr o nt","title":"Common Methods"},{"location":"design/objects/#text-label","text":"obj: label Property Value Default Description text string \"Text\" The text of the label, \\n for line break. Can also be a variable . mode string crop The wrapping mode of long text labels: expand Expand the object size to the text size break Keep the object width, break the too long lines and expand the object height dots Keep the size and write dots at the end if the text is too long scroll Keep the size and roll the text back and forth loop Keep the size and roll the text circularly crop Keep the size and crop the text out of it align string left Text alignment: left , center , right It's possible to set the color of characters in the text indvidually, just prefix the text to be re-colored with a #RRGGBB hexadecimal color code and a space, and close with a single hash # tag. Example jsonl 1 2 { \"page\" : 1 , \"id\" : 1 , \"obj\" : \"label\" , \"x\" : 10 , \"y\" : 5 , \"w\" : 150 , \"h\" : 50 , \"text\" : \"\\uE64A Hello world!\" } { \"page\" : 1 , \"id\" : 1 , \"obj\" : \"label\" , \"x\" : 10 , \"y\" : 5 , \"w\" : 150 , \"h\" : 50 , \"text\" : \"#0000FF \\uE64A# #FF0000 Hello# #008000 world#!\" }","title":"Text Label"},{"location":"design/objects/#button","text":"obj: btn Property Value Default Description toggle bool false When enabled, creates a toggle-on/toggle-off button. If false, creates a normal button val int16 0 The value: 0 = untoggled, 1 = toggled text string \"\" The text of the label mode string expand The wrapping mode of long text labels. expand Expand the object size to the text size break Keep the object width, break the too long lines and expand the object height dots Keep the size and write dots at the end if the text is too long scroll Keep the size and roll the text back and forth loop Keep the size and roll the text circularly crop Keep the size and crop the text out of it align string left Text alignment: left , center , right Similar to the text label, it's possible to set the color of characters in the text indvidually, just prefix the text to be re-colored with a #RRGGBB hexadecimal color code and a space, and close with a single hash # tag. Example jsonl 1 2 { \"page\" : 1 , \"id\" : 2 , \"obj\" : \"btn\" , \"x\" : 10 , \"y\" : 40 , \"w\" : 105 , \"h\" : 90 , \"toggle\" : false , \"text\" : \"Normal Button\" , \"mode\" : \"break\" , \"align\" : \"center\" } { \"page\" : 1 , \"id\" : 3 , \"obj\" : \"btn\" , \"x\" : 125 , \"y\" : 40 , \"w\" : 105 , \"h\" : 90 , \"toggle\" : true , \"text\" : \"#FFD700 Toggle# Button\" , \"mode\" : \"break\" , \"align\" : \"center\" } Normal buttons ( toggle=false ) send touch events while they occur: Short touch: 1 2 { \"event\" : \"down\" } { \"event\" : \"up\" } Long press: 1 2 3 4 5 { \"event\" : \"down\" } { \"event\" : \"long\" } { \"event\" : \"hold\" } { \"event\" : \"hold\" } { \"event\" : \"release\" } Toggle buttons ( toggle=true ) send out the old value in the down event and the new value in the up event when released: Toggle ON: 1 2 { \"event\" : \"down\" , \"val\" : 0 } { \"event\" : \"up\" , \"val\" : 1 } Toggle OFF: 1 2 { \"event\" : \"down\" , \"val\" : 1 } { \"event\" : \"up\" , \"val\" : 0 }","title":"Button"},{"location":"design/objects/#switch","text":"obj: switch Property Value Default Description val bool 0 1 = on, 0 = off bg_color1 color 0 changes indicator color bg_color2 color 0 changes knob color radius2 int16 depends on theme changes knob corner radius (also see radius ) Example jsonl 1 { \"page\" : 1 , \"id\" : 4 , \"obj\" : \"switch\" , \"x\" : 125 , \"y\" : 145 , \"w\" : 105 , \"h\" : 55 , \"radius\" : 15 } Events generated by switch are similar to the ones generate by the toggle buttons.","title":"Switch"},{"location":"design/objects/#checkbox","text":"obj: checkbox Property Value Default Description val int16 0 1 = checked 0 = unchecked text string \"Checkbox\" The label of the checkbox Note The checkbox object ignores the w and h attribute. These are calculated based on the font and text. Example jsonl 1 { \"page\" : 1 , \"id\" : 5 , \"obj\" : \"checkbox\" , \"x\" : 10 , \"y\" : 145 , \"w\" : 105 , \"text\" : \" Checkbox\" } Events generated by checkbox are similar to the ones generate by the toggle buttons.","title":"Checkbox"},{"location":"design/objects/#progress-bar","text":"obj: bar Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator start_value int16 0 optional minimal allowed value of the indicator Vertical bars can be created if the width of the object is smaller than its height. Note min , max , val and start_value support also negative values.","title":"Progress Bar"},{"location":"design/objects/#slider","text":"obj: slider Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator start_value int16 0 optional minimal allowed value of the indicator Vertical sliders can be created if the width of the object is smaller than its height. Note min , max , val and start_value support also negative values. Example jsonl 1 { \"page\" : 1 , \"id\" : 6 , \"obj\" : \"slider\" , \"x\" : 20 , \"y\" : 250 , \"w\" : 200 , \"h\" : 20 , \"min\" : 15 , \"max\" : 35 } While pressing and dragging the slider object the following events are sent: down (old value), changed (repeatedly until released) and up (value at the moment of releasing it): 1 2 3 4 5 6 7 { \"event\" : \"down\" , \"val\" : 21 } { \"event\" : \"changed\" , \"val\" : 22 } { \"event\" : \"changed\" , \"val\" : 23 } { \"event\" : \"changed\" , \"val\" : 25 } { \"event\" : \"changed\" , \"val\" : 27 } { \"event\" : \"changed\" , \"val\" : 29 } { \"event\" : \"up\" , \"val\" : 31 }","title":"Slider"},{"location":"design/objects/#arc","text":"obj: arc Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator rotation int16 0 offset to the 0 degree position type 0-2 0 0 = normal, 1 = symmetrical, 2 = reverse adjustable bool false Add knob that the user can operate to change the value start_angle 0-360 start angle of the arc background (see note) end_angle 0-360 end angle of the arc background (see note) start_angle1 0-360 start angle of the arc indicator (see note) end_angle1 0-360 end angle of the arc indicator (see note) Note Zero degree is at the middle right (3 o'clock) of the object and the degrees are increasing in a clockwise direction. The angles should be in the [0-360] range. min , max and val support also negative values. Tip To adjust the size of the knob, use pad_top2 , pad_bottom2 , pad_left2 , pad_right2 styling properties. If you increase the knob beyond the margins of the object, you also need to increase pad_top , pad_bottom , pad_left , pad_right for the arc itself. Check out value styling to display a textual value in the middle of the arc. Example jsonl 1 { \"page\" : 1 , \"id\" : 9 , \"obj\" : \"arc\" , \"x\" : 20 , \"y\" : 75 , \"w\" : 200 , \"h\" : 200 , \"min\" : 15 , \"max\" : 35 , \"border_side\" : 0 , \"type\" : 0 , \"rotation\" : 0 , \"start_angle\" : 135 , \"end_angle\" : 45 , \"start_angle1\" : 135 , \"end_angle1\" : 45 , \"adjustable\" : true } While pressing and dragging the arc object the following events are sent: down (old value), changed (repeatedly until released) and up (value at the moment of releasing it): 1 2 3 4 5 6 7 { \"event\" : \"down\" , \"val\" : 21 } { \"event\" : \"changed\" , \"val\" : 22 } { \"event\" : \"changed\" , \"val\" : 23 } { \"event\" : \"changed\" , \"val\" : 25 } { \"event\" : \"changed\" , \"val\" : 27 } { \"event\" : \"changed\" , \"val\" : 29 } { \"event\" : \"up\" , \"val\" : 31 }","title":"Arc"},{"location":"design/objects/#dropdown-list","text":"obj: dropdown Property Value Default Description options string \"\" List of items separated by \\n val int16 0 The number of the selected item text string \"\" Read-only The text of the selected item direction byte 0 Direction where the dropdown expands: 0 = down, 1 = up, 2 = left, 3 = right Note: up and down are superseeded by the screen size. show_selected bool true Show the selected option or a static text max_height int16 3/4 of screen height The maximum height of the open drop-down list Method Parameters Description open To manually open the drop-down list close To manually close the drop-down list To change the currently selected item, use the val attribute. To change the items in the list, use the options attribute. Example jsonl 1 { \"page\" : 1 , \"id\" : 10 , \"obj\" : \"dropdown\" , \"x\" : 10 , \"y\" : 205 , \"w\" : 105 , \"h\" : 30 , \"options\" : \"Apple\\nBanana\\nOrange\\nMelon\" } When the item is changed both val and text of the newly selected item are send out accompanied by the change event.","title":"Dropdown List"},{"location":"design/objects/#roller","text":"obj: roller Property Value Default Description options string \"\" List of items separated by \\n val int16 0 The number of the selected item text string \"\" Read-only The text of the selected item rows int8 3 The number of rows that are visible Use this property instead of h to set object height mode 0..1 0 Roller mode: 0 = normal (finite), 1 = infinite align string center Text alignment: left , center , right To change the currently selected item, use the val attribute. To change the items in the list, use the options attribute. Example jsonl 1 { \"page\" : 1 , \"id\" : 11 , \"obj\" : \"roller\" , \"x\" : 125 , \"y\" : 205 , \"w\" : 105 , \"h\" : 30 , \"options\" : \"Apple\\nBanana\\nOrange\\nMelon\" , \"mode\" : 1 } When the item is changed both val and text of the newly selected item are send out accompanied by the change event.","title":"Roller"},{"location":"design/objects/#line-meter","text":"obj: linemeter Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator angle 0-360 240 angle between start and end of the scale line_count uint16 31 tick count of the scale rotation 0-360 0 offset for the scale angles to rotate it type 0-1 0 0 = indicator lines are activated clock-wise 1 = indicator lines are activated counter-clock-wise Use line and scale properties to customize. Note min , max and val support also negative values. Example jsonl 1 { \"page\" : 1 , \"id\" : 12 , \"obj\" : \"linemeter\" , \"x\" : 20 , \"y\" : 70 , \"w\" : 200 , \"h\" : 200 , \"value_str\" : \"Temp\" , \"val\" : 75 , \"line_count\" : 35 , \"line_rounded\" : 1 }","title":"Line Meter"},{"location":"design/objects/#gauge","text":"obj: gauge Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator critical_value int16 80 scale color will be changed to scale_end_color after this value angle 0-360 240 angle between start and end of the scale label_count uint8 number of labels (and major ticks) of the scale line_count uint16 31 number of minor ticks of the entire scale rotation 0-360 0 offset for the gauge's angles to rotate it format uint16 0 divider for major tick values To strip trailing zero's of major tick labels the format divider can be used to scale the values before printing: 0 : print the major tick value as is 1 : strip 1 zero, i.e. divide tick value by 10 before printing the major tick label 2 : strip 2 zeros, i.e. divide tick value by 100 before printing the major tick label 3 : strip 3 zeros, i.e. divide tick value by 1000 before printing the major tick label 4 : strip 4 zeros, i.e. divide tick value by 10000 before printing the major tick label Only these values are allowed, arbitrary numbers are not supported. Note min , max and val support also negative values. Example jsonl 1 { \"page\" : 1 , \"id\" : 13 , \"obj\" : \"gauge\" , \"x\" : 20 , \"y\" : 70 , \"w\" : 200 , \"h\" : 200 } Use scale properties to customize.","title":"Gauge"},{"location":"design/objects/#tabview","text":"obj: tabview A tabview is an object that can hold multiple tab objects. You first create the tabview object and then add tab objects to it. Property Value Default Description val int8 0 The number of the active tab, starting at 0 text string \"\" The name of the active tab btn_pos 0..4 1 Position of the tab buttons: 0 = none 1 = top 2 = bottom 3 = left 4 = right count uint16 0 Read-only The number of tabs of the tabview To change the currently visible tab, use the val attribute after all tabs have been added. Note To adjust the height of the tab buttons row, use pad_top1 and pad_bottom1 styling properties. Accepts also negative values. To adjust the text size of the tab names, use the text_font1 styling property. Read further down to learn now to add tabs to the tabview.","title":"Tabview  "},{"location":"design/objects/#tab","text":"obj: tab Property Value Default Description parentid int8 0 The id of the tabview object to which this tab is added text string \"Tab\" The name of tab button Set the parent object (which tabview the tabs belong to) by referencing the parentid when creating the tab. To add other objects to these tabs, set the parentid when creating those objects to the id of the tab you wamt them to appear on. Example jsonl 1 2 3 4 5 6 7 { \"page\" : 1 , \"id\" : 14 , \"obj\" : \"tabview\" , \"btn_pos\" : 1 , \"y\" : 180 } { \"page\" : 1 , \"id\" : 51 , \"obj\" : \"tab\" , \"parentid\" : 14 , \"text\" : \"Tab 1\" } { \"page\" : 1 , \"id\" : 52 , \"obj\" : \"tab\" , \"parentid\" : 14 , \"text\" : \"Tab 2\" } { \"page\" : 1 , \"id\" : 53 , \"obj\" : \"tab\" , \"parentid\" : 14 , \"text\" : \"Tab 3\" } { \"page\" : 1 , \"id\" : 61 , \"obj\" : \"switch\" , \"x\" : 20 , \"y\" : 10 , \"w\" : 60 , \"h\" : 30 , \"parentid\" : 51 , \"radius\" : 25 , \"radius2\" : 25 } { \"page\" : 1 , \"id\" : 71 , \"obj\" : \"dropdown\" , \"x\" : 15 , \"y\" : 10 , \"w\" : 110 , \"h\" : 30 , \"parentid\" : 52 , \"options\" : \"Apple\\nBanana\\nOrange\\nMelon\" } { \"page\" : 1 , \"id\" : 81 , \"obj\" : \"checkbox\" , \"x\" : 15 , \"y\" : 10 , \"w\" : 110 , \"h\" : 30 , \"parentid\" : 53 , \"text\" : \" Nice tabview\" }","title":"Tab  "},{"location":"design/objects/#color-picker","text":"obj: cpicker Property Value Default Description color color 0 The selected color in html format #rrggbb scale_width uint16 25 The width of the color gradient of the circle pad_inner int16 10 The padding between the circle and the inner preview circle The object will automatically adjust based on the w and h properties: when the object is longer then it is height a rectangular color picker is created, otherwise it will be circular. By long pressing the inner preview circle, the color picker will through the color modes: hue > saturation > value. Double-click on the inner preview circle to reset the current value.","title":"Color picker"},{"location":"design/objects/#spinner","text":"obj: spinner Property Value Default Description speed int16 1000 The time for 1 turn in ms direction int16 0 0 = clockwise, 1 = counter-clockwise angle 0-360 60 The length of the spinning segment in degrees line_width int16 20 The width of the background circle line_width1 int16 20 The width of the spinning segment line_color color depends on theme color of the background circle line_color1 color depends on theme color of the spinning segment Tip Check out background, border, and line styling to adjust other aspects of the appearance. Note Placing objects over/under the spinner will increase the CPU load because all objects need to be redrawn constantly. Example jsonl 1 { \"page\" : 1 , \"id\" : 15 , \"obj\" : \"spinner\" , \"x\" : 180 , \"y\" : 50 , \"w\" : 36 , \"h\" : 36 , \"bg_opa\" : 0 , \"border_width\" : 0 , \"line_width\" : 6 , \"line_width1\" : 6 , \"angle\" : 80 , \"line_color\" : \"white\" , \"line_color1\" : \"green\" }","title":"Spinner"},{"location":"design/objects/#led-indicator","text":"obj: led Property Value Default Description val byte 0 The brightness of the indicator [ 0..255 ]","title":"LED Indicator"},{"location":"design/objects/#button-matrix","text":"obj: btnmatrix Property Value Default Description options json array \"Text\" Json array of strings where each element is the label of a button. Use \"\\n\" for a new line of buttons align string center Text alignment: left , center , right toggle bool false All buttons behave as toggle buttons or normal buttons one_check bool false Allow only one button to be checked (toggled) at once val int8 0 The number of the active button, starting at 0. In conjunction with toggle and one_check set it to -1 to deactivate all buttons The styling properties apply to all buttons in the matrix. To change the color of a single label you can prefix the text with a #RRGGBB hexadecimal color code and close with a single hash # tag. Example jsonl 1 { \"page\" : 1 , \"id\" : 20 , \"obj\" : \"btnmatrix\" , \"x\" : 10 , \"y\" : 10 , \"w\" : 220 , \"h\" : 150 , \"options\" :[ \"#FF0000 Red Text#\" , \"#0000FF Cyan Text#\" , \"\\n\" , \"#FFFF00 Yellow Text#\" ], \"toggle\" : 1 , \"one_check\" : 1 }","title":"Button Matrix"},{"location":"design/objects/#messagebox","text":"obj: msgbox Property Value Default Description text string \"\" The text of the message to be displayed. options json array [\"OK\"] Json array of string s where each element is the label of a button modal bool false Make the messagebox a modal dialog requiring user input auto_close int16 0 Close the pop-up message automatically after this number of milliseconds have passed The Message boxes act as a pop-up. The default width is the horizontal screen size, the height adjusts according to the contents of the message. The pop-up is centered on the screen. Note The messagebox object is automatically deleted when it is closed. You will need to create it again using jsonl to pop-up a new message. Example jsonl 1 { \"page\" : 1 , \"id\" : 24 , \"obj\" : \"msgbox\" , \"text\" : \"A message box with two buttons\" , \"options\" :[ \"Apply\" , \"Close\" ]}","title":"Messagebox  "},{"location":"design/objects/#line","text":"obj: line Property Value Default Description points JSON array \"\" The name of the image file auto_size bool true Automatically set the size of the line object to the outer bounds y_invert bool false The y direction might be conter-intuitive in some cases so the y coordinates can be inverted The points parameter is a JSON array of [x,y] coordinates, for example [[10,25],[100,25],[100,0]] . Example jsonl 1 { \"page\" : 1 , \"id\" : 33 , \"obj\" : \"line\" , \"points\" :[[ 10 , 25 ],[ 100 , 25 ],[ 100 , 0 ]], \"auto_size\" : 0 , \"y_invert\" : 1 }","title":"Line  "},{"location":"design/objects/#image","text":"obj: img Property Value Default Description src string \"\" The name of the image file auto_size bool true Automatically set the size of the image object to the image source offset_x int16 0 Shift the picture horizontally relative to the image object offset_y int16 0 Shift the picture vertically relative to the image object Only PNG image files are supported, from flash. You can use image_recolor and image_recolor_opa from the image styling properties to apply a color overlay mask. Note The decoding of the images is done in memory, thus you'll be able to display full-screen images only if your microcontroller has installed PSram memory , else you will be limited to small icons. Example jsonl 1 { \"page\" : 1 , \"id\" : 34 , \"obj\" : \"img\" , \"src\" : \"/littlefs/image.png\" , \"auto_size\" : 0 , \"w\" : 50 }","title":"Image  "},{"location":"design/objects/#base-object","text":"obj: obj The Base Object can be directly used as a simple, empty widget. It is nothing more then a (rounded) rectangle. You can use it as a background shape for other objects by putting its jsonl line before the object. It catches touches! Example jsonl 1 { \"page\" : 1 , \"id\" : 50 , \"obj\" : \"obj\" , \"x\" : 5 , \"y\" : 35 , \"w\" : 230 , \"h\" : 250 , \"click\" : 0 }","title":"Base Object"},{"location":"design/objects.nl/","text":".md-typeset__table { min-width: 100%; } table th:first-child{ border-radius:5px 0 0 0; } table th:last-child{ border-radius:0 5px 0 0; } tbody tr:nth-child(even) { background: #88888811; } .md-typeset table:not([class]) { display: table; } .md-typeset table:not([class]) td { padding: 0.5em 1.25em; line-height: 1.25; } Objecten There are two ways to create an object on the screen: Uploading a pages.jsonl file onto the internal flash Use the jsonl command (via MQTT, serial or telnet console) Cheatsheet ~ obj Type Description btn Binary Button switch Toggle Switch checkbox Toggle Checkbox label Visual Label led Visual LED spinner Visual Spinner obj Visual Base Object img Visual Image dropdown Selector Dropdown List roller Selector Roller btnmatrix Selector Button Matrix msgbox Selector Messagebox tabview Selector Tabview tab Selector Tab cpicker Selector Color picker bar Range Progress Bar slider Range Slider arc Range Arc linemeter Range Line Meter gauge Range Gauge Common Parameters ~ Common Properties ~ These are the common properties shared among all objects, but only the id and obj properties are required to create an object: Property Value Required Default Description id 1..255 yes n/a ID of the object on this page obj string yes n/a Name of the object type (see below) page 0..12 no n/a ID of the page the object appears on (see below) groupid 0..15 no 0 (none) ID of the GPIO group the object belongs to x int16 no 0 horizontal position on the page y int16 no 0 vertical position on the page w int16 no 0 width of the object h int16 no 0 height of the object hidden bool no false object is hidden opacity 0..255 no 255 how much the the object is opaque radius uint16 no depends on theme the radius of the rounded corners of the object: 0 square corners 100 pill shaped object (true circle if object has same width and height) action string no 0 command handled locally (see below) swipe bool no false page navigation using swipe gestures (see below) click bool no true object is touch/clickable (also see enabled ) ext_click_h 0..255 no 0 extended horizontal clickable are on the left and right ext_click_v 0.255 no 0 extended vertical clickable are on the top and bottom Note Further customizable properties can be found in styling . Pages ~ If the page parameter is not present, the object is placed on the same page as the previous object . If page is not specified for the first object either, the current page being displayed is used. \"page\":0 indicates that the object is visible on all pages. It can be used for example to specify a static menu bar. You can still hide the object on select pages if needed. Objects on page 0 appear on top of any objects on the underlying page. Actions ~ Action commands are supported only by binary or visual type of objects and they are performed locally on the plate. The following actions can be set for these objects: p1 to p12 to switch to the corresponding page numbers directly prev to switch to the previous page next to switch to the next page back to go back to the home page Check out the example for how to implement actions. You can change the target pages using prev , back and next page attributes operation on the page object pXb0 . Swipe ~ Objects and page area ( p0bY ) support swipe property. Enabling this will process left , right and down swipes on the object as next , prev and back page changes, respectively. The start of the swipe needs to be on the element which has this property enabled for the feature to activate. Note: Page id p0b0 is not valid to set this property as it has to be set on real elements. Events ~ All objects are touchable by default and respond to touch events. To disable touch events for an object set its enabled property to false . In this case the touch event \"goes through\" to the object on the layer below or to the page itself. Events (and values) are published in a state topic corresponding to the object, eg. hasp/<nodename>/state/p1b2 with payload in json format eg. {\"event\":\"up\",\"val\":1} . Possible events (depending on object type) are: Event Description down Occurs when a button goes from depressed to pressed (the moment of touch) up The button was released within a short time i.e. a short press has occurred release The button is released after being pressed for over the threshold time long Event is sent when the button is still being pressed after the threshold time of 400ms hold The HOLD event is repeated every 200ms while the button is still pressed changed Event is sent when the value of the object has changed during the event Tip: To actively see the sent out events you can use an MQTT client app and subscribe to the hasp/# topic. Common Methods ~ These are the common methods shared among all objects, Method Parameters Description clear Delete the children from the object delete Delete the object and its children from the page to_front Bring the object to the front on the page to_back Send the object to the back on the page Example commands: 1 2 p 1 b 5. dele te p 1 b 3. t o_ fr o nt Object Types Each object type is an ID that indicates which object type that line represents. Besides the common properties listed above, each object type can have specific properties. Text Label ~ obj: label Property Value Default Description text string \"Text\" The text of the label, \\n for line break. mode string crop The wrapping mode of long text labels: expand Expand the object size to the text size break Keep the object width, break the too long lines and expand the object height dots Keep the size and write dots at the end if the text is too long scroll Keep the size and roll the text back and forth loop Keep the size and roll the text circularly crop Keep the size and crop the text out of it align 0..2 0 Text alignment: 0 = left, 1 = center, 2 = right Example jsonl : 1 { \"page\" : 1 , \"id\" : 1 , \"obj\" : \"label\" , \"x\" : 0 , \"y\" : 50 , \"w\" : 150 , \"h\" : 50 , \"text\" : \"\\uE64A Hello world!\" } Button ~ obj: btn Property Value Default Description toggle bool false When enabled, creates a toggle-on/toggle-off button. If false, creates a normal button val int16 0 The value: 0 = untoggled, 1 = toggled text string \"\" The text of the label mode string expand The wrapping mode of long text labels. expand Expand the object size to the text size break Keep the object width, break the too long lines and expand the object height dots Keep the size and write dots at the end if the text is too long scroll Keep the size and roll the text back and forth loop Keep the size and roll the text circularly crop Keep the size and crop the text out of it align 0..2 0 Text alignment: 0 = left, 1 = center, 2 = right Example jsonl : 1 2 { \"page\" : 1 , \"id\" : 2 , \"obj\" : \"btn\" , \"x\" : 10 , \"y\" : 40 , \"w\" : 105 , \"h\" : 90 , \"toggle\" : false , \"text\" : \"Normal Button\" , \"mode\" : \"break\" , \"align\" : 1 } { \"page\" : 1 , \"id\" : 3 , \"obj\" : \"btn\" , \"x\" : 125 , \"y\" : 40 , \"w\" : 105 , \"h\" : 90 , \"toggle\" : true , \"text\" : \"Toggle Button\" , \"mode\" : \"break\" , \"align\" : 1 } Normal buttons ( toggle=false ) send touch events while they occur: Short touch: 1 2 { \"event\" : \"down\" } { \"event\" : \"up\" } Long press: 1 2 3 4 5 { \"event\" : \"down\" } { \"event\" : \"long\" } { \"event\" : \"hold\" } { \"event\" : \"hold\" } { \"event\" : \"release\" } Toggle buttons ( toggle=true ) send out the old value in the down event and the new value in the up event when released: Toggle ON: 1 2 { \"event\" : \"down\" , \"val\" : 0 } { \"event\" : \"up\" , \"val\" : 1 } Toggle OFF: 1 2 { \"event\" : \"down\" , \"val\" : 1 } { \"event\" : \"up\" , \"val\" : 0 } Switch ~ obj: switch Property Value Default Description val bool 0 1 = on, 0 = off bg_color1 color 0 changes indicator color bg_color2 color 0 changes knob color radius2 int16 depends on theme changes knob corner radius (also see radius ) Example jsonl : 1 { \"page\" : 1 , \"id\" : 4 , \"obj\" : \"switch\" , \"x\" : 125 , \"y\" : 145 , \"w\" : 105 , \"h\" : 55 , \"radius\" : 15 } Events generated by switch are similar to the ones generate by the toggle buttons. Checkbox ~ obj: checkbox Property Value Default Description val int16 0 1 = checked 0 = unchecked text string \"Checkbox\" The label of the checkbox Note The checkbox object ignores the w and h attribute. These are calculated based on the font and text. Example jsonl : 1 { \"page\" : 1 , \"id\" : 5 , \"obj\" : \"checkbox\" , \"x\" : 10 , \"y\" : 145 , \"w\" : 105 , \"text\" : \" Checkbox\" } Events generated by checkbox are similar to the ones generate by the toggle buttons. Progress Bar ~ obj: bar Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator start_value int16 0 optional start value of the indicator Vertical bars can be created if the width of the object is smaller than its height. Slider ~ obj: slider Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator start_value int16 0 optional start value of the indicator Vertical sliders can be created if the width of the object is smaller than its height. Example jsonl : 1 { \"page\" : 1 , \"id\" : 6 , \"obj\" : \"slider\" , \"x\" : 20 , \"y\" : 250 , \"w\" : 200 , \"h\" : 20 , \"min\" : 15 , \"max\" : 35 } While pressing and dragging the slider object the following events are sent: down (old value), changed (repeatedly until released) and up (value at the moment of releasing it): 1 2 3 4 5 6 7 { \"event\" : \"down\" , \"val\" : 21 } { \"event\" : \"changed\" , \"val\" : 22 } { \"event\" : \"changed\" , \"val\" : 23 } { \"event\" : \"changed\" , \"val\" : 25 } { \"event\" : \"changed\" , \"val\" : 27 } { \"event\" : \"changed\" , \"val\" : 29 } { \"event\" : \"up\" , \"val\" : 31 } Arc ~ obj: arc Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator rotation int16 0 offset to the 0 degree position type 0-2 0 0 = normal, 1 = symmetrical, 2 = reverse adjustable bool false Add knob that the user can operate to change the value start_angle 0-360 start angle of the arc background (see note) end_angle 0-360 end angle of the arc background (see note) start_angle1 0-360 start angle of the arc indicator (see note) end_angle1 0-360 end angle of the arc indicator (see note) Note Zero degree is at the middle right (3 o'clock) of the object and the degrees are increasing in a clockwise direction. The angles should be in the [0-360] range. Note Check out value styling to display a textual value in the middle of the arc. Example jsonl : 1 { \"page\" : 1 , \"id\" : 9 , \"obj\" : \"arc\" , \"x\" : 20 , \"y\" : 75 , \"w\" : 200 , \"h\" : 200 , \"min\" : 15 , \"max\" : 35 , \"border_side\" : 0 , \"type\" : 0 , \"rotation\" : 0 , \"start_angle\" : 135 , \"end_angle\" : 45 , \"start_angle1\" : 135 , \"end_angle1\" : 45 , \"adjustable\" : true } While pressing and dragging the arc object the following events are sent: down (old value), changed (repeatedly until released) and up (value at the moment of releasing it): 1 2 3 4 5 6 7 { \"event\" : \"down\" , \"val\" : 21 } { \"event\" : \"changed\" , \"val\" : 22 } { \"event\" : \"changed\" , \"val\" : 23 } { \"event\" : \"changed\" , \"val\" : 25 } { \"event\" : \"changed\" , \"val\" : 27 } { \"event\" : \"changed\" , \"val\" : 29 } { \"event\" : \"up\" , \"val\" : 31 } Dropdown List ~ obj: dropdown Property Value Default Description options string \"\" List of items separated by \\n val int16 0 The number of the selected item text string \"\" Read-only The text of the selected item direction byte 0 Direction where the dropdown expands: 0 = down, 1 = up, 2 = left, 3 = right Note: up and down are superseeded by the screen size. show_selected bool true Show the selected option or a static text max_height int16 3/4 of screen height The maximum height of the open drop-down list Method Parameters Description open To manually open the drop-down list close To manually close the drop-down list To change the currently selected item, use the val attribute. To change the items in the list, use the options attribute. Example jsonl : 1 { \"page\" : 1 , \"id\" : 10 , \"obj\" : \"dropdown\" , \"x\" : 10 , \"y\" : 205 , \"w\" : 105 , \"h\" : 30 , \"options\" : \"Apple\\nBanana\\nOrange\\nMelon\" } When the item is changed both val and text of the newly selected item are send out accompanied by the change event. Roller ~ obj: roller Property Value Default Description options string \"\" List of items separated by \\n val int16 0 The number of the selected item text string \"\" Read-only The text of the selected item rows int8 3 The number of rows that are visible Use this property instead of h to set object height mode 0..1 0 Roller mode: 0 = normal (finite), 1 = infinite align 0..2 1 Text alignment: 0 = left, 1 = center, 2 = right To change the currently selected item, use the val attribute. To change the items in the list, use the options attribute. Example jsonl : 1 { \"page\" : 1 , \"id\" : 11 , \"obj\" : \"roller\" , \"x\" : 125 , \"y\" : 205 , \"w\" : 105 , \"h\" : 30 , \"options\" : \"Apple\\nBanana\\nOrange\\nMelon\" , \"mode\" : 1 } When the item is changed both val and text of the newly selected item are send out accompanied by the change event. Line Meter ~ obj: linemeter Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator angle 0-360 240 angle between start and end of the scale line_count uint16 31 tick count of the scale rotation 0-360 0 offset for the scale angles to rotate it type 0-1 0 0 = indicator lines are activated clock-wise 1 = indicator lines are activated counter-clock-wise Use line and scale properties to customize. Example jsonl : 1 { \"page\" : 1 , \"id\" : 12 , \"obj\" : \"linemeter\" , \"x\" : 20 , \"y\" : 70 , \"w\" : 200 , \"h\" : 200 , \"value_str\" : \"Temp\" , \"val\" : 75 , \"line_count\" : 35 , \"line_rounded\" : 1 } Gauge ~ obj: gauge Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator critical_value int16 80 scale color will be changed to scale_end_color after this value angle 0-360 240 angle between start and end of the scale label_count uint8 number of labels (and major ticks) of the scale line_count uint16 31 number of minor ticks of the entire scale rotation 0-360 0 offset for the gauge's angles to rotate it format uint16 0 divider for major tick values To strip trailing zero's of major tick labels the format divider can be used to scale the values before printing: 0 : print the major tick value as is 1 : strip 1 zero, i.e. divide tick value by 10 before printing the major tick label 2 : strip 2 zeros, i.e. divide tick value by 100 before printing the major tick label 3 : strip 3 zeros, i.e. divide tick value by 1000 before printing the major tick label 4 : strip 4 zeros, i.e. divide tick value by 10000 before printing the major tick label Only these values are allowed, arbitrary numbers are not supported. Example jsonl : 1 { \"page\" : 1 , \"id\" : 13 , \"obj\" : \"gauge\" , \"x\" : 20 , \"y\" : 70 , \"w\" : 200 , \"h\" : 200 } Use scale properties to customize. Tabview ~ obj: tabview A tabview is an object that can hold multiple tab objects. You first create the tabview object and then add tab objects to it. Property Value Default Description val int8 0 The number of the active tab, starting at 0 text string \"\" The name of the active tab btn_pos 0..4 1 Position of the tab buttons: 0 = none 1 = top 2 = bottom 3 = left 4 = right count int 0 Read-only The number of tabs of the tabview To change the currently visible tab, use the val attribute after all tabs have been added. Example jsonl : 1 { \"page\" : 1 , \"id\" : 10 , \"obj\" : \"tabview\" , \"btn_pos\" : 1 } Tab ~ obj: tab Property Value Default Description parentid int8 0 The id of the tabview object to which this tab is added text string \"Tab\" The name of tab Set the parent object by referencing the parentid in the tab. It must be a tabview object. Example jsonl : 1 2 3 { \"page\" : 1 , \"id\" : 50 , \"obj\" : \"tab\" , \"parentid\" : 10 , \"text\" : \"Tab 1\" } { \"page\" : 1 , \"id\" : 51 , \"obj\" : \"tab\" , \"parentid\" : 10 , \"text\" : \"Tab 2\" } { \"page\" : 1 , \"id\" : 52 , \"obj\" : \"tab\" , \"parentid\" : 10 , \"text\" : \"Tab 3\" } To add other objects to these tabs, also use the parentid when creating those objects. Color picker ~ obj: cpicker Property Value Default Description color color 0 The selected color in html format #rrggbb scale_width int 25 The width of the color gradient of the circle pad_inner int 10 The padding between the circle and the inner preview circle The object will automatically adjust based on the w and h properties: when the object is longer then it is height a rectangular color picker is created, otherwise it will be circular. By long pressing the inner preview circle, the color picker will through the color modes: hue > saturation > value. Double-click on the inner preview circle to reset the current value. Setting Color ~ Example MQTT commands: 1 2 3 hasp/< n ode na me>/comma n d/p 0 b 2. color 13891 hasp/< n ode na me>/comma n d/p 1 b 5. color silver hasp/< n ode na me>/comma n d/p 2 b 3. color #C 0 C 0 C 0 Events ~ While pressing and dragging the cpicker object the following events are sent: down (old color), changed (repeatedly until released) and up (value at the moment of releasing it): 1 2 3 4 { \"event\" : \"down\" , \"color\" : \"#8300ff\" , \"r\" : 131 , \"g\" : 0 , \"b\" : 255 } { \"event\" : \"changed\" , \"color\" : \"#7300ff\" , \"r\" : 115 , \"g\" : 0 , \"b\" : 255 } { \"event\" : \"changed\" , \"color\" : \"#6200ff\" , \"r\" : 98 , \"g\" : 0 , \"b\" : 255 } { \"event\" : \"up\" , \"color\" : \"#6200ff\" , \"r\" : 98 , \"g\" : 0 , \"b\" : 255 } Spinner ~ obj: spinner Property Value Default Description speed int16 1000 The time for 1 turn in ms direction int16 0 0 = clockwise, 1 = counter-clockwise angle 0-360 60 The length of the arc in degrees Note Placing objects over/under the spinner will increase the CPU load because all objects need to be redrawn constantly. LED Indicator ~ obj: led Property Value Default Description val byte 0 The brightness of the indicator [ 0..255 ] Button Matrix ~ obj: btnmatrix Property Value Default Description options json array \"Text\" Json array of strings where each element is the label of a button. Use \"\\n\" for a new line of buttons align 0..2 1 Text alignment: 0 = left, 1 = center, 2 = right toggle bool false All buttons behave as toggle buttons or normal buttons one_check bool false Allow only one button to be checked (toggled) at once The styling properties apply to all buttons in the matrix. To change the color of a single label you can prefix the text with a #RRGGBB hexadecimal color code and close with a single hash # tag. Example jsonl : 1 { \"page\" : 1 , \"id\" : 20 , \"obj\" : \"btnmatrix\" , \"x\" : 10 , \"y\" : 10 , \"w\" : 220 , \"h\" : 150 , \"options\" :[ \"#FF0000 Red Text#\" , \"#0000FF Cyan Text#\" , \"\\n\" , \"#FFFF00 Yellow Text#\" ], \"toggle\" : 1 , \"one_check\" : 1 } Messagebox ~ obj: msgbox Property Value Default Description text string \"\" The text of the message to be displayed options json array [\"OK\"] Json array of strings where each element is the label of a button modal bool false Make the messagebox a modal dialog requiring user input auto_close int16 0 Close the pop-up message automatically after this number of milliseconds have passed The Message boxes act as a pop-up. The default width is the horizontal screen size, the height adjusts according to the contents of the message. The pop-up is centered on the screen. Note The messagebox object is automatically deleted when it is closed. You will need to create it again using jsonl to pop-up a new message. Example jsonl : 1 { \"page\" : 1 , \"id\" : 24 , \"obj\" : \"msgbox\" , \"text\" : \"A message box with two buttons\" , \"options\" :[ \"Apply\" , \"Close\" ]} Image ~ obj: img Property Value Default Description src string \"\" The name of the image file auto_size bool true Automatically set the size of the image object to the image source offset_x int 0 Shift the picture horizontally relative to the image object offset_y int 0 Shift the picture vertically relative to the image object You can use image_recolor and image_recolor_opa from the image styling properties to apply a color overlay mask. Example jsonl : 1 { \"page\" : 1 , \"id\" : 34 , \"obj\" : \"img\" , \"src\" : \"/littlefs/image.png\" , \"auto_size\" : 0 , \"w\" : 50 } Base Object ~ obj: obj The Base Object can be directly used as a simple, empty widget. It is nothing more then a (rounded) rectangle. You can use it as a background shape for other objects by putting its jsonl line before the object. It catches touches!","title":"Objects.nl"},{"location":"design/objects.nl/#cheatsheet","text":"obj Type Description btn Binary Button switch Toggle Switch checkbox Toggle Checkbox label Visual Label led Visual LED spinner Visual Spinner obj Visual Base Object img Visual Image dropdown Selector Dropdown List roller Selector Roller btnmatrix Selector Button Matrix msgbox Selector Messagebox tabview Selector Tabview tab Selector Tab cpicker Selector Color picker bar Range Progress Bar slider Range Slider arc Range Arc linemeter Range Line Meter gauge Range Gauge","title":"Cheatsheet"},{"location":"design/objects.nl/#common-parameters","text":"","title":"Common Parameters"},{"location":"design/objects.nl/#common-properties","text":"These are the common properties shared among all objects, but only the id and obj properties are required to create an object: Property Value Required Default Description id 1..255 yes n/a ID of the object on this page obj string yes n/a Name of the object type (see below) page 0..12 no n/a ID of the page the object appears on (see below) groupid 0..15 no 0 (none) ID of the GPIO group the object belongs to x int16 no 0 horizontal position on the page y int16 no 0 vertical position on the page w int16 no 0 width of the object h int16 no 0 height of the object hidden bool no false object is hidden opacity 0..255 no 255 how much the the object is opaque radius uint16 no depends on theme the radius of the rounded corners of the object: 0 square corners 100 pill shaped object (true circle if object has same width and height) action string no 0 command handled locally (see below) swipe bool no false page navigation using swipe gestures (see below) click bool no true object is touch/clickable (also see enabled ) ext_click_h 0..255 no 0 extended horizontal clickable are on the left and right ext_click_v 0.255 no 0 extended vertical clickable are on the top and bottom Note Further customizable properties can be found in styling .","title":"Common Properties"},{"location":"design/objects.nl/#events","text":"All objects are touchable by default and respond to touch events. To disable touch events for an object set its enabled property to false . In this case the touch event \"goes through\" to the object on the layer below or to the page itself. Events (and values) are published in a state topic corresponding to the object, eg. hasp/<nodename>/state/p1b2 with payload in json format eg. {\"event\":\"up\",\"val\":1} . Possible events (depending on object type) are: Event Description down Occurs when a button goes from depressed to pressed (the moment of touch) up The button was released within a short time i.e. a short press has occurred release The button is released after being pressed for over the threshold time long Event is sent when the button is still being pressed after the threshold time of 400ms hold The HOLD event is repeated every 200ms while the button is still pressed changed Event is sent when the value of the object has changed during the event Tip: To actively see the sent out events you can use an MQTT client app and subscribe to the hasp/# topic.","title":"Events"},{"location":"design/objects.nl/#common-methods","text":"These are the common methods shared among all objects, Method Parameters Description clear Delete the children from the object delete Delete the object and its children from the page to_front Bring the object to the front on the page to_back Send the object to the back on the page Example commands: 1 2 p 1 b 5. dele te p 1 b 3. t o_ fr o nt","title":"Common Methods"},{"location":"design/objects.nl/#text-label","text":"obj: label Property Value Default Description text string \"Text\" The text of the label, \\n for line break. mode string crop The wrapping mode of long text labels: expand Expand the object size to the text size break Keep the object width, break the too long lines and expand the object height dots Keep the size and write dots at the end if the text is too long scroll Keep the size and roll the text back and forth loop Keep the size and roll the text circularly crop Keep the size and crop the text out of it align 0..2 0 Text alignment: 0 = left, 1 = center, 2 = right Example jsonl : 1 { \"page\" : 1 , \"id\" : 1 , \"obj\" : \"label\" , \"x\" : 0 , \"y\" : 50 , \"w\" : 150 , \"h\" : 50 , \"text\" : \"\\uE64A Hello world!\" }","title":"Text Label"},{"location":"design/objects.nl/#button","text":"obj: btn Property Value Default Description toggle bool false When enabled, creates a toggle-on/toggle-off button. If false, creates a normal button val int16 0 The value: 0 = untoggled, 1 = toggled text string \"\" The text of the label mode string expand The wrapping mode of long text labels. expand Expand the object size to the text size break Keep the object width, break the too long lines and expand the object height dots Keep the size and write dots at the end if the text is too long scroll Keep the size and roll the text back and forth loop Keep the size and roll the text circularly crop Keep the size and crop the text out of it align 0..2 0 Text alignment: 0 = left, 1 = center, 2 = right Example jsonl : 1 2 { \"page\" : 1 , \"id\" : 2 , \"obj\" : \"btn\" , \"x\" : 10 , \"y\" : 40 , \"w\" : 105 , \"h\" : 90 , \"toggle\" : false , \"text\" : \"Normal Button\" , \"mode\" : \"break\" , \"align\" : 1 } { \"page\" : 1 , \"id\" : 3 , \"obj\" : \"btn\" , \"x\" : 125 , \"y\" : 40 , \"w\" : 105 , \"h\" : 90 , \"toggle\" : true , \"text\" : \"Toggle Button\" , \"mode\" : \"break\" , \"align\" : 1 } Normal buttons ( toggle=false ) send touch events while they occur: Short touch: 1 2 { \"event\" : \"down\" } { \"event\" : \"up\" } Long press: 1 2 3 4 5 { \"event\" : \"down\" } { \"event\" : \"long\" } { \"event\" : \"hold\" } { \"event\" : \"hold\" } { \"event\" : \"release\" } Toggle buttons ( toggle=true ) send out the old value in the down event and the new value in the up event when released: Toggle ON: 1 2 { \"event\" : \"down\" , \"val\" : 0 } { \"event\" : \"up\" , \"val\" : 1 } Toggle OFF: 1 2 { \"event\" : \"down\" , \"val\" : 1 } { \"event\" : \"up\" , \"val\" : 0 }","title":"Button"},{"location":"design/objects.nl/#switch","text":"obj: switch Property Value Default Description val bool 0 1 = on, 0 = off bg_color1 color 0 changes indicator color bg_color2 color 0 changes knob color radius2 int16 depends on theme changes knob corner radius (also see radius ) Example jsonl : 1 { \"page\" : 1 , \"id\" : 4 , \"obj\" : \"switch\" , \"x\" : 125 , \"y\" : 145 , \"w\" : 105 , \"h\" : 55 , \"radius\" : 15 } Events generated by switch are similar to the ones generate by the toggle buttons.","title":"Switch"},{"location":"design/objects.nl/#checkbox","text":"obj: checkbox Property Value Default Description val int16 0 1 = checked 0 = unchecked text string \"Checkbox\" The label of the checkbox Note The checkbox object ignores the w and h attribute. These are calculated based on the font and text. Example jsonl : 1 { \"page\" : 1 , \"id\" : 5 , \"obj\" : \"checkbox\" , \"x\" : 10 , \"y\" : 145 , \"w\" : 105 , \"text\" : \" Checkbox\" } Events generated by checkbox are similar to the ones generate by the toggle buttons.","title":"Checkbox"},{"location":"design/objects.nl/#progress-bar","text":"obj: bar Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator start_value int16 0 optional start value of the indicator Vertical bars can be created if the width of the object is smaller than its height.","title":"Progress Bar"},{"location":"design/objects.nl/#slider","text":"obj: slider Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator start_value int16 0 optional start value of the indicator Vertical sliders can be created if the width of the object is smaller than its height. Example jsonl : 1 { \"page\" : 1 , \"id\" : 6 , \"obj\" : \"slider\" , \"x\" : 20 , \"y\" : 250 , \"w\" : 200 , \"h\" : 20 , \"min\" : 15 , \"max\" : 35 } While pressing and dragging the slider object the following events are sent: down (old value), changed (repeatedly until released) and up (value at the moment of releasing it): 1 2 3 4 5 6 7 { \"event\" : \"down\" , \"val\" : 21 } { \"event\" : \"changed\" , \"val\" : 22 } { \"event\" : \"changed\" , \"val\" : 23 } { \"event\" : \"changed\" , \"val\" : 25 } { \"event\" : \"changed\" , \"val\" : 27 } { \"event\" : \"changed\" , \"val\" : 29 } { \"event\" : \"up\" , \"val\" : 31 }","title":"Slider"},{"location":"design/objects.nl/#arc","text":"obj: arc Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator rotation int16 0 offset to the 0 degree position type 0-2 0 0 = normal, 1 = symmetrical, 2 = reverse adjustable bool false Add knob that the user can operate to change the value start_angle 0-360 start angle of the arc background (see note) end_angle 0-360 end angle of the arc background (see note) start_angle1 0-360 start angle of the arc indicator (see note) end_angle1 0-360 end angle of the arc indicator (see note) Note Zero degree is at the middle right (3 o'clock) of the object and the degrees are increasing in a clockwise direction. The angles should be in the [0-360] range. Note Check out value styling to display a textual value in the middle of the arc. Example jsonl : 1 { \"page\" : 1 , \"id\" : 9 , \"obj\" : \"arc\" , \"x\" : 20 , \"y\" : 75 , \"w\" : 200 , \"h\" : 200 , \"min\" : 15 , \"max\" : 35 , \"border_side\" : 0 , \"type\" : 0 , \"rotation\" : 0 , \"start_angle\" : 135 , \"end_angle\" : 45 , \"start_angle1\" : 135 , \"end_angle1\" : 45 , \"adjustable\" : true } While pressing and dragging the arc object the following events are sent: down (old value), changed (repeatedly until released) and up (value at the moment of releasing it): 1 2 3 4 5 6 7 { \"event\" : \"down\" , \"val\" : 21 } { \"event\" : \"changed\" , \"val\" : 22 } { \"event\" : \"changed\" , \"val\" : 23 } { \"event\" : \"changed\" , \"val\" : 25 } { \"event\" : \"changed\" , \"val\" : 27 } { \"event\" : \"changed\" , \"val\" : 29 } { \"event\" : \"up\" , \"val\" : 31 }","title":"Arc"},{"location":"design/objects.nl/#dropdown-list","text":"obj: dropdown Property Value Default Description options string \"\" List of items separated by \\n val int16 0 The number of the selected item text string \"\" Read-only The text of the selected item direction byte 0 Direction where the dropdown expands: 0 = down, 1 = up, 2 = left, 3 = right Note: up and down are superseeded by the screen size. show_selected bool true Show the selected option or a static text max_height int16 3/4 of screen height The maximum height of the open drop-down list Method Parameters Description open To manually open the drop-down list close To manually close the drop-down list To change the currently selected item, use the val attribute. To change the items in the list, use the options attribute. Example jsonl : 1 { \"page\" : 1 , \"id\" : 10 , \"obj\" : \"dropdown\" , \"x\" : 10 , \"y\" : 205 , \"w\" : 105 , \"h\" : 30 , \"options\" : \"Apple\\nBanana\\nOrange\\nMelon\" } When the item is changed both val and text of the newly selected item are send out accompanied by the change event.","title":"Dropdown List"},{"location":"design/objects.nl/#roller","text":"obj: roller Property Value Default Description options string \"\" List of items separated by \\n val int16 0 The number of the selected item text string \"\" Read-only The text of the selected item rows int8 3 The number of rows that are visible Use this property instead of h to set object height mode 0..1 0 Roller mode: 0 = normal (finite), 1 = infinite align 0..2 1 Text alignment: 0 = left, 1 = center, 2 = right To change the currently selected item, use the val attribute. To change the items in the list, use the options attribute. Example jsonl : 1 { \"page\" : 1 , \"id\" : 11 , \"obj\" : \"roller\" , \"x\" : 125 , \"y\" : 205 , \"w\" : 105 , \"h\" : 30 , \"options\" : \"Apple\\nBanana\\nOrange\\nMelon\" , \"mode\" : 1 } When the item is changed both val and text of the newly selected item are send out accompanied by the change event.","title":"Roller"},{"location":"design/objects.nl/#line-meter","text":"obj: linemeter Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator angle 0-360 240 angle between start and end of the scale line_count uint16 31 tick count of the scale rotation 0-360 0 offset for the scale angles to rotate it type 0-1 0 0 = indicator lines are activated clock-wise 1 = indicator lines are activated counter-clock-wise Use line and scale properties to customize. Example jsonl : 1 { \"page\" : 1 , \"id\" : 12 , \"obj\" : \"linemeter\" , \"x\" : 20 , \"y\" : 70 , \"w\" : 200 , \"h\" : 200 , \"value_str\" : \"Temp\" , \"val\" : 75 , \"line_count\" : 35 , \"line_rounded\" : 1 }","title":"Line Meter"},{"location":"design/objects.nl/#gauge","text":"obj: gauge Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator critical_value int16 80 scale color will be changed to scale_end_color after this value angle 0-360 240 angle between start and end of the scale label_count uint8 number of labels (and major ticks) of the scale line_count uint16 31 number of minor ticks of the entire scale rotation 0-360 0 offset for the gauge's angles to rotate it format uint16 0 divider for major tick values To strip trailing zero's of major tick labels the format divider can be used to scale the values before printing: 0 : print the major tick value as is 1 : strip 1 zero, i.e. divide tick value by 10 before printing the major tick label 2 : strip 2 zeros, i.e. divide tick value by 100 before printing the major tick label 3 : strip 3 zeros, i.e. divide tick value by 1000 before printing the major tick label 4 : strip 4 zeros, i.e. divide tick value by 10000 before printing the major tick label Only these values are allowed, arbitrary numbers are not supported. Example jsonl : 1 { \"page\" : 1 , \"id\" : 13 , \"obj\" : \"gauge\" , \"x\" : 20 , \"y\" : 70 , \"w\" : 200 , \"h\" : 200 } Use scale properties to customize.","title":"Gauge"},{"location":"design/objects.nl/#tabview","text":"obj: tabview A tabview is an object that can hold multiple tab objects. You first create the tabview object and then add tab objects to it. Property Value Default Description val int8 0 The number of the active tab, starting at 0 text string \"\" The name of the active tab btn_pos 0..4 1 Position of the tab buttons: 0 = none 1 = top 2 = bottom 3 = left 4 = right count int 0 Read-only The number of tabs of the tabview To change the currently visible tab, use the val attribute after all tabs have been added. Example jsonl : 1 { \"page\" : 1 , \"id\" : 10 , \"obj\" : \"tabview\" , \"btn_pos\" : 1 }","title":"Tabview"},{"location":"design/objects.nl/#tab","text":"obj: tab Property Value Default Description parentid int8 0 The id of the tabview object to which this tab is added text string \"Tab\" The name of tab Set the parent object by referencing the parentid in the tab. It must be a tabview object. Example jsonl : 1 2 3 { \"page\" : 1 , \"id\" : 50 , \"obj\" : \"tab\" , \"parentid\" : 10 , \"text\" : \"Tab 1\" } { \"page\" : 1 , \"id\" : 51 , \"obj\" : \"tab\" , \"parentid\" : 10 , \"text\" : \"Tab 2\" } { \"page\" : 1 , \"id\" : 52 , \"obj\" : \"tab\" , \"parentid\" : 10 , \"text\" : \"Tab 3\" } To add other objects to these tabs, also use the parentid when creating those objects.","title":"Tab"},{"location":"design/objects.nl/#color-picker","text":"obj: cpicker Property Value Default Description color color 0 The selected color in html format #rrggbb scale_width int 25 The width of the color gradient of the circle pad_inner int 10 The padding between the circle and the inner preview circle The object will automatically adjust based on the w and h properties: when the object is longer then it is height a rectangular color picker is created, otherwise it will be circular. By long pressing the inner preview circle, the color picker will through the color modes: hue > saturation > value. Double-click on the inner preview circle to reset the current value.","title":"Color picker"},{"location":"design/objects.nl/#spinner","text":"obj: spinner Property Value Default Description speed int16 1000 The time for 1 turn in ms direction int16 0 0 = clockwise, 1 = counter-clockwise angle 0-360 60 The length of the arc in degrees Note Placing objects over/under the spinner will increase the CPU load because all objects need to be redrawn constantly.","title":"Spinner"},{"location":"design/objects.nl/#led-indicator","text":"obj: led Property Value Default Description val byte 0 The brightness of the indicator [ 0..255 ]","title":"LED Indicator"},{"location":"design/objects.nl/#button-matrix","text":"obj: btnmatrix Property Value Default Description options json array \"Text\" Json array of strings where each element is the label of a button. Use \"\\n\" for a new line of buttons align 0..2 1 Text alignment: 0 = left, 1 = center, 2 = right toggle bool false All buttons behave as toggle buttons or normal buttons one_check bool false Allow only one button to be checked (toggled) at once The styling properties apply to all buttons in the matrix. To change the color of a single label you can prefix the text with a #RRGGBB hexadecimal color code and close with a single hash # tag. Example jsonl : 1 { \"page\" : 1 , \"id\" : 20 , \"obj\" : \"btnmatrix\" , \"x\" : 10 , \"y\" : 10 , \"w\" : 220 , \"h\" : 150 , \"options\" :[ \"#FF0000 Red Text#\" , \"#0000FF Cyan Text#\" , \"\\n\" , \"#FFFF00 Yellow Text#\" ], \"toggle\" : 1 , \"one_check\" : 1 }","title":"Button Matrix"},{"location":"design/objects.nl/#messagebox","text":"obj: msgbox Property Value Default Description text string \"\" The text of the message to be displayed options json array [\"OK\"] Json array of strings where each element is the label of a button modal bool false Make the messagebox a modal dialog requiring user input auto_close int16 0 Close the pop-up message automatically after this number of milliseconds have passed The Message boxes act as a pop-up. The default width is the horizontal screen size, the height adjusts according to the contents of the message. The pop-up is centered on the screen. Note The messagebox object is automatically deleted when it is closed. You will need to create it again using jsonl to pop-up a new message. Example jsonl : 1 { \"page\" : 1 , \"id\" : 24 , \"obj\" : \"msgbox\" , \"text\" : \"A message box with two buttons\" , \"options\" :[ \"Apply\" , \"Close\" ]}","title":"Messagebox"},{"location":"design/objects.nl/#image","text":"obj: img Property Value Default Description src string \"\" The name of the image file auto_size bool true Automatically set the size of the image object to the image source offset_x int 0 Shift the picture horizontally relative to the image object offset_y int 0 Shift the picture vertically relative to the image object You can use image_recolor and image_recolor_opa from the image styling properties to apply a color overlay mask. Example jsonl : 1 { \"page\" : 1 , \"id\" : 34 , \"obj\" : \"img\" , \"src\" : \"/littlefs/image.png\" , \"auto_size\" : 0 , \"w\" : 50 }","title":"Image"},{"location":"design/objects.nl/#base-object","text":"obj: obj The Base Object can be directly used as a simple, empty widget. It is nothing more then a (rounded) rectangle. You can use it as a background shape for other objects by putting its jsonl line before the object. It catches touches!","title":"Base Object"},{"location":"design/pages/","text":"Pages The layout of the pages can be defined in several ways: by creating a special file on the flash file system, which will be loaded and the layout with the objects displayed each time HASP starts up. by issuing commands through MQTT to draw/change the objects immediately You can create the file with your favourite text editor and upload it (and other resource assets like fonts) using the web interface HASP Design menu. pages.jsonl ~ The location of this file is /pages.jsonl in the root of the flash filesystem. It uses the JSON Lines format with one json object per line. Each line should contain exactly one valid json object and end with a line-break \\n (not a comma) . The jsonl lines are interpreted line-by-line. When a malformed line is encountered, the processing of the rest of the file stops. If you are missing objects, check the logs to see which line was processed last. You probably have a typo in the following line which blocks parsing the rest of the file. Blank lines are allowed for readability and are ignored. Note The complete file in its entirety is not a valid json file. Each individual line however must be a valid json object. The file extension is .jsonl and not .json . Note The maximum number of pages and objects is limited by the memory available in the MCU, it depends on the microcontroller type you use. File comments ~ If any of the required id or obj properties are missing - and the line is still valid json - then it is interpreted as a comment. When you upload the file to your plate's flash filesystem, you can also use the page parameter in a comment to set the default page for new objects that don't have a page parameter. Example 1: Add a comment on a single line that is ignored. 1 { \"comment\" : \" ----------- Page 1 layout ------------\" } Example 2: Set the default page to 2 for objects in the following lines, besides adding a comment as well. 1 { \"page\" : 2 , \"comment\" : \" ---- My Awesome Color Picker Layout ----\" } If you then omit the page parameter in the lines below this comment, those objects will appear by default on page 2 . Example 3: Insert a comment for an object. 1 { \"page\" : 1 , \"id\" : 3 , \"obj\" : \"obj\" , \"x\" : 40 , \"y\" : 100 , \"w\" : 160 , \"h\" : 160 , \"radius\" : 100 , \"opacity\" : 100 , \"border_opa\" : 160 , \"border_width\" : 4 , \"comment\" : \"touch-catcher\" } If the line is not valid json, the parsing of the rest of the file is also stopped. jsonl command ~ See commands documentation for the jsonl command. The payload of the command corresponds to what's exactly in one line of the pages.jsonl file above, with a minor exception: page numbers are not kept between the commands - you need to specfiy the page with each! Warning Some integrations like the custom component for Home Assistant can store the pages.jsonl centrally for your plates, in such cases you have the to specify the page number for each object, as those files are actually parsed line by line using the jsonl command. Objects ~ Each line in pages.jsonl creates one object on a page and has to be in the json format. The order of the objects also dictates the layer on the page from bottom to top. So the last drawn object will be the topmpost. Example Objects: 1 2 { \"page\" : 1 , \"id\" : 1 , \"obj\" : \"label\" , \"x\" : 5 , \"y\" : 5 , \"h\" : 50 , \"w\" : 50 , \"text\" : \"Hello\" , \"enabled\" : true , \"hidden\" : false } { \"page\" : 1 , \"id\" : 2 , \"obj\" : \"btn\" , \"x\" : 5 , \"y\" : 90 , \"h\" : 90 , \"w\" : 50 , \"text\" : \"World\" , \"enabled\" : false , \"hidden\" : false } Once the object is created, you can reference it with pXbY where X is the page number and Y is the id of the object. For example: 1 2 p 1 b 1. w= 100 p 1 b 2. hidde n = true Ids start from 1 on each page. You can have a maximum of 254 ids on each page. You don't have to use them in ascending order, you can for example use them for logical numbering (start labels from 11, 12, 13, buttons from 21, 22, 23 etc.) Page number 0 refers to an object visible on all pages. An id of 0 refers to the page itself instead of an object. Tip If you add the objects on the page 0 last, you ensure that they will be always be visible on top of all other pages. See objects documentation for details. Page attributes ~ A page can have the following attributes: prev : The number of the destination page when performing a page prev action on this page next : The number of the destination page when performing a page next action on this page back : The number of the destination page when performing a page back action on this page By default all pages cycle in a round-robin fashion (after the last page jump back to first), but you can change this behaviour by adjusting the prev , next and back target pages. For example, to limit cycle through page 1-5 only: on page 5, page next action will jump back to page 1: 1 { \"page\" : 5 , \"id\" : 0 , \"next\" : 1 } The corresponding command is p5b0.next=1 . on page 1, page prev action will go to page 5 (instead of default page 12 on an ESP32) 1 { \"page\" : 1 , \"id\" : 0 , \"prev\" : 5 } The corresponding command is p1b0.prev=5 . Tip Page id p0b0 (as all pages) is not valid to set this attribute for. It has to be set individually on each real page starting from 1. back acts like a level up action, so you can jump back to the home or menu page where you came from using page back . You can create a hierarchy of pages and menus this way. Check out the example for how to implement a simple pagination bar.","title":"Pages"},{"location":"design/pages/#pagesjsonl","text":"The location of this file is /pages.jsonl in the root of the flash filesystem. It uses the JSON Lines format with one json object per line. Each line should contain exactly one valid json object and end with a line-break \\n (not a comma) . The jsonl lines are interpreted line-by-line. When a malformed line is encountered, the processing of the rest of the file stops. If you are missing objects, check the logs to see which line was processed last. You probably have a typo in the following line which blocks parsing the rest of the file. Blank lines are allowed for readability and are ignored. Note The complete file in its entirety is not a valid json file. Each individual line however must be a valid json object. The file extension is .jsonl and not .json . Note The maximum number of pages and objects is limited by the memory available in the MCU, it depends on the microcontroller type you use.","title":"pages.jsonl"},{"location":"design/pages/#file-comments","text":"If any of the required id or obj properties are missing - and the line is still valid json - then it is interpreted as a comment. When you upload the file to your plate's flash filesystem, you can also use the page parameter in a comment to set the default page for new objects that don't have a page parameter. Example 1: Add a comment on a single line that is ignored. 1 { \"comment\" : \" ----------- Page 1 layout ------------\" } Example 2: Set the default page to 2 for objects in the following lines, besides adding a comment as well. 1 { \"page\" : 2 , \"comment\" : \" ---- My Awesome Color Picker Layout ----\" } If you then omit the page parameter in the lines below this comment, those objects will appear by default on page 2 . Example 3: Insert a comment for an object. 1 { \"page\" : 1 , \"id\" : 3 , \"obj\" : \"obj\" , \"x\" : 40 , \"y\" : 100 , \"w\" : 160 , \"h\" : 160 , \"radius\" : 100 , \"opacity\" : 100 , \"border_opa\" : 160 , \"border_width\" : 4 , \"comment\" : \"touch-catcher\" } If the line is not valid json, the parsing of the rest of the file is also stopped.","title":"File comments"},{"location":"design/pages/#jsonl-command","text":"See commands documentation for the jsonl command. The payload of the command corresponds to what's exactly in one line of the pages.jsonl file above, with a minor exception: page numbers are not kept between the commands - you need to specfiy the page with each! Warning Some integrations like the custom component for Home Assistant can store the pages.jsonl centrally for your plates, in such cases you have the to specify the page number for each object, as those files are actually parsed line by line using the jsonl command.","title":"jsonl command"},{"location":"design/pages/#objects","text":"Each line in pages.jsonl creates one object on a page and has to be in the json format. The order of the objects also dictates the layer on the page from bottom to top. So the last drawn object will be the topmpost. Example Objects: 1 2 { \"page\" : 1 , \"id\" : 1 , \"obj\" : \"label\" , \"x\" : 5 , \"y\" : 5 , \"h\" : 50 , \"w\" : 50 , \"text\" : \"Hello\" , \"enabled\" : true , \"hidden\" : false } { \"page\" : 1 , \"id\" : 2 , \"obj\" : \"btn\" , \"x\" : 5 , \"y\" : 90 , \"h\" : 90 , \"w\" : 50 , \"text\" : \"World\" , \"enabled\" : false , \"hidden\" : false } Once the object is created, you can reference it with pXbY where X is the page number and Y is the id of the object. For example: 1 2 p 1 b 1. w= 100 p 1 b 2. hidde n = true Ids start from 1 on each page. You can have a maximum of 254 ids on each page. You don't have to use them in ascending order, you can for example use them for logical numbering (start labels from 11, 12, 13, buttons from 21, 22, 23 etc.) Page number 0 refers to an object visible on all pages. An id of 0 refers to the page itself instead of an object. Tip If you add the objects on the page 0 last, you ensure that they will be always be visible on top of all other pages. See objects documentation for details.","title":"Objects"},{"location":"design/pages/#page-attributes","text":"A page can have the following attributes: prev : The number of the destination page when performing a page prev action on this page next : The number of the destination page when performing a page next action on this page back : The number of the destination page when performing a page back action on this page By default all pages cycle in a round-robin fashion (after the last page jump back to first), but you can change this behaviour by adjusting the prev , next and back target pages. For example, to limit cycle through page 1-5 only: on page 5, page next action will jump back to page 1: 1 { \"page\" : 5 , \"id\" : 0 , \"next\" : 1 } The corresponding command is p5b0.next=1 . on page 1, page prev action will go to page 5 (instead of default page 12 on an ESP32) 1 { \"page\" : 1 , \"id\" : 0 , \"prev\" : 5 } The corresponding command is p1b0.prev=5 . Tip Page id p0b0 (as all pages) is not valid to set this attribute for. It has to be set individually on each real page starting from 1. back acts like a level up action, so you can jump back to the home or menu page where you came from using page back . You can create a hierarchy of pages and menus this way. Check out the example for how to implement a simple pagination bar.","title":"Page attributes"},{"location":"design/pages.nl/","text":"Pagina's The layout of the pages can be defined in several ways: by creating a special file on the flash file system, which will be loaded and the layout with the objects displayed each time HASP starts up. by issuing commands through MQTT to draw/change the objects immediately You can create the file wity your favourite text editor and upload it (and other resource assets like fonts) using the web interface HASP Design menu. pages.jsonl ~ The location of this file is /pages.jsonl in the root of the filesystem. It uses the JSON Lines format with one json object per line. Each line should contain exactly one valid json object and end with a line-break \\n (not a comma) . The jsonl lines are interpreted line-by-line. When a malformed line is encountered, the processing of the rest of the file stops. If you are missing objects, check the logs to see which line was processed last. You probably have a typo in the following line which blocks parsing the rest of the file. Blank lines are allowed for readability and are ignored. Note The complete file in its entirety is not a valid json file. Each individual line however must be a valid json object. The file extension is .jsonl and not .json . Note The maximum number of pages and objects is limited by the memory available in the MCU. File comments ~ If any of the required id or obj properties are missing - and the line is still valid json - then it is interpreted as a comment. You can also use the page parameter in a comment to set the default page for new objects that don't have a page parameter. Example 1: Add a comment on a single line that is ignored. 1 { \"comment\" : \" ----------- Page 1 layout ------------\" } Example 2: Set the default page for next object(s) to 3 besides adding a comment as well. 1 { \"page\" : 2 , \"comment\" : \" ---- My Awesome Color Picker Layout ----\" } If you then omit the page parameter in the lines below this comment, those objects will appear by default on page 2 . Example 3: Insert a comment for an object. 1 { \"page\" : 2 , \"id\" : 3 , \"obj\" : \"obj\" , \"x\" : 40 , \"y\" : 100 , \"w\" : 160 , \"h\" : 160 , \"radius\" : 100 , \"opacity\" : 100 , \"border_opa\" : 160 , \"border_width\" : 4 , \"comment\" : \"touch-catcher\" } If the line is not valid json, the parsing of the rest of the file is also stopped. jsonl command ~ See commands documentation for the jsonl command. The payload of the command corresponds to what's exactly in one line of the pages.jsonl file above. Objects ~ Each line in pages.jsonl creates one object on a page and has to be in the json format. The order of the objects also dictates the layer on the page from bottom to top. So the last drawn object will be the topmpost. Example Objects: 1 2 { \"page\" : 1 , \"id\" : 1 , \"obj\" : \"label\" , \"x\" : 5 , \"y\" : 5 , \"h\" : 50 , \"w\" : 50 , \"text\" : \"Hello\" , \"enabled\" : true , \"hidden\" : false } { \"page\" : 1 , \"id\" : 2 , \"obj\" : \"btn\" , \"x\" : 5 , \"y\" : 90 , \"h\" : 90 , \"w\" : 50 , \"text\" : \"World\" , \"enabled\" : false , \"hidden\" : false } Once the object is created, you can reference it with pXbY where X is the page number and Y is the id of the object. For example: 1 2 p 1 b 1. w= 100 p 1 b 2. hidde n = true Page number 0 refers to an object visible on all pages. An id of 0 refers to the page itself instead of an object. Tip: If you add the objects on the page 0 last, you ensure that they will be always be visible on top of all other pages. See objects dodumentation for details. Page attributes ~ A page can have the following attributes: prev : The number of the destination page when performing a page prev action on this page next : The number of the destination page when performing a page next action on this page back : The number of the destination page when performing a page back action on this page By default all pages cycle in a round-robin fashion (after the last page jump back to first), but you can change this behaviour by adjusting the prev , next and back target pages. For example, to limit cycle through page 1-5 only: on page 5, page next action will jump back to page 1: 1 { \"page\" : 5 , \"id\" : 0 , \"next\" : 1 } The corresponding command is p5b0.next=1 . on page 1, page prev action will go to page 5 (instead of default page 12 on an ESP32) 1 { \"page\" : 1 , \"id\" : 0 , \"prev\" : 5 } The corresponding command is p1b0.prev=5 . Note: Page id p0b0 (as all pages) is not valid to set this attribute as it has to be set on real pages individually. back acts like a level up action, so you can jump back to the home or menu page where you came from using page back . You can create a hierarchy of pages and menus this way. Check out the example for how to implement a simple pagination bar.","title":"Pages.nl"},{"location":"design/pages.nl/#pagesjsonl","text":"The location of this file is /pages.jsonl in the root of the filesystem. It uses the JSON Lines format with one json object per line. Each line should contain exactly one valid json object and end with a line-break \\n (not a comma) . The jsonl lines are interpreted line-by-line. When a malformed line is encountered, the processing of the rest of the file stops. If you are missing objects, check the logs to see which line was processed last. You probably have a typo in the following line which blocks parsing the rest of the file. Blank lines are allowed for readability and are ignored. Note The complete file in its entirety is not a valid json file. Each individual line however must be a valid json object. The file extension is .jsonl and not .json . Note The maximum number of pages and objects is limited by the memory available in the MCU.","title":"pages.jsonl"},{"location":"design/pages.nl/#file-comments","text":"If any of the required id or obj properties are missing - and the line is still valid json - then it is interpreted as a comment. You can also use the page parameter in a comment to set the default page for new objects that don't have a page parameter. Example 1: Add a comment on a single line that is ignored. 1 { \"comment\" : \" ----------- Page 1 layout ------------\" } Example 2: Set the default page for next object(s) to 3 besides adding a comment as well. 1 { \"page\" : 2 , \"comment\" : \" ---- My Awesome Color Picker Layout ----\" } If you then omit the page parameter in the lines below this comment, those objects will appear by default on page 2 . Example 3: Insert a comment for an object. 1 { \"page\" : 2 , \"id\" : 3 , \"obj\" : \"obj\" , \"x\" : 40 , \"y\" : 100 , \"w\" : 160 , \"h\" : 160 , \"radius\" : 100 , \"opacity\" : 100 , \"border_opa\" : 160 , \"border_width\" : 4 , \"comment\" : \"touch-catcher\" } If the line is not valid json, the parsing of the rest of the file is also stopped.","title":"File comments"},{"location":"design/pages.nl/#jsonl-command","text":"See commands documentation for the jsonl command. The payload of the command corresponds to what's exactly in one line of the pages.jsonl file above.","title":"jsonl command"},{"location":"design/pages.nl/#objects","text":"Each line in pages.jsonl creates one object on a page and has to be in the json format. The order of the objects also dictates the layer on the page from bottom to top. So the last drawn object will be the topmpost. Example Objects: 1 2 { \"page\" : 1 , \"id\" : 1 , \"obj\" : \"label\" , \"x\" : 5 , \"y\" : 5 , \"h\" : 50 , \"w\" : 50 , \"text\" : \"Hello\" , \"enabled\" : true , \"hidden\" : false } { \"page\" : 1 , \"id\" : 2 , \"obj\" : \"btn\" , \"x\" : 5 , \"y\" : 90 , \"h\" : 90 , \"w\" : 50 , \"text\" : \"World\" , \"enabled\" : false , \"hidden\" : false } Once the object is created, you can reference it with pXbY where X is the page number and Y is the id of the object. For example: 1 2 p 1 b 1. w= 100 p 1 b 2. hidde n = true Page number 0 refers to an object visible on all pages. An id of 0 refers to the page itself instead of an object. Tip: If you add the objects on the page 0 last, you ensure that they will be always be visible on top of all other pages. See objects dodumentation for details.","title":"Objects"},{"location":"design/pages.nl/#page-attributes","text":"A page can have the following attributes: prev : The number of the destination page when performing a page prev action on this page next : The number of the destination page when performing a page next action on this page back : The number of the destination page when performing a page back action on this page By default all pages cycle in a round-robin fashion (after the last page jump back to first), but you can change this behaviour by adjusting the prev , next and back target pages. For example, to limit cycle through page 1-5 only: on page 5, page next action will jump back to page 1: 1 { \"page\" : 5 , \"id\" : 0 , \"next\" : 1 } The corresponding command is p5b0.next=1 . on page 1, page prev action will go to page 5 (instead of default page 12 on an ESP32) 1 { \"page\" : 1 , \"id\" : 0 , \"prev\" : 5 } The corresponding command is p1b0.prev=5 . Note: Page id p0b0 (as all pages) is not valid to set this attribute as it has to be set on real pages individually. back acts like a level up action, so you can jump back to the home or menu page where you came from using page back . You can create a hierarchy of pages and menus this way. Check out the example for how to implement a simple pagination bar.","title":"Page attributes"},{"location":"design/styling/","text":"Styling Properties ~ You can adjust the appearance of objects by changing the foreground, background and/or border color of each object. Some objects allow for more complex styling, effectively changing their appearance or their sub-components. Certain more complex objects are made up of several sub-parts, which can be styled separately. To access the properties of the parts use a number suffix appended to the property. Tip For example the gauge object uses line_width to set the minor ticks thickness, line_width1 for major ticks and line_width2 for the thickness of the needle. Note: not all the suffixed properties are mentioned in this documentation, feel free to discover them yourself. If objects are children of other objects (they have the parentid property set), property inheritance takes place. Inheritance Some properties (typically that are related to text and opacity) can be inherited from the parent object's styles. Inheritance is applied only if the given property is not set in the initial jsonl of the child object (at first draw). In this case, if the property is inheritable, the property's value will be searched in the parents too until an object specifies a value for the property. The parents will use their own state to detemine the value. So for example if a button is pressed, and the text color comes from here, the pressed text color will be used. ( source ) Inheritance takes place at run time too. General ~ General styling options. Property Value Default Description enabled bool true Object is touchable, if false , a disabled style is applied radius uint16 depends on theme The radius of the rounded corners of the object: 0 = square corners 100 = pill shaped object (true circle if object has same width and height) clip_corner bool false Enable to clip off the overflowed content on the rounded ( radius > 0 ) corners of the object Background ~ The color and gradient used for drawing the background of an object. Property Type Description bg_opa uint8 The background opacity level bg_color color The background color bg_grad_color color The background gradient color bg_grad_dir [0..2] 0 = none (=default) 1 = horizontal 2 = vertical bg_grad_stop uint8 Specifies where the gradient should stop. 0 = at left/top most position 255= at right/bottom most position (=default) bg_main_stop uint8 Specifies where should the gradient start 0 = at left/top most position (=default) 255= at right/bottom most position To adjust the background style of a page use pXb0 where X is the page number. Border ~ The border is drawn on top of the background. It has radius rounding. Property Type Description border_color color Specifies the color of the border border_opa uint8 Specifies opacity of the border border_width uint8 Set the width of the border border_side uint8 Specifies which sides of the border to draw. 0 = none 1 = bottom 2 = top 4 = left 8 = right 15 = full A sum of these values is also possible to select specific sides. border_post bool If true the border will be drawn after all children have been drawn. Padding and Margin ~ Padding sets the space on the inner sides of the edges. It means \"I don't want my children too close to my sides, so keep this space\". Padding inner sets the \"gap\" between the children. Margin sets the space on the outer side of the edges. It means \"I want this space around me\". Objects use them to set spacing. See the documentation of the objects for the details. Property Type Description pad_top int16 Set the padding on the top pad_bottom int16 Set the padding on the bottom pad_left int16 Set the padding on the left pad_right int16 Set the padding on the right pad_inner int16 Set the padding inside the object between children margin_top int16 Set the margin on the top margin_bottom int16 Set the margin on the bottom margin_left int16 Set the margin on the left margin_right int16 Set the margin on the right Shadow ~ The shadow is a blurred area under the object. Property Type Description shadow_color color Color of the shadow shadow_opa uint8 Specifies opacity of the shadow shadow_width int16 Set the width (blur size) of the outline shadow_ofs_x int16 Set the an X offset for the shadow shadow_ofs_y int16 Set the an Y offset for the shadow shadow_spread uint8 Make the shadow larger than the background in every direction by this value Text ~ Properties applied to the textual elements of the objects. Property Type Description text_color color Color of the text text_opa uint8 Opacity level of the text [0-255] text_font uint8 The Font ID text_letter_space int16 Distance between letters of the text, can be a negative number text_line_space int16 Distance between lines of the text, can be a negative number text_decor uint8 Add text decoration. 0 = none (=default) 1 = underline 2 = strikethrough 3 = underline and strikethrough text_sel_color color Set background color of text selection Value ~ Value is an arbitrary text label drawn on top of an object. It can be a lightweight replacement for creating standalone label objects. Property Type Description value_str string Text to display value_color color Color of the text value_opa uint8 Opacity level of the text [0-255] value_font uint8 The Font ID value_letter_space int16 Distance between letters of the text, can be negative value_line_space int16 Distance between lines of the text, can be negative value_align align Alignment of the text. Can be: none left right top bottom full center (=default) value_ofs_x int16 X offset from the default position of the alignment value_ofs_y int16 Y offset from the default position of the alignment Line ~ Properties for line , line meter objects. Property Type Description line_color color Color of the line line_opa uint8 Opacity level of the line [0-255] line_width int16 Width of a scale line in the active region (also see scale_end_line_width below), or gauge minor ticks thickness line_width1 int16 Gauge major ticks thickness line_color color Starting color of the gauge minor ticks line_color1 color Starting color of the gauge major ticks line_rounded bool true = draw rounded line endings. Default = false line_dash_width int16 Width of dash. Dashing is drawn only for horizontal or vertical lines. 0 = disable dash (= default) line_dash_gap int16 Gap between two dash line. Dashing is drawn only for horizontal or vertical lines. 0 = disable dash (= default) Scale ~ The properties for styling the scale of line meter , gauge objects. Property Type Description scale_grad_color color Gradient to this color on the scale lines, or gauge minor ticks scale_grad_color1 color Gradient to this color on the gauge major ticks scale_end_color color Color of the scale lines in the end region, or gauge minor ticks / critical area scale_end_color1 color Color of the gauge major ticks in the critical area scale_width int16 Width of the scale in the normal region, or length of gauge minor ticks scale_width1 int16 Length of the gauge major ticks scale_border_width int16 Width of a border drawn on the outer side of the scale in the normal region scale_end_line_width int16 Width of a scale line in the end region scale_end_border_width int16 Width of a border drawn on the outer side of the scale in the end region Needle ~ The properties for styling the needle of gauge objects. Property Type Description line_width2 int16 Width of the needle line line_rounded2 bool true = draw rounded needle ending. Default = false line_color2 color Color of the needle line line_opa2 uint8 Opacity level of the needle line [0-255] bg_color2 color Color of the needle central circle bg_opa2 uint8 Opacity level of the needle central circle [0-255] Arc ~ The properties for styling the arc of arc objects. Property Type Description line_width [int16][9] Width of the arc background (default 20) line_color color Color of the arc background line_width1 [int16][9] Width of the arc indicator (default 20) line_color1 color Color of the arc indicator Image ~ Property Type Description image_opa uint8 Opacity of the image image_recolor color Color of the overlay color mask image_recolor_opa uint8 Specifies opacity of the overlay color mask","title":"Styling Properties"},{"location":"design/styling/#styling-properties","text":"You can adjust the appearance of objects by changing the foreground, background and/or border color of each object. Some objects allow for more complex styling, effectively changing their appearance or their sub-components. Certain more complex objects are made up of several sub-parts, which can be styled separately. To access the properties of the parts use a number suffix appended to the property. Tip For example the gauge object uses line_width to set the minor ticks thickness, line_width1 for major ticks and line_width2 for the thickness of the needle. Note: not all the suffixed properties are mentioned in this documentation, feel free to discover them yourself. If objects are children of other objects (they have the parentid property set), property inheritance takes place. Inheritance Some properties (typically that are related to text and opacity) can be inherited from the parent object's styles. Inheritance is applied only if the given property is not set in the initial jsonl of the child object (at first draw). In this case, if the property is inheritable, the property's value will be searched in the parents too until an object specifies a value for the property. The parents will use their own state to detemine the value. So for example if a button is pressed, and the text color comes from here, the pressed text color will be used. ( source ) Inheritance takes place at run time too.","title":"Styling Properties"},{"location":"design/styling/#general","text":"General styling options. Property Value Default Description enabled bool true Object is touchable, if false , a disabled style is applied radius uint16 depends on theme The radius of the rounded corners of the object: 0 = square corners 100 = pill shaped object (true circle if object has same width and height) clip_corner bool false Enable to clip off the overflowed content on the rounded ( radius > 0 ) corners of the object","title":"General"},{"location":"design/styling/#background","text":"The color and gradient used for drawing the background of an object. Property Type Description bg_opa uint8 The background opacity level bg_color color The background color bg_grad_color color The background gradient color bg_grad_dir [0..2] 0 = none (=default) 1 = horizontal 2 = vertical bg_grad_stop uint8 Specifies where the gradient should stop. 0 = at left/top most position 255= at right/bottom most position (=default) bg_main_stop uint8 Specifies where should the gradient start 0 = at left/top most position (=default) 255= at right/bottom most position To adjust the background style of a page use pXb0 where X is the page number.","title":"Background"},{"location":"design/styling/#border","text":"The border is drawn on top of the background. It has radius rounding. Property Type Description border_color color Specifies the color of the border border_opa uint8 Specifies opacity of the border border_width uint8 Set the width of the border border_side uint8 Specifies which sides of the border to draw. 0 = none 1 = bottom 2 = top 4 = left 8 = right 15 = full A sum of these values is also possible to select specific sides. border_post bool If true the border will be drawn after all children have been drawn.","title":"Border"},{"location":"design/styling/#padding-and-margin","text":"Padding sets the space on the inner sides of the edges. It means \"I don't want my children too close to my sides, so keep this space\". Padding inner sets the \"gap\" between the children. Margin sets the space on the outer side of the edges. It means \"I want this space around me\". Objects use them to set spacing. See the documentation of the objects for the details. Property Type Description pad_top int16 Set the padding on the top pad_bottom int16 Set the padding on the bottom pad_left int16 Set the padding on the left pad_right int16 Set the padding on the right pad_inner int16 Set the padding inside the object between children margin_top int16 Set the margin on the top margin_bottom int16 Set the margin on the bottom margin_left int16 Set the margin on the left margin_right int16 Set the margin on the right","title":"Padding and Margin"},{"location":"design/styling/#shadow","text":"The shadow is a blurred area under the object. Property Type Description shadow_color color Color of the shadow shadow_opa uint8 Specifies opacity of the shadow shadow_width int16 Set the width (blur size) of the outline shadow_ofs_x int16 Set the an X offset for the shadow shadow_ofs_y int16 Set the an Y offset for the shadow shadow_spread uint8 Make the shadow larger than the background in every direction by this value","title":"Shadow"},{"location":"design/styling/#text","text":"Properties applied to the textual elements of the objects. Property Type Description text_color color Color of the text text_opa uint8 Opacity level of the text [0-255] text_font uint8 The Font ID text_letter_space int16 Distance between letters of the text, can be a negative number text_line_space int16 Distance between lines of the text, can be a negative number text_decor uint8 Add text decoration. 0 = none (=default) 1 = underline 2 = strikethrough 3 = underline and strikethrough text_sel_color color Set background color of text selection","title":"Text"},{"location":"design/styling/#value","text":"Value is an arbitrary text label drawn on top of an object. It can be a lightweight replacement for creating standalone label objects. Property Type Description value_str string Text to display value_color color Color of the text value_opa uint8 Opacity level of the text [0-255] value_font uint8 The Font ID value_letter_space int16 Distance between letters of the text, can be negative value_line_space int16 Distance between lines of the text, can be negative value_align align Alignment of the text. Can be: none left right top bottom full center (=default) value_ofs_x int16 X offset from the default position of the alignment value_ofs_y int16 Y offset from the default position of the alignment","title":"Value"},{"location":"design/styling/#line","text":"Properties for line , line meter objects. Property Type Description line_color color Color of the line line_opa uint8 Opacity level of the line [0-255] line_width int16 Width of a scale line in the active region (also see scale_end_line_width below), or gauge minor ticks thickness line_width1 int16 Gauge major ticks thickness line_color color Starting color of the gauge minor ticks line_color1 color Starting color of the gauge major ticks line_rounded bool true = draw rounded line endings. Default = false line_dash_width int16 Width of dash. Dashing is drawn only for horizontal or vertical lines. 0 = disable dash (= default) line_dash_gap int16 Gap between two dash line. Dashing is drawn only for horizontal or vertical lines. 0 = disable dash (= default)","title":"Line"},{"location":"design/styling/#scale","text":"The properties for styling the scale of line meter , gauge objects. Property Type Description scale_grad_color color Gradient to this color on the scale lines, or gauge minor ticks scale_grad_color1 color Gradient to this color on the gauge major ticks scale_end_color color Color of the scale lines in the end region, or gauge minor ticks / critical area scale_end_color1 color Color of the gauge major ticks in the critical area scale_width int16 Width of the scale in the normal region, or length of gauge minor ticks scale_width1 int16 Length of the gauge major ticks scale_border_width int16 Width of a border drawn on the outer side of the scale in the normal region scale_end_line_width int16 Width of a scale line in the end region scale_end_border_width int16 Width of a border drawn on the outer side of the scale in the end region","title":"Scale"},{"location":"design/styling/#needle","text":"The properties for styling the needle of gauge objects. Property Type Description line_width2 int16 Width of the needle line line_rounded2 bool true = draw rounded needle ending. Default = false line_color2 color Color of the needle line line_opa2 uint8 Opacity level of the needle line [0-255] bg_color2 color Color of the needle central circle bg_opa2 uint8 Opacity level of the needle central circle [0-255]","title":"Needle"},{"location":"design/styling/#arc","text":"The properties for styling the arc of arc objects. Property Type Description line_width [int16][9] Width of the arc background (default 20) line_color color Color of the arc background line_width1 [int16][9] Width of the arc indicator (default 20) line_color1 color Color of the arc indicator","title":"Arc"},{"location":"design/styling/#image","text":"Property Type Description image_opa uint8 Opacity of the image image_recolor color Color of the overlay color mask image_recolor_opa uint8 Specifies opacity of the overlay color mask","title":"Image"},{"location":"design/styling.nl/","text":"Stijleigenschappen You can adjust the appearance of objects by changing the foreground, background and/or border color of each object. Some objects allow for more complex syling, effectively changing its appearance or its sub-components. Boolean ~ Properties with a boolean data type accept these values and are case insensitive: true / ON / 1 / yes false / OFF / 0 / no Colors ~ Color values can be: Short names (from table below) RGB hex code ( #rrggbb ) Short hex code ( #rgb ) RGB565 number format ( 0..65535 ) Hex Code Short Name Hex Code Short Name #00FFFF Cyan or Aqua #FFC0CB Pink #00FF00 Lime #DDA0DD Plum #008000 Green #DA70D6 Orchid #008080 Teal #EE82EE Violet #0000FF Blue #FF00FF Magenta or Fuchsia #000080 Navy #800080 Purple #808000 Olive #4B0082 Indigo #CD853F Peru #B00000 Blush #A0522D Sienna #FF0000 Red #A52A2A Brown #FF6347 Tomato #800000 Maroon #FA8072 Salmon #FFFFFF White #FF7F50 Coral #FFFAFA Snow #FFA500 Orange #FFFFF0 Ivory #FFD700 Gold #FAF0E6 Linen #FFFF00 Yellow #F5F5DC Beige #F0E68C Khaki #F0FFFF Azure #FFE4C4 Bisque #C0C0C0 Silver #F5DEB3 Wheat #808080 Gray or Grey #D2B48C Tan #000000 Black Setting Color ~ Examples: 1 2 3 4 p 0 b 2. value_color= 13891 p 1 b 5. te x t _color=silver p 2 b 3. bg_color=#C 042 A 3 p 2 b 4. border_color=# 9 f 9 Return values ~ When retrieving the color of an object, both the HTML representation as the RGB values are returned seperately. The format will be a json object with components: color : 6 digit hexadecimal code preceeded by a hash # sign. r : byte value for red ( 0..255 ) g : byte value for green ( 0..255 ) b : byte value for blue ( 0..255 ) For example, the color returned by a color picker change event is: 1 { \"color\" : \"#00fff6\" , \"r\" : 0 , \"g\" : 255 , \"b\" : 246 } General ~ General styling options. Property Value Default Description enabled bool true object is touchable if false a disabled style is applied Background ~ The color and gradient used for drawing the background of an object. Property Type Description bg_opa byte The background opacity level bg_color color The background color bg_grad_color color The background gradient color bg_grad_dir [0..2] 0 = none (=default) 1 = horizontal 2 = vertical bg_grad_stop byte Specifies where the gradient should stop. 0 = at left/top most position 255= at right/bottom most position (=default) bg_main_stop byte Specifies where should the gradient start 0 = at left/top most position (=default) 255= at right/bottom most position To adjust the background style of a page use pXb0 where X is the page number. Border ~ The border is drawn on top of the background. It has radius rounding. Property Type Description border_color color Specifies the color of the border border_opa byte Specifies opacity of the border border_width byte Set the width of the border border_side byte Specifies which sides of the border to draw. 0 = none 1 = bottom 2 = top 4 = left 8 = right 15 = full A sum of these values is also possible to select specific sides. border_post bool If true the border will be drawn after all children have been drawn. Padding and Margin ~ Padding sets the space on the inner sides of the edges. It means \"I don't want my children too close to my sides, so keep this space\". Padding inner sets the \"gap\" between the children. Margin sets the space on the outer side of the edges. It means \"I want this space around me\". Objects use them to set spacing. See the documentation of the objects for the details. Property Type Description pad_top int16 Set the padding on the top pad_bottom int16 Set the padding on the bottom pad_left int16 Set the padding on the left pad_right int16 Set the padding on the right pad_inner int16 Set the padding inside the object between children margin_top int16 Set the margin on the top margin_bottom int16 Set the margin on the bottom margin_left int16 Set the margin on the left margin_right int16 Set the margin on the right Shadow ~ The shadow is a blurred area under the object. Property Type Description shadow_color color Color of the shadow shadow_opa byte Specifies opacity of the shadow shadow_width int16 Set the width (blur size) of the outline shadow_ofs_x int16 Set the an X offset for the shadow shadow_ofs_y int16 Set the an Y offset for the shadow shadow_spread byte Make the shadow larger than the background in every direction by this value Text ~ Properties for textual objects only. Property Type Description text_color color Color of the text text_opa byte Opacity level of the text [0-255] text_font byte The Font ID text_letter_space int16 Distance between letters of the text, can be a negative number text_line_space int16 Distance between lines of the text, can be a negative number text_decor byte Add text decoration. 0 = none (=default) 1 = underline 2 = strikethrough 3 = underline and strikethrough text_sel_color color Set background color of text selection Value ~ Value is an arbitrary text drawn on top of an object. It can be a lightweight replacement for creating label objects. Property Type Description value_str string Text to display value_color color Color of the text value_opa byte Opacity level of the text [0-255] value_font byte The Font ID value_letter_space int16 Distance between letters of the text, can be a negative number value_line_space int16 Distance between lines of the text, can be a negative number value_align align Alignment of the text. Can be: none, left, right, top, bottom, full or center (=default) value_ofs_x int16 X offset from the original position of the alignment value_ofs_y int16 Y offset from the original position of the alignment Line ~ Properties for line meter objects. Property Type Description line_color color Color of the line line_opa byte Opacity level of the line [0-255] line_width int16 Width of the line line_dash_width int16 Width of dash. Dashing is drawn only for horizontal or vertical lines. 0 = disable dash (= default) line_dash_gap int16 Gap between two dash line. Dashing is drawn only for horizontal or vertical lines. 0 = disable dash (= default) line_rounded bool true = draw rounded line endings. Default = false Scale ~ The properties for styling the scale of line meter or gauge objects. Property Type Description scale_grad_color color Make gradient to this color on the scale lines scale_end_color color Color of the scale lines in the end region scale_width int16 Width of the scale scale_border_width int16 Width of a border drawn on the outer side of the scale in the normal region scale_end_border_width int16 Width of a border drawn on the outer side of the scale in the end region scale_end_line_width int16 Width of a scale lines in the end region Image ~ Property Type Description image_opa byte Opacity of the image image_recolor color Color of the overlay color mask image_recolor_opa byte Specifies opacity of the overlay color mask","title":"Styling.nl"},{"location":"design/styling.nl/#boolean","text":"Properties with a boolean data type accept these values and are case insensitive: true / ON / 1 / yes false / OFF / 0 / no","title":"Boolean"},{"location":"design/styling.nl/#colors","text":"Color values can be: Short names (from table below) RGB hex code ( #rrggbb ) Short hex code ( #rgb ) RGB565 number format ( 0..65535 ) Hex Code Short Name Hex Code Short Name #00FFFF Cyan or Aqua #FFC0CB Pink #00FF00 Lime #DDA0DD Plum #008000 Green #DA70D6 Orchid #008080 Teal #EE82EE Violet #0000FF Blue #FF00FF Magenta or Fuchsia #000080 Navy #800080 Purple #808000 Olive #4B0082 Indigo #CD853F Peru #B00000 Blush #A0522D Sienna #FF0000 Red #A52A2A Brown #FF6347 Tomato #800000 Maroon #FA8072 Salmon #FFFFFF White #FF7F50 Coral #FFFAFA Snow #FFA500 Orange #FFFFF0 Ivory #FFD700 Gold #FAF0E6 Linen #FFFF00 Yellow #F5F5DC Beige #F0E68C Khaki #F0FFFF Azure #FFE4C4 Bisque #C0C0C0 Silver #F5DEB3 Wheat #808080 Gray or Grey #D2B48C Tan #000000 Black","title":"Colors"},{"location":"design/styling.nl/#setting-color","text":"Examples: 1 2 3 4 p 0 b 2. value_color= 13891 p 1 b 5. te x t _color=silver p 2 b 3. bg_color=#C 042 A 3 p 2 b 4. border_color=# 9 f 9","title":"Setting Color"},{"location":"design/styling.nl/#return-values","text":"When retrieving the color of an object, both the HTML representation as the RGB values are returned seperately. The format will be a json object with components: color : 6 digit hexadecimal code preceeded by a hash # sign. r : byte value for red ( 0..255 ) g : byte value for green ( 0..255 ) b : byte value for blue ( 0..255 ) For example, the color returned by a color picker change event is: 1 { \"color\" : \"#00fff6\" , \"r\" : 0 , \"g\" : 255 , \"b\" : 246 }","title":"Return values"},{"location":"design/styling.nl/#general","text":"General styling options. Property Value Default Description enabled bool true object is touchable if false a disabled style is applied","title":"General"},{"location":"design/styling.nl/#background","text":"The color and gradient used for drawing the background of an object. Property Type Description bg_opa byte The background opacity level bg_color color The background color bg_grad_color color The background gradient color bg_grad_dir [0..2] 0 = none (=default) 1 = horizontal 2 = vertical bg_grad_stop byte Specifies where the gradient should stop. 0 = at left/top most position 255= at right/bottom most position (=default) bg_main_stop byte Specifies where should the gradient start 0 = at left/top most position (=default) 255= at right/bottom most position To adjust the background style of a page use pXb0 where X is the page number.","title":"Background"},{"location":"design/styling.nl/#border","text":"The border is drawn on top of the background. It has radius rounding. Property Type Description border_color color Specifies the color of the border border_opa byte Specifies opacity of the border border_width byte Set the width of the border border_side byte Specifies which sides of the border to draw. 0 = none 1 = bottom 2 = top 4 = left 8 = right 15 = full A sum of these values is also possible to select specific sides. border_post bool If true the border will be drawn after all children have been drawn.","title":"Border"},{"location":"design/styling.nl/#padding-and-margin","text":"Padding sets the space on the inner sides of the edges. It means \"I don't want my children too close to my sides, so keep this space\". Padding inner sets the \"gap\" between the children. Margin sets the space on the outer side of the edges. It means \"I want this space around me\". Objects use them to set spacing. See the documentation of the objects for the details. Property Type Description pad_top int16 Set the padding on the top pad_bottom int16 Set the padding on the bottom pad_left int16 Set the padding on the left pad_right int16 Set the padding on the right pad_inner int16 Set the padding inside the object between children margin_top int16 Set the margin on the top margin_bottom int16 Set the margin on the bottom margin_left int16 Set the margin on the left margin_right int16 Set the margin on the right","title":"Padding and Margin"},{"location":"design/styling.nl/#shadow","text":"The shadow is a blurred area under the object. Property Type Description shadow_color color Color of the shadow shadow_opa byte Specifies opacity of the shadow shadow_width int16 Set the width (blur size) of the outline shadow_ofs_x int16 Set the an X offset for the shadow shadow_ofs_y int16 Set the an Y offset for the shadow shadow_spread byte Make the shadow larger than the background in every direction by this value","title":"Shadow"},{"location":"design/styling.nl/#text","text":"Properties for textual objects only. Property Type Description text_color color Color of the text text_opa byte Opacity level of the text [0-255] text_font byte The Font ID text_letter_space int16 Distance between letters of the text, can be a negative number text_line_space int16 Distance between lines of the text, can be a negative number text_decor byte Add text decoration. 0 = none (=default) 1 = underline 2 = strikethrough 3 = underline and strikethrough text_sel_color color Set background color of text selection","title":"Text"},{"location":"design/styling.nl/#value","text":"Value is an arbitrary text drawn on top of an object. It can be a lightweight replacement for creating label objects. Property Type Description value_str string Text to display value_color color Color of the text value_opa byte Opacity level of the text [0-255] value_font byte The Font ID value_letter_space int16 Distance between letters of the text, can be a negative number value_line_space int16 Distance between lines of the text, can be a negative number value_align align Alignment of the text. Can be: none, left, right, top, bottom, full or center (=default) value_ofs_x int16 X offset from the original position of the alignment value_ofs_y int16 Y offset from the original position of the alignment","title":"Value"},{"location":"design/styling.nl/#line","text":"Properties for line meter objects. Property Type Description line_color color Color of the line line_opa byte Opacity level of the line [0-255] line_width int16 Width of the line line_dash_width int16 Width of dash. Dashing is drawn only for horizontal or vertical lines. 0 = disable dash (= default) line_dash_gap int16 Gap between two dash line. Dashing is drawn only for horizontal or vertical lines. 0 = disable dash (= default) line_rounded bool true = draw rounded line endings. Default = false","title":"Line"},{"location":"design/styling.nl/#scale","text":"The properties for styling the scale of line meter or gauge objects. Property Type Description scale_grad_color color Make gradient to this color on the scale lines scale_end_color color Color of the scale lines in the end region scale_width int16 Width of the scale scale_border_width int16 Width of a border drawn on the outer side of the scale in the normal region scale_end_border_width int16 Width of a border drawn on the outer side of the scale in the end region scale_end_line_width int16 Width of a scale lines in the end region","title":"Scale"},{"location":"design/styling.nl/#image","text":"Property Type Description image_opa byte Opacity of the image image_recolor color Color of the overlay color mask image_recolor_opa byte Specifies opacity of the overlay color mask","title":"Image"},{"location":"devices/esp32-touchdown/","text":"ESP32 TouchDown ~ more images... Features ~ ESP32-WROOM-32D ILI9488 3.5\" (480*320) TFT screen in 4-wire SPI mode FT62x6 Capacitive Touch Controller APK2112 3.3V regulator MCP73831 battery management IC CP2102 USB-to-UART IC USB-C connector Piezo Speaker microSD card holder Battery voltage divider connected to GPIO35 Stemma / JST-PH I2C connector Compact size: 100x57x15mm This board was originaly created for the FreeTouchDeck project and the hardware is also open source. Due to the extensive documentation it was easy to port openHASP to the ESP32-Touchdown. Pros Cons 480x320 display 4 MB flash Capactitive touch No PSram Battery connector Battery sensor The speaker and SD card are not supported by openHASP 0.6.1. Available from: Tindie Eplop (UK) PCBway Product Video ~ Backlight Control ~ To enable backlight control, make sure the solder jumper pad is in position 2-1: 3D Printed Cases ~ You can find several different 3D printable cases in the ESP32 TouchDown repository : Flashing ~ The ESP32 TouchDown can easily be flashed over USB like any ESP32 development board. GPIO Settings ~ These pins can be used freely as GPIOs: PCB Blueprint ~ The ESP32 TouchDown is fully Open Source Hardware : Schematics Bill of materials PCB layout Datasheets HASP build_flags ~ Specify the LCD Configuration to use and define the GPIOs in the environment build flags: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 build_flags = ${env.build_flags} ${esp32.build_flags} ${esp32.vspi} ; Use VSPI hardware SPI bus ;region -- TFT_eSPI build options ------------------------ -D USER_SETUP_LOADED = 1 -D ILI9488_DRIVER = 1 -D TFT_ROTATION = 0 ; 0=0, 1=90, 2=180 or 3=270 degree -D TFT_WIDTH = 320 -D TFT_HEIGHT = 480 -D TFT_CS = 15 ;// Chip select control pin -D TFT_DC = 2 ;// Data Command control pin -D TFT_RST = 4 ;// Reset pin (could connect to RST pin) -D TFT_BCKL = 5 ;None, configurable via web UI (e.g. 2 for D4) -D SUPPORT_TRANSACTIONS -D TOUCH_DRIVER = 6336 ; XPT2606 Resistive touch panel driver -D TOUCH_SDA = 21 -D TOUCH_SCL = 22 -D TOUCH_IRQ = 27 ; not connected -D TOUCH_RST = -1 ; not used, connected to 3.3V -D TOUCH_FREQUENCY = 400000 -D SPI_FREQUENCY = 27000000 -D SPI_READ_FREQUENCY = 16000000 ;endregion","title":"ESP32 TouchDown"},{"location":"devices/esp32-touchdown/#esp32-touchdown","text":"more images...","title":"ESP32 TouchDown"},{"location":"devices/esp32-touchdown/#features","text":"ESP32-WROOM-32D ILI9488 3.5\" (480*320) TFT screen in 4-wire SPI mode FT62x6 Capacitive Touch Controller APK2112 3.3V regulator MCP73831 battery management IC CP2102 USB-to-UART IC USB-C connector Piezo Speaker microSD card holder Battery voltage divider connected to GPIO35 Stemma / JST-PH I2C connector Compact size: 100x57x15mm This board was originaly created for the FreeTouchDeck project and the hardware is also open source. Due to the extensive documentation it was easy to port openHASP to the ESP32-Touchdown. Pros Cons 480x320 display 4 MB flash Capactitive touch No PSram Battery connector Battery sensor The speaker and SD card are not supported by openHASP 0.6.1. Available from: Tindie Eplop (UK) PCBway","title":"Features"},{"location":"devices/esp32-touchdown/#product-video","text":"","title":"Product Video"},{"location":"devices/esp32-touchdown/#backlight-control","text":"To enable backlight control, make sure the solder jumper pad is in position 2-1:","title":"Backlight Control"},{"location":"devices/esp32-touchdown/#3d-printed-cases","text":"You can find several different 3D printable cases in the ESP32 TouchDown repository :","title":"3D Printed Cases"},{"location":"devices/esp32-touchdown/#flashing","text":"The ESP32 TouchDown can easily be flashed over USB like any ESP32 development board.","title":"Flashing"},{"location":"devices/esp32-touchdown/#gpio-settings","text":"These pins can be used freely as GPIOs:","title":"GPIO Settings"},{"location":"devices/esp32-touchdown/#pcb-blueprint","text":"The ESP32 TouchDown is fully Open Source Hardware : Schematics Bill of materials PCB layout Datasheets","title":"PCB Blueprint"},{"location":"devices/esp32-touchdown/#hasp-build_flags","text":"Specify the LCD Configuration to use and define the GPIOs in the environment build flags: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 build_flags = ${env.build_flags} ${esp32.build_flags} ${esp32.vspi} ; Use VSPI hardware SPI bus ;region -- TFT_eSPI build options ------------------------ -D USER_SETUP_LOADED = 1 -D ILI9488_DRIVER = 1 -D TFT_ROTATION = 0 ; 0=0, 1=90, 2=180 or 3=270 degree -D TFT_WIDTH = 320 -D TFT_HEIGHT = 480 -D TFT_CS = 15 ;// Chip select control pin -D TFT_DC = 2 ;// Data Command control pin -D TFT_RST = 4 ;// Reset pin (could connect to RST pin) -D TFT_BCKL = 5 ;None, configurable via web UI (e.g. 2 for D4) -D SUPPORT_TRANSACTIONS -D TOUCH_DRIVER = 6336 ; XPT2606 Resistive touch panel driver -D TOUCH_SDA = 21 -D TOUCH_SCL = 22 -D TOUCH_IRQ = 27 ; not connected -D TOUCH_RST = -1 ; not used, connected to 3.3V -D TOUCH_FREQUENCY = 400000 -D SPI_FREQUENCY = 27000000 -D SPI_READ_FREQUENCY = 16000000 ;endregion","title":"HASP build_flags"},{"location":"devices/featherwing/","text":"Adafruit Featherwing ~ You can run openHASP on the Adafruit HUZZAH32 \u2013 ESP32 Feather Board with a TFT Featherwing display. We provide pre-build firmware for this hardware combo. You can pick the 2.4\" or 3.5\" touchscreen. The HUZZAH32 \u2013 ESP32 Feather Boards come in 3 versions: No headers soldered Headers pre-soldered Stacking headers pre-soldered The TFT Featherwing comes in 2 sizes: TFT FeatherWing - 2.4\" 320x240 Touchscreen : ILI9341 with STMPE610 resistive touch TFT FeatherWing - 3.5\" 480x320 Touchscreen : HX8357D with STMPE610 resistive touch Note Don't use the ESP8266 based Feather HUZZAH because it lacks both in memory and MCU power. The Huzzah32 boards only have 4MB flash. If you want more storage, consider getting the SparkFun Thing Plus ESP32-WROOM instead. Instructions ~ The HUZZAH32 \u2013 ESP32 and TFT Featherwings are plug-and-play. You only need to upload the firmware via the USB port. If you get a version with pre-soldered headers then no soldering is required to get started! Check out the Adafruit TFT Featherwing tutorial on learn.adafruit.com. It contains more detailed information, tutorials and wiring diagrams. Backlight ~ By default the display is always on. To get the dimmable backlight working you do need to solder 2 pads! There is a Lite pin which is not connected to any pads but you can connect it to control the backlight. You can connect it to a PWM output pin, like GPIO 21 : Product Videos ~ 2.4\" TFT Featherwing ~ 3.5\" TFT Featherwing ~ 3D Printed Case ~ Check out the 2.4\" TFT Feather Wing Enclosure and 3.5\" TFT Featherwing table top case . Both designs are available on Thingiverse. About Adafruit Adafruit invests time and resources providing open source code and libraries, please support Adafruit and open-source hardware by purchasing products from Adafruit!","title":"Adafruit Featherwing"},{"location":"devices/featherwing/#adafruit-featherwing","text":"You can run openHASP on the Adafruit HUZZAH32 \u2013 ESP32 Feather Board with a TFT Featherwing display. We provide pre-build firmware for this hardware combo. You can pick the 2.4\" or 3.5\" touchscreen. The HUZZAH32 \u2013 ESP32 Feather Boards come in 3 versions: No headers soldered Headers pre-soldered Stacking headers pre-soldered The TFT Featherwing comes in 2 sizes: TFT FeatherWing - 2.4\" 320x240 Touchscreen : ILI9341 with STMPE610 resistive touch TFT FeatherWing - 3.5\" 480x320 Touchscreen : HX8357D with STMPE610 resistive touch Note Don't use the ESP8266 based Feather HUZZAH because it lacks both in memory and MCU power. The Huzzah32 boards only have 4MB flash. If you want more storage, consider getting the SparkFun Thing Plus ESP32-WROOM instead.","title":"Adafruit Featherwing"},{"location":"devices/featherwing/#instructions","text":"The HUZZAH32 \u2013 ESP32 and TFT Featherwings are plug-and-play. You only need to upload the firmware via the USB port. If you get a version with pre-soldered headers then no soldering is required to get started! Check out the Adafruit TFT Featherwing tutorial on learn.adafruit.com. It contains more detailed information, tutorials and wiring diagrams.","title":"Instructions"},{"location":"devices/featherwing/#backlight","text":"By default the display is always on. To get the dimmable backlight working you do need to solder 2 pads! There is a Lite pin which is not connected to any pads but you can connect it to control the backlight. You can connect it to a PWM output pin, like GPIO 21 :","title":"Backlight"},{"location":"devices/featherwing/#product-videos","text":"","title":"Product Videos"},{"location":"devices/featherwing/#24-tft-featherwing","text":"","title":"2.4\" TFT Featherwing"},{"location":"devices/featherwing/#35-tft-featherwing","text":"","title":"3.5\" TFT Featherwing"},{"location":"devices/featherwing/#3d-printed-case","text":"Check out the 2.4\" TFT Feather Wing Enclosure and 3.5\" TFT Featherwing table top case . Both designs are available on Thingiverse.","title":"3D Printed Case"},{"location":"devices/freetouchdeck/","text":"FreeTouchDeck ~ more images... Features ~ ESP32 DevKitC (38pin) ILI9488 TFT SPI 4-WIRE XPT2046 resistive touch controller This board is created for the FreeTouchDeck project and the PCB-combiner board is open source. Due to the extensive documentation it was easy to port openHASP to the FreeTouchDeck. Pros Cons 480x320 Display 4 MB flash Price No PSram Build Instructions Resistive touch This is a kit so you need to assemble the parts yourself. Some soldering skills are required. You can 3D print a custom enclosure. Video ~ 3D Printed Cases ~ You can find a 3D printable case on Thingiverse and Github . Flashing ~ The FreeTouchDeck can easily be flashed over USB like any ESP32 development board. GPIO Settings ~ These pins can be used freely as GPIOs: PCB Blueprint ~ The PCB Combiner is fully Open Source Hardware : Schematics PCB layout HASP build_flags ~ Specify the LCD Configuration to use and define the GPIOs in the environment build flags: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 build_flags = ${env.build_flags} ${esp32.build_flags} ;region -- TFT_eSPI build options ------------------------ -D USER_SETUP_LOADED = 1 -D ILI9488_DRIVER = 1 -D TFT_ROTATION = 0 ; 0=0, 1=90, 2=180 or 3=270 degree -D TFT_WIDTH = 320 -D TFT_HEIGHT = 480 -D TFT_MISO = 19 ; don't connect TFT SDO if other SPI devices share MISO -D TFT_MOSI = 23 -D TFT_SCLK = 18 -D TFT_CS = 15 ; Chip select control pin -D TFT_DC = 2 ; Data Command control pin -D TFT_RST = 4 ; Reset pin (could connect to RST pin) -D TFT_BCKL = 32 ; Default, configurable via web UI (e.g. 2 for D4) -D SUPPORT_TRANSACTIONS -D TOUCH_CS = 21 -D TOUCH_DRIVER = 2046 ; XPT2606 Resistive touch panel driver -D SPI_FREQUENCY = 27000000 -D SPI_TOUCH_FREQUENCY = 2500000 -D SPI_READ_FREQUENCY = 20000000 ;endregion","title":"FreeTouchDeck"},{"location":"devices/freetouchdeck/#freetouchdeck","text":"more images...","title":"FreeTouchDeck"},{"location":"devices/freetouchdeck/#features","text":"ESP32 DevKitC (38pin) ILI9488 TFT SPI 4-WIRE XPT2046 resistive touch controller This board is created for the FreeTouchDeck project and the PCB-combiner board is open source. Due to the extensive documentation it was easy to port openHASP to the FreeTouchDeck. Pros Cons 480x320 Display 4 MB flash Price No PSram Build Instructions Resistive touch This is a kit so you need to assemble the parts yourself. Some soldering skills are required. You can 3D print a custom enclosure.","title":"Features"},{"location":"devices/freetouchdeck/#video","text":"","title":"Video"},{"location":"devices/freetouchdeck/#3d-printed-cases","text":"You can find a 3D printable case on Thingiverse and Github .","title":"3D Printed Cases"},{"location":"devices/freetouchdeck/#flashing","text":"The FreeTouchDeck can easily be flashed over USB like any ESP32 development board.","title":"Flashing"},{"location":"devices/freetouchdeck/#gpio-settings","text":"These pins can be used freely as GPIOs:","title":"GPIO Settings"},{"location":"devices/freetouchdeck/#pcb-blueprint","text":"The PCB Combiner is fully Open Source Hardware : Schematics PCB layout","title":"PCB Blueprint"},{"location":"devices/freetouchdeck/#hasp-build_flags","text":"Specify the LCD Configuration to use and define the GPIOs in the environment build flags: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 build_flags = ${env.build_flags} ${esp32.build_flags} ;region -- TFT_eSPI build options ------------------------ -D USER_SETUP_LOADED = 1 -D ILI9488_DRIVER = 1 -D TFT_ROTATION = 0 ; 0=0, 1=90, 2=180 or 3=270 degree -D TFT_WIDTH = 320 -D TFT_HEIGHT = 480 -D TFT_MISO = 19 ; don't connect TFT SDO if other SPI devices share MISO -D TFT_MOSI = 23 -D TFT_SCLK = 18 -D TFT_CS = 15 ; Chip select control pin -D TFT_DC = 2 ; Data Command control pin -D TFT_RST = 4 ; Reset pin (could connect to RST pin) -D TFT_BCKL = 32 ; Default, configurable via web UI (e.g. 2 for D4) -D SUPPORT_TRANSACTIONS -D TOUCH_CS = 21 -D TOUCH_DRIVER = 2046 ; XPT2606 Resistive touch panel driver -D SPI_FREQUENCY = 27000000 -D SPI_TOUCH_FREQUENCY = 2500000 -D SPI_READ_FREQUENCY = 20000000 ;endregion","title":"HASP build_flags"},{"location":"devices/lanbon-l8/","text":"Lanbon L8 ~ Models ~ L8-HS: 3 Relays - load up to 200W/gang L8-HD: 1 Dimmer - load up to 200W/gang L8-HB: Boiler switch - load up to 16A L8-HT: Thermostat switch - not tested! Form factor ~ EU model: 86mm x 86mm US model: 120mm x 74mm Both models are rated at AC 100-250V ~50-60Hz, the form factor can be a design choice regardless of the continental area. Both models have the same recessed housing sliding in the wall, sized 50x50mm, with rounded corners creating a diameter of about 59mm. This makes them suitable for both EU and US wall fixtures. The EU model fits in a properly deployed, standard 60mm round wall box and can be fixed with two side screws (use the screws which belong to the box instead of the ones shipped with the device), the US model fits in the standard rectangular box and can be fixed through the oval holes located 3 1/4\" apart. The depth of the wall box has to be at least 35-40mm because some room is needed for the wires coming out straight of the device. Bezel Color ~ Black White Features: ~ Input voltage 110-250V ~ 50-60Hz AC ESP32-WROVER-B Capacitive touch screen Energy counter Note An earlier revision V1.14 (20191203) of the PCB had an analog temperature sensor onboard. It was removed from V1.15 (20200521) of the PCB. You are likely not to get it when buying a recent switch. Pros Cons 8 MB flash Mood LEDS not uniform 8 MB PSram Capactitive touch Built-in PSU Energy monitor Standard wallmount form factor both EU and US Contents ~ Flashing ~ Disclaimer Never connect high-voltage when the panel is not properly secured in place. You can follow this flashing guide on blakadder.com or this discussion post with instructions and photos to flash the firmware without having to open the device. Steps: Disengage the high-voltage power Detach the panel from the PSU power supply Connect RX, TX, IO0, GND and power pins to the female pinheader: Either supply 3.3V or 5V on the corresponding power pin, depending on the voltage supplied by the UART ttl (not both at the same time). Because there is no RESET pin, you need to powercycle the board with IO0 connected to GND to activate flash mode Once the serial connections are made, flash the Lanbon-L8 ESP32 binary like on any other device. GPIO Settings ~ 3-gang version L8-HS ~ Pin Mode L8-HS Group Default 12 Output Relay (K3) 1 Low (Normal) 14 Output Relay 2 Low (Normal) 26 Output Mood Red 4 Low (Normal) 27 Output Relay 3 Low (Normal) 32 Output Mood Green 5 Low (Normal) 33 Output Mood Blue 6 Low (Normal) Tip To configure the GPIOs as light switches at once for L8-HS send to topic hasp/<nodename>/config/gpio a message with payload: 1 { \"config\" :[ 197658 , 263456 , 329249 , 655628 , 655886 , 656155 , 0 , 0 ]} Or for power switches : 1 { \"config\" :[ 721164 , 721422 , 197658 , 721691 , 263456 , 329249 , 0 , 0 ]} The difference is only the device class you want them to be autodetected as in Home Assistant: light vs. switch Example jsonl To create a page displaying the local relays as switches, try this very simple pages.jsonl : 1 2 3 { \"page\" : 1 , \"id\" : 1 , \"obj\" : \"switch\" , \"x\" : 30 , \"y\" : 40 , \"w\" : 180 , \"h\" : 75 , \"radius\" : 40 , \"radius2\" : 40 , \"groupid\" : 1 } { \"page\" : 1 , \"id\" : 2 , \"obj\" : \"switch\" , \"x\" : 30 , \"y\" : 122 , \"w\" : 180 , \"h\" : 75 , \"radius\" : 40 , \"radius2\" : 40 , \"groupid\" : 2 } { \"page\" : 1 , \"id\" : 3 , \"obj\" : \"switch\" , \"x\" : 30 , \"y\" : 205 , \"w\" : 180 , \"h\" : 75 , \"radius\" : 40 , \"radius2\" : 40 , \"groupid\" : 3 } Dimmer version L8-HD ~ Pin Mode L8-HD Group Default 12 Output Dimmer TX (K3) 1 Low (Normal) 26 Output Mood Red 4 Low (Normal) 32 Output Mood Green 5 Low (Normal) 33 Output Mood Blue 6 Low (Normal) Tip To configure the GPIOs at once for L8-HD send to topic hasp/<nodename>/config a message with payload: 1 { \"gpio\" :{ \"config\" :[ 3211532 , 197658 , 263456 , 329249 , 0 , 0 , 0 , 0 ]}} Boiler version L8-HB ~ Pin Mode L8-HB Group Default 26 Output Mood Red 4 Low (Normal) 27 Output Relay 16A (K1) 1 Low (Normal) 32 Output Mood Green 5 Low (Normal) 33 Output Mood Blue 6 Low (Normal) Tip To configure the GPIOs at once for L8-HB send to topic hasp/<nodename>/config a message with payload: 1 { \"gpio\" :{ \"config\" :[ 197658 , 263456 , 329249 , 721179 , 14 , 27 , 0 , 0 ]}} Note You can build your own firmware with GPIOs and many other parameters pre-configured in user_config_override.h as factory defaults for Lanbon L8. Wiring Diagrams ~ The switch supports several wiring configurations: Warning Always follow the instructions from the installation guide and local safety regulations. Consult a licensed electrician when changing your electrical wiring. Product Video ~ Your browser does not support the video tag. LCD Configuration ~ The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 st7789v = -D ST7789_DRIVER = 1 ;-D CGRAM_OFFSET=1 ; Library will add offsets required -D TFT_SDA_READ ; Read from display, it only provides an SDA pin -D TFT_WIDTH = 240 -D TFT_HEIGHT = 320 -D TFT_ROTATION = 2 ; see TFT_ROTATION values ; -D TFT_INVERSION_OFF ; for normal colors ; -D TFT_RGB_ORDER=TFT_RGB ; Colour order Red-Green-Blue -D TFT_RGB_ORDER = TFT_BGR ; Colour order Blue-Green-Red -D SPI_FREQUENCY = 80000000 -D SPI_READ_FREQUENCY = 6000000 -D USER_SETUP_LOADED = 1 -D SUPPORT_TRANSACTIONS HASP build_flags ~ Specify the LCD Configuration to use and define the GPIOs in the environment build flags: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 build_flags = ${env.build_flags} ${esp32.build_flags} ${esp32.ps_ram} ;region -- TFT_eSPI build options ------------------------ ${lcd.st7789v} -D LANBONL8 -D TFT_RST = 18 ; FCP pin2 RESET -D TFT_SCLK = 19 ; FCP pin3 SCL -D TFT_DC = 21 ; FCP pin4 D/C -D TFT_CS = 22 ; FCP pin5 CS -D TFT_MOSI = 23 ; FCP pin6 SDA -D TFT_MISO = 25 ; FCP pin7 SDO -D TFT_BCKL = 5 -D TOUCH_DRIVER = 5206 -D TOUCH_SDA = 4 -D TOUCH_SCL = 0 -D TOUCH_IRQ = -1 ; not connected -D TOUCH_RST = -1 ; not used, connected to 3.3V on FCP pin10 -D TOUCH_FREQUENCY = 400000 -D LED_RED = 26 -D LED_GREEN = 32 -D LED_BLUE = 33 -D RELAY_1 = 12 -D RELAY_2 = 24 -D RELAY_3 = 37 ;endregion","title":"Lanbon L8"},{"location":"devices/lanbon-l8/#lanbon-l8","text":"","title":"Lanbon L8"},{"location":"devices/lanbon-l8/#models","text":"L8-HS: 3 Relays - load up to 200W/gang L8-HD: 1 Dimmer - load up to 200W/gang L8-HB: Boiler switch - load up to 16A L8-HT: Thermostat switch - not tested!","title":"Models"},{"location":"devices/lanbon-l8/#contents","text":"","title":"Contents"},{"location":"devices/lanbon-l8/#flashing","text":"Disclaimer Never connect high-voltage when the panel is not properly secured in place. You can follow this flashing guide on blakadder.com or this discussion post with instructions and photos to flash the firmware without having to open the device. Steps: Disengage the high-voltage power Detach the panel from the PSU power supply Connect RX, TX, IO0, GND and power pins to the female pinheader: Either supply 3.3V or 5V on the corresponding power pin, depending on the voltage supplied by the UART ttl (not both at the same time). Because there is no RESET pin, you need to powercycle the board with IO0 connected to GND to activate flash mode Once the serial connections are made, flash the Lanbon-L8 ESP32 binary like on any other device.","title":"Flashing"},{"location":"devices/lanbon-l8/#gpio-settings","text":"","title":"GPIO Settings"},{"location":"devices/lanbon-l8/#3-gang-version-l8-hs","text":"Pin Mode L8-HS Group Default 12 Output Relay (K3) 1 Low (Normal) 14 Output Relay 2 Low (Normal) 26 Output Mood Red 4 Low (Normal) 27 Output Relay 3 Low (Normal) 32 Output Mood Green 5 Low (Normal) 33 Output Mood Blue 6 Low (Normal) Tip To configure the GPIOs as light switches at once for L8-HS send to topic hasp/<nodename>/config/gpio a message with payload: 1 { \"config\" :[ 197658 , 263456 , 329249 , 655628 , 655886 , 656155 , 0 , 0 ]} Or for power switches : 1 { \"config\" :[ 721164 , 721422 , 197658 , 721691 , 263456 , 329249 , 0 , 0 ]} The difference is only the device class you want them to be autodetected as in Home Assistant: light vs. switch Example jsonl To create a page displaying the local relays as switches, try this very simple pages.jsonl : 1 2 3 { \"page\" : 1 , \"id\" : 1 , \"obj\" : \"switch\" , \"x\" : 30 , \"y\" : 40 , \"w\" : 180 , \"h\" : 75 , \"radius\" : 40 , \"radius2\" : 40 , \"groupid\" : 1 } { \"page\" : 1 , \"id\" : 2 , \"obj\" : \"switch\" , \"x\" : 30 , \"y\" : 122 , \"w\" : 180 , \"h\" : 75 , \"radius\" : 40 , \"radius2\" : 40 , \"groupid\" : 2 } { \"page\" : 1 , \"id\" : 3 , \"obj\" : \"switch\" , \"x\" : 30 , \"y\" : 205 , \"w\" : 180 , \"h\" : 75 , \"radius\" : 40 , \"radius2\" : 40 , \"groupid\" : 3 }","title":"3-gang version L8-HS"},{"location":"devices/lanbon-l8/#dimmer-version-l8-hd","text":"Pin Mode L8-HD Group Default 12 Output Dimmer TX (K3) 1 Low (Normal) 26 Output Mood Red 4 Low (Normal) 32 Output Mood Green 5 Low (Normal) 33 Output Mood Blue 6 Low (Normal) Tip To configure the GPIOs at once for L8-HD send to topic hasp/<nodename>/config a message with payload: 1 { \"gpio\" :{ \"config\" :[ 3211532 , 197658 , 263456 , 329249 , 0 , 0 , 0 , 0 ]}}","title":"Dimmer version L8-HD"},{"location":"devices/lanbon-l8/#boiler-version-l8-hb","text":"Pin Mode L8-HB Group Default 26 Output Mood Red 4 Low (Normal) 27 Output Relay 16A (K1) 1 Low (Normal) 32 Output Mood Green 5 Low (Normal) 33 Output Mood Blue 6 Low (Normal) Tip To configure the GPIOs at once for L8-HB send to topic hasp/<nodename>/config a message with payload: 1 { \"gpio\" :{ \"config\" :[ 197658 , 263456 , 329249 , 721179 , 14 , 27 , 0 , 0 ]}} Note You can build your own firmware with GPIOs and many other parameters pre-configured in user_config_override.h as factory defaults for Lanbon L8.","title":"Boiler version L8-HB"},{"location":"devices/lanbon-l8/#wiring-diagrams","text":"The switch supports several wiring configurations: Warning Always follow the instructions from the installation guide and local safety regulations. Consult a licensed electrician when changing your electrical wiring.","title":"Wiring Diagrams"},{"location":"devices/lanbon-l8/#product-video","text":"Your browser does not support the video tag.","title":"Product Video"},{"location":"devices/lanbon-l8/#lcd-configuration","text":"The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 st7789v = -D ST7789_DRIVER = 1 ;-D CGRAM_OFFSET=1 ; Library will add offsets required -D TFT_SDA_READ ; Read from display, it only provides an SDA pin -D TFT_WIDTH = 240 -D TFT_HEIGHT = 320 -D TFT_ROTATION = 2 ; see TFT_ROTATION values ; -D TFT_INVERSION_OFF ; for normal colors ; -D TFT_RGB_ORDER=TFT_RGB ; Colour order Red-Green-Blue -D TFT_RGB_ORDER = TFT_BGR ; Colour order Blue-Green-Red -D SPI_FREQUENCY = 80000000 -D SPI_READ_FREQUENCY = 6000000 -D USER_SETUP_LOADED = 1 -D SUPPORT_TRANSACTIONS","title":"LCD Configuration"},{"location":"devices/lanbon-l8/#hasp-build_flags","text":"Specify the LCD Configuration to use and define the GPIOs in the environment build flags: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 build_flags = ${env.build_flags} ${esp32.build_flags} ${esp32.ps_ram} ;region -- TFT_eSPI build options ------------------------ ${lcd.st7789v} -D LANBONL8 -D TFT_RST = 18 ; FCP pin2 RESET -D TFT_SCLK = 19 ; FCP pin3 SCL -D TFT_DC = 21 ; FCP pin4 D/C -D TFT_CS = 22 ; FCP pin5 CS -D TFT_MOSI = 23 ; FCP pin6 SDA -D TFT_MISO = 25 ; FCP pin7 SDO -D TFT_BCKL = 5 -D TOUCH_DRIVER = 5206 -D TOUCH_SDA = 4 -D TOUCH_SCL = 0 -D TOUCH_IRQ = -1 ; not connected -D TOUCH_RST = -1 ; not used, connected to 3.3V on FCP pin10 -D TOUCH_FREQUENCY = 400000 -D LED_RED = 26 -D LED_GREEN = 32 -D LED_BLUE = 33 -D RELAY_1 = 12 -D RELAY_2 = 24 -D RELAY_3 = 37 ;endregion","title":"HASP build_flags"},{"location":"devices/m5stack-core2/","text":"M5Stack core2 ~ M5Stack core2 is the second generation core device in the M5Stack development kit series. The core2 features a 2\" capacitive touchscreen, unlike its predecessor, making it very suitable to run openHASP. The device is packed with a beefy ESP32 model D0WDQ6-V3 and lots of sensors. Features ~ 1W Speaker SPM1423 Microphone Vibration Motor 3.7V / 390 mAh battery with power management chip SD card slot (16 GB maximum size) IMU (3-axis gyroscope & 3-axis accelerometer) Dimensions: 54 x 54 x 16mm Pros Cons 16 MB flash Small display 8 MB PSram Internal Battery Capacitive Touchscreen Available from: M5stack Mouser Digikey Amazon Video ~ Schematic ~ PDF M5Stack Library ~ The M5Stack series comes with an opensource library to give you a jump start in deveopment for this device, including a Getting Started guide, examples and API reference. Visit the M5Stack Github repo.","title":"M5stack core2"},{"location":"devices/m5stack-core2/#m5stack-core2","text":"M5Stack core2 is the second generation core device in the M5Stack development kit series. The core2 features a 2\" capacitive touchscreen, unlike its predecessor, making it very suitable to run openHASP. The device is packed with a beefy ESP32 model D0WDQ6-V3 and lots of sensors.","title":"M5Stack core2"},{"location":"devices/m5stack-core2/#features","text":"1W Speaker SPM1423 Microphone Vibration Motor 3.7V / 390 mAh battery with power management chip SD card slot (16 GB maximum size) IMU (3-axis gyroscope & 3-axis accelerometer) Dimensions: 54 x 54 x 16mm Pros Cons 16 MB flash Small display 8 MB PSram Internal Battery Capacitive Touchscreen Available from: M5stack Mouser Digikey Amazon","title":"Features"},{"location":"devices/m5stack-core2/#video","text":"","title":"Video"},{"location":"devices/m5stack-core2/#schematic","text":"PDF","title":"Schematic"},{"location":"devices/m5stack-core2/#m5stack-library","text":"The M5Stack series comes with an opensource library to give you a jump start in deveopment for this device, including a Getting Started guide, examples and API reference. Visit the M5Stack Github repo.","title":"M5Stack Library"},{"location":"devices/makerfabs-tft-touch/","text":"Makerfabs ESP32 TFT Touch ~ more images... Features ~ The Makerfabs ESP32 TFT Touch development board incorporates a 3.2\u201d or 3.5\u201d touch display, with a built-in 2M pixel OV2640 camera, which makes it a very suitable platform for any ESP32 project. There is a version with capacitive and resistive touch. At the back sits an ESP32-WROVER module with 16MB of flash and 8MB of PSram. There is also an SD-card slot, USB-C connector and expansion port with 14 GPIOs. Models ~ Model 3.2\" Resistive 3.5\" Resistive 3.5\" Capacitive SKU ESPTFT32CA ESPTFT35RE ESPTFT35CA Flash 16 MB 16 MB 16 MB PSram 8 MB 8 MB 8 MB Resolution 3.2\" 320x240 3.5\" 480x320 3.5\" 480x320 Touch Screen Resistive Resistive Capacitive OV2640 Camera 2M pixel 2M pixel 2M pixel SD Card yes yes yes Screen dimming no no no Buy Buy Buy Also available on Tindie Tip An optional environmental expansion board can be added to provide a temperature, humidity and air quality sensor. The camera can not be used at the same time as the expansion port. The camera and SD card are not supported by openHASP 0.6.1. Backlight Control ~ Unfortunately, there is no support for backlight control. The display is always-on. Video ~ Documentation ~ More information can be found in the Makerfabs Wiki and there are plenty of example projects available on the Github repository. Makerfabs Wiki Github Repo Schematics Acrylic Case ~ All 3 models have the option to add a protective acrylic case for only $2.90 extra:","title":"Makerfabs TFT Touch"},{"location":"devices/makerfabs-tft-touch/#makerfabs-esp32-tft-touch","text":"more images...","title":"Makerfabs ESP32 TFT Touch"},{"location":"devices/makerfabs-tft-touch/#features","text":"The Makerfabs ESP32 TFT Touch development board incorporates a 3.2\u201d or 3.5\u201d touch display, with a built-in 2M pixel OV2640 camera, which makes it a very suitable platform for any ESP32 project. There is a version with capacitive and resistive touch. At the back sits an ESP32-WROVER module with 16MB of flash and 8MB of PSram. There is also an SD-card slot, USB-C connector and expansion port with 14 GPIOs.","title":"Features"},{"location":"devices/makerfabs-tft-touch/#models","text":"Model 3.2\" Resistive 3.5\" Resistive 3.5\" Capacitive SKU ESPTFT32CA ESPTFT35RE ESPTFT35CA Flash 16 MB 16 MB 16 MB PSram 8 MB 8 MB 8 MB Resolution 3.2\" 320x240 3.5\" 480x320 3.5\" 480x320 Touch Screen Resistive Resistive Capacitive OV2640 Camera 2M pixel 2M pixel 2M pixel SD Card yes yes yes Screen dimming no no no Buy Buy Buy Also available on Tindie Tip An optional environmental expansion board can be added to provide a temperature, humidity and air quality sensor. The camera can not be used at the same time as the expansion port. The camera and SD card are not supported by openHASP 0.6.1.","title":"Models"},{"location":"devices/makerfabs-tft-touch/#backlight-control","text":"Unfortunately, there is no support for backlight control. The display is always-on.","title":"Backlight Control"},{"location":"devices/makerfabs-tft-touch/#video","text":"","title":"Video"},{"location":"devices/makerfabs-tft-touch/#documentation","text":"More information can be found in the Makerfabs Wiki and there are plenty of example projects available on the Github repository. Makerfabs Wiki Github Repo Schematics","title":"Documentation"},{"location":"devices/makerfabs-tft-touch/#acrylic-case","text":"All 3 models have the option to add a protective acrylic case for only $2.90 extra:","title":"Acrylic Case"},{"location":"devices/wt32-sc01/","text":"Wireless-Tag WT32-SC01 ~ Features ~ The WT32-SC01 incorporates an ESP32-WROVER-B module with a 3.5-inch capacitive touch display. openHASP can take advantage of the 320x480 resolution to show a large custom user-interface. On the back there is an expansion port with GPIOs so you can expand the capabilities as needed. Pros Cons 480x320 Display 4 MB flash on basic model 8 MB PSram Viewing angle in landscape mode Capacitive Touchscreen Mounting holes placement The development board is powered via USB Type-C. The basic version comes with only 4MB SPI Flash but there is a better WT32-SC01(16MB) SKU with a larger flash chip. Both models have 8MB of PSRAM. With 4MB flash available from: LCSC Seeed studio With 16MB flash available from: Alibaba Tip Please consider getting the model with 16MB flash size as it is more suitable for the large screen. Note The expansion connector has a 2.0mm pitch female header instead of the more common 2.54mm pitch. Datasheet 3D Printed Case ~ Wt32-sc01 Case by mbenten on Sketchfab","title":"Wireless-Tag WT32-SC01"},{"location":"devices/wt32-sc01/#wireless-tag-wt32-sc01","text":"","title":"Wireless-Tag WT32-SC01"},{"location":"devices/wt32-sc01/#features","text":"The WT32-SC01 incorporates an ESP32-WROVER-B module with a 3.5-inch capacitive touch display. openHASP can take advantage of the 320x480 resolution to show a large custom user-interface. On the back there is an expansion port with GPIOs so you can expand the capabilities as needed. Pros Cons 480x320 Display 4 MB flash on basic model 8 MB PSram Viewing angle in landscape mode Capacitive Touchscreen Mounting holes placement The development board is powered via USB Type-C. The basic version comes with only 4MB SPI Flash but there is a better WT32-SC01(16MB) SKU with a larger flash chip. Both models have 8MB of PSRAM. With 4MB flash available from: LCSC Seeed studio With 16MB flash available from: Alibaba Tip Please consider getting the model with 16MB flash size as it is more suitable for the large screen. Note The expansion connector has a 2.0mm pitch female header instead of the more common 2.54mm pitch. Datasheet","title":"Features"},{"location":"devices/wt32-sc01/#3d-printed-case","text":"Wt32-sc01 Case by mbenten on Sketchfab","title":"3D Printed Case"},{"location":"devices/yeacreate-nscreen32/","text":"YeaCreate Nscreen32 ~ Features ~ The Nscreen32 uses an ESP32-WROVER-IE module with a large 4-inch capacitive touch display. The display is connected via an 8-bit parallel bus resulting in a fast performance. openHASP can take advantage of the 320x480 resolution to show a large custom user-interface. On the back there is an expansion port with 6 GPIOs (4 input only, RX & TX) so you add inputs if needed. The development board can be powered via micro USB or the 5V-in JST connector. Pros Cons 8-bit parallel display No backlight control 16 MB flash + 8 MB PSram Always-on display Capacitive Touchscreen Viewing angles External antenna YeaCreate Store Backlight Control ~ Unfortunately, there is no support for backlight control . The display is always-on. Documentation ~ Some example projects and the schematics for the Nscreen32 can be found on the Yeacreate Github repository. Github Repo Schematics Video ~ Nscreen32 is the first device to receive the LVGL Certified Board label: HASP build_flags ~ Specify the LCD Configuration to use and define the GPIOs in the environment build flags: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 build_flags = ${env.build_flags} ${esp32.build_flags} ${esp32.hspi} ; Use VSPI hardware SPI bus -D HASP_MODEL = \"YeaCreate Nscreen32\" ;region -- TFT_eSPI build options ------------------------ -D USER_SETUP_LOADED = 1 -D ST7796_DRIVER = 1 -D ESP32_PARALLEL = 1 -D TFT_ROTATION = 0 ; 0=0, 1=90, 2=180 or 3=270 degree -D TFT_WIDTH = 320 -D TFT_HEIGHT = 480 ; ESP32 pins used for the parallel interface TFT -D TFT_CS = 33 ; Chip select control pin -D TFT_DC = 15 ; Data Command control pin - must use a pin in the range 0-31 also named RS -D TFT_WR = 4 ; Write strobe control pin - must use a pin in the range 0-31 -D TFT_RD = 2 -D TFT_D0 = 12 ; Must use pins in the range 0-31 for the data bus -D TFT_D1 = 13 ; so a single register write sets/clears all bits -D TFT_D2 = 26 -D TFT_D3 = 25 -D TFT_D4 = 19 -D TFT_D5 = 18 -D TFT_D6 = 27 -D TFT_D7 = 14 -D TFT_RST = 32 ; Reset pin ;-D TFT_BCKL=32 ;None, configurable via web UI (e.g. 2 for D4) -D SUPPORT_TRANSACTIONS -D TOUCH_DRIVER = 911 ; GT911 Capacitive touch panel driver -D TOUCH_SDA = 21 -D TOUCH_SCL = 22 -D TOUCH_IRQ = 5 -D TOUCH_RST = 23 ;-D TOUCH_FREQUENCY=400000 -D I2C_TOUCH_FREQUENCY = 400000 -D SPI_FREQUENCY = 40000000 -D SPI_READ_FREQUENCY = 20000000 ;endregion","title":"YeaCreate Nscreen32"},{"location":"devices/yeacreate-nscreen32/#yeacreate-nscreen32","text":"","title":"YeaCreate Nscreen32"},{"location":"devices/yeacreate-nscreen32/#features","text":"The Nscreen32 uses an ESP32-WROVER-IE module with a large 4-inch capacitive touch display. The display is connected via an 8-bit parallel bus resulting in a fast performance. openHASP can take advantage of the 320x480 resolution to show a large custom user-interface. On the back there is an expansion port with 6 GPIOs (4 input only, RX & TX) so you add inputs if needed. The development board can be powered via micro USB or the 5V-in JST connector. Pros Cons 8-bit parallel display No backlight control 16 MB flash + 8 MB PSram Always-on display Capacitive Touchscreen Viewing angles External antenna YeaCreate Store","title":"Features"},{"location":"devices/yeacreate-nscreen32/#backlight-control","text":"Unfortunately, there is no support for backlight control . The display is always-on.","title":"Backlight Control"},{"location":"devices/yeacreate-nscreen32/#documentation","text":"Some example projects and the schematics for the Nscreen32 can be found on the Yeacreate Github repository. Github Repo Schematics","title":"Documentation"},{"location":"devices/yeacreate-nscreen32/#video","text":"Nscreen32 is the first device to receive the LVGL Certified Board label:","title":"Video"},{"location":"devices/yeacreate-nscreen32/#hasp-build_flags","text":"Specify the LCD Configuration to use and define the GPIOs in the environment build flags: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 build_flags = ${env.build_flags} ${esp32.build_flags} ${esp32.hspi} ; Use VSPI hardware SPI bus -D HASP_MODEL = \"YeaCreate Nscreen32\" ;region -- TFT_eSPI build options ------------------------ -D USER_SETUP_LOADED = 1 -D ST7796_DRIVER = 1 -D ESP32_PARALLEL = 1 -D TFT_ROTATION = 0 ; 0=0, 1=90, 2=180 or 3=270 degree -D TFT_WIDTH = 320 -D TFT_HEIGHT = 480 ; ESP32 pins used for the parallel interface TFT -D TFT_CS = 33 ; Chip select control pin -D TFT_DC = 15 ; Data Command control pin - must use a pin in the range 0-31 also named RS -D TFT_WR = 4 ; Write strobe control pin - must use a pin in the range 0-31 -D TFT_RD = 2 -D TFT_D0 = 12 ; Must use pins in the range 0-31 for the data bus -D TFT_D1 = 13 ; so a single register write sets/clears all bits -D TFT_D2 = 26 -D TFT_D3 = 25 -D TFT_D4 = 19 -D TFT_D5 = 18 -D TFT_D6 = 27 -D TFT_D7 = 14 -D TFT_RST = 32 ; Reset pin ;-D TFT_BCKL=32 ;None, configurable via web UI (e.g. 2 for D4) -D SUPPORT_TRANSACTIONS -D TOUCH_DRIVER = 911 ; GT911 Capacitive touch panel driver -D TOUCH_SDA = 21 -D TOUCH_SCL = 22 -D TOUCH_IRQ = 5 -D TOUCH_RST = 23 ;-D TOUCH_FREQUENCY=400000 -D I2C_TOUCH_FREQUENCY = 400000 -D SPI_FREQUENCY = 40000000 -D SPI_READ_FREQUENCY = 20000000 ;endregion","title":"HASP build_flags"},{"location":"displays/ILI9341_IPS/","text":"ILI9341 IPS Panel A 240x320 IPS TFT display with an ILI9341 controller and XPT2046 touch controller. Improvement over TN versions of the display with amazing view angles. Pin Configuration ~ Pin Function ESP32 Pin Config Name Display Pin 1 Module Ground GND GND 2 Module Power 3.3v 3V3 VCC 3 SPI Clock GPIO18 TFT_SCLK CLK 4 Data Input GPIO23 TFT_MOSI MOSI 5 LCD Reset line GPIO15 TFT_RST RES 6 Data Command control GPIO5 TFT_DC DC 7 Backlight GPIO21 TFT_BCKL BLK 8 Data Output GPIO19 TFT_MISO MISO 9 Chip Select GPIO26 TFT_CS CS1 10 Touch Select GPIO17 TOUCH_CS CS2 11 Touch Interrupt SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller. Custom build ~ Define a custom environment in platformio_override.ini and add a new esp32_ili9341_spi entry under extra_default_envs = If you've wired pins differently, change the values below. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 ;-- ILI9341 SPI version ------------------------ [env:esp32_ili9341_spi] platform = espressif32 platform_packages = framework-arduinoespressif32 framework = arduino board = esp32dev monitor_port = COM4 upload_port = ${env:esp32_ili9341_spi.monitor_port} monitor_filters = esp32_exception_decoder board_build.partitions = user_setups/esp32_partition_app1300k_spiffs1216k.csv build_flags = ${env.build_flags} ${esp32.build_flags} -D ILI9341_DRIVER = 1 -D TFT_WIDTH = 240 -D TFT_HEIGHT = 320 -D TFT_ROTATION = 0 ; see TFT_ROTATION values -D INVERT_COLORS = 1 ; to fix colors -D SPI_FREQUENCY = 60000000 -D SPI_TOUCH_FREQUENCY = 2500000 -D SPI_READ_FREQUENCY = 20000000 -D USER_SETUP_LOADED = 1 -D TOUCH_DRIVER = 2046 ; XPT2046 Resistive SPI touch panel driver -D SUPPORT_TRANSACTIONS ${esp32.vspi} ; Use VSPI hardware SPI bus : ; TFT_MISO=19 | TFT_MOSI=23 | TFT_SCLK=18 ; MISO = 8 | MOSI = 4 | CLK = 3 ; wiring recommendations, change pins according to your wiring -D TFT_DC = 5 ; DC, lcd pin 3 -D TFT_RST = 15 ; RES, lcd pin 5 -D TFT_BCKL = -1 ; BLK, lcd pin 7 (configurable via web UI (e.g. 21)) -D TFT_CS = 26 ; CS1, lcd pin 9 -D TOUCH_CS = 17 ; CS2, lcd pin 10 lib_deps = ${env.lib_deps} ${esp32.lib_deps} lib_ignore = ${env.lib_ignore} ${esp32.lib_ignore} extra_scripts = ${env.extra_scripts} ${esp32.extra_scripts}","title":"ILI9341 IPS"},{"location":"displays/ILI9341_IPS/#pin-configuration","text":"Pin Function ESP32 Pin Config Name Display Pin 1 Module Ground GND GND 2 Module Power 3.3v 3V3 VCC 3 SPI Clock GPIO18 TFT_SCLK CLK 4 Data Input GPIO23 TFT_MOSI MOSI 5 LCD Reset line GPIO15 TFT_RST RES 6 Data Command control GPIO5 TFT_DC DC 7 Backlight GPIO21 TFT_BCKL BLK 8 Data Output GPIO19 TFT_MISO MISO 9 Chip Select GPIO26 TFT_CS CS1 10 Touch Select GPIO17 TOUCH_CS CS2 11 Touch Interrupt SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller.","title":"Pin Configuration"},{"location":"displays/ILI9341_IPS/#custom-build","text":"Define a custom environment in platformio_override.ini and add a new esp32_ili9341_spi entry under extra_default_envs = If you've wired pins differently, change the values below. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 ;-- ILI9341 SPI version ------------------------ [env:esp32_ili9341_spi] platform = espressif32 platform_packages = framework-arduinoespressif32 framework = arduino board = esp32dev monitor_port = COM4 upload_port = ${env:esp32_ili9341_spi.monitor_port} monitor_filters = esp32_exception_decoder board_build.partitions = user_setups/esp32_partition_app1300k_spiffs1216k.csv build_flags = ${env.build_flags} ${esp32.build_flags} -D ILI9341_DRIVER = 1 -D TFT_WIDTH = 240 -D TFT_HEIGHT = 320 -D TFT_ROTATION = 0 ; see TFT_ROTATION values -D INVERT_COLORS = 1 ; to fix colors -D SPI_FREQUENCY = 60000000 -D SPI_TOUCH_FREQUENCY = 2500000 -D SPI_READ_FREQUENCY = 20000000 -D USER_SETUP_LOADED = 1 -D TOUCH_DRIVER = 2046 ; XPT2046 Resistive SPI touch panel driver -D SUPPORT_TRANSACTIONS ${esp32.vspi} ; Use VSPI hardware SPI bus : ; TFT_MISO=19 | TFT_MOSI=23 | TFT_SCLK=18 ; MISO = 8 | MOSI = 4 | CLK = 3 ; wiring recommendations, change pins according to your wiring -D TFT_DC = 5 ; DC, lcd pin 3 -D TFT_RST = 15 ; RES, lcd pin 5 -D TFT_BCKL = -1 ; BLK, lcd pin 7 (configurable via web UI (e.g. 21)) -D TFT_CS = 26 ; CS1, lcd pin 9 -D TOUCH_CS = 17 ; CS2, lcd pin 10 lib_deps = ${env.lib_deps} ${esp32.lib_deps} lib_ignore = ${env.lib_ignore} ${esp32.lib_ignore} extra_scripts = ${env.extra_scripts} ${esp32.extra_scripts}","title":"Custom build"},{"location":"displays/MHS4001/","text":"MHS4001 6 GPIOs are required to drive the SPI display. One additional GPIO is needed for the XPT2046 touch sensor. Including the Vcc and Gnd pins, a total of 12 connections need to be made to the MCU: Pin Configuration ~ Pin Function ESP32 Pin Config Name Display Pin 1 Module Power 3.3V 3.3V 3.3V 2 Module Power 5v 5V 5V 3 Not connected NC 4 LED Backlight PWM 5V TFT_BCKL 5V 5-10 Not connected NC 11 Touch Interrupt NC TP_IRQ 12-13 Not connected NC 14 Module Ground GND GND 15-16 Not connected NC 17 Module Power 3.3V 3.3V 18 Data Command control pin GPIO4 TFT_DC LCD_RS 19 SPI Master Out Slave In GPIO23 TFT_MOSI LCD/SI/TP_SI 20 Not connected NC 21 Touch Panel Slave Out GPIO19 TFT_MISO TP_SO 22 LCD Reset pin GPIO32 TFT_RST RST 23 SPI Clock GPIO18 TFT_SCLK LCD_SCK/TP_SCK 24 Chip select control pin GPIO15 TFT_CS LCD_CS 25 Module Ground GND GND 26 Touch Chip Select GPIO22 TOUCH_CS TP_CS By default, pin 4 is normally connected to 5V. This turns the display backlight LED on all time. In order to control the backlight you can drive pin 4 of the display using a PNP transistor. The electronics circuit needed is not part of this diagram. SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller. LCD Configuration ~ The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: 1 2 3 4 5 6 7 8 9 10 11 raspberrypi = -D RPI_DISPLAY_TYPE = 1 -D ST7796_DRIVER = 1 -D TFT_WIDTH = 320 -D TFT_HEIGHT = 480 -D TFT_ROTATION = 0 ; 0=0, 1=90, 2=180 or 3=270 degree -D SPI_FREQUENCY = 80000000 -D SPI_TOUCH_FREQUENCY = 2500000 -D USER_SETUP_LOADED = 1 -D TOUCH_DRIVER = 2046 ; XPT2046 Resistive touch panel driver -D SUPPORT_TRANSACTIONS HASP build_flags ~ Specify the LCD Configuration to use and define the 7 GPIOs in the environment build flags: 1 2 3 4 5 6 7 8 9 10 build_flags = ${flags.esp32_flags} ; -- TFT_eSPI build options ------------------------ ${lcd.raspberrypi} ${esp32.vspi} ; Use VSPI hardware SPI bus -D TFT_CS = 15 -D TFT_DC = 4 -D TFT_RST = 32 -D TFT_BCKL = -1 ; None -D TOUCH_CS = 22","title":"MHS4001"},{"location":"displays/MHS4001/#pin-configuration","text":"Pin Function ESP32 Pin Config Name Display Pin 1 Module Power 3.3V 3.3V 3.3V 2 Module Power 5v 5V 5V 3 Not connected NC 4 LED Backlight PWM 5V TFT_BCKL 5V 5-10 Not connected NC 11 Touch Interrupt NC TP_IRQ 12-13 Not connected NC 14 Module Ground GND GND 15-16 Not connected NC 17 Module Power 3.3V 3.3V 18 Data Command control pin GPIO4 TFT_DC LCD_RS 19 SPI Master Out Slave In GPIO23 TFT_MOSI LCD/SI/TP_SI 20 Not connected NC 21 Touch Panel Slave Out GPIO19 TFT_MISO TP_SO 22 LCD Reset pin GPIO32 TFT_RST RST 23 SPI Clock GPIO18 TFT_SCLK LCD_SCK/TP_SCK 24 Chip select control pin GPIO15 TFT_CS LCD_CS 25 Module Ground GND GND 26 Touch Chip Select GPIO22 TOUCH_CS TP_CS By default, pin 4 is normally connected to 5V. This turns the display backlight LED on all time. In order to control the backlight you can drive pin 4 of the display using a PNP transistor. The electronics circuit needed is not part of this diagram. SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller.","title":"Pin Configuration"},{"location":"displays/MHS4001/#lcd-configuration","text":"The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: 1 2 3 4 5 6 7 8 9 10 11 raspberrypi = -D RPI_DISPLAY_TYPE = 1 -D ST7796_DRIVER = 1 -D TFT_WIDTH = 320 -D TFT_HEIGHT = 480 -D TFT_ROTATION = 0 ; 0=0, 1=90, 2=180 or 3=270 degree -D SPI_FREQUENCY = 80000000 -D SPI_TOUCH_FREQUENCY = 2500000 -D USER_SETUP_LOADED = 1 -D TOUCH_DRIVER = 2046 ; XPT2046 Resistive touch panel driver -D SUPPORT_TRANSACTIONS","title":"LCD Configuration"},{"location":"displays/MHS4001/#hasp-build_flags","text":"Specify the LCD Configuration to use and define the 7 GPIOs in the environment build flags: 1 2 3 4 5 6 7 8 9 10 build_flags = ${flags.esp32_flags} ; -- TFT_eSPI build options ------------------------ ${lcd.raspberrypi} ${esp32.vspi} ; Use VSPI hardware SPI bus -D TFT_CS = 15 -D TFT_DC = 4 -D TFT_RST = 32 -D TFT_BCKL = -1 ; None -D TOUCH_CS = 22","title":"HASP build_flags"},{"location":"displays/MRB3511/","text":"MRB3511 14 GPIOs are required to drive the 8-bit parallel display. Another 3 GPIOs are needed for the I\u00b2C touch sensor. Including the Vcc, Gnd an Rst pins, a total of 23 connections need to be made to the MCU: Pin Configuration ~ Pin Function ESP32 Pin Config Name Display Pin 1 Chip select control pin GPIO33 TFT_CS CS 2 Data Command control pin GPIO15 TFT_DC RS 3 Write control pin GPIO04 TFT_WR WR 4 Read control pin GPIO02 TFT_RD RD 5 LCD Reset pin GPIO32 TFT_RST RST 6 GPIO12 TFT_D0 D0 7 GPIO13 TFT_D1 D1 8 GPIO26 TFT_D2 D2 9 8-bit parallel data GPIO25 TFT_D3 D3 10 GPIO17 TFT_D4 D4 11 GPIO16 TFT_D5 D5 12 GPIO27 TFT_D6 D6 13 GPIO14 TFT_D7 D7 14-21 Not used, don't connect NC D8-15 22 Module Ground GND GND 23 LED Backlight PWM GPIO5 TFT_BCKL BL 24-25 Module Power - VDD 26-27 Module Ground GND GND 28-29 Not connected NC 30 IO, I\u00b2C SDA GPIO21 TOUCH_SDA SDA 31 Touch Chip Interrupt GPIO34 TOUCH_IRQ INT 32 Not connected NC 33 Touch IC Reset 3.3V CRST 34 IO, I\u00b2C SCL GPIO22 TOUCH_SCL SCL You need to desolder the 0R resistor on the back side of the panel from the 16-bit position. Then solder back the 0R resistor in the 8-bit position. There are no pins shared between the touch controller and the LCD controller. LCD Configuration ~ The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: 1 2 3 4 5 6 7 8 9 mrb3511 = -D ESP32_PARALLEL = 1 -D ILI9488_DRIVER = 1 -D TFT_WIDTH = 320 -D TFT_HEIGHT = 480 -D TFT_ROTATION = 0 ; 0=0, 1=90, 2=180 or 3=270 degree -D USER_SETUP_LOADED = 1 -D TOUCH_DRIVER = 911 ; GT911 Capacitive touch panel driver -D SUPPORT_TRANSACTIONS HASP build_flags ~ Specify the LCD Configuration to use and define the 17 GPIOs in the environment build flags: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 build_flags = ${flags.esp32_flags} ; -- TFT_eSPI build options ------------------------ ${lcd.mrb3511} -D TFT_BCKL = 5 ;None, configurable via web UI (e.g. 2 for D4) -D TFT_CS = 33 ; Chip select control pin -D TFT_DC = 15 ; =RS; Data Command control pin - must use a pin in the range 0-31 -D TFT_RST = 32 ; Reset pin -D TFT_WR = 4 ; Write strobe control pin - must use a pin in the range 0-31 -D TFT_RD = 2 -D TFT_D0 = 12 ; Must use pins in the range 0-31 for the data bus -D TFT_D1 = 13 ; so a single register write sets/clears all bits -D TFT_D2 = 26 -D TFT_D3 = 25 -D TFT_D4 = 17 -D TFT_D5 = 16 -D TFT_D6 = 27 -D TFT_D7 = 14 -D TOUCH_SDA = 21 -D TOUCH_SCL = 22 -D TOUCH_IRQ = 34 ; use 34-39 as these are input only pins -D TOUCH_RST = -1 ; not used, connected to 3.3V","title":"MRB3511"},{"location":"displays/MRB3511/#pin-configuration","text":"Pin Function ESP32 Pin Config Name Display Pin 1 Chip select control pin GPIO33 TFT_CS CS 2 Data Command control pin GPIO15 TFT_DC RS 3 Write control pin GPIO04 TFT_WR WR 4 Read control pin GPIO02 TFT_RD RD 5 LCD Reset pin GPIO32 TFT_RST RST 6 GPIO12 TFT_D0 D0 7 GPIO13 TFT_D1 D1 8 GPIO26 TFT_D2 D2 9 8-bit parallel data GPIO25 TFT_D3 D3 10 GPIO17 TFT_D4 D4 11 GPIO16 TFT_D5 D5 12 GPIO27 TFT_D6 D6 13 GPIO14 TFT_D7 D7 14-21 Not used, don't connect NC D8-15 22 Module Ground GND GND 23 LED Backlight PWM GPIO5 TFT_BCKL BL 24-25 Module Power - VDD 26-27 Module Ground GND GND 28-29 Not connected NC 30 IO, I\u00b2C SDA GPIO21 TOUCH_SDA SDA 31 Touch Chip Interrupt GPIO34 TOUCH_IRQ INT 32 Not connected NC 33 Touch IC Reset 3.3V CRST 34 IO, I\u00b2C SCL GPIO22 TOUCH_SCL SCL You need to desolder the 0R resistor on the back side of the panel from the 16-bit position. Then solder back the 0R resistor in the 8-bit position. There are no pins shared between the touch controller and the LCD controller.","title":"Pin Configuration"},{"location":"displays/MRB3511/#lcd-configuration","text":"The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: 1 2 3 4 5 6 7 8 9 mrb3511 = -D ESP32_PARALLEL = 1 -D ILI9488_DRIVER = 1 -D TFT_WIDTH = 320 -D TFT_HEIGHT = 480 -D TFT_ROTATION = 0 ; 0=0, 1=90, 2=180 or 3=270 degree -D USER_SETUP_LOADED = 1 -D TOUCH_DRIVER = 911 ; GT911 Capacitive touch panel driver -D SUPPORT_TRANSACTIONS","title":"LCD Configuration"},{"location":"displays/MRB3511/#hasp-build_flags","text":"Specify the LCD Configuration to use and define the 17 GPIOs in the environment build flags: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 build_flags = ${flags.esp32_flags} ; -- TFT_eSPI build options ------------------------ ${lcd.mrb3511} -D TFT_BCKL = 5 ;None, configurable via web UI (e.g. 2 for D4) -D TFT_CS = 33 ; Chip select control pin -D TFT_DC = 15 ; =RS; Data Command control pin - must use a pin in the range 0-31 -D TFT_RST = 32 ; Reset pin -D TFT_WR = 4 ; Write strobe control pin - must use a pin in the range 0-31 -D TFT_RD = 2 -D TFT_D0 = 12 ; Must use pins in the range 0-31 for the data bus -D TFT_D1 = 13 ; so a single register write sets/clears all bits -D TFT_D2 = 26 -D TFT_D3 = 25 -D TFT_D4 = 17 -D TFT_D5 = 16 -D TFT_D6 = 27 -D TFT_D7 = 14 -D TOUCH_SDA = 21 -D TOUCH_SCL = 22 -D TOUCH_IRQ = 34 ; use 34-39 as these are input only pins -D TOUCH_RST = -1 ; not used, connected to 3.3V","title":"HASP build_flags"},{"location":"displays/MSPxxxx/","text":"ILI9341 TFT Panel Models: 2.4\" SKU: MSP2402 2.8\" SKU: MSP2807 3.2\" SKU: MSP3218 The \"red\" 240x320 TFT displays with an ILI9341 controller and XPT2046 touch controller are very common. Make sure to select the touch version when ordering these screens online. The U2 touch chip needs to be populated on the board. Pin Configuration ~ Pin Function ESP32 Pin Config Name Display Pin 1 5V/3.3V power input 5V/3.3V VCC 2 Module Ground GND GND 3 Chip Select GPIO26 TFT_CS CS 4 LCD Reset line GPIO15 TFT_RST RESET 5 Data Command control GPIO5 TFT_DC DC 6 Data Input GPIO23 TFT_MOSI SDI(MOSI) 7 SPI Clock GPIO18 TFT_SCLK SCK 8 Backlight GPIO21 TFT_BCKL LED 9 Data Output (not used) GPIO19 or N/C TFT_MISO SDO(MISO) 10 Touch SPI Clock GPIO18 TFT_SCLK T_CLK 11 Touch Select GPIO17 TOUCH_CS T_CS 12 Touch Data Input GPIO23 TFT_MOSI T_DIN 13 Touch Data Output GPIO19 TFT_MISO T_DO 14 Touch Interrupt N/C T_IRQ SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller. In some cases the pin 9 MISO of the LCD can prevent proper display initialization. This pin is not used by openHASP, so it can be left disconnected in case of issues. LCD Configuration ~ The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: 1 2 3 4 5 6 7 8 9 10 11 lolin24 = -D ILI9341_DRIVER = 1 -D TFT_WIDTH = 240 -D TFT_HEIGHT = 320 -D TFT_ROTATION = 0 ; Use default, see TFT_ROTATION values -D SPI_FREQUENCY = 40000000 -D SPI_TOUCH_FREQUENCY = 2500000 -D SPI_READ_FREQUENCY = 20000000 -D USER_SETUP_LOADED = 1 -D TOUCH_DRIVER = 2046 ; XPT2046 Resistive SPI touch panel driver -D SUPPORT_TRANSACTIONS HASP build_flags ~ Specify the LCD Configuration to use and define the GPIOs in the environment build flags: 1 2 3 4 5 6 7 8 9 10 11 12 13 build_flags = ${env.build_flags} ${esp32.build_flags} ;region -- TFT_eSPI build options ------------------------ ${lcd.lolin24} ${esp32.vspi} ; Use VSPI hardware SPI bus -D TFT_DC = 5 -D TFT_CS = 26 -D TFT_RST = -1 ; RST -D TFT_BCKL = -1 ; None, configurable via web UI (e.g. 21) -D TOUCH_CS = 17 ; (can also be 22 or 16) ;endregion","title":"MSP Series (Red PCB)"},{"location":"displays/MSPxxxx/#pin-configuration","text":"Pin Function ESP32 Pin Config Name Display Pin 1 5V/3.3V power input 5V/3.3V VCC 2 Module Ground GND GND 3 Chip Select GPIO26 TFT_CS CS 4 LCD Reset line GPIO15 TFT_RST RESET 5 Data Command control GPIO5 TFT_DC DC 6 Data Input GPIO23 TFT_MOSI SDI(MOSI) 7 SPI Clock GPIO18 TFT_SCLK SCK 8 Backlight GPIO21 TFT_BCKL LED 9 Data Output (not used) GPIO19 or N/C TFT_MISO SDO(MISO) 10 Touch SPI Clock GPIO18 TFT_SCLK T_CLK 11 Touch Select GPIO17 TOUCH_CS T_CS 12 Touch Data Input GPIO23 TFT_MOSI T_DIN 13 Touch Data Output GPIO19 TFT_MISO T_DO 14 Touch Interrupt N/C T_IRQ SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller. In some cases the pin 9 MISO of the LCD can prevent proper display initialization. This pin is not used by openHASP, so it can be left disconnected in case of issues.","title":"Pin Configuration"},{"location":"displays/MSPxxxx/#lcd-configuration","text":"The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: 1 2 3 4 5 6 7 8 9 10 11 lolin24 = -D ILI9341_DRIVER = 1 -D TFT_WIDTH = 240 -D TFT_HEIGHT = 320 -D TFT_ROTATION = 0 ; Use default, see TFT_ROTATION values -D SPI_FREQUENCY = 40000000 -D SPI_TOUCH_FREQUENCY = 2500000 -D SPI_READ_FREQUENCY = 20000000 -D USER_SETUP_LOADED = 1 -D TOUCH_DRIVER = 2046 ; XPT2046 Resistive SPI touch panel driver -D SUPPORT_TRANSACTIONS","title":"LCD Configuration"},{"location":"displays/MSPxxxx/#hasp-build_flags","text":"Specify the LCD Configuration to use and define the GPIOs in the environment build flags: 1 2 3 4 5 6 7 8 9 10 11 12 13 build_flags = ${env.build_flags} ${esp32.build_flags} ;region -- TFT_eSPI build options ------------------------ ${lcd.lolin24} ${esp32.vspi} ; Use VSPI hardware SPI bus -D TFT_DC = 5 -D TFT_CS = 26 -D TFT_RST = -1 ; RST -D TFT_BCKL = -1 ; None, configurable via web UI (e.g. 21) -D TOUCH_CS = 17 ; (can also be 22 or 16) ;endregion","title":"HASP build_flags"},{"location":"displays/Waveshare_RPi_LCD_Rev_C/","text":"Waveshare RPi LCD (Rev C) This screen comes in 3.5\" and 4.0\" sizes. 6 GPIOs are required to drive the SPI display. One additional GPIO is needed for the XPT2046 touch sensor and one extra GPIO for backlight dimming. Including the VCC and GND pins, a total of 13 connections need to be made to the MCU: Pin Configuration ~ Pin Function ESP32 Pin Config Name Display Pin 1 Module Power 3.3V 3.3V 3.3V 2 Module Power 5v 5V 5V 3 Not connected NC 4 5V 5-10 Not connected NC 11 Touch Interrupt NC TP_IRQ 12 (*) LED Backlight PWM TFT_BCKL LCD_LED 13 Not connected NC 14 Module Ground GND GND 15-16 Not connected NC 17 Module Power 3.3V 3.3V 18 Data Command control pin GPIO4 TFT_DC LCD_RS 19 SPI Master Out Slave In GPIO23 TFT_MOSI LCD/SI/TP_SI 20 Not connected NC 21 Touch Panel Slave Out GPIO19 TFT_MISO TP_SO 22 LCD Reset pin GPIO32 TFT_RST RST 23 SPI Clock GPIO18 TFT_SCLK LCD_SCK/TP_SCK 24 Chip select control pin GPIO15 TFT_CS LCD_CS 25 Module Ground GND GND 26 Touch Chip Select GPIO22 TOUCH_CS TP_CS SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller. Backlight Control ~ Attention (*) Only the WaveShare 4.0\" RPi LCD Revision C (SKU 16099) and WaveShare 3.5\" RPi LCD Revision C (SKU 15811) have a solder jumper on the back to enable PWM backlight dimming. Other revisions of this board do not have this feature. LCD Configuration ~ The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: 1 2 3 4 5 6 7 8 9 10 11 raspberrypi = -D RPI_DISPLAY_TYPE = 1 -D ST7796_DRIVER = 1 -D TFT_WIDTH = 320 -D TFT_HEIGHT = 480 -D TFT_ROTATION = 0 ; 0=0, 1=90, 2=180 or 3=270 degree -D SPI_FREQUENCY = 80000000 -D SPI_TOUCH_FREQUENCY = 2500000 -D USER_SETUP_LOADED = 1 -D TOUCH_DRIVER = 2046 ; XPT2046 Resistive touch panel driver -D SUPPORT_TRANSACTIONS HASP build_flags ~ Specify the LCD Configuration to use and define the 7 GPIOs in the environment build flags: 1 2 3 4 5 6 7 8 9 10 build_flags = ${flags.esp32_flags} ; -- TFT_eSPI build options ------------------------ ${lcd.raspberrypi} ${esp32.vspi} ; Use VSPI hardware SPI bus -D TFT_CS = 15 -D TFT_DC = 4 -D TFT_RST = 32 -D TFT_BCKL = -1 ; None, configurable via web UI (e.g. 21) -D TOUCH_CS = 22","title":"Waveshare RPi LCD Rev C"},{"location":"displays/Waveshare_RPi_LCD_Rev_C/#pin-configuration","text":"Pin Function ESP32 Pin Config Name Display Pin 1 Module Power 3.3V 3.3V 3.3V 2 Module Power 5v 5V 5V 3 Not connected NC 4 5V 5-10 Not connected NC 11 Touch Interrupt NC TP_IRQ 12 (*) LED Backlight PWM TFT_BCKL LCD_LED 13 Not connected NC 14 Module Ground GND GND 15-16 Not connected NC 17 Module Power 3.3V 3.3V 18 Data Command control pin GPIO4 TFT_DC LCD_RS 19 SPI Master Out Slave In GPIO23 TFT_MOSI LCD/SI/TP_SI 20 Not connected NC 21 Touch Panel Slave Out GPIO19 TFT_MISO TP_SO 22 LCD Reset pin GPIO32 TFT_RST RST 23 SPI Clock GPIO18 TFT_SCLK LCD_SCK/TP_SCK 24 Chip select control pin GPIO15 TFT_CS LCD_CS 25 Module Ground GND GND 26 Touch Chip Select GPIO22 TOUCH_CS TP_CS SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller.","title":"Pin Configuration"},{"location":"displays/Waveshare_RPi_LCD_Rev_C/#backlight-control","text":"Attention (*) Only the WaveShare 4.0\" RPi LCD Revision C (SKU 16099) and WaveShare 3.5\" RPi LCD Revision C (SKU 15811) have a solder jumper on the back to enable PWM backlight dimming. Other revisions of this board do not have this feature.","title":"Backlight Control"},{"location":"displays/Waveshare_RPi_LCD_Rev_C/#lcd-configuration","text":"The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: 1 2 3 4 5 6 7 8 9 10 11 raspberrypi = -D RPI_DISPLAY_TYPE = 1 -D ST7796_DRIVER = 1 -D TFT_WIDTH = 320 -D TFT_HEIGHT = 480 -D TFT_ROTATION = 0 ; 0=0, 1=90, 2=180 or 3=270 degree -D SPI_FREQUENCY = 80000000 -D SPI_TOUCH_FREQUENCY = 2500000 -D USER_SETUP_LOADED = 1 -D TOUCH_DRIVER = 2046 ; XPT2046 Resistive touch panel driver -D SUPPORT_TRANSACTIONS","title":"LCD Configuration"},{"location":"displays/Waveshare_RPi_LCD_Rev_C/#hasp-build_flags","text":"Specify the LCD Configuration to use and define the 7 GPIOs in the environment build flags: 1 2 3 4 5 6 7 8 9 10 build_flags = ${flags.esp32_flags} ; -- TFT_eSPI build options ------------------------ ${lcd.raspberrypi} ${esp32.vspi} ; Use VSPI hardware SPI bus -D TFT_CS = 15 -D TFT_DC = 4 -D TFT_RST = 32 -D TFT_BCKL = -1 ; None, configurable via web UI (e.g. 21) -D TOUCH_CS = 22","title":"HASP build_flags"},{"location":"displays/lolin-tft-shield/","text":"Lolin TFT 2.4\" Touch Shield ~ ~ This Lolin TFT has a 2.4\" touchscreen with XPT2046 resistive touch controller. There are 3 ways to connect an ESP32: Plug a compatible ESP32 onto the female headers on the back Attach a LOLIN D32 Pro V2.0 using the 10-pin TFT connector and cable Solder headers onto the bottom pinholes for pluging into a breadboard or jumper cables for any other ESP32 Pros Cons Plug-and-play Resistive touchscreen Limited soldering required Availability Choice of several ESP32 MCUs Price Buy Compatible ESP32 dev boards ~ The Lolin TFT 2.4\" headers are plug-and-play compatible with these development boards, no need to use any jumper cables: Model Minimal Better Best SKU D1 Mini ESP32 TTGO T7 V1.5 Mini32 Lolin D32 Pro V2.0 MCU ESP32-WROOM ESP32-WROVER ESP32-WROVER Flash 4 MB 4 MB 4 or 16 MB PSram No 8 MB 8 MB Connection Two 1x8 Pinheaders\u00b2 Two 1x8 Pinheaders\u00b2 10-pin TFT cable (optional) SD Card no no yes Battery charging no yes yes USB Chip CH9102F CH340C Screen dimming yes yes yes Buy Buy Buy Warning The D1 Mini ESP32 board may suffer from brown-out reboots if not powered adequately. Note (\u00b2) Because the board is developed for the D1-mini, you must only solder a row of 1x8 male pins to pads TXD-5V and RST-3V3 each. Product Video ~ Backlight Control ~ To use PWM dimming on the Lolin TFT 2.4\" you must connect the TFT-LED pin to either D1 or D2. D1 is recommended for backlight control and configured by default in the firmware. Warning Do not use D3 for backlight control because it is already in use for touch! Do not use D4 for backlight control because it is already in use for PSram on the ESP32-WROVER, also the D1-mini has D4 connected to the on-board LED and boot fails if pulled LOW Documentation ~ Wemos Wiki :material-file-pdf-outline: Schematics Dimensions ~","title":"Lolin TFT Shield"},{"location":"displays/lolin-tft-shield/#lolin-tft-24-touch-shield","text":"","title":"Lolin TFT 2.4\" Touch Shield"},{"location":"displays/lolin-tft-shield/#_1","text":"This Lolin TFT has a 2.4\" touchscreen with XPT2046 resistive touch controller. There are 3 ways to connect an ESP32: Plug a compatible ESP32 onto the female headers on the back Attach a LOLIN D32 Pro V2.0 using the 10-pin TFT connector and cable Solder headers onto the bottom pinholes for pluging into a breadboard or jumper cables for any other ESP32 Pros Cons Plug-and-play Resistive touchscreen Limited soldering required Availability Choice of several ESP32 MCUs Price Buy","title":""},{"location":"displays/lolin-tft-shield/#compatible-esp32-dev-boards","text":"The Lolin TFT 2.4\" headers are plug-and-play compatible with these development boards, no need to use any jumper cables: Model Minimal Better Best SKU D1 Mini ESP32 TTGO T7 V1.5 Mini32 Lolin D32 Pro V2.0 MCU ESP32-WROOM ESP32-WROVER ESP32-WROVER Flash 4 MB 4 MB 4 or 16 MB PSram No 8 MB 8 MB Connection Two 1x8 Pinheaders\u00b2 Two 1x8 Pinheaders\u00b2 10-pin TFT cable (optional) SD Card no no yes Battery charging no yes yes USB Chip CH9102F CH340C Screen dimming yes yes yes Buy Buy Buy Warning The D1 Mini ESP32 board may suffer from brown-out reboots if not powered adequately. Note (\u00b2) Because the board is developed for the D1-mini, you must only solder a row of 1x8 male pins to pads TXD-5V and RST-3V3 each.","title":"Compatible ESP32 dev boards"},{"location":"displays/lolin-tft-shield/#product-video","text":"","title":"Product Video"},{"location":"displays/lolin-tft-shield/#backlight-control","text":"To use PWM dimming on the Lolin TFT 2.4\" you must connect the TFT-LED pin to either D1 or D2. D1 is recommended for backlight control and configured by default in the firmware. Warning Do not use D3 for backlight control because it is already in use for touch! Do not use D4 for backlight control because it is already in use for PSram on the ESP32-WROVER, also the D1-mini has D4 connected to the on-board LED and boot fails if pulled LOW","title":"Backlight Control"},{"location":"displays/lolin-tft-shield/#documentation","text":"Wemos Wiki :material-file-pdf-outline: Schematics","title":"Documentation"},{"location":"displays/lolin-tft-shield/#dimensions","text":"","title":"Dimensions"},{"location":"installation/esp32/","text":"Flash ESP32 ~ Download the firmware ~ Go to the releases page on GitHub to download the latest openHASP binaries. Get the full binary file for your ESP32 device: e.g. d1-mini-esp32_ili9341_full_4MB_v0.6.0.bin Note You can also download the nightly openHASP firmware.zip file from the Actions tab on Github. Flash ESP32 ~ Important When flashing openHASP onto the ESP32 for the first time, you need to flash it over serial using the full firmware binary file. You need to write the full binary to the ESP32 flash chip at address 0x0 . The full binary also contains a bootloader and partition scheme needed to properly boot the ESP32. Before starting the flash process you have to put the ESP into flash mode : Connect GPIO0 to GND before booting the devide Power-on or reset the ESP while GPIO0 is connected to GND Start the flash process The actual procedure to flash the ESP32 depends on the tool used. Click on the tab below that matches your flash tool: ESPtool.py 1 2 esptool.py --port COM1 erase_flash esptool.py --port COM1 --baud 921600 write_flash 0x0 d1-mini-esp32_ili9341_full_4MB_<version>.bin Change COM1 to the correct port on your computer. If you get an error at the end of the flash procedure, you can try with a lower the baudrate eg. 460800. Tasmota-PyFlasher Tasmota-PyFlasher is a simple GUI tool for flashing ESP32 firmware wihout any installation. Change COM7 to the correct port on your computer. ESP Flash Tools Espressif provides their own Flash Download Tools for Windows. Change COM90 to the correct port on your computer.","title":"ESP32"},{"location":"installation/esp32/#flash-esp32","text":"","title":"Flash ESP32"},{"location":"installation/esp32/#download-the-firmware","text":"Go to the releases page on GitHub to download the latest openHASP binaries. Get the full binary file for your ESP32 device: e.g. d1-mini-esp32_ili9341_full_4MB_v0.6.0.bin Note You can also download the nightly openHASP firmware.zip file from the Actions tab on Github.","title":"Download the firmware"},{"location":"installation/esp32/#flash-esp32_1","text":"Important When flashing openHASP onto the ESP32 for the first time, you need to flash it over serial using the full firmware binary file. You need to write the full binary to the ESP32 flash chip at address 0x0 . The full binary also contains a bootloader and partition scheme needed to properly boot the ESP32. Before starting the flash process you have to put the ESP into flash mode : Connect GPIO0 to GND before booting the devide Power-on or reset the ESP while GPIO0 is connected to GND Start the flash process The actual procedure to flash the ESP32 depends on the tool used. Click on the tab below that matches your flash tool: ESPtool.py 1 2 esptool.py --port COM1 erase_flash esptool.py --port COM1 --baud 921600 write_flash 0x0 d1-mini-esp32_ili9341_full_4MB_<version>.bin Change COM1 to the correct port on your computer. If you get an error at the end of the flash procedure, you can try with a lower the baudrate eg. 460800. Tasmota-PyFlasher Tasmota-PyFlasher is a simple GUI tool for flashing ESP32 firmware wihout any installation. Change COM7 to the correct port on your computer. ESP Flash Tools Espressif provides their own Flash Download Tools for Windows. Change COM90 to the correct port on your computer.","title":"Flash ESP32"},{"location":"installation/esp8266/","text":"Flash ESP8266 ~ The performance of the ESP8266 will be slow due to its low memory and CPU frequency. It is okay for getting started, for small project where speed is not needed or when you have one at hand. Warning ESP8266 support will be removed in a future update. Please migrate to the ESP32. Download the firmware ~ Go to the releases page on GitHub to download the latest openHASP binaries. Pick the one appropriate for ESP8266: d1-mini-esp8266_ili9341_v0.6.0.bin Note You can also download the nightly openHASP firmware.zip file from the Actions tab on Github. Install the firmware ~ Flash ESP8266 ~ For ESP8266 you only need one single .bin file: Using Tasmotizer ~ Using esp-tool.py ~ When flashing the ESP8266 for the first time, it is best to erase the flash before uploading the new firmware: 1 2 esptool.py -p \"COM1\" erase_flash esptool.py -p \"COM1\" write_flash --flash_mode qio 0x0 d1-mini-esp8266_ili9341_v0.6.0.bin Change COM1 to the correct port on your computer and 4m to the correct size of the internal flash chip.","title":"ESP8266"},{"location":"installation/esp8266/#flash-esp8266","text":"The performance of the ESP8266 will be slow due to its low memory and CPU frequency. It is okay for getting started, for small project where speed is not needed or when you have one at hand. Warning ESP8266 support will be removed in a future update. Please migrate to the ESP32.","title":"Flash ESP8266"},{"location":"installation/esp8266/#download-the-firmware","text":"Go to the releases page on GitHub to download the latest openHASP binaries. Pick the one appropriate for ESP8266: d1-mini-esp8266_ili9341_v0.6.0.bin Note You can also download the nightly openHASP firmware.zip file from the Actions tab on Github.","title":"Download the firmware"},{"location":"installation/esp8266/#install-the-firmware","text":"","title":"Install the firmware"},{"location":"installation/esp8266/#flash-esp8266_1","text":"For ESP8266 you only need one single .bin file:","title":"Flash ESP8266"},{"location":"installation/firmware-update/","text":"Firmware Update ~ ESP Firmware Update ~ Serial Upload ~ Either use Tasmotizer or esptool.py to upload a new firmware file to the ESP. This procedure is the same as the initial installation. HTTP Upload ~ When the ESP has previously been flashed via serial, you can upload a new ota firmware binary using the internal webserver. HTTP Update ~ When the ESP has previously been flashed via serial you can download and install a new ota firmware binary directly from an webserver. OTA Upload ~ When the ESP has previously been flashed via serial, subsequent updates can be performed Over-the-Air from within PlatformIO. STM32F4xx Firmware Update ~","title":"Firmware Update"},{"location":"installation/firmware-update/#firmware-update","text":"","title":"Firmware Update"},{"location":"installation/firmware-update/#esp-firmware-update","text":"","title":"ESP Firmware Update"},{"location":"installation/firmware-update/#serial-upload","text":"Either use Tasmotizer or esptool.py to upload a new firmware file to the ESP. This procedure is the same as the initial installation.","title":"Serial Upload"},{"location":"installation/firmware-update/#http-upload","text":"When the ESP has previously been flashed via serial, you can upload a new ota firmware binary using the internal webserver.","title":"HTTP Upload"},{"location":"installation/firmware-update/#http-update","text":"When the ESP has previously been flashed via serial you can download and install a new ota firmware binary directly from an webserver.","title":"HTTP Update"},{"location":"installation/firmware-update/#ota-upload","text":"When the ESP has previously been flashed via serial, subsequent updates can be performed Over-the-Air from within PlatformIO.","title":"OTA Upload"},{"location":"installation/firmware-update/#stm32f4xx-firmware-update","text":"","title":"STM32F4xx Firmware Update"},{"location":"installation/installation/","text":"Installation Download the firmware ~ Go to the releases page on GitHub to download the latest openHASP binaries. There are currently 2 download options, pick the one appropriate for your hardware: openHASP-0.2.0-esp32_ili9341_spi.bin + boot files openHASP-0.2.0-esp8266_ili9341_spi.bin Note If no precompiled firmware file is available for your board you can configure, compile and upload the firmware yourself using PlatformIO. Install the firmware ~ Flash ESP32 ~ When flashing the ESP32 for the first time, you need to install a bootloader, partition scheme and application loader: 1 2 3 4 esptool.py --port \"COM1\" erase_flash esptool.py --port \"COM1\" write_flash 0x1000 bootloader_dio_40m.bin --flash_mode dio --flash_freq 40m esptool.py --port \"COM1\" write_flash 0x8000 partitions.bin esptool.py --port \"COM1\" write_flash 0xe000 boot_app0.bin Change COM1 to the correct port on your computer. then flash the actual firmware: 1 esptool.py -p \"COM1\" --baud 921600 write_flash 0x10000 d1-mini-esp32_ili9341_<version>.bin or all previous steps in one long command line: 1 esptool.py -p \"COM1\" --baud 921600 --before default_reset --after hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size detect 0x1000 bootloader_dio_40m.bin 0x8000 partitions.bin 0xe000 boot_app0.bin 0x10000 d1-mini-esp32_ili9341_<version>.bin Flash ESP8266 ~ Unlike the ESP32, for ESP8266 you only need one single .bin file: Using Tasmotizer (Windows) ~ Using esp-tool.py ~ 1 esptool.py -p \"COM1\" write_flash --flash_mode qio --flash_size 4m 0x0 d1-mini-esp8266_ili9341_<version>.bin Change COM1 to the correct port on your computer and 4m to the correct size of the internal flash chip. STM32F407 devEbox ~ Note There is no precompiled firmware file available for STM32F4 boards. You will need to configure, compile and upload the firmware yourself using PlatformIO. Using Serial ~ Connect your serial TTL adapter RX and TX pins to PA9 and PA10 of the devEbox. Place the boot jumpers into programming mode Reset the board. Upload the firmware using: Using DFU (USB) ~ Connect your serial TTL adapter RX and TX pins to PA9 and PA10 of the devEbox. Place the boot jumpers into programming mode Reset the board. Upload the firmware using: Using ST Link (USB) ~ Install ST Link software Connect the devEbox using the USB port Launch ST Link Select the openHASP-0.2.0-stm32f407_devEbox_3.2_ili9341_fsmc.bin file Flash the firmware to the board","title":"Installation"},{"location":"installation/installation/#download-the-firmware","text":"Go to the releases page on GitHub to download the latest openHASP binaries. There are currently 2 download options, pick the one appropriate for your hardware: openHASP-0.2.0-esp32_ili9341_spi.bin + boot files openHASP-0.2.0-esp8266_ili9341_spi.bin Note If no precompiled firmware file is available for your board you can configure, compile and upload the firmware yourself using PlatformIO.","title":"Download the firmware"},{"location":"installation/installation/#install-the-firmware","text":"","title":"Install the firmware"},{"location":"installation/installation/#flash-esp32","text":"When flashing the ESP32 for the first time, you need to install a bootloader, partition scheme and application loader: 1 2 3 4 esptool.py --port \"COM1\" erase_flash esptool.py --port \"COM1\" write_flash 0x1000 bootloader_dio_40m.bin --flash_mode dio --flash_freq 40m esptool.py --port \"COM1\" write_flash 0x8000 partitions.bin esptool.py --port \"COM1\" write_flash 0xe000 boot_app0.bin Change COM1 to the correct port on your computer. then flash the actual firmware: 1 esptool.py -p \"COM1\" --baud 921600 write_flash 0x10000 d1-mini-esp32_ili9341_<version>.bin or all previous steps in one long command line: 1 esptool.py -p \"COM1\" --baud 921600 --before default_reset --after hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size detect 0x1000 bootloader_dio_40m.bin 0x8000 partitions.bin 0xe000 boot_app0.bin 0x10000 d1-mini-esp32_ili9341_<version>.bin","title":"Flash ESP32"},{"location":"installation/installation/#flash-esp8266","text":"Unlike the ESP32, for ESP8266 you only need one single .bin file:","title":"Flash ESP8266"},{"location":"installation/installation/#stm32f407-devebox","text":"Note There is no precompiled firmware file available for STM32F4 boards. You will need to configure, compile and upload the firmware yourself using PlatformIO.","title":"STM32F407 devEbox"},{"location":"installation/stm32/","text":"Flash STM32 ~ Experimental MCUs ~ Recommended Boards ~ table th:first-of-type { width: 12%; } table th:nth-of-type(2) { width: 22%; } table th:nth-of-type(3) { width: 22%; } table th:nth-of-type(4) { width: 22%; } table th:last-of-type { width: 22%; } Basic Standard Pro Experimental MCU ESP8266 ESP32-WROOM ESP32-WROVER STM32F4 CPU Freq. 80Mhz 240Mhz 240Mhz 168 MHz Ram 80Kb 520Kb 520Kb 192Kb PSRam no no yes no Minimal Flash 4MB 4MB 4MB 512Kb Display ILI9341 SPI ILI9341 SPI ILI9341 SPI ILI9341 FSMC Touch XPT2046 SPI XPT2046 SPI XPT2046 SPI XPT2046 SPI Network Wi-Fi Wi-Fi Wi-Fi Ethernet / Wi-Fi Dev. Board* [D1 mini ESP8266][3]{target=_blank} [D1 mini ESP32][4]{target=_blank} [TTGO T7 v1.5 Mini32][5]{target=_blank} STM32F407VET/ZGT Black Firmware Download Download Download STM32F407xxT Black Combo ~ There are several cheap STM32F407xx Black boards available on the market with a TFT display header and accompanying 3.2\" ILI9341 FSMC screen (320x240). This hardware is experimental and not fully supported. Selection of STM32F407 boards. Make sure to purchase a compatible screen, preferably from the same vendor. There are multiple FSMC interfaces: e.g. One is marked TFT , another is marked New-TFT and a third has no markings. The pinout of each header & display is different and are not interchangeable! You can however use jumper cables instead, but it won't be plug-and-plug anymore. The following boards are being tested: STM32F407VET6 Black (v2.1) with 512 KB flash ~ STM32F407VET6 Black (v2.0 and v2.1) Purchase Links: AliExpress AliExpress AliExpress (! V2.0 !) Documentation can be found on GitHub STM32F407ZGT6 Black (V3.0) with 1 MB flash ~ STM32F407ZGT6 Black (v3.0) Purchase Link: Documentation can be found on GitHub Attention The STM32F4 boards do not have network connectivity. You can use a compatible network adapter and configure it in PlatformIO. Images of STM32 boards are CC BY-NC 4.0 from https://stm32-base.org/","title":"Flash STM32"},{"location":"installation/stm32/#flash-stm32","text":"","title":"Flash STM32"},{"location":"installation/stm32/#experimental-mcus","text":"","title":"Experimental MCUs"},{"location":"installation/stm32/#recommended-boards","text":"table th:first-of-type { width: 12%; } table th:nth-of-type(2) { width: 22%; } table th:nth-of-type(3) { width: 22%; } table th:nth-of-type(4) { width: 22%; } table th:last-of-type { width: 22%; } Basic Standard Pro Experimental MCU ESP8266 ESP32-WROOM ESP32-WROVER STM32F4 CPU Freq. 80Mhz 240Mhz 240Mhz 168 MHz Ram 80Kb 520Kb 520Kb 192Kb PSRam no no yes no Minimal Flash 4MB 4MB 4MB 512Kb Display ILI9341 SPI ILI9341 SPI ILI9341 SPI ILI9341 FSMC Touch XPT2046 SPI XPT2046 SPI XPT2046 SPI XPT2046 SPI Network Wi-Fi Wi-Fi Wi-Fi Ethernet / Wi-Fi Dev. Board* [D1 mini ESP8266][3]{target=_blank} [D1 mini ESP32][4]{target=_blank} [TTGO T7 v1.5 Mini32][5]{target=_blank} STM32F407VET/ZGT Black Firmware Download Download Download","title":"Recommended Boards"},{"location":"installation/wifi-setup/","text":"Wi-Fi Setup ~ At first boot, when no Wi-Fi setup is found, the device will create an initial Access Point for configuring the device. If the touchscreen is properly connected it will display a QR code, along with a temporary SSID and password, to connect to the device. Tip To skip this step, Wi-Fi credentials can be saved into the .bin file when you compile the firmware yourself using customization . Either use the touchscreen interface or connect via a web browser to setup the credentials for your local Wi-Fi access point: Using Touchscreen ~ Tap on the screen to start a Touch Calibration sequence: Precisely touch the 4 corners as indicated Use the on-screen keyboard to enter your local SSID and password Tap on the Checkmark button in the lower righthand corner to save the settings The device will validate the entered credentials and reboot if they are correct. Using Wi-Fi Access-Point ~ Connect to the temporary Access Point by scanning the QR on the display, if available. Or Check the serial log for the SSID and password to connect. Browse to http://192.168.4.1 Enter your local SSID and password for joining the device to your wireless network Click Save Settings The device will automatically reboot and connect to your wireless LAN Using Command line ~ You can also directly configure the Wi-Fi settings via the serial console: 1 2 3 ssid myAccessPointName pass myWifiPassword reboot","title":"Wifi Setup"},{"location":"installation/wifi-setup/#wi-fi-setup","text":"At first boot, when no Wi-Fi setup is found, the device will create an initial Access Point for configuring the device. If the touchscreen is properly connected it will display a QR code, along with a temporary SSID and password, to connect to the device. Tip To skip this step, Wi-Fi credentials can be saved into the .bin file when you compile the firmware yourself using customization . Either use the touchscreen interface or connect via a web browser to setup the credentials for your local Wi-Fi access point:","title":"Wi-Fi Setup"},{"location":"installation/wifi-setup/#using-touchscreen","text":"Tap on the screen to start a Touch Calibration sequence: Precisely touch the 4 corners as indicated Use the on-screen keyboard to enter your local SSID and password Tap on the Checkmark button in the lower righthand corner to save the settings The device will validate the entered credentials and reboot if they are correct.","title":"Using Touchscreen"},{"location":"installation/wifi-setup/#using-wi-fi-access-point","text":"Connect to the temporary Access Point by scanning the QR on the display, if available. Or Check the serial log for the SSID and password to connect. Browse to http://192.168.4.1 Enter your local SSID and password for joining the device to your wireless network Click Save Settings The device will automatically reboot and connect to your wireless LAN","title":"Using Wi-Fi Access-Point"},{"location":"installation/wifi-setup/#using-command-line","text":"You can also directly configure the Wi-Fi settings via the serial console: 1 2 3 ssid myAccessPointName pass myWifiPassword reboot","title":"Using Command line"},{"location":"integrations/examples/example-dashui/","text":"Dash UI Layout Code To add an openHASP plate to your installation with the Dash UI sample configuration: in the plate's web UI select Material Light UI theme, choose a purple color in the Hue color bar and reboot, upload a pages.jsonl file with the folowing content to your plate's flash memory and reboot: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 { \"page\" : 1 , \"comment\" : \"---------- Page 1 ----------\" } { \"page\" : 1 , \"id\" : 0 , \"bg_color\" : \"#FFFFFF\" , \"bg_grad_color\" : \"#FFFFFF\" , \"text_color\" : \"#000000\" , \"radius\" : 0 , \"border_side\" : 0 } { \"page\" : 1 , \"id\" : 1 , \"obj\" : \"btn\" , \"x\" : 0 , \"y\" : 0 , \"w\" : 240 , \"h\" : 30 , \"text\" : \"LIVING ROOM\" , \"value_font\" : 22 , \"bg_color\" : \"#2C3E50\" , \"bg_grad_color\" : \"#2C3E50\" , \"text_color\" : \"#FFFFFF\" , \"radius\" : 0 , \"border_side\" : 0 } { \"page\" : 1 , \"id\" : 2 , \"obj\" : \"arc\" , \"x\" : 5 , \"y\" : 45 , \"w\" : 140 , \"h\" : 100 , \"max\" : 40 , \"border_side\" : 0 , \"type\" : 0 , \"rotation\" : 0 , \"start_angle\" : 180 , \"end_angle\" : 0 , \"start_angle1\" : 180 , \"value_font\" : 12 , \"value_ofs_x\" : -19 , \"value_ofs_y\" : -4 , \"bg_opa\" : 0 } { \"page\" : 1 , \"id\" : 3 , \"obj\" : \"arc\" , \"x\" : 130 , \"y\" : 45 , \"w\" : 140 , \"h\" : 100 , \"max\" : 100 , \"border_side\" : 0 , \"type\" : 0 , \"start_angle\" : 180 , \"end_angle\" : 0 , \"start_angle1\" : 180 , \"value_font\" : 12 , \"value_color\" : \"#000000\" , \"value_ofs_x\" : -19 , \"value_ofs_y\" : -4 , \"bg_opa\" : 0 } { \"page\" : 1 , \"id\" : 4 , \"obj\" : \"btn\" , \"x\" : 0 , \"y\" : 120 , \"w\" : 240 , \"h\" : 20 , \"val\" : 0 , \"text\" : \"CO2 levels: \" , \"radius\" : 0 , \"border_side\" : 0 } { \"page\" : 1 , \"id\" : 5 , \"obj\" : \"label\" , \"x\" : 2 , \"y\" : 35 , \"w\" : 140 , \"text\" : \"Temperature\" } { \"page\" : 1 , \"id\" : 6 , \"obj\" : \"label\" , \"x\" : 140 , \"y\" : 35 , \"w\" : 140 , \"text\" : \"Humidity\" } { \"page\" : 1 , \"id\" : 7 , \"obj\" : \"btn\" , \"x\" : 0 , \"y\" : 160 , \"w\" : 240 , \"h\" : 20 , \"text\" : \"LIGHTS\" , \"bg_color\" : \"#F1C40F\" , \"text_color\" : \"#FFFFFF\" , \"radius\" : 0 , \"border_side\" : 0 } { \"page\" : 1 , \"id\" : 8 , \"obj\" : \"label\" , \"x\" : 20 , \"y\" : 190 , \"w\" : 140 , \"h\" : 20 , \"text\" : \"Ceiling Light\" } { \"page\" : 1 , \"id\" : 9 , \"obj\" : \"switch\" , \"x\" : 160 , \"y\" : 190 , \"w\" : 40 , \"h\" : 20 , \"toggle\" : \"TRUE\" } { \"page\" : 1 , \"id\" : 10 , \"obj\" : \"label\" , \"x\" : 20 , \"y\" : 215 , \"w\" : 140 , \"h\" : 20 , \"text\" : \"Wall Light\" } { \"page\" : 1 , \"id\" : 11 , \"obj\" : \"switch\" , \"x\" : 160 , \"y\" : 215 , \"w\" : 40 , \"h\" : 20 , \"toggle\" : \"TRUE\" } { \"page\" : 1 , \"id\" : 12 , \"obj\" : \"label\" , \"x\" : 20 , \"y\" : 240 , \"w\" : 200 , \"h\" : 20 , \"text\" : \"Ambient Light\" } { \"page\" : 1 , \"id\" : 13 , \"obj\" : \"slider\" , \"x\" : 30 , \"y\" : 265 , \"w\" : 200 , \"h\" : 10 } { \"page\" : 0 , \"comment\" : \"---------- All pages ----------\" } { \"page\" : 0 , \"id\" : 11 , \"obj\" : \"btn\" , \"action\" : \"prev\" , \"x\" : 0 , \"y\" : 290 , \"w\" : 79 , \"h\" : 32 , \"bg_color\" : \"#34495E\" , \"text\" : \"\\uE141\" , \"text_color\" : \"#000000\" , \"radius\" : 0 , \"border_side\" : 0 , \"text_font\" : 32 } { \"page\" : 0 , \"id\" : 12 , \"obj\" : \"btn\" , \"action\" : \"back\" , \"x\" : 80 , \"y\" : 290 , \"w\" : 80 , \"h\" : 32 , \"bg_color\" : \"#34495E\" , \"text\" : \"\\uE2DC\" , \"text_color\" : \"#000000\" , \"radius\" : 0 , \"border_side\" : 0 , \"text_font\" : 24 } { \"page\" : 0 , \"id\" : 13 , \"obj\" : \"btn\" , \"action\" : \"next\" , \"x\" : 161 , \"y\" : 290 , \"w\" : 79 , \"h\" : 32 , \"bg_color\" : \"#34495E\" , \"text\" : \"\\uE142\" , \"text_color\" : \"#000000\" , \"radius\" : 0 , \"border_side\" : 0 , \"text_font\" : 32 } Assuming your plate's configured MQTT topic is plate35 , values for Temperature, Humidity and CO2 Sensor have to be sent from another device by publishing values to the appropriate command topic: hasp/plate35/command/p1b2.val %value% - to update Temperature arc value hasp/plate35/command/p1b2.value_str %value%\u00b0C - to update Temperature text value hasp/plate35/command/p1b3.val %value% - to update Humidity arc value hasp/plate35/command/p1b3.value_str %value% % - to update Humidity text value hasp/plate35/command/p1b4.text CO2 levels: %value% - to update CO2 level value","title":"Dash UI"},{"location":"integrations/examples/example-lovelace/","text":"Lovelace-like entities Layout Code To add an openHASP plate to your installation with a sample design looking a bit like Home Assistant's Lovelace UI: in the plate's web UI select Hasp Light UI theme and reboot, upload a pages.jsonl file with the folowing content to your plate and reboot: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 { \"page\" : 1 , \"id\" : 1 , \"obj\" : \"btn\" , \"x\" : 0 , \"y\" : 0 , \"w\" : 240 , \"h\" : 30 , \"text\" : \"ENTITIES\" , \"value_font\" : 22 , \"bg_color\" : \"#2C3E50\" , \"text_color\" : \"#FFFFFF\" , \"radius\" : 0 , \"border_side\" : 0 , \"click\" : 0 } { \"page\" : 1 , \"id\" : 2 , \"obj\" : \"obj\" , \"x\" : 5 , \"y\" : 35 , \"w\" : 230 , \"h\" : 250 , \"click\" : 0 } { \"page\" : 1 , \"id\" : 11 , \"obj\" : \"label\" , \"x\" : 8 , \"y\" : 33 , \"w\" : 35 , \"h\" : 35 , \"text\" : \"\\uE004\" , \"align\" : 1 , \"text_font\" : 32 , \"text_color\" : \"black\" } { \"page\" : 1 , \"id\" : 12 , \"obj\" : \"label\" , \"x\" : 48 , \"y\" : 43 , \"w\" : 130 , \"h\" : 30 , \"text\" : \"Presence override\" , \"align\" : 0 , \"text_font\" : 16 , \"text_color\" : \"black\" } { \"page\" : 1 , \"id\" : 13 , \"obj\" : \"switch\" , \"x\" : 177 , \"y\" : 40 , \"w\" : 50 , \"h\" : 25 , \"radius\" : 25 , \"radius2\" : 15 } { \"page\" : 1 , \"id\" : 21 , \"obj\" : \"label\" , \"x\" : 8 , \"y\" : 69 , \"w\" : 35 , \"h\" : 35 , \"text\" : \"\\uF020\" , \"align\" : 1 , \"text_font\" : 32 , \"text_color\" : \"black\" } { \"page\" : 1 , \"id\" : 22 , \"obj\" : \"label\" , \"x\" : 48 , \"y\" : 79 , \"w\" : 130 , \"h\" : 30 , \"text\" : \"Front door light\" , \"align\" : 0 , \"text_font\" : 16 , \"text_color\" : \"black\" } { \"page\" : 1 , \"id\" : 23 , \"obj\" : \"switch\" , \"x\" : 177 , \"y\" : 74 , \"w\" : 50 , \"h\" : 25 , \"radius\" : 25 , \"radius2\" : 15 } { \"page\" : 1 , \"id\" : 31 , \"obj\" : \"label\" , \"x\" : 8 , \"y\" : 103 , \"w\" : 35 , \"h\" : 35 , \"text\" : \"\\uF054\" , \"align\" : 1 , \"text_font\" : 32 , \"text_color\" : \"black\" } { \"page\" : 1 , \"id\" : 32 , \"obj\" : \"label\" , \"x\" : 48 , \"y\" : 113 , \"w\" : 130 , \"h\" : 30 , \"text\" : \"Back yard lights\" , \"align\" : 0 , \"text_font\" : 16 , \"text_color\" : \"black\" } { \"page\" : 1 , \"id\" : 33 , \"obj\" : \"switch\" , \"x\" : 177 , \"y\" : 110 , \"w\" : 50 , \"h\" : 25 , \"radius\" : 25 , \"radius2\" : 15 } { \"page\" : 1 , \"id\" : 41 , \"obj\" : \"label\" , \"x\" : 8 , \"y\" : 138 , \"w\" : 35 , \"h\" : 35 , \"text\" : \"\\uEA7A\" , \"align\" : 1 , \"text_font\" : 32 , \"text_color\" : \"black\" } { \"page\" : 1 , \"id\" : 42 , \"obj\" : \"label\" , \"x\" : 48 , \"y\" : 148 , \"w\" : 130 , \"h\" : 30 , \"text\" : \"Trash service\" , \"align\" : 0 , \"text_font\" : 16 , \"text_color\" : \"black\" } { \"page\" : 1 , \"id\" : 43 , \"obj\" : \"label\" , \"x\" : 97 , \"y\" : 148 , \"w\" : 130 , \"h\" : 30 , \"text\" : \"in 6 days\" , \"align\" : 2 , \"text_color\" : \"black\" } { \"page\" : 1 , \"id\" : 51 , \"obj\" : \"label\" , \"x\" : 8 , \"y\" : 173 , \"w\" : 35 , \"h\" : 35 , \"text\" : \"\\uF39D\" , \"align\" : 1 , \"text_font\" : 32 , \"text_color\" : \"black\" } { \"page\" : 1 , \"id\" : 52 , \"obj\" : \"label\" , \"x\" : 48 , \"y\" : 183 , \"w\" : 130 , \"h\" : 30 , \"text\" : \"Selective trash\" , \"align\" : 0 , \"text_font\" : 16 , \"text_color\" : \"black\" } { \"page\" : 1 , \"id\" : 53 , \"obj\" : \"label\" , \"x\" : 97 , \"y\" : 183 , \"w\" : 130 , \"h\" : 30 , \"text\" : \"in 10 days\" , \"align\" : 2 , \"text_color\" : \"black\" } { \"page\" : 1 , \"id\" : 61 , \"obj\" : \"label\" , \"x\" : 8 , \"y\" : 208 , \"w\" : 35 , \"h\" : 35 , \"text\" : \"\\uE32A\" , \"align\" : 1 , \"text_font\" : 32 , \"text_color\" : \"black\" } { \"page\" : 1 , \"id\" : 62 , \"obj\" : \"label\" , \"x\" : 48 , \"y\" : 218 , \"w\" : 130 , \"h\" : 30 , \"text\" : \"Green energy active\" , \"align\" : 0 , \"text_font\" : 16 , \"text_color\" : \"black\" } { \"page\" : 1 , \"id\" : 63 , \"obj\" : \"label\" , \"x\" : 97 , \"y\" : 218 , \"w\" : 130 , \"h\" : 30 , \"text\" : \"Yes :)\" , \"align\" : 2 , \"text_color\" : \"black\" } { \"page\" : 1 , \"id\" : 71 , \"obj\" : \"label\" , \"x\" : 8 , \"y\" : 243 , \"w\" : 35 , \"h\" : 35 , \"text\" : \"\\uE957\" , \"align\" : 1 , \"text_font\" : 32 , \"text_color\" : \"black\" } { \"page\" : 1 , \"id\" : 72 , \"obj\" : \"label\" , \"x\" : 48 , \"y\" : 253 , \"w\" : 130 , \"h\" : 30 , \"text\" : \"Air quality\" , \"align\" : 0 , \"text_font\" : 16 , \"text_color\" : \"black\" } { \"page\" : 1 , \"id\" : 73 , \"obj\" : \"label\" , \"x\" : 97 , \"y\" : 253 , \"w\" : 130 , \"h\" : 30 , \"text\" : \"OK (29.58 \u00b5g/m\u00b3)\" , \"align\" : 2 , \"text_color\" : \"black\" } Check out the pagination example to learn how to implement the bottom bar. Check out the clock and temperature example to learn how to implement values to the top. Check out the Lovelace cover example to learn how to bring life to the objects.","title":"Lovelace Entities"},{"location":"integrations/examples/example-offlinehandling/","text":"Handle offline state openHASP can detect the state when the plate is disconnected from the network. With Group ID object property combined with batch processing , objects on the screen can act on locally connected devices without using the home automation system - letting you use only these devices when the network is down. Prerequisites In the use case presented below, the following assumptions are made: you have a plate with 2 local relays (configured on output GPIOs as lights), each relay added to a different group (Group 1 and 2 respectively). you want to have 2 toggle buttons on the screen acting directly on these relays when the plate is not yet, or disconnected from the WiFi network. No page navigation is needed as no other objects related to the home automation services have to be displayed. The buttons have the groupid property set to 1 and 2 respectively. Configuration In the plate's web UI keep the default /pages.jsonl as Startup Layout. This will load immediately after plate boot, before the pate is connected to the network. If your network is not available after boot, this page configuration will be on screen while the plate keeps connecting in the background. pages.jsonl - loaded at boot, has only with objects related to local relays, and displays the hostname: 1 2 3 4 5 { \"page\" : 1 , \"id\" : 1 , \"obj\" : \"btn\" , \"x\" : 0 , \"y\" : 0 , \"w\" : 240 , \"h\" : 30 , \"text\" : \"LIGHTS\" , \"text_font\" : 16 , \"bg_color\" : \"#2C3E50\" , \"text_color\" : \"#FFFFFF\" , \"radius\" : 0 , \"border_side\" : 0 , \"click\" : 0 } { \"page\" : 1 , \"id\" : 2 , \"obj\" : \"btn\" , \"x\" : 10 , \"y\" : 40 , \"w\" : 220 , \"h\" : 115 , \"toggle\" : true , \"text\" : \"\\uE335\" , \"text_font\" : 32 , \"mode\" : \"break\" , \"align\" : 1 , \"radius\" : 20 , \"groupid\" : 1 } { \"page\" : 1 , \"id\" : 3 , \"obj\" : \"btn\" , \"x\" : 10 , \"y\" : 165 , \"w\" : 220 , \"h\" : 115 , \"toggle\" : true , \"text\" : \"\\uE335\" , \"text_font\" : 32 , \"mode\" : \"break\" , \"align\" : 1 , \"radius\" : 20 , \"groupid\" : 2 } { \"page\" : 1 , \"id\" : 98 , \"obj\" : \"btn\" , \"x\" : 0 , \"y\" : 290 , \"w\" : 240 , \"h\" : 30 , \"bg_color\" : \"#2C3E50\" , \"text_color\" : \"#FFFFFF\" , \"radius\" : 0 , \"border_side\" : 0 , \"click\" : 0 } { \"page\" : 1 , \"id\" : 99 , \"obj\" : \"label\" , \"x\" : 0 , \"y\" : 295 , \"w\" : 240 , \"align\" : \"center\" , \"text\" : \"%hostname%\" , \"text_color\" : \"#FFFFFF\" } You can use batch processing and create scripts which run when the plate connects to the WiFi network or loses connection from it. online.cmd - batch script to run after connected to the WiFi network, it will clear the screen and load the pages with objects related to the home automation: 1 2 clearpage all run /pages_online.jsonl pages_online.jsonl - to be loaded after connected to the WiFi network: Put in pages_online.jsonl the main configuration for the pages you'd like to use when the pate is connected to the network and the home automation system. See integrations examples corresponding to the home automation system you have. offline.cmd - batch script to run when connection is lost from the WiFi network, it will clear the screen and load the page only with objects related to local relays: 1 2 clearpage all run /pages_offline.jsonl pages_offline.jsonl - to be loaded after connection is lost to the WiFi network, has only with objects related to local relays: 1 2 3 4 { \"page\" : 1 , \"id\" : 1 , \"obj\" : \"btn\" , \"x\" : 0 , \"y\" : 0 , \"w\" : 240 , \"h\" : 30 , \"text\" : \"LIGHTS\" , \"text_font\" : 16 , \"bg_color\" : \"#2C3E50\" , \"text_color\" : \"#FFFFFF\" , \"radius\" : 0 , \"border_side\" : 0 , \"click\" : 0 } { \"page\" : 1 , \"id\" : 2 , \"obj\" : \"btn\" , \"x\" : 10 , \"y\" : 40 , \"w\" : 220 , \"h\" : 115 , \"toggle\" : true , \"text\" : \"\\uE335\" , \"text_font\" : 32 , \"mode\" : \"break\" , \"align\" : 1 , \"radius\" : 20 , \"groupid\" : 1 } { \"page\" : 1 , \"id\" : 3 , \"obj\" : \"btn\" , \"x\" : 10 , \"y\" : 165 , \"w\" : 220 , \"h\" : 115 , \"toggle\" : true , \"text\" : \"\\uE335\" , \"text_font\" : 32 , \"mode\" : \"break\" , \"align\" : 1 , \"radius\" : 20 , \"groupid\" : 2 } { \"page\" : 1 , \"id\" : 99 , \"obj\" : \"btn\" , \"x\" : 0 , \"y\" : 290 , \"w\" : 240 , \"h\" : 30 , \"text\" : \"\\uE156\\uE5A9\" , \"text_font\" : 16 , \"bg_color\" : \"#2C3E50\" , \"text_color\" : \"#FFFFFF\" , \"radius\" : 0 , \"border_side\" : 0 , \"click\" : 0 } Testing Reboot the plate. First only the buttons related to local relays are shown, these act the relays. After the plate connects to the network, screen is cleared and home automation-related pages are loaded. Kill the WiFi network. Plate detects the disconnection from the network, thus screen is cleared and only the buttons related to local relays are shown, relays can be turned on and off. Restore the WiFi network. Plate reconnects to the network, screen is cleared and home automation-related pages are loaded back again.","title":"Handle Offline State"},{"location":"integrations/examples/example-pagination/","text":"Simple page navigation Pagination can be executed locally using the action attribute of the objects. The jsonl lines below will setup 3 buttons to the bottom of a 240x320 screen which will navigate back and forth between the pages: 1 2 3 { \"page\" : 0 , \"id\" : 1 , \"obj\" : \"btn\" , \"action\" : \"prev\" , \"x\" : 0 , \"y\" : 290 , \"w\" : 79 , \"h\" : 32 , \"bg_color\" : \"#2C3E50\" , \"text\" : \"\\uE141\" , \"text_color\" : \"#FFFFFF\" , \"radius\" : 0 , \"border_side\" : 0 , \"text_font\" : 28 } { \"page\" : 0 , \"id\" : 2 , \"obj\" : \"btn\" , \"action\" : \"back\" , \"x\" : 80 , \"y\" : 290 , \"w\" : 80 , \"h\" : 32 , \"bg_color\" : \"#2C3E50\" , \"text\" : \"\\uE2DC\" , \"text_color\" : \"#FFFFFF\" , \"radius\" : 0 , \"border_side\" : 0 , \"text_font\" : 22 } { \"page\" : 0 , \"id\" : 3 , \"obj\" : \"btn\" , \"action\" : \"next\" , \"x\" : 161 , \"y\" : 290 , \"w\" : 79 , \"h\" : 32 , \"bg_color\" : \"#2C3E50\" , \"text\" : \"\\uE142\" , \"text_color\" : \"#FFFFFF\" , \"radius\" : 0 , \"border_side\" : 0 , \"text_font\" : 28 } Pagination can be also acomplished by enabling swipe gesture on certain objects. The jsonl line below will setup an invisible rectangle overlay at the top of the screen with enabled swipe : 1 { \"page\" : 0 , \"id\" : 6 , \"obj\" : \"obj\" , \"swipe\" : 1 , \"x\" : 0 , \"y\" : 0 , \"h\" : 30 , \"w\" : 240 , \"opacity\" : 0 , \"comment\" : \"swipe-area-at-top\" } Tip You should put these lines to the end of your pages.jsonl config file, so that these objects remain at the top, and no others will be drawn on top of them. To limit page navigation only to page numbers between 1 and 6: 1 2 { \"page\" : 1 , \"id\" : 0 , \"prev\" : 6 } { \"page\" : 6 , \"id\" : 0 , \"next\" : 1 }","title":"Page Navigation"},{"location":"integrations/examples/example-widgets/","text":"Widgets Demo Page Layout Code This is a real-world example of a pages.jsonl file. Upload it to your plate's flash memory and restart the plate: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 { \"page\" : 1 , \"comment\" : \"---------- Page 1 ----------\" } { \"id\" : 1 , \"obj\" : \"btn\" , \"x\" : 10 , \"y\" : 45 , \"w\" : 220 , \"h\" : 55 , \"toggle\" : true , \"text\" : \"Touch me \\uE96B\" , \"text_font\" : 32 } { \"id\" : 2 , \"obj\" : \"checkbox\" , \"x\" : 10 , \"y\" : 100 , \"w\" : 220 , \"h\" : 55 , \"text\" : \" My Checkbox\" } { \"id\" : 3 , \"obj\" : \"label\" , \"x\" : 10 , \"y\" : 10 , \"w\" : 220 , \"h\" : 30 , \"text\" : \"\\uE75A My Label\" , \"align\" : 1 , \"padh\" : 50 } { \"id\" : 4 , \"obj\" : \"switch\" , \"x\" : 125 , \"y\" : 220 , \"w\" : 100 , \"h\" : 55 , \"radius\" : 40 , \"radius2\" : 40 } { \"id\" : 5 , \"obj\" : \"led\" , \"x\" : 22 , \"y\" : 220 , \"w\" : 55 , \"h\" : 55 } { \"id\" : 6 , \"obj\" : \"dropdown\" , \"x\" : 10 , \"y\" : 160 , \"w\" : 130 , \"options\" : \"\\uE40A Apples\\n\\uE40A Oranges\\n\\uE40A Bananas\" } { \"id\" : 7 , \"obj\" : \"spinner\" , \"x\" : 160 , \"y\" : 140 , \"w\" : 70 , \"h\" : 70 } { \"page\" : 2 , \"comment\" : \"---------- Page 2 ----------\" } { \"id\" : 1 , \"obj\" : \"obj\" , \"x\" : 5 , \"y\" : 5 , \"w\" : 230 , \"h\" : 280 , \"click\" : 0 } { \"id\" : 11 , \"obj\" : \"gauge\" , \"x\" : 10 , \"y\" : 10 , \"w\" : 150 , \"h\" : 150 , \"val\" : 75 } { \"id\" : 12 , \"obj\" : \"linemeter\" , \"x\" : 130 , \"y\" : 120 , \"w\" : 100 , \"h\" : 100 , \"val\" : 32 } { \"id\" : 13 , \"obj\" : \"label\" , \"x\" : 28 , \"y\" : 65 , \"w\" : 70 , \"h\" : 70 , \"parentid\" : 12 , \"text\" : \"\\uE12C OK\" } { \"id\" : 14 , \"obj\" : \"bar\" , \"x\" : 20 , \"y\" : 225 , \"w\" : 200 , \"h\" : 20 , \"val\" : 75 } { \"id\" : 15 , \"obj\" : \"slider\" , \"x\" : 20 , \"y\" : 254 , \"w\" : 200 , \"h\" : 20 , \"val\" : 25 } { \"comment\" : \"---------- Page 3 ----------\" } { \"page\" : 3 , \"id\" : 1 , \"obj\" : \"cpicker\" , \"page\" : 3 , \"x\" : 20 , \"y\" : 10 , \"w\" : 200 , \"h\" : 200 } { \"page\" : 3 , \"id\" : 2 , \"obj\" : \"cpicker\" , \"page\" : 3 , \"x\" : 30 , \"y\" : 230 , \"w\" : 200 , \"h\" : 30 , \"rect\" : true } { \"page\" : 4 , \"comment\" : \"---------- Page 4 ----------\" } { \"id\" : 1 , \"obj\" : \"tabview\" , \"btn_pos\" : 1 } { \"id\" : 10 , \"obj\" : \"tab\" , \"parentid\" : 1 , \"text\" : \"Tab 1\" } { \"id\" : 20 , \"obj\" : \"tab\" , \"parentid\" : 1 , \"text\" : \"Tab 2\" } { \"id\" : 30 , \"obj\" : \"tab\" , \"parentid\" : 1 , \"text\" : \"Tab 3\" } { \"id\" : 11 , \"obj\" : \"roller\" , \"x\" : 40 , \"y\" : 10 , \"w\" : 160 , \"rows\" : 2 , \"options\" : \"2020\\n2021\\n2022\\n2023\\n2024\" , \"parentid\" : 10 } { \"id\" : 12 , \"obj\" : \"img\" , \"src\" : \"/littlefs/logo-medium.png\" , \"x\" : 45 , \"y\" : 80 , \"auto_size\" : 1 , \"w\" : 150 , \"parentid\" : 10 } { \"comment\" : \"---------- All Pages ----------\" } { \"page\" : 0 , \"id\" : 7 , \"obj\" : \"btn\" , \"action\" : \"prev\" , \"x\" : 0 , \"y\" : 290 , \"w\" : 79 , \"h\" : 32 , \"text\" : \"\\uE141\" , \"text_color\" : \"#FFFFFF\" , \"radius\" : 0 , \"border_side\" : 0 , \"text_font\" : 32 } { \"page\" : 0 , \"id\" : 8 , \"obj\" : \"btn\" , \"action\" : \"back\" , \"x\" : 80 , \"y\" : 290 , \"w\" : 80 , \"h\" : 32 , \"text\" : \"\\uE2DC\" , \"text_color\" : \"#FFFFFF\" , \"radius\" : 0 , \"border_side\" : 0 , \"text_font\" : 24 } { \"page\" : 0 , \"id\" : 9 , \"obj\" : \"btn\" , \"action\" : \"next\" , \"x\" : 161 , \"y\" : 290 , \"w\" : 79 , \"h\" : 32 , \"text\" : \"\\uE142\" , \"text_color\" : \"#FFFFFF\" , \"radius\" : 0 , \"border_side\" : 0 , \"text_font\" : 32 } { \"comment\" : \"---------- Limit page prev/next between 1 and 4 ----------\" } { \"page\" : 1 , \"id\" : 0 , \"prev\" : 4 } { \"page\" : 4 , \"id\" : 0 , \"next\" : 1 } Upload this logo to the plate to see the img object. Note Your MCU needs to have on-board PSram in order for the img object to be properly displayed.","title":"Widgets Demo"},{"location":"integrations/examples/surprise/","text":"Surprise No screenshot available. To see the result, test the code! Code Strictly for geeks: 1 2 3 { \"page\" : 0 , \"id\" : 60 , \"obj\" : \"obj\" , \"x\" : 0 , \"y\" : 0 , \"w\" : 240 , \"h\" : 320 , \"radius\" : 0 , \"hidden\" : 0 , \"bg_grad_dir\" : 0 , \"bg_color\" : \"#0000bb\" } { \"page\" : 0 , \"id\" : 61 , \"obj\" : \"btn\" , \"x\" : 80 , \"y\" : 50 , \"w\" : 80 , \"h\" : 20 , \"text\" : \"openHASP\" , \"text_font\" : 16 , \"bg_color\" : \"gray\" , \"bg_grad_color\" : \"gray\" , \"text_color\" : \"white\" , \"radius\" : 0 , \"border_side\" : 0 , \"click\" : 0 } { \"page\" : 0 , \"id\" : 62 , \"obj\" : \"label\" , \"x\" : 1 , \"y\" : 80 , \"w\" : 240 , \"h\" : 220 , \"text\" : \"A fatal exception has ocured in MCU.\\nThe application will be terminated.\\n\\n\\uE40A Touch the screen to terminate it.\\n\\uE40A Press CTRL+ALT+DEL again to\\n restart your computer. You will lose\\n any unsaved information.\\n\\n Press any key to continue _\\n\" , \"text_color\" : \"white\" }","title":"Surprise"},{"location":"integrations/home-assistant/howto/","text":"The openHASP Custom Component simplifies synchronization of objects on one or more openHASP plates with Home Assistant entities. You can map any service supported by any entity in Home Assistant to any object event in openHASP, moreover, you can set any property of any object in openHASP to any value from Home Assistant. This powerful concept gives you full freedom to create a completely customized, hardware-based control user interface for your home automation. We call plate any device running openHASP in your system. Installation ~ You have the option to install the custom component using HACS or via manual download: Using HACS Install using HACS in one-click. This is the preferred and recommended method, as HACS provides a very effective way to keep the component updated and/or choose between various versions. Goto Home Assistant > HACS > Integrations . Click the Explore & Add Repositories button. Search for openHASP and click on the openHasp logo. Click Install this repository in HACS . Note: To install the current unstable development version select the Main . Click Install Reboot Home-Assistant Manual Install Alternatively, you can also install it manually: Download ZIP Using the tool of choice open the directory (folder) for your HA configuration (where you find configuration.yaml ). If you do not have a custom_components directory there, you need to create it. In the custom_components directory create a new folder called openhasp . Download all the files from the custom_components/openhasp/ directory in this repository. Place the files you downloaded in the new directory you created. Edit your configuration.yaml file add an entry similar to the example below. Restart Home Assistant Note The download {target= blank} link points to the actual _development code in the master branch. Warning You have to use component version consistently with the firmware version on your plates. For example, if your plates are at firmware version 0.6.x, you also need to use component version 0.6.x to ensure interoperability. Home Assistant will show a warning if it finds a version mismatch. Note that you can only have one version of the component installed at a time so a mix of plate versions cannot be deployed. Configuration ~ First prepare your plates to be integrated with Home Assistant (follow steps in order): Connect your plates to the network . Static DHCP or fixed IP is not needed as communication only happes through MQTT. Set the GPIO configuration corresponding to your hardware (important for them to be detected as entities), save and reboot. Restart Home Assistant. Set the MQTT server settings and make sure each plate has a unique node name, save and reboot. The component will automatically discover the plates and you will see them appearing in Home Assistant > Configuration > Integrations > HASP-Open Hardware Edition . When Home Assistant detects your plate, you will have to give it a name. In the examples below both name and node name is plate35 . You will be presented with options to set the backlight brightness level when the plate is idle and optionally you can set a path to a centrally located pages.jsonl file containing design for this plate - the component can send the contents of the file when the plate connects. From v0.6.3 of the component this file can also be a file with a .json extenstion. See the JSON Files section below. Note If you opt to store the pages.jsonl file on Home Assistant server, it will only be loaded on start of Home Assistant and reloaded on plate availability (becoming online). In this case, don't upload any pages.jsonl file to the plate's flash memory! This assumes your plate pages are empty in initial state. Checkout the services section for requirements to deploy this. Currently you will get a warning that you need to add manual configuration for the objects in your configuration.yaml , that's no problem, read ahead. Example ~ To add an openHASP plate to your installation with a sample configuration, upload a pages.jsonl file with the folowing content to your plate first: 1 2 3 4 { \"page\" : 1 , \"id\" : 1 , \"obj\" : \"btn\" , \"x\" : 0 , \"y\" : 0 , \"w\" : 240 , \"h\" : 30 , \"text\" : \"openHASP\" , \"value_font\" : 22 , \"bg_color\" : \"#2C3E50\" , \"text_color\" : \"#FFFFFF\" , \"radius\" : 0 , \"border_side\" : 0 } { \"page\" : 1 , \"id\" : 2 , \"obj\" : \"btn\" , \"x\" : 10 , \"y\" : 40 , \"w\" : 105 , \"h\" : 90 , \"toggle\" : true , \"text\" : \"\\uE335\" , \"text_font\" : 32 , \"mode\" : \"break\" , \"align\" : 1 } { \"page\" : 1 , \"id\" : 3 , \"obj\" : \"dropdown\" , \"x\" : 10 , \"y\" : 140 , \"w\" : 170 , \"h\" : 30 , \"options\" : \"Apples\\nBananas\\nOranges\\nMelon\" } { \"page\" : 0 , \"id\" : 1 , \"obj\" : \"label\" , \"x\" : 175 , \"y\" : 5 , \"h\" : 30 , \"w\" : 62 , \"text\" : \"00.0\u00b0C\" , \"align\" : 2 , \"bg_color\" : \"#2C3E50\" , \"text_color\" : \"#FFFFFF\" } Assuming your plate's configured MQTT node name is plate35 , add the following to your configuration.yaml file (Home Assistant will deliberatey ask for it when finished autodetection procedure): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 openhasp : plate35 : objects : - obj : \"p0b1\" # temperature label on all pages properties : \"text\" : '{{ states(\"sensor.my_room_temperature\") }}\u00b0C' - obj : \"p1b2\" # light-switch toggle button properties : \"val\" : '{{ 1 if states(\"light.my_room\") == \"on\" else 0 }}' \"text\" : '{{ \"\\uE6E8\" if is_state(\"light.my_room\", \"on\") else \"\\uE335\" | e }}' event : \"up\" : - service : homeassistant.toggle entity_id : \"light.my_room\" - obj : \"p1b3\" # dropdown event : \"changed\" : - service : persistent_notification.create data : message : I like {{ text }} Variable definitions ~ openhasp: (Required) The platform identifier. Required once in the configuration. plate35: (Required) Your plate identifier slug. For each plate in your sytem, such an entry is required, has to be unique. It is generated automatically from the plate name you gave during discovery, which by default equals to the HASP Node Name set in the plate's configuration . objects: (Optional) Definition of the objects reacting to changes in Home Assistant, or generating events for Home Assistant. obj: (string) (Required) The object identifier which we want to integrate with Home Assistant. Its name has the form pXbY where X represents the page where the object is located, and Y represents the id of the object on that page. properties: (Optional) List containing the properties of the object which we want to modify based on changes occurring in Home Assistant. In the example above text property gets updated whenever sensor.my_room_temperature changes. event: (Optional) List containing the events generated by the object when touched on the screen. These are object-specific and can be observed accurately with an MQTT client. Each event defines a list of services which will be processed in order (like actions list in an automation). In the example above, when object p1b2 (which is a toggle button) generates the on event, light.my_room will be turned on by the service call light.turn_on as specified in the event config. And similarily when off event comes through MQTT, the light will be turned off by the corresponding service call. Note Any variable coming from the MQTT message can be used between curly brackets and passed to the service call. In the example above when object p1b3 (which is a dropdown selector) generates the changed event, a persistent notification will appear in Home Assistant's Lovelace interface containing the selected text from the object, which was passed over from the MQTT message. See object events for more types of generated events. Configuration tips ~ Multiple plates ~ If you have multiple plates you can add them all using different plate identifiers. Their configured topics have to be unique too: 1 2 3 4 5 6 7 8 9 10 openhasp : plate_my_room_1 : objects : # ... plate_my_room_2 : objects : # ... plate_my_room_3 : objects : # ... Split configuration ~ You can use Home Assistant's split configuration to help better organizing your config files. Instead of keeping the configuration of all openHASP plates in Home Assistant's main config file, you can keep openHASP config separately, by adding only this to configuration.yaml : openhasp: !include openhasp.yaml After this, you can move your openHASP configuration starting with plate_my_room: level to your separate openhasp.yaml file and restart Home Assistant. Moreover, if you have multiple plates, you can keep each one in a separate config file, to achieve this, make it like: openhasp: !include_dir_merge_named openhasp_configs/ Create a directory openhasp_configs right near configuration.yaml , and put in it all your plates configuration (only with plate_my_room: level) in separate yaml files and restart Home Assistant. Services ~ This component implements some specific services to make interactions with the plate even more comfortable. openhasp.wakeup Wakes up the display when an external event has occurred, like a presence or a PIR motion sensor. openhasp.next_page Changes plate to the next page. openhasp.prev_page Changes plate to the previous page. openhasp.change_page Changes plate directly to the specified page number. openhasp.clear_page Clears the contents of the specified page number. If page number not specified, clears all the pages. openhasp.load_pages Loads new design from pages.jsonl file from full path on Home Assistant server. The file must be located in an authorised location defined by allowlist_external_dirs (in case of hassio /config/ is the directory where Home Assistant's configuration.yaml resides, so in case of a subdirectory called openhasp the full path would be e.g. /config/openhasp/pages.jsonl , and you need to add /config/openhasp/ to your allowlist_external_dirs ). Note The contents of the file are loaded line by line thus \"page\":X has to be defined for each object. Unless you clear the page first, the objects will be updated. For example, to allow read-access to the folder, add these lines to your configuration.yaml : 1 2 3 homeassistant : allowlist_external_dirs : - \"/config/openhasp\" openhasp.command Wraps up any command so that it can be called against the entity_id of the plate. Useful in Automations and Blueprints. Warning This service handles data without input validation. Only for advanced users. No support for any problems caused by using this! openhasp.config Wraps up any raw submodule config so that it can be called against the entity_id of the plate. Useful in Automations and Blueprints. Warning This service handles data without input validation. Only for advanced users. No support for any problems caused by using this! Check out the example confgurations and automations to learn how to use these services within Home Assistant. JSON Files ~ From v0.6.3 pages file supplied in the plate config within home assistant can be a .json , files with this extension will be parsed differently and expect a JSON array containing objects or strings. Objects must be valid JSONL lines and strings can be used for comments. As this file is valid JSON whitespace will be ignored when parsing and removed before sending the JSONL data to the plate. If you are storing your plate config along with your HA config, this allows you to have more readable config which will be formatted in your editor of choice. Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 [ { \"page\" : 1 , \"id\" : 2 , \"obj\" : \"btn\" , \"x\" : 10 , \"y\" : 40 , \"w\" : 105 , \"h\" : 90 , \"toggle\" : false , \"text\" : \"Normal Button\" , \"mode\" : \"break\" , \"align\" : \"center\" }, \"Comment string will be removed when parsing\" , { \"page\" : 1 , \"id\" : 3 , \"obj\" : \"btn\" , \"x\" : 125 , \"y\" : 40 , \"w\" : 105 , \"h\" : 90 , \"toggle\" : true , \"text\" : \"#FFD700 Toggle# Button\" , \"mode\" : \"break\" , \"align\" : \"center\" } ] Debugging ~ Add these lines to your main configuration.yaml configuration and restart Home Assistant: 1 2 3 4 logger : default : warning logs : custom_components.openhasp : debug Look for the debug messages in the home-assistant.log file.","title":"How-To"},{"location":"integrations/home-assistant/howto/#installation","text":"You have the option to install the custom component using HACS or via manual download: Using HACS Install using HACS in one-click. This is the preferred and recommended method, as HACS provides a very effective way to keep the component updated and/or choose between various versions. Goto Home Assistant > HACS > Integrations . Click the Explore & Add Repositories button. Search for openHASP and click on the openHasp logo. Click Install this repository in HACS . Note: To install the current unstable development version select the Main . Click Install Reboot Home-Assistant Manual Install Alternatively, you can also install it manually: Download ZIP Using the tool of choice open the directory (folder) for your HA configuration (where you find configuration.yaml ). If you do not have a custom_components directory there, you need to create it. In the custom_components directory create a new folder called openhasp . Download all the files from the custom_components/openhasp/ directory in this repository. Place the files you downloaded in the new directory you created. Edit your configuration.yaml file add an entry similar to the example below. Restart Home Assistant Note The download {target= blank} link points to the actual _development code in the master branch. Warning You have to use component version consistently with the firmware version on your plates. For example, if your plates are at firmware version 0.6.x, you also need to use component version 0.6.x to ensure interoperability. Home Assistant will show a warning if it finds a version mismatch. Note that you can only have one version of the component installed at a time so a mix of plate versions cannot be deployed.","title":"Installation"},{"location":"integrations/home-assistant/howto/#configuration","text":"First prepare your plates to be integrated with Home Assistant (follow steps in order): Connect your plates to the network . Static DHCP or fixed IP is not needed as communication only happes through MQTT. Set the GPIO configuration corresponding to your hardware (important for them to be detected as entities), save and reboot. Restart Home Assistant. Set the MQTT server settings and make sure each plate has a unique node name, save and reboot. The component will automatically discover the plates and you will see them appearing in Home Assistant > Configuration > Integrations > HASP-Open Hardware Edition . When Home Assistant detects your plate, you will have to give it a name. In the examples below both name and node name is plate35 . You will be presented with options to set the backlight brightness level when the plate is idle and optionally you can set a path to a centrally located pages.jsonl file containing design for this plate - the component can send the contents of the file when the plate connects. From v0.6.3 of the component this file can also be a file with a .json extenstion. See the JSON Files section below. Note If you opt to store the pages.jsonl file on Home Assistant server, it will only be loaded on start of Home Assistant and reloaded on plate availability (becoming online). In this case, don't upload any pages.jsonl file to the plate's flash memory! This assumes your plate pages are empty in initial state. Checkout the services section for requirements to deploy this. Currently you will get a warning that you need to add manual configuration for the objects in your configuration.yaml , that's no problem, read ahead.","title":"Configuration"},{"location":"integrations/home-assistant/howto/#example","text":"To add an openHASP plate to your installation with a sample configuration, upload a pages.jsonl file with the folowing content to your plate first: 1 2 3 4 { \"page\" : 1 , \"id\" : 1 , \"obj\" : \"btn\" , \"x\" : 0 , \"y\" : 0 , \"w\" : 240 , \"h\" : 30 , \"text\" : \"openHASP\" , \"value_font\" : 22 , \"bg_color\" : \"#2C3E50\" , \"text_color\" : \"#FFFFFF\" , \"radius\" : 0 , \"border_side\" : 0 } { \"page\" : 1 , \"id\" : 2 , \"obj\" : \"btn\" , \"x\" : 10 , \"y\" : 40 , \"w\" : 105 , \"h\" : 90 , \"toggle\" : true , \"text\" : \"\\uE335\" , \"text_font\" : 32 , \"mode\" : \"break\" , \"align\" : 1 } { \"page\" : 1 , \"id\" : 3 , \"obj\" : \"dropdown\" , \"x\" : 10 , \"y\" : 140 , \"w\" : 170 , \"h\" : 30 , \"options\" : \"Apples\\nBananas\\nOranges\\nMelon\" } { \"page\" : 0 , \"id\" : 1 , \"obj\" : \"label\" , \"x\" : 175 , \"y\" : 5 , \"h\" : 30 , \"w\" : 62 , \"text\" : \"00.0\u00b0C\" , \"align\" : 2 , \"bg_color\" : \"#2C3E50\" , \"text_color\" : \"#FFFFFF\" } Assuming your plate's configured MQTT node name is plate35 , add the following to your configuration.yaml file (Home Assistant will deliberatey ask for it when finished autodetection procedure): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 openhasp : plate35 : objects : - obj : \"p0b1\" # temperature label on all pages properties : \"text\" : '{{ states(\"sensor.my_room_temperature\") }}\u00b0C' - obj : \"p1b2\" # light-switch toggle button properties : \"val\" : '{{ 1 if states(\"light.my_room\") == \"on\" else 0 }}' \"text\" : '{{ \"\\uE6E8\" if is_state(\"light.my_room\", \"on\") else \"\\uE335\" | e }}' event : \"up\" : - service : homeassistant.toggle entity_id : \"light.my_room\" - obj : \"p1b3\" # dropdown event : \"changed\" : - service : persistent_notification.create data : message : I like {{ text }}","title":"Example"},{"location":"integrations/home-assistant/howto/#variable-definitions","text":"openhasp: (Required) The platform identifier. Required once in the configuration. plate35: (Required) Your plate identifier slug. For each plate in your sytem, such an entry is required, has to be unique. It is generated automatically from the plate name you gave during discovery, which by default equals to the HASP Node Name set in the plate's configuration . objects: (Optional) Definition of the objects reacting to changes in Home Assistant, or generating events for Home Assistant. obj: (string) (Required) The object identifier which we want to integrate with Home Assistant. Its name has the form pXbY where X represents the page where the object is located, and Y represents the id of the object on that page. properties: (Optional) List containing the properties of the object which we want to modify based on changes occurring in Home Assistant. In the example above text property gets updated whenever sensor.my_room_temperature changes. event: (Optional) List containing the events generated by the object when touched on the screen. These are object-specific and can be observed accurately with an MQTT client. Each event defines a list of services which will be processed in order (like actions list in an automation). In the example above, when object p1b2 (which is a toggle button) generates the on event, light.my_room will be turned on by the service call light.turn_on as specified in the event config. And similarily when off event comes through MQTT, the light will be turned off by the corresponding service call. Note Any variable coming from the MQTT message can be used between curly brackets and passed to the service call. In the example above when object p1b3 (which is a dropdown selector) generates the changed event, a persistent notification will appear in Home Assistant's Lovelace interface containing the selected text from the object, which was passed over from the MQTT message. See object events for more types of generated events.","title":"Variable definitions"},{"location":"integrations/home-assistant/howto/#configuration-tips","text":"","title":"Configuration tips"},{"location":"integrations/home-assistant/howto/#services","text":"This component implements some specific services to make interactions with the plate even more comfortable. openhasp.wakeup Wakes up the display when an external event has occurred, like a presence or a PIR motion sensor. openhasp.next_page Changes plate to the next page. openhasp.prev_page Changes plate to the previous page. openhasp.change_page Changes plate directly to the specified page number. openhasp.clear_page Clears the contents of the specified page number. If page number not specified, clears all the pages. openhasp.load_pages Loads new design from pages.jsonl file from full path on Home Assistant server. The file must be located in an authorised location defined by allowlist_external_dirs (in case of hassio /config/ is the directory where Home Assistant's configuration.yaml resides, so in case of a subdirectory called openhasp the full path would be e.g. /config/openhasp/pages.jsonl , and you need to add /config/openhasp/ to your allowlist_external_dirs ). Note The contents of the file are loaded line by line thus \"page\":X has to be defined for each object. Unless you clear the page first, the objects will be updated. For example, to allow read-access to the folder, add these lines to your configuration.yaml : 1 2 3 homeassistant : allowlist_external_dirs : - \"/config/openhasp\" openhasp.command Wraps up any command so that it can be called against the entity_id of the plate. Useful in Automations and Blueprints. Warning This service handles data without input validation. Only for advanced users. No support for any problems caused by using this! openhasp.config Wraps up any raw submodule config so that it can be called against the entity_id of the plate. Useful in Automations and Blueprints. Warning This service handles data without input validation. Only for advanced users. No support for any problems caused by using this! Check out the example confgurations and automations to learn how to use these services within Home Assistant.","title":"Services"},{"location":"integrations/home-assistant/howto/#json-files","text":"From v0.6.3 pages file supplied in the plate config within home assistant can be a .json , files with this extension will be parsed differently and expect a JSON array containing objects or strings. Objects must be valid JSONL lines and strings can be used for comments. As this file is valid JSON whitespace will be ignored when parsing and removed before sending the JSONL data to the plate. If you are storing your plate config along with your HA config, this allows you to have more readable config which will be formatted in your editor of choice. Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 [ { \"page\" : 1 , \"id\" : 2 , \"obj\" : \"btn\" , \"x\" : 10 , \"y\" : 40 , \"w\" : 105 , \"h\" : 90 , \"toggle\" : false , \"text\" : \"Normal Button\" , \"mode\" : \"break\" , \"align\" : \"center\" }, \"Comment string will be removed when parsing\" , { \"page\" : 1 , \"id\" : 3 , \"obj\" : \"btn\" , \"x\" : 125 , \"y\" : 40 , \"w\" : 105 , \"h\" : 90 , \"toggle\" : true , \"text\" : \"#FFD700 Toggle# Button\" , \"mode\" : \"break\" , \"align\" : \"center\" } ]","title":"JSON Files"},{"location":"integrations/home-assistant/howto/#debugging","text":"Add these lines to your main configuration.yaml configuration and restart Home Assistant: 1 2 3 4 logger : default : warning logs : custom_components.openhasp : debug Look for the debug messages in the home-assistant.log file.","title":"Debugging"},{"location":"integrations/home-assistant/sampl_autom/","text":"Keep backlight ON (dimmed) during the day, and turn it OFF during the night ~ The night mode activates when sun goes down, and the day mode activates when the sun comes up. During the day, when the screen is after short idle, it dims to the level configured in Home Assistant, but never turns off. During the night, the screen turns off after the long idle period. Assuming your plate's configured MQTT group name is plates , this will affect all the plates in your system at once: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 - id : openhasp-night alias : \"openHASP Night mode\" trigger : - platform : numeric_state entity_id : sun.sun attribute : elevation below : -1 condition : - condition : template value_template : \"{{ (as_timestamp(now()) - as_timestamp(states('sensor.ha_uptime_moment'))) / 60 > 2 }}\" action : - service : mqtt.publish data : topic : hasp/plates/config/gui payload : '{\"idle2\":120}' - id : openhasp-day alias : \"openHASP Day mode\" trigger : - platform : numeric_state entity_id : sun.sun attribute : elevation above : 1 condition : - condition : template value_template : \"{{ (as_timestamp(now()) - as_timestamp(states('sensor.ha_uptime_moment'))) / 60 > 2 }}\" action : - service : mqtt.publish data : topic : hasp/plates/config/gui payload : '{\"idle2\":0}' Note the condition which assures to avoid triggering the automations falsely when Home Assistant (re)starts (allows running the automation only when Home Assistant has been up for at least 2 minutes). Turn ON moodlight when backlight goes OFF (and back) ~ If your plate has moodlights, it is useful in dark situations, when you don't want to have the screen backlit on all the time as above, but have the mood light on instead. During the day mood light doesn't light. Put your light.plate_my_room_moodlight to a Lovelace card entity row and select a nice color for moodlight. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 - id : openhasp-moodlight-on alias : \"openHASP Moodlight ON when Backlight OFF\" trigger : - platform : state entity_id : light.plate_my_room_backlight from : 'on' to : 'off' action : - service : light.turn_on target : entity_id : light.plate_my_room_moodlight - id : openhasp-moodlight-off alias : \"openHASP Moodlight OFF when Backlight ON\" trigger : - platform : state entity_id : light.plate_my_room_backlight from : 'off' to : 'on' action : - service : light.turn_off target : entity_id : light.plate_my_room_moodlight Return to home page after some idle time ~ Apart from the idle times controlling backlight levels, one may want to return to page 1 after a while. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - id : openhasp-back-to-page-1 alias : \"openHASP back to page 1\" trigger : - platform : template value_template : \"{{ state_attr('openhasp.plate_my_room','idle') != 'off' }}\" for : \"00:05:00\" condition : - condition : template value_template : \"{{ states('openhasp.plate_my_room') != '1' and states('openhasp.plate_my_room') != 'unavailable' }}\" action : - service : openhasp.change_page target : entity_id : openhasp.plate_my_room data : page : 1 Prevent burn-in of the LCD screen ~ You can use this to protect and prolonge the lifetime of the LCD screens, thus being more green and generating less hazardous waste. Wall mounted LCD screns main problem is that they display the same picture 99.999% of the time. Even if somebody turns off backlight during the night or dark periods, the LCD screen keeps showing the same picture, seen by nobody. There are high chances that this will lead to screen picture burn-in after a few years of operation. Pixel training One way to reduce this is to \"train\" the pixels periodically with completely different other content. Assuming your group name is configured as plates in your 240x320 screens running openHASP, here is a possible solution to extend their life (all at once). The first automation runs for 1 minute by cycling an overlay with a full-screen base object every second through white, red, green, blue and black. It starts and remains turned off at Home Assistant start, to run it you need to turn it on using the service automation.turn_on . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 - id : openhasp_antiburn alias : \"openHASP anti burn-in screen protection\" initial_state : false trigger : platform : state entity_id : automation.openhasp_anti_burn_in_screen_protection from : 'off' to : 'on' action : - service : mqtt.publish data : topic : hasp/plates/command/jsonl payload : '{\"page\":0,\"id\":99,\"obj\":\"obj\",\"x\":0,\"y\":0,\"w\":240,\"h\":320,\"radius\":0,\"hidden\":0,\"bg_grad_dir\":0,\"bg_color\":\"white\"}' - repeat : while : - condition : template value_template : '{{ repeat.index <= 12 }}' sequence : - service : mqtt.publish data : topic : hasp/plates/command/p0b99.bg_color payload : 'white' - delay : '00:00:01' - service : mqtt.publish data : topic : hasp/plates/command/p0b99.bg_color payload : 'red' - delay : '00:00:01' - service : mqtt.publish data : topic : hasp/plates/command/p0b99.bg_color payload : 'green' - delay : '00:00:01' - service : mqtt.publish data : topic : hasp/plates/command/p0b99.bg_color payload : 'blue' - delay : '00:00:01' - service : mqtt.publish data : topic : hasp/plates/command/p0b99.bg_color payload : 'black' - delay : '00:00:01' - service : mqtt.publish data : topic : hasp/plates/command/p0b99.delete payload : '' - service : automation.turn_off target : entity_id : automation.openhasp_anti_burn_in_screen_protection The second automation takes care to stop the looping colors when you touch the screen: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 - id : openhasp_antiburn_touch_stop alias : \"openHASP anti-burn-in stop when touched\" initial_state : 'on' mode : restart trigger : - platform : mqtt topic : 'hasp/+/state/p0b99' payload : '{\"event\":\"down\"}' - platform : mqtt topic : 'hasp/+/LWT' payload : \"online\" action : - service : automation.turn_off target : entity_id : automation.openhasp_anti_burn_in_screen_protection - service : mqtt.publish data : topic : hasp/plates/command/p0b99.delete payload : '' The third automation simply runs the first automation at 3 different times every night: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 - id : openhasp_antiburn_start_at_night alias : \"openHASP anti-burn-in start at night\" initial_state : 'on' trigger : - platform : time at : '00:20:00' - platform : time at : '02:20:00' - platform : time at : '04:20:00' action : - service : automation.turn_on target : entity_id : automation.openhasp_anti_burn_in_screen_protection Clear pixels when backlight off Another way to reduce the chance of burn-in is to clear the contents of the screen while the backlight is turned off, as nobody sees the pixels anyway. Just add these actions to the first automation example which draw an overlay with a black base object on page 0 when display is off, and deletes it when comes back on: for automation openhasp-moodlight-on , add to actions: 1 2 3 4 - service : mqtt.publish data : topic : hasp/plates/command/jsonl payload : '{\"page\":0,\"id\":99,\"obj\":\"obj\",\"x\":0,\"y\":0,\"w\":240,\"h\":320,\"radius\":0,\"hidden\":0,\"bg_grad_dir\":0,\"bg_color\":\"black\"}' for automation openhasp-moodlight-off , add to actions: 1 2 3 4 5 6 7 8 9 10 11 - service : automation.turn_off target : entity_id : automation.openhasp_anti_burn_in_screen_protection - service : mqtt.publish data : topic : hasp/plates/command/p0b99.hidden payload : '1' - service : mqtt.publish data : topic : hasp/plates/command/p0b99.delete payload : '' Both methods can coexist. Don't forget to adjust the size of the object to your screen if it's not 240x320.","title":"Example Automations"},{"location":"integrations/home-assistant/sampl_autom/#keep-backlight-on-dimmed-during-the-day-and-turn-it-off-during-the-night","text":"The night mode activates when sun goes down, and the day mode activates when the sun comes up. During the day, when the screen is after short idle, it dims to the level configured in Home Assistant, but never turns off. During the night, the screen turns off after the long idle period. Assuming your plate's configured MQTT group name is plates , this will affect all the plates in your system at once: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 - id : openhasp-night alias : \"openHASP Night mode\" trigger : - platform : numeric_state entity_id : sun.sun attribute : elevation below : -1 condition : - condition : template value_template : \"{{ (as_timestamp(now()) - as_timestamp(states('sensor.ha_uptime_moment'))) / 60 > 2 }}\" action : - service : mqtt.publish data : topic : hasp/plates/config/gui payload : '{\"idle2\":120}' - id : openhasp-day alias : \"openHASP Day mode\" trigger : - platform : numeric_state entity_id : sun.sun attribute : elevation above : 1 condition : - condition : template value_template : \"{{ (as_timestamp(now()) - as_timestamp(states('sensor.ha_uptime_moment'))) / 60 > 2 }}\" action : - service : mqtt.publish data : topic : hasp/plates/config/gui payload : '{\"idle2\":0}' Note the condition which assures to avoid triggering the automations falsely when Home Assistant (re)starts (allows running the automation only when Home Assistant has been up for at least 2 minutes).","title":"Keep backlight ON (dimmed) during the day, and turn it OFF during the night"},{"location":"integrations/home-assistant/sampl_autom/#turn-on-moodlight-when-backlight-goes-off-and-back","text":"If your plate has moodlights, it is useful in dark situations, when you don't want to have the screen backlit on all the time as above, but have the mood light on instead. During the day mood light doesn't light. Put your light.plate_my_room_moodlight to a Lovelace card entity row and select a nice color for moodlight. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 - id : openhasp-moodlight-on alias : \"openHASP Moodlight ON when Backlight OFF\" trigger : - platform : state entity_id : light.plate_my_room_backlight from : 'on' to : 'off' action : - service : light.turn_on target : entity_id : light.plate_my_room_moodlight - id : openhasp-moodlight-off alias : \"openHASP Moodlight OFF when Backlight ON\" trigger : - platform : state entity_id : light.plate_my_room_backlight from : 'off' to : 'on' action : - service : light.turn_off target : entity_id : light.plate_my_room_moodlight","title":"Turn ON moodlight when backlight goes OFF (and back)"},{"location":"integrations/home-assistant/sampl_autom/#return-to-home-page-after-some-idle-time","text":"Apart from the idle times controlling backlight levels, one may want to return to page 1 after a while. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - id : openhasp-back-to-page-1 alias : \"openHASP back to page 1\" trigger : - platform : template value_template : \"{{ state_attr('openhasp.plate_my_room','idle') != 'off' }}\" for : \"00:05:00\" condition : - condition : template value_template : \"{{ states('openhasp.plate_my_room') != '1' and states('openhasp.plate_my_room') != 'unavailable' }}\" action : - service : openhasp.change_page target : entity_id : openhasp.plate_my_room data : page : 1","title":"Return to home page after some idle time"},{"location":"integrations/home-assistant/sampl_autom/#prevent-burn-in-of-the-lcd-screen","text":"You can use this to protect and prolonge the lifetime of the LCD screens, thus being more green and generating less hazardous waste. Wall mounted LCD screns main problem is that they display the same picture 99.999% of the time. Even if somebody turns off backlight during the night or dark periods, the LCD screen keeps showing the same picture, seen by nobody. There are high chances that this will lead to screen picture burn-in after a few years of operation.","title":"Prevent burn-in of the LCD screen"},{"location":"integrations/home-assistant/sampl_conf/","text":"Note Some examples below may generate errors during Home Assistant startup. Log messages like Error while processing template or Template variable error: 'None' has no attribute 'last_changed' etc. can be caused by the fact that openHASP component loads faster than the other integrations you have set up, from where you want to pull data. Because the data required by openHASP component is not yet available, an error is generated. But as soon as Home Assistant finishes loading everything, and all the data you've configured is available, things will be normal. Nevertheless the log should be checked regularly to find repetitive problems. Display clock and temperature ~ The easiest example is to display the state of a clock and a temperature sensor from Home Assistant, using label objects in openHASP. Create a label object to display the temperature value, a separate label object to display the unit and a third label object for the clock: 1 2 3 { \"page\" : 0 , \"id\" : 4 , \"obj\" : \"label\" , \"x\" : 175 , \"y\" : 5 , \"h\" : 30 , \"w\" : 45 , \"text\" : \"00.0\" , \"align\" : 2 , \"bg_color\" : \"#2C3E50\" } { \"page\" : 0 , \"id\" : 5 , \"obj\" : \"label\" , \"x\" : 220 , \"y\" : 5 , \"h\" : 30 , \"w\" : 45 , \"text\" : \"\u00b0C\" , \"align\" : 0 , \"bg_color\" : \"#2C3E50\" } { \"page\" : 0 , \"id\" : 6 , \"obj\" : \"label\" , \"x\" : 3 , \"y\" : 5 , \"h\" : 30 , \"w\" : 62 , \"text\" : \"00:00\" , \"align\" : 0 , \"bg_color\" : \"#2C3E50\" } In component configuration all you need for the objects is: 1 2 3 4 5 6 7 objects : - obj : \"p0b4\" properties : \"text\" : \"{{ states('sensor.my_room_temperature') }}\" - obj : \"p0b6\" properties : \"text\" : \"{{ states('sensor.time') }}\" Note: ~ You can of course omit the second label object with the unit and use the same for both value and unit: 1 2 { \"page\" : 0 , \"id\" : 4 , \"obj\" : \"label\" , \"x\" : 175 , \"y\" : 5 , \"h\" : 30 , \"w\" : 62 , \"text\" : \"00.0\u00b0C\" , \"align\" : 2 , \"bg_color\" : \"#2C3E50\" } { \"page\" : 0 , \"id\" : 6 , \"obj\" : \"label\" , \"x\" : 3 , \"y\" : 5 , \"h\" : 30 , \"w\" : 62 , \"text\" : \"00:00\" , \"align\" : 0 , \"bg_color\" : \"#2C3E50\" } In component configuration you will add the unit to the value using the template: 1 2 3 4 objects : - obj : \"p0b4\" properties : \"text\" : \"{{ states('sensor.my_room_temperature') }}\u00b0C\" All these being on page 0 means that they will appear on all the pages. Some basic controls ~ Jsonl and Home Assistant configuration: Toggle a light (or any switchable entity with on/off states) ~ 1 { \"page\" : 1 , \"id\" : 2 , \"obj\" : \"btn\" , \"x\" : 10 , \"y\" : 40 , \"w\" : 105 , \"h\" : 90 , \"toggle\" : true , \"text\" : \"\\uE335\" , \"text_font\" : 32 , \"align\" : 1 } 1 2 3 4 5 6 7 8 - obj : \"p1b2\" # switch, checkbox or btn with toggle true properties : \"val\" : '{{ 1 if is_state(\"light.my_lamp\", \"on\") else 0 }}' \"text\" : '{{ \"\\uE6E8\" if is_state(\"light.my_lamp\", \"on\") else \"\\uE335\" | e }}' event : \"down\" : - service : homeassistant.toggle entity_id : \"light.my_lamp\" Dropdown (self-populating from an input_select) ~ 1 { \"page\" : 1 , \"id\" : 3 , \"obj\" : \"dropdown\" , \"x\" : 5 , \"y\" : 40 , \"w\" : 230 , \"h\" : 30 , \"options\" : \"\" } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 - obj : \"p1b3\" # dropdown properties : \"options\" : > {% if not (is_state('input_select.my_dropdown_selections','unavailable')) %}{%for item in state_attr('input_select.my_dropdown_selections','options')%}{{item+\"\\n\"|e}}{%-if not loop.last%}{%-endif%}{%-endfor%}{% endif %} \"val\" : > {% if not (is_state('input_select.my_dropdown_selections','unavailable')) %}{%for item in state_attr('input_select.my_dropdown_selections','options')%} {{loop.index -1 if item == states('input_select.my_dropdown_selections') }} {%-endfor%}{% endif %} event : \"changed\" : - service : input_select.select_option data : option : '{{ text }}' target : entity_id : input_select.my_dropdown_selections - service : persistent_notification.create data : message : Selected {{ text }} Color coded icons ~ Color code a WiFi icon according to RSSI reported by the plate openHASP config: (screen size 240x320) 1 { \"obj\" : \"btn\" , \"id\" : 1 , \"x\" : 120 , \"y\" : 1 , \"w\" : 30 , \"h\" : 40 , \"text_font\" : \"2\" , \"text\" : \"\\uE5A9\" , \"text_color\" : \"gray\" , \"bg_opa\" : 0 , \"border_width\" : 0 } relevant openHASP-custom-component config: 1 2 3 - obj : \"p0b1\" properties : \"text_color\" : \"{% if -30 <= state_attr('openhasp.openhasp_plate','rssi') |int %}green{% elif -31 > state_attr('openhasp.openhasp_plate','rssi') |int >= -50 %}orange{% elif -51 > state_attr('openhasp.openhasp_plate','rssi') |int >= -80 %}tomato{% else %}red{% endif %}\" Color code a temperature icon according to sensor values openHASP config: (screen size 240x320) 1 { \"obj\" : \"btn\" , \"id\" : 3 , \"x\" : 165 , \"y\" : 1 , \"w\" : 30 , \"h\" : 40 , \"text_font\" : \"2\" , \"text\" : \"\\uE50F\" , \"text_color\" : \"gray\" , \"bg_opa\" : 0 , \"border_width\" : 0 } relevant openHASP-custom-component config: 1 2 3 - obj : \"p0b3\" properties : \"text_color\" : \"{% if states('sensor.room_temperature') |int <= 21 %}#4682B4{% elif 21 < states('sensor.room_temperature') |int <= 26 %}green{% else %}red{% endif %}\" Light brightness and color ~ Have a light in Home Assistant controlled by openHASP. In our example we use Lanbon L8's moodlight which has both brightness and color - we use a slider object for the brightness, and a cpicker object for color. relevant openHASP config: 1 2 { \"page\" : 1 , \"id\" : 31 , \"obj\" : \"slider\" , \"x\" : 6 , \"y\" : 15 , \"w\" : 14 , \"h\" : 180 , \"min\" : 1 , \"max\" : 255 } { \"page\" : 1 , \"id\" : 32 , \"obj\" : \"cpicker\" , \"x\" : 30 , \"y\" : 10 , \"w\" : 180 , \"h\" : 180 } relevant openHASP-custom-component config: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 - obj : \"p1b31\" # Light brightness properties : \"val\" : \"{{ state_attr('light.plate_moodlight', 'brightness') if state_attr('light.plate_moodlight', 'brightness') != None else 0 }}\" event : \"changed\" : - service : light.turn_on data : entity_id : light.plate_moodlight brightness : \"{{ val }}\" \"up\" : - service : light.turn_on data : entity_id : light.plate_moodlight brightness : \"{{ val }}\" - obj : \"p1b32\" # Light color properties : \"color\" : > {% if is_state('light.plate_moodlight','on') %} {% set rgb = state_attr('light.plate_moodlight','rgb_color') %} {{ \"#%02x%02x%02x\" | format(rgb[0],rgb[1],rgb[2]) }} {% endif %} event : \"up\" : - service : light.turn_on data : entity_id : light.plate_moodlight rgb_color : \"[{{ r }},{{ g }},{{ b }}]\" The brightness slider value gets updated from the brightness attribute of light.plate_moodlight , while it's on. If it's off, that attribute is removed by Home Assistant, in that case we set it to 0 . The color property gets updated from the rgb_color attriburte of the light. The R, G and B decimal color values are converted to hexadecimal html color code using a template whenever the color of the light changes in Home Assistant. When somebody changes the color of the picker object on the page, the light in Home Assistant gets updated with rgb_color values received in the MQTT message from the plate. Cover with state feedback ~ The icon on the up and down buttons change color when covers move and set opacity when reached to limit. UI theme set to Hasp Light in plate's web interface. relevant openHASP config: (screen size 240x320) 1 2 3 { \"page\" : 1 , \"id\" : 4 , \"obj\" : \"btn\" , \"x\" : 5 , \"y\" : 140 , \"w\" : 73 , \"h\" : 60 , \"toggle\" : false , \"text\" : \"\\uE05D\" , \"text_font\" : 32 } { \"page\" : 1 , \"id\" : 5 , \"obj\" : \"btn\" , \"x\" : 83 , \"y\" : 140 , \"w\" : 73 , \"h\" : 60 , \"toggle\" : false , \"text\" : \"\\uE4DB\" , \"text_font\" : 32 } { \"page\" : 1 , \"id\" : 6 , \"obj\" : \"btn\" , \"x\" : 161 , \"y\" : 140 , \"w\" : 73 , \"h\" : 60 , \"toggle\" : false , \"text\" : \"\\uE045\" , \"text_font\" : 32 } relevant openHASP-custom-component config: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 - obj : \"p1b4\" properties : \"text_color\" : \"{{ '#FFFF00' if is_state('cover.cover_1', 'opening') else '#FFFFFF' }}\" \"text_opa\" : \"{{ '80' if is_state_attr('cover.cover_1','current_position', 100) else '255' }}\" event : \"down\" : - service : cover.open_cover target : entity_id : \"cover.cover_1\" - obj : \"p1b5\" properties : \"text\" : > {% if is_state('cover.cover_1', 'closing') %} {{ \"\\uE4DB\" | e }} {%-elif is_state('cover.cover_1', 'opening') %} {{ \"\\uE4DB\" | e }} {%-elif is_state('cover.cover_1', 'closed') %} {{ \"\\uF11C\" | e }} {%-elif is_state('cover.cover_1', 'open') %} {{ \"\\uF11E\" | e }} {% endif %} event : \"down\" : - service : cover.stop_cover target : entity_id : \"cover.cover_1\" - obj : \"p1b6\" properties : \"text_color\" : \"{{ '#FFFF00' if is_state('cover.cover_1', 'closing') else '#FFFFFF' }}\" \"text_opa\" : \"{{ '80' if is_state_attr('cover.cover_1','current_position', 0) else '255' }}\" event : \"down\" : - service : cover.close_cover target : entity_id : \"cover.cover_1\" Cover with button matrix ~ A simpler cover control with only basic feedback. UI theme set to Hasp Light in plate's web interface. relevant openHASP config: (screen size 240x320) 1 { \"page\" : 4 , \"id\" : 20 , \"obj\" : \"btnmatrix\" , \"x\" : 0 , \"y\" : 20 , \"w\" : 240 , \"h\" : 70 , \"options\" :[ \"\\uE05D\" , \"\\uE4DB\" , \"\\uE045\" ], \"text_font\" : 32 , \"bg_opa\" : 0 , \"border_opa\" : 0 } relevant openHASP-custom-component config: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 - obj : \"p4b20\" properties : \"options\" : > {% if is_state('cover.cover_1', 'closing') %} [\"\\uE05D\",\"\\uE4DB\",\"#FFFF00 \\uE045\"] {%-elif is_state('cover.cover_1', 'opening') %} [\"#FFFF00 \\uE05D\",\"\\uE4DB\",\"\\uE045\"] {%-else %} [\"\\uE05D\",\"\\uE4DB\",\"\\uE045\"] {% endif %} event : \"down\" : - service : > {% if val == 0 %} cover.open_cover {%-elif val == 1 %} cover.stop_cover {%-elif val == 2 %} cover.close_cover {% endif %} target : entity_id : cover.cover_1 Covers like in Lovelace ~ The icon behaves like in Lovelace. UI theme set to Hasp Light in plate's web interface. Your browser does not support the video tag. Check out the Lovelace-like entities for similar placement. relevant openHASP config: (screen size 240x320, UI Theme: Hasp Light) 1 2 3 4 5 6 7 8 9 10 11 { \"page\" : 5 , \"id\" : 12 , \"obj\" : \"label\" , \"x\" : 8 , \"y\" : 33 , \"w\" : 35 , \"h\" : 35 , \"text\" : \"\\uF11D\" , \"align\" : 1 , \"text_font\" : 32 , \"text_color\" : \"#053248\" } { \"page\" : 5 , \"id\" : 13 , \"obj\" : \"label\" , \"x\" : 48 , \"y\" : 43 , \"w\" : 80 , \"h\" : 30 , \"text\" : \"Cover 1\" , \"align\" : 0 , \"text_font\" : 16 , \"text_color\" : \"#053248\" } { \"page\" : 5 , \"id\" : 14 , \"obj\" : \"btn\" , \"x\" : 125 , \"y\" : 37 , \"w\" : 30 , \"h\" : 30 , \"toggle\" : false , \"text\" : \"\\uE05D\" , \"text_font\" : 32 , \"bg_opa\" : 0 , \"border_opa\" : 0 , \"text_color\" : \"#053248\" } { \"page\" : 5 , \"id\" : 15 , \"obj\" : \"btn\" , \"x\" : 165 , \"y\" : 37 , \"w\" : 30 , \"h\" : 30 , \"toggle\" : false , \"text\" : \"\\uE4DB\" , \"text_font\" : 32 , \"bg_opa\" : 0 , \"border_opa\" : 0 , \"text_color\" : \"#053248\" } { \"page\" : 5 , \"id\" : 16 , \"obj\" : \"btn\" , \"x\" : 205 , \"y\" : 37 , \"w\" : 30 , \"h\" : 30 , \"toggle\" : false , \"text\" : \"\\uE045\" , \"text_font\" : 32 , \"bg_opa\" : 0 , \"border_opa\" : 0 , \"text_color\" : \"#053248\" } { \"page\" : 5 , \"id\" : 22 , \"obj\" : \"label\" , \"x\" : 8 , \"y\" : 69 , \"w\" : 35 , \"h\" : 35 , \"text\" : \"\\uF11D\" , \"align\" : 1 , \"text_font\" : 32 , \"text_color\" : \"#053248\" } { \"page\" : 5 , \"id\" : 23 , \"obj\" : \"label\" , \"x\" : 48 , \"y\" : 79 , \"w\" : 80 , \"h\" : 30 , \"text\" : \"Cover 2\" , \"align\" : 0 , \"text_font\" : 16 , \"text_color\" : \"#053248\" } { \"page\" : 5 , \"id\" : 24 , \"obj\" : \"btn\" , \"x\" : 125 , \"y\" : 73 , \"w\" : 30 , \"h\" : 30 , \"toggle\" : false , \"text\" : \"\\uE05D\" , \"text_font\" : 32 , \"bg_opa\" : 0 , \"border_opa\" : 0 , \"text_color\" : \"#053248\" } { \"page\" : 5 , \"id\" : 25 , \"obj\" : \"btn\" , \"x\" : 165 , \"y\" : 73 , \"w\" : 30 , \"h\" : 30 , \"toggle\" : false , \"text\" : \"\\uE4DB\" , \"text_font\" : 32 , \"bg_opa\" : 0 , \"border_opa\" : 0 , \"text_color\" : \"#053248\" } { \"page\" : 5 , \"id\" : 26 , \"obj\" : \"btn\" , \"x\" : 205 , \"y\" : 73 , \"w\" : 30 , \"h\" : 30 , \"toggle\" : false , \"text\" : \"\\uE045\" , \"text_font\" : 32 , \"bg_opa\" : 0 , \"border_opa\" : 0 , \"text_color\" : \"#053248\" } relevant openHASP-custom-component config: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 - obj : \"p5b12\" properties : \"text\" : > {% if is_state('cover.my_cover', 'closing') %} {{ \"\\uE6C0\" | e }} {%-elif is_state('cover.my_cover', 'opening') %} {{ \"\\uE6C3\" | e }} {%-elif is_state('cover.my_cover', 'closed') %} {{ \"\\uF11C\" | e }} {%-elif is_state('cover.my_cover', 'open') %} {{ \"\\uF11E\" | e }} {% endif %} - obj : \"p5b14\" event : \"down\" : - service : cover.open_cover target : entity_id : \"cover.my_cover\" - obj : \"p5b15\" event : \"down\" : - service : cover.stop_cover target : entity_id : \"cover.my_cover\" - obj : \"p5b16\" event : \"down\" : - service : cover.close_cover target : entity_id : \"cover.my_cover\" Media player ~ The labels with artist and title are scrolling, the progressbar fills if the media player provides duration and playback position. The dropdown lists containing the available sources and sound modes of the player get populated automatically by the values existing on the player in Home Assistant, and also the actually selected source is in sync with it. Player availability is shown by the opacity of the buttons. Player state (play/pause) is shown by the middle button, short pressing means pause, long-press means stop. Power state shown by color, repeat, shuffle and muted state shown by appropriate icons on the buttons. UI theme set to Hasp Light in plate's web interface. relevant openHASP config: (screen size 240x320) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"page\" : 6 , \"id\" : 10 , \"obj\" : \"obj\" , \"x\" : 5 , \"y\" : 35 , \"w\" : 230 , \"h\" : 250 , \"click\" : 0 , \"bg_opa\" : 0 , \"shadow_opa\" : 140 , \"shadow_color\" : \"black\" , \"shadow_width\" : 20 , \"shadow_spread\" : 0 } { \"page\" : 6 , \"id\" : 11 , \"obj\" : \"obj\" , \"x\" : 8 , \"y\" : 38 , \"w\" : 200 , \"h\" : 84 , \"click\" : 0 } { \"page\" : 6 , \"id\" : 12 , \"obj\" : \"label\" , \"x\" : 10 , \"y\" : 48 , \"w\" : 196 , \"h\" : 30 , \"text\" : \"-\" , \"mode\" : \"scroll\" , \"align\" : 1 } { \"page\" : 6 , \"id\" : 13 , \"obj\" : \"label\" , \"x\" : 10 , \"y\" : 83 , \"w\" : 196 , \"h\" : 30 , \"text\" : \"-\" , \"mode\" : \"scroll\" , \"align\" : 1 } { \"page\" : 6 , \"id\" : 14 , \"obj\" : \"bar\" , \"x\" : 8 , \"y\" : 117 , \"w\" : 200 , \"h\" : 5 , \"min\" : 0 , \"max\" : 100 , \"border_opa\" : 0 , \"pad_top\" : 0 , \"pad_bottom\" : 0 , \"pad_left\" : 0 , \"pad_right\" : 0 } { \"page\" : 6 , \"id\" : 15 , \"obj\" : \"dropdown\" , \"x\" : 8 , \"y\" : 129 , \"w\" : 120 , \"h\" : 30 , \"options\" : \"Source1\\nSource2\\nSource3\" , \"direction\" : 3 , \"max_height\" : 300 , \"radius\" : 5 } { \"page\" : 6 , \"id\" : 16 , \"obj\" : \"dropdown\" , \"x\" : 133 , \"y\" : 129 , \"w\" : 75 , \"h\" : 30 , \"options\" : \"Jazz\\nPop\\nRock\" , \"direction\" : 2 , \"radius\" : 5 } { \"page\" : 6 , \"id\" : 17 , \"obj\" : \"btn\" , \"x\" : 8 , \"y\" : 166 , \"w\" : 50 , \"h\" : 70 , \"toggle\" : false , \"text\" : \"\\uE4AE\" , \"text_font\" : 32 } { \"page\" : 6 , \"id\" : 18 , \"obj\" : \"btn\" , \"x\" : 66 , \"y\" : 166 , \"w\" : 83 , \"h\" : 70 , \"toggle\" : false , \"text\" : \"\\uE40A\" , \"text_font\" : 32 } { \"page\" : 6 , \"id\" : 19 , \"obj\" : \"btn\" , \"x\" : 157 , \"y\" : 166 , \"w\" : 51 , \"h\" : 70 , \"toggle\" : false , \"text\" : \"\\uE4AD\" , \"text_font\" : 32 } { \"page\" : 6 , \"id\" : 20 , \"obj\" : \"slider\" , \"x\" : 212 , \"y\" : 38 , \"w\" : 20 , \"h\" : 244 , \"min\" : 0 , \"max\" : 100 , \"val\" : 85 } { \"page\" : 6 , \"id\" : 21 , \"obj\" : \"btn\" , \"x\" : 8 , \"y\" : 241 , \"w\" : 45 , \"h\" : 40 , \"toggle\" : false , \"text\" : \"\\uE425\" , \"text_font\" : 32 } { \"page\" : 6 , \"id\" : 22 , \"obj\" : \"btn\" , \"x\" : 60 , \"y\" : 241 , \"w\" : 45 , \"h\" : 40 , \"toggle\" : false , \"text\" : \"\\uE457\" , \"text_font\" : 32 } { \"page\" : 6 , \"id\" : 23 , \"obj\" : \"btn\" , \"x\" : 111 , \"y\" : 241 , \"w\" : 45 , \"h\" : 40 , \"toggle\" : false , \"text\" : \"\\uE49E\" , \"text_font\" : 32 } { \"page\" : 6 , \"id\" : 24 , \"obj\" : \"btn\" , \"x\" : 163 , \"y\" : 241 , \"w\" : 45 , \"h\" : 40 , \"toggle\" : false , \"text\" : \"\\uE57E\" , \"text_font\" : 32 } relevant openHASP-custom-component config: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 - obj : \"p6b12\" # artist label properties : \"text\" : \"{{ state_attr('media_player.sound_my_room1','media_artist') if state_attr('media_player.sound_my_room1','media_artist') else '-' }}\" - obj : \"p6b13\" # title label properties : \"text\" : \"{{ state_attr('media_player.sound_my_room1','media_title') if state_attr('media_player.sound_my_room1','media_title') else '-' }}\" - obj : \"p6b15\" # sources list properties : \"options\" : > {% if not (is_state('media_player.sound_my_room1','unavailable')) %} {{\"(no source)\\n\"|e}} {%- for source in state_attr('media_player.sound_my_room1','source_list') -%} {{source+\"\\n\"|e}}{%-if not loop.last%}{%-endif%}{%-endfor%}{%-endif %} \"val\" : > {% if not (is_state('media_player.sound_my_room1','unavailable')) %} {% if state_attr('media_player.sound_my_room1','source') == None %}0{% else %} {%for source in state_attr('media_player.sound_my_room1','source_list')%} {{loop.index if source == state_attr('media_player.sound_my_room1','source') }} {%-endfor%}{%-endif %}{%-endif %} \"click\" : \"{{ 'false' if (is_state('media_player.sound_my_room1','unavailable') or is_state('media_player.sound_my_room1','unknown')) else 'true' }}\" event : \"changed\" : - service : media_player.select_source data : entity_id : media_player.sound_my_room1 source : \"{{ text }}\" - obj : \"p6b16\" # sound modes list properties : \"options\" : > {% if not (is_state('media_player.sound_my_room1','unavailable')) %} {%-for soundmode in state_attr('media_player.sound_my_room1','sound_mode_list')-%} {{soundmode+\"\\n\"|e}}{%-if not loop.last%}{%-endif%}{%-endfor%}{%-endif %} \"val\" : > {% if not (is_state('media_player.sound_my_room1','unavailable')) %}{%for source in state_attr('media_player.sound_my_room1','sound_mode_list')%} {{loop.index -1 if source == state_attr('media_player.sound_my_room1','sound_mode') }} {%-endfor%}{% endif %} \"click\" : \"{{ 'false' if (is_state('media_player.sound_my_room1','unavailable') or is_state('media_player.sound_my_room1','unknown')) else 'true' }}\" event : \"changed\" : - service : media_player.select_sound_mode data : entity_id : media_player.sound_my_room1 sound_mode : \"{{ text }}\" - obj : \"p6b14\" # progressbar properties : \"max\" : \"{{ state_attr('media_player.sound_my_room1','media_duration') | int }}\" \"val\" : \"{{ state_attr('media_player.sound_my_room1','media_position') | int }}\" - obj : \"p6b18\" # play/pause/stop properties : \"text\" : > {% if is_state('media_player.sound_my_room1', 'playing') %} {{ \"\\uE3E4\" | e }} {%-else %} {{ \"\\uE40A\" | e }} {%-endif %} \"text_opa\" : \"{{ '80' if (is_state('media_player.sound_my_room1','unavailable') or is_state('media_player.sound_my_room1','unknown')) else '255' }}\" event : \"down\" : - service : media_player.media_play_pause target : entity_id : media_player.sound_my_room1 \"long\" : - service : media_player.media_stop target : entity_id : media_player.sound_my_room1 - obj : \"p6b17\" # prev properties : \"text_opa\" : \"{{ '80' if (is_state('media_player.sound_my_room1','unavailable') or is_state('media_player.sound_my_room1','unknown')) else '255' }}\" event : \"down\" : - service : media_player.media_previous_track target : entity_id : media_player.sound_my_room1 - obj : \"p6b19\" # next properties : \"text_opa\" : \"{{ '80' if (is_state('media_player.sound_my_room1','unavailable') or is_state('media_player.sound_my_room1','unknown')) else '255' }}\" event : \"down\" : - service : media_player.media_next_track target : entity_id : media_player.sound_my_room1 - obj : \"p6b20\" # volume slider properties : \"val\" : \"{{ state_attr('media_player.sound_my_room1','volume_level') * 100 | int }}\" \"click\" : \"{{ 'false' if (is_state('media_player.sound_my_room1','unavailable') or is_state('media_player.sound_my_room1','unknown')) else 'true' }}\" event : \"changed\" : - service : media_player.volume_set data : entity_id : media_player.sound_my_room1 volume_level : \"{{ val | int / 100 }}\" \"up\" : - service : media_player.volume_set data : entity_id : media_player.sound_my_room1 volume_level : \"{{ val | int / 100 }}\" - obj : \"p6b21\" # power properties : \"text_color\" : \"{{ '#B00000' if states('media_player.sound_my_room1') == 'off' else '#FFFFFF' }}\" \"text_opa\" : \"{{ '80' if (is_state('media_player.sound_my_room1','unavailable') or is_state('media_player.sound_my_room1','unknown')) else '255' }}\" event : \"down\" : - service : media_player.toggle data : entity_id : media_player.sound_my_room1 - obj : \"p6b22\" # repeat properties : \"text\" : > {% if is_state_attr('media_player.sound_my_room1', 'repeat', 'one') %} {{ \"\\uE458\" | e }} {% elif is_state_attr('media_player.sound_my_room1', 'repeat', 'all') %} {{ \"\\uE456\" | e }} {%-else %} {{ \"\\uE457\" | e }} {%-endif %} \"text_opa\" : \"{{ '80' if (is_state('media_player.sound_my_room1','unavailable') or is_state('media_player.sound_my_room1','unknown')) else '255' }}\" event : \"down\" : - service : media_player.repeat_set data : entity_id : media_player.sound_my_room1 repeat : > {% if is_state_attr('media_player.sound_my_room1', 'repeat', 'one') %} all {% elif is_state_attr('media_player.sound_my_room1', 'repeat', 'all') %} off {% elif is_state_attr('media_player.sound_my_room1', 'repeat', 'off') %} one {%-endif %} - obj : \"p6b23\" # shuffle properties : \"text\" : > {% if state_attr('media_player.sound_my_room1', 'shuffle') %} {{ \"\\uE49D\" | e }} {%-else %} {{ \"\\uE49E\" | e }} {%-endif %} \"text_opa\" : \"{{ '80' if (is_state('media_player.sound_my_room1','unavailable') or is_state('media_player.sound_my_room1','unknown')) else '255' }}\" event : \"down\" : - service : media_player.shuffle_set data : entity_id : media_player.sound_my_room1 shuffle : > {% if state_attr('media_player.sound_my_room1', 'shuffle') %} false {% else %} true {%-endif %} - obj : \"p6b24\" # mute properties : \"text\" : > {% if state_attr('media_player.sound_my_room1', 'is_volume_muted') %} {{ \"\\uE75F\" | e }} {%-else %} {{ \"\\uE57E\" | e }} {%-endif %} \"text_opa\" : \"{{ '80' if (is_state('media_player.sound_my_room1','unavailable') or is_state('media_player.sound_my_room1','unknown')) else '255' }}\" event : \"down\" : - service : media_player.volume_mute data : entity_id : media_player.sound_my_room1 is_volume_muted : > {% if state_attr('media_player.sound_my_room1', 'is_volume_muted') %} false {% else %} true {%-endif %} Note that the val value of the slider is multiplied and divided by 100 when read and set, because LVGL only suppports integers for object values. By multiplying and dividing by 100, it becomes possible to set volume between 0 and 1 as required by Home Assistant. Generic thermostat/climate ~ This example is a bit more complex in the aspect that it uses several objects put on top of each other, and grouped toghether using the parentid parameter. Special attention goes to an invisible tabview (exteding over the label dispaying the target temperarture) which allows for swiping between an on/off switch and dropdowns for setting the hvac and fan modes. The target temperature can be set by dragging the arc handle, more precise +/- setting possible by short/long pressing the middle circle containing the current temperature (increasing/decreasing the value by the temperature step defined by the climate entity). Note that the min , max and val values of the arc and gauge are multiplied and divided by 10 when set and read, because LVGL only suppports integers for object values. By multiplying and dividing by 10, it becomes possible to set decimal values for climate temperature. The number of the ticks on the gauge is determined from the min , max attributes of the configured climate, likewise the hvac_modes and fan_modes dropdowns. You can localise these using the if-else statements of the template in the configuration of the custom component. The active area of the arc changes color based on the current hvac mode of the entity. UI theme set to Hasp Light in plate's web interface. Note that the tab swiping dots ( p3b26 ) are also handled by the custom component. Don't forget update the service call in the configuration with your plate's MQTT node name, and the command parameters if you change the page of the objects. Your browser does not support the video tag. relevant openHASP config: (screen size 240x320) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { \"page\" : 3 , \"id\" : 10 , \"obj\" : \"obj\" , \"x\" : 5 , \"y\" : 35 , \"w\" : 230 , \"h\" : 250 , \"click\" : 0 } { \"page\" : 3 , \"id\" : 10 , \"obj\" : \"obj\" , \"x\" : 5 , \"y\" : 35 , \"w\" : 230 , \"h\" : 250 , \"click\" : 0 } { \"page\" : 3 , \"id\" : 20 , \"obj\" : \"arc\" , \"x\" : 5 , \"y\" : 37 , \"w\" : 230 , \"h\" : 230 , \"min\" : 170 , \"max\" : 300 , \"val\" : 250 , \"border_side\" : 0 , \"type\" : 0 , \"rotation\" : 0 , \"start_angle\" : 135 , \"end_angle\" : 45 , \"adjustable\" : \"true\" , \"line_width\" : 21 , \"line_width1\" : 21 , \"line_color1\" : \"#34bdeb\" , \"bg_opa\" : 0 , \"pad_top2\" : 5 , \"pad_bottom2\" : 5 , \"pad_left2\" : 5 , \"pad_right2\" : 5 , \"pad_top\" : 5 , \"pad_bottom\" : 5 , \"pad_left\" : 5 , \"pad_right\" : 5 } { \"page\" : 3 , \"id\" : 21 , \"obj\" : \"gauge\" , \"x\" : 28 , \"y\" : 28 , \"w\" : 175 , \"h\" : 175 , \"parentid\" : 20 , \"min\" : 170 , \"max\" : 300 , \"val\" : 224 , \"format\" : 1 , \"critical_value\" : 301 , \"label_count\" : 14 , \"line_count\" : 27 , \"border_width\" : 0 , \"pad_top\" : 2 , \"pad_bottom\" : 2 , \"pad_left\" : 2 , \"pad_right\" : 2 , \"value_str\" : \"\u00b0C\" , \"value_ofs_y\" : 55 , \"value_font\" : 16 , \"bg_opa\" : 0 , \"line_width2\" : 3 , \"line_rounded2\" : 1 , \"line_color\" : \"#348feb\" , \"line_color1\" : \"#348feb\" , \"scale_grad_color\" : \"#eb4934\" , \"scale_grad_color1\" : \"#eb4934\" , \"scale_end_color1\" : \"#eb4934\" } { \"page\" : 3 , \"id\" : 22 , \"obj\" : \"obj\" , \"x\" : 85 , \"y\" : 85 , \"w\" : 60 , \"h\" : 60 , \"parentid\" : 20 , \"click\" : 0 , \"radius\" : 30 , \"border_width\" : 2 , \"border_opa\" : 200 } { \"page\" : 3 , \"id\" : 23 , \"obj\" : \"label\" , \"x\" : 80 , \"y\" : 100 , \"w\" : 70 , \"h\" : 30 , \"parentid\" : 20 , \"text\" : \"22.4\" , \"text_font\" : 24 , \"align\" : \"center\" } { \"page\" : 3 , \"id\" : 24 , \"obj\" : \"obj\" , \"x\" : 145 , \"y\" : 245 , \"w\" : 60 , \"h\" : 30 , \"click\" : 0 , \"radius\" : 5 } { \"page\" : 3 , \"id\" : 25 , \"obj\" : \"label\" , \"x\" : 145 , \"y\" : 245 , \"w\" : 60 , \"h\" : 30 , \"text\" : \"25\" , \"text_font\" : 24 , \"align\" : \"center\" } { \"page\" : 3 , \"id\" : 26 , \"obj\" : \"label\" , \"x\" : 90 , \"y\" : 220 , \"w\" : 60 , \"h\" : 30 , \"text\" : \"#909090 \\u2022# #000000 \\u2022# #909090 \\u2022#\" , \"text_font\" : 24 , \"align\" : \"center\" , \"text_color\" : \"grey\" , \"border_width\" : 0 } { \"page\" : 3 , \"id\" : 30 , \"obj\" : \"tabview\" , \"x\" : 0 , \"y\" : 235 , \"w\" : 240 , \"h\" : 80 , \"btn_pos\" : 0 , \"bg_opa\" : 0 , \"border_width\" : 0 , \"radius\" : 0 } { \"page\" : 3 , \"id\" : 31 , \"obj\" : \"tab\" , \"parentid\" : 30 } { \"page\" : 3 , \"id\" : 32 , \"obj\" : \"tab\" , \"parentid\" : 30 } { \"page\" : 3 , \"id\" : 33 , \"obj\" : \"tab\" , \"parentid\" : 30 } { \"page\" : 3 , \"id\" : 41 , \"obj\" : \"switch\" , \"x\" : 35 , \"y\" : 10 , \"w\" : 60 , \"h\" : 30 , \"parentid\" : 31 , \"radius\" : 25 , \"radius2\" : 25 } { \"page\" : 3 , \"id\" : 42 , \"obj\" : \"dropdown\" , \"x\" : 15 , \"y\" : 10 , \"w\" : 110 , \"h\" : 30 , \"parentid\" : 32 , \"options\" : \"fan_modes\" , \"direction\" : \"1\" , \"radius\" : 5 } { \"page\" : 3 , \"id\" : 43 , \"obj\" : \"dropdown\" , \"x\" : 15 , \"y\" : 10 , \"w\" : 110 , \"h\" : 30 , \"parentid\" : 33 , \"options\" : \"hvac_modes\" , \"direction\" : \"1\" , \"radius\" : 5 } relevant openHASP-custom-component configobj : \"p3b20\" # arc slider properties : \"val\" : \"{{ state_attr('climate.thermostat_1','temperature') * 10 | int if not (is_state('climate.thermostat_1','unavailable')) }}\" \"min\" : \"{{ state_attr('climate.thermostat_1','min_temp') * 10 | int if not (is_state('climate.thermostat_1','unavailable')) }}\" \"max\" : \"{{ state_attr('climate.thermostat_1','max_temp') * 10 | int if not (is_state('climate.thermostat_1','unavailable')) }}\" \"line_color1\" : > {% if is_state('climate.thermostat_1', 'cool') %} {{ \"#346beb\" }} {%-elif is_state('climate.thermostat_1', 'heat_cool') %} {{ \"#34bdeb\" }} {%-elif is_state('climate.thermostat_1', 'heat') %} {{ \"#eb3434\" }} {%-elif is_state('climate.thermostat_1', 'dry') %} {{ \"#ebeb34\" }} {%-elif is_state('climate.thermostat_1', 'fan_only') %} {{ \"#34eb77\" }} {%-else %} {{ \"#9f96b0\" }} {% endif %} event : \"changed\" : - service : climate.set_temperature target : entity_id : climate.thermostat_1 data : temperature : \"{{ val | int / 10 }}\" \"up\" : - service : climate.set_temperature target : entity_id : climate.thermostat_1 data : temperature : \"{{ val | int / 10 }}\" - obj : \"p3b21\" # gauge current temp properties : \"val\" : \"{{ state_attr('climate.thermostat_1','current_temperature') * 10 | int if not (is_state('climate.thermostat_1','unavailable')) }}\" \"min\" : \"{{ state_attr('climate.thermostat_1','min_temp') * 10 | int if not (is_state('climate.thermostat_1','unavailable')) }}\" \"max\" : \"{{ state_attr('climate.thermostat_1','max_temp') * 10 | int if not (is_state('climate.thermostat_1','unavailable')) }}\" \"critical_value\" : \"{{ (state_attr('climate.thermostat_1','max_temp') * 10 | int + 1) if not (is_state('climate.thermostat_1','unavailable')) }}\" \"label_count\" : \"{{ (state_attr('climate.thermostat_1','max_temp') | int - state_attr('climate.thermostat_1','min_temp') | int + 1) if not (is_state('climate.thermostat_1','unavailable')) }}\" \"line_count\" : \"{{ ((state_attr('climate.thermostat_1','max_temp') | int - state_attr('climate.thermostat_1','min_temp') | int) * 2 + 1) if not (is_state('climate.thermostat_1','unavailable')) }}\" - obj : \"p3b23\" # label current temp (and +/- with short/long touch) properties : \"text\" : \"{{ state_attr('climate.thermostat_1','current_temperature') if not (is_state('climate.thermostat_1','unavailable')) }}\" event : \"up\" : - service : climate.set_temperature target : entity_id : climate.thermostat_1 data : temperature : \"{{ state_attr('climate.thermostat_1','temperature') + state_attr('climate.thermostat_1','target_temp_step') | float(default=0)}}\" \"long\" : - service : climate.set_temperature target : entity_id : climate.thermostat_1 data : temperature : \"{{ state_attr('climate.thermostat_1','temperature') - state_attr('climate.thermostat_1','target_temp_step') | float(default=0)}}\" - obj : \"p3b25\" # label target temp properties : \"text\" : \"{{ state_attr('climate.thermostat_1','temperature') if not (is_state('climate.thermostat_1','unavailable')) }}\" - obj : \"p3b41\" # on/off switch properties : \"val\" : \"{{ 0 if (is_state('climate.thermostat_1', 'off') or is_state('climate.thermostat_1', 'unavailable')) else 1 }}\" event : \"down\" : - service_template : > {% if val == 0 -%} climate.turn_on {% else -%} climate.turn_off {% endif -%} entity_id : \"climate.thermostat_1\" - obj : \"p3b30\" # tab dots event : \"changed\" : - service : openhasp.command target : entity_id : openhasp.your_plate data : keyword : p3b26.text parameters : > {% if val == 0 %} {{ \"#000000 \\u2022# #909090 \\u2022# #909090 \\u2022#\" | e }} {%-elif val == 1 %} {{ \"#909090 \\u2022# #000000 \\u2022# #909090 \\u2022#\" | e }} {%-elif val == 2 %} {{ \"#909090 \\u2022# #909090 \\u2022# #000000 \\u2022#\" | e }} {% endif %} - obj : \"p3b42\" # dropdown with fan_modes properties : \"options\" : > {% if not (is_state('climate.thermostat_1','unavailable')) %}{%for mode in state_attr('climate.thermostat_1','fan_modes')%} {%- if mode == 'auto' -%} Automatic{{\"\\n\"|e}} {%- elif mode == 'low' -%} Low{{\"\\n\"|e}} {%- elif mode == 'medium' -%} Medium{{\"\\n\"|e}} {%- elif mode == 'high' -%} High{{\"\\n\"|e}} {%- elif mode == 'turbo' -%} Turbo{{\"\\n\"|e}} {%- endif -%} {%-if not loop.last%}{%-endif%}{%-endfor%}{% endif %} \"val\" : > {% if not (is_state('climate.thermostat_1','unavailable')) %}{%for mode in state_attr('climate.thermostat_1','fan_modes')%} {{loop.index -1 if mode == state_attr('climate.thermostat_1','fan_mode') }} {%-endfor%}{% endif %} event : \"changed\" : - service : climate.set_fan_mode target : entity_id : climate.thermostat_1 data : fan_mode : > {% if text == \"Automatic\" -%} auto {% elif text == 'Low' -%} low {% elif text == 'Medium' -%} medium {% elif text == 'High' -%} high {% elif text == 'Turbo' -%} turbo {% endif -%} - obj : \"p3b43\" # dropdown with hvac_modes properties : \"options\" : > {% if not (is_state('climate.thermostat_1','unavailable')) %}{%for mode in state_attr('climate.thermostat_1','hvac_modes')%} {%- if mode == 'off' -%} Off{{\"\\n\"|e}} {%- elif mode == 'heat' -%} Heating{{\"\\n\"|e}} {%- elif mode == 'cool' -%} Cooling{{\"\\n\"|e}} {%- elif mode == 'heat_cool' -%} Heat/Cool{{\"\\n\"|e}} {%- elif mode == 'dry' -%} Drying{{\"\\n\"|e}} {%- elif mode == 'fan_only' -%} Fan only{{\"\\n\"|e}} {%- else -%} On{{\"\\n\"|e}} {%- endif -%} {%-if not loop.last%}{%-endif%}{%-endfor%}{% endif %} \"val\" : > {% if not (is_state('climate.thermostat_1','unavailable')) %}{%for mode in state_attr('climate.thermostat_1','hvac_modes')%} {{loop.index -1 if mode == states('climate.thermostat_1') }} {%-endfor%}{% endif %} event : \"changed\" : - service : climate.set_hvac_mode target : entity_id : climate.thermostat_1 data : hvac_mode : > {% if text == \"Off\" -%} off {% elif text == 'Heating' -%} heat {% elif text == 'Cooling' -%} cool {% elif text == 'Heat/Cool' -%} heat_cool {% elif text == 'Drying' -%} dry {% elif text == 'Fan only' -%} fan_only {% endif -%} Current weather and forecasts ~ This example implements two weather forecast screens which located on the same page, can be swiped left and right. On the top area the current weather is shown, on the bottom area the user can choose by swiping between next hours and next days forecast. This is achieved by a tabview object with invisible tabs. Since there's no weather integration in Home Assistant which can offer so much information at once, this can be achieved by installing multiple weather components. In our example we use two: Met.no (the one coming by default pre-installed) for next days forecast. OpenWeatherMap (available as standard integration to be activated) for next hours forecast. You need to set the forecast mode to onecall_hourly to get forecasts for the day's next hours. The openHASP component grabs information from both weather sources and updates them on every change. The various strings containing day names, day periods, weather conditions can be localized easily to any language within the configuration. Weather condition icons are displayed from the internal flash space of the plate. For this, you need to upload the desired icon pack to the plate: light theme dark theme To unzip them on the plate, connect via Telnet and run the command unzip /openhasp-weathericons-day.zip to unzip the light theme above (alternatively you can unzip them on your computer and upload them one by one). The configuration example only shows how to use the light theme icons. Icons are copyright from manifestinteractive and merlinthered . This example implements Home Assistant's standard weather conditions only (as in 2021.06), so any weather integration component can be used. Some integrations know extra conditions in addition to the standard ones, those (with their corresponding icons) can be easily added to the component configuration below. Note that the tab swiping dots ( p5b10 ) are also handled by the custom component. Don't forget update the service call in the configuration with your plate's MQTT node name, and the command parameters if you change the page of the objects. relevant openHASP config: (screen size 240x320, UI Theme: Hasp Light) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 { \"page\" : 5 , \"id\" : 1 , \"obj\" : \"btn\" , \"x\" : 0 , \"y\" : 0 , \"w\" : 240 , \"h\" : 30 , \"text\" : \"WEATHER\" , \"text_font\" : 16 , \"bg_color\" : \"#2C3E50\" , \"text_color\" : \"#FFFFFF\" , \"radius\" : 0 , \"border_side\" : 0 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 2 , \"obj\" : \"obj\" , \"x\" : 5 , \"y\" : 35 , \"w\" : 230 , \"h\" : 250 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 14 , \"obj\" : \"img\" , \"src\" : \"/littlefs/openhasp_dummy_img.png\" , \"parentid\" : 2 , \"auto_size\" : 1 , \"w\" : 128 , \"offset_x\" : -6 , \"offset_y\" : -10 } { \"page\" : 5 , \"id\" : 15 , \"obj\" : \"label\" , \"x\" : 100 , \"y\" : 10 , \"w\" : 130 , \"h\" : 25 , \"align\" : \"center\" , \"text\" : \"date current\" , \"parentid\" : 2 } { \"page\" : 5 , \"id\" : 16 , \"obj\" : \"label\" , \"x\" : 125 , \"y\" : 34 , \"w\" : 95 , \"h\" : 40 , \"align\" : \"center\" , \"text\" : \"00.0\u00b0C\" , \"parentid\" : 2 , \"text_font\" : 32 } { \"page\" : 5 , \"id\" : 17 , \"obj\" : \"label\" , \"x\" : 110 , \"y\" : 78 , \"w\" : 120 , \"h\" : 25 , \"align\" : \"center\" , \"text\" : \"condition\" , \"parentid\" : 2 } { \"page\" : 5 , \"id\" : 19 , \"obj\" : \"label\" , \"x\" : 90 , \"y\" : 95 , \"w\" : 60 , \"h\" : 30 , \"text\" : \"#000000 \\u2022# #909090 \\u2022#\" , \"parentid\" : 2 , \"text_font\" : 24 , \"align\" : \"center\" , \"text_color\" : \"grey\" } { \"page\" : 5 , \"id\" : 10 , \"obj\" : \"tabview\" , \"x\" : 0 , \"y\" : 0 , \"w\" : 240 , \"h\" : 260 , \"parentid\" : 2 , \"btn_pos\" : 0 , \"bg_opa\" : 0 , \"border_width\" : 0 } { \"page\" : 5 , \"id\" : 11 , \"obj\" : \"tab\" , \"parentid\" : 10 } { \"page\" : 5 , \"id\" : 12 , \"obj\" : \"tab\" , \"parentid\" : 10 } { \"page\" : 5 , \"id\" : 21 , \"obj\" : \"label\" , \"x\" : 8 , \"y\" : 123 , \"w\" : 130 , \"h\" : 22 , \"align\" : \"left\" , \"text\" : \"hour+2\" , \"parentid\" : 11 , \"pad_top\" : 3 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 22 , \"obj\" : \"label\" , \"x\" : 124 , \"y\" : 123 , \"w\" : 50 , \"h\" : 22 , \"align\" : \"center\" , \"text\" : \"00.0\" , \"parentid\" : 11 , \"pad_top\" : -2 , \"text_font\" : 24 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 23 , \"obj\" : \"img\" , \"x\" : 182 , \"y\" : 118 , \"w\" : 32 , \"h\" : 32 , \"src\" : \"/littlefs/openhasp_dummy_img.png\" , \"parentid\" : 11 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 31 , \"obj\" : \"label\" , \"x\" : 8 , \"y\" : 154 , \"w\" : 130 , \"h\" : 22 , \"align\" : \"left\" , \"text\" : \"hour+3\" , \"parentid\" : 11 , \"pad_top\" : 3 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 32 , \"obj\" : \"label\" , \"x\" : 124 , \"y\" : 154 , \"w\" : 50 , \"h\" : 22 , \"align\" : \"center\" , \"text\" : \"00.0\" , \"parentid\" : 11 , \"pad_top\" : -2 , \"text_font\" : 24 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 33 , \"obj\" : \"img\" , \"x\" : 182 , \"y\" : 150 , \"w\" : 32 , \"h\" : 32 , \"src\" : \"/littlefs/openhasp_dummy_img.png\" , \"parentid\" : 11 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 41 , \"obj\" : \"label\" , \"x\" : 8 , \"y\" : 186 , \"w\" : 130 , \"h\" : 22 , \"align\" : \"left\" , \"text\" : \"hour+4\" , \"parentid\" : 11 , \"pad_top\" : 3 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 42 , \"obj\" : \"label\" , \"x\" : 124 , \"y\" : 186 , \"w\" : 50 , \"h\" : 22 , \"align\" : \"center\" , \"text\" : \"00.0\" , \"parentid\" : 11 , \"pad_top\" : -2 , \"text_font\" : 24 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 43 , \"obj\" : \"img\" , \"x\" : 182 , \"y\" : 182 , \"w\" : 32 , \"h\" : 32 , \"src\" : \"/littlefs/openhasp_dummy_img.png\" , \"parentid\" : 11 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 51 , \"obj\" : \"label\" , \"x\" : 8 , \"y\" : 218 , \"w\" : 130 , \"h\" : 22 , \"align\" : \"left\" , \"text\" : \"hour+5\" , \"parentid\" : 11 , \"pad_top\" : 3 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 52 , \"obj\" : \"label\" , \"x\" : 124 , \"y\" : 218 , \"w\" : 50 , \"h\" : 22 , \"align\" : \"center\" , \"text\" : \"00.0\" , \"parentid\" : 11 , \"pad_top\" : -2 , \"text_font\" : 24 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 53 , \"obj\" : \"img\" , \"x\" : 182 , \"y\" : 214 , \"w\" : 32 , \"h\" : 32 , \"src\" : \"/littlefs/openhasp_dummy_img.png\" , \"parentid\" : 11 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 61 , \"obj\" : \"label\" , \"x\" : 6 , \"y\" : 123 , \"w\" : 100 , \"h\" : 22 , \"align\" : \"left\" , \"text\" : \"date+1\" , \"parentid\" : 12 , \"pad_top\" : 3 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 62 , \"obj\" : \"label\" , \"x\" : 102 , \"y\" : 123 , \"w\" : 40 , \"h\" : 22 , \"align\" : \"center\" , \"text\" : \"00.0\" , \"parentid\" : 12 , \"pad_top\" : -2 , \"text_font\" : 24 , \"text_color\" : \"Navy\" , \"click\" : 0 } { \"page\" : 5 , \"id\" : 63 , \"obj\" : \"label\" , \"x\" : 150 , \"y\" : 123 , \"w\" : 40 , \"h\" : 22 , \"align\" : \"center\" , \"text\" : \"00.0\" , \"parentid\" : 12 , \"pad_top\" : -2 , \"text_font\" : 24 , \"text_color\" : \"Blush\" , \"click\" : 0 } { \"page\" : 5 , \"id\" : 64 , \"obj\" : \"img\" , \"x\" : 194 , \"y\" : 118 , \"w\" : 32 , \"h\" : 32 , \"src\" : \"/littlefs/openhasp_dummy_img.png\" , \"parentid\" : 12 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 71 , \"obj\" : \"label\" , \"x\" : 6 , \"y\" : 154 , \"w\" : 100 , \"h\" : 22 , \"align\" : \"left\" , \"text\" : \"date+2\" , \"parentid\" : 12 , \"pad_top\" : 3 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 72 , \"obj\" : \"label\" , \"x\" : 102 , \"y\" : 154 , \"w\" : 40 , \"h\" : 22 , \"align\" : \"center\" , \"text\" : \"00.0\" , \"parentid\" : 12 , \"pad_top\" : -2 , \"text_font\" : 24 , \"text_color\" : \"Navy\" , \"click\" : 0 } { \"page\" : 5 , \"id\" : 73 , \"obj\" : \"label\" , \"x\" : 150 , \"y\" : 154 , \"w\" : 40 , \"h\" : 22 , \"align\" : \"center\" , \"text\" : \"00.0\" , \"parentid\" : 12 , \"pad_top\" : -2 , \"text_font\" : 24 , \"text_color\" : \"Blush\" , \"click\" : 0 } { \"page\" : 5 , \"id\" : 74 , \"obj\" : \"img\" , \"x\" : 194 , \"y\" : 150 , \"w\" : 32 , \"h\" : 32 , \"src\" : \"/littlefs/openhasp_dummy_img.png\" , \"parentid\" : 12 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 81 , \"obj\" : \"label\" , \"x\" : 6 , \"y\" : 186 , \"w\" : 100 , \"h\" : 22 , \"align\" : \"left\" , \"text\" : \"date+3\" , \"parentid\" : 12 , \"pad_top\" : 3 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 82 , \"obj\" : \"label\" , \"x\" : 102 , \"y\" : 186 , \"w\" : 40 , \"h\" : 22 , \"align\" : \"center\" , \"text\" : \"00.0\" , \"parentid\" : 12 , \"pad_top\" : -2 , \"text_font\" : 24 , \"text_color\" : \"Navy\" , \"click\" : 0 } { \"page\" : 5 , \"id\" : 83 , \"obj\" : \"label\" , \"x\" : 150 , \"y\" : 186 , \"w\" : 40 , \"h\" : 22 , \"align\" : \"center\" , \"text\" : \"00.0\" , \"parentid\" : 12 , \"pad_top\" : -2 , \"text_font\" : 24 , \"text_color\" : \"Blush\" , \"click\" : 0 } { \"page\" : 5 , \"id\" : 84 , \"obj\" : \"img\" , \"x\" : 194 , \"y\" : 182 , \"w\" : 32 , \"h\" : 32 , \"src\" : \"/littlefs/openhasp_dummy_img.png\" , \"parentid\" : 12 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 91 , \"obj\" : \"label\" , \"x\" : 6 , \"y\" : 218 , \"w\" : 100 , \"h\" : 22 , \"align\" : \"left\" , \"text\" : \"date+4\" , \"parentid\" : 12 , \"pad_top\" : 3 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 92 , \"obj\" : \"label\" , \"x\" : 102 , \"y\" : 218 , \"w\" : 40 , \"h\" : 22 , \"align\" : \"center\" , \"text\" : \"00.0\" , \"parentid\" : 12 , \"pad_top\" : -2 , \"text_font\" : 24 , \"text_color\" : \"Navy\" , \"click\" : 0 } { \"page\" : 5 , \"id\" : 93 , \"obj\" : \"label\" , \"x\" : 150 , \"y\" : 218 , \"w\" : 40 , \"h\" : 22 , \"align\" : \"center\" , \"text\" : \"00.0\" , \"parentid\" : 12 , \"pad_top\" : -2 , \"text_font\" : 24 , \"text_color\" : \"Blush\" , \"click\" : 0 } { \"page\" : 5 , \"id\" : 94 , \"obj\" : \"img\" , \"x\" : 194 , \"y\" : 214 , \"w\" : 32 , \"h\" : 32 , \"src\" : \"/littlefs/openhasp_dummy_img.png\" , \"parentid\" : 12 , \"click\" : 0 } relevant openHASP-custom-component configobj : \"p5b14\" # Icon properties : \"src\" : \"{{ '/littlefs/w-128-' + states('weather.openweathermap') + '.png' if not is_state('weather.openweathermap','unavailable') }}\" - obj : \"p5b15\" # Current date (adjust format to your needs) properties : \"text\" : > {%- set day = (states.weather.openweathermap.last_changed).strftime('%w') %} {%- set days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"] %} {{- days[ day | int -1 ] }} {{ (states.weather.openweathermap.last_changed).strftime('%m. %d. ') }} - obj : \"p5b16\" # Current temp (you can use your own outdoor temp sensor if you have one) properties : \"text\" : \"{{ state_attr('weather.openweathermap','temperature') |string + '\u00b0C' if not is_state('weather.openweathermap','unavailable') }}\" # or \"{{ states('sensor.your_own_temp_sensor') }}\u00b0C\" - obj : \"p5b17\" # Current weather condition properties : \"text\" : > {% if states('weather.openweathermap') == \"clear-night\" -%} Clear night {% elif states('weather.openweathermap') == 'cloudy' -%} Cloudy {% elif states('weather.openweathermap') == 'fog' -%} Fog {% elif states('weather.openweathermap') == 'hail' -%} Hail {% elif states('weather.openweathermap') == 'lightning' -%} Lightning {% elif states('weather.openweathermap') == 'lightning-rainy' -%} Thunderstorms {% elif states('weather.openweathermap') == 'partlycloudy' -%} Partly cloudy {% elif states('weather.openweathermap') == 'pouring' -%} Pouring rain {% elif states('weather.openweathermap') == 'rainy' -%} Rainy {% elif states('weather.openweathermap') == 'snowy' -%} Snowy {% elif states('weather.openweathermap') == 'snowy-rainy' -%} Snowy-rainy {% elif states('weather.openweathermap') == 'sunny' -%} Sunny {% elif states('weather.openweathermap') == 'windy' -%} Windy {% elif states('weather.openweathermap') == 'windy-variant' -%} Windy {% elif states('weather.openweathermap') == 'exceptional' -%} Exceptional {% elif states('weather.openweathermap') == 'unavailable' -%} (not available) {% else -%} {{ states('weather.openweathermap') }} {% endif -%} - obj : \"p5b10\" # tab dots event : \"changed\" : - service : openhasp.command target : entity_id : openhasp.your_plate data : keyword : p8b19.text parameters : > {% if val == 0 %} {{ \"#000000 \\u2022# #909090 \\u2022#\" | e }} {%-elif val == 1 %} {{ \"#909090 \\u2022# #000000 \\u2022#\" | e }} {% endif %} - obj : \"p5b21\" # Forecast time +1h properties : \"text\" : > {%- set update = states('sensor.date') %} {%- set midnight = now().replace(hour=0, minute=0, second=0, microsecond=0).timestamp() %} {%- set event = as_timestamp(strptime(state_attr('weather.openweathermap','forecast')[1]['datetime'], '%Y-%m-%dT%H:%M:%S%z', default='2020-01-00T00:00:00+00:00')) %} {%- set delta = ((event - midnight) // 86400) | int %} {%- if delta == 0 %} Today {%- elif delta == 1 %} Tomorrow {%- endif %} {{- event | timestamp_custom(\" %-I %p\") }} - obj : \"p5b22\" # Forecast temp +1h properties : \"text\" : \"{{ state_attr('weather.openweathermap','forecast')[1]['temperature'] }}\" - obj : \"p5b23\" # Forecast condition +1h properties : \"src\" : \"/littlefs/w-32-{{ state_attr('weather.openweathermap','forecast')[1]['condition'] }}.png\" - obj : \"p5b31\" # Forecast time +2h (using Dawn/Morn etc instead of Today/Tomorrow) properties : \"text\" : > {%- set hour = as_timestamp(strptime(state_attr('weather.openweathermap','forecast')[3]['datetime'], '%Y-%m-%dT%H:%M:%S%z', default='2020-01-00T00:00:00+00:00')) | timestamp_custom(\"%-H\") | int %} {%- if 4 <= hour < 6 %} Dawning {%- elif 6 <= hour < 9 %} Morning {%- elif 9 <= hour < 12 %} Forenoon {%- elif 12 <= hour < 18 %} Afternoon {%- elif 18 <= hour < 23 %} Evening {%- elif 23 <= hour or hour < 4 %} Night {%- endif %} {{- \" \" + hour |string + \" o'clock\" }} - obj : \"p5b32\" # Forecast temp +2h properties : \"text\" : \"{{ state_attr('weather.openweathermap','forecast')[3]['temperature'] }}\" - obj : \"p5b33\" # Forecast condition +2h properties : \"src\" : \"/littlefs/w-32-{{ state_attr('weather.openweathermap','forecast')[3]['condition'] }}.png\" - obj : \"p5b41\" # Forecast time +4h properties : \"text\" : > {%- set update = states('sensor.date') %} {%- set midnight = now().replace(hour=0, minute=0, second=0, microsecond=0).timestamp() %} {%- set event = as_timestamp(strptime(state_attr('weather.openweathermap','forecast')[6]['datetime'], '%Y-%m-%dT%H:%M:%S%z', default='2020-01-00T00:00:00+00:00')) %} {%- set delta = ((event - midnight) // 86400) | int %} {%- if delta == 0 %} Today {%- elif delta == 1 %} Tomorrow {%- endif %} {{- event | timestamp_custom(\" %-I %p\") }} - obj : \"p5b42\" # Forecast temp +4h properties : \"text\" : \"{{ state_attr('weather.openweathermap','forecast')[6]['temperature'] }}\" - obj : \"p5b43\" # Forecast condition +4h properties : \"src\" : \"/littlefs/w-32-{{ state_attr('weather.openweathermap','forecast')[6]['condition'] }}.png\" - obj : \"p5b51\" # Forecast time +8h properties : \"text\" : > {%- set update = states('sensor.date') %} {%- set midnight = now().replace(hour=0, minute=0, second=0, microsecond=0).timestamp() %} {%- set event = as_timestamp(strptime(state_attr('weather.openweathermap','forecast')[12]['datetime'], '%Y-%m-%dT%H:%M:%S%z', default='2020-01-00T00:00:00+00:00')) %} {%- set delta = ((event - midnight) // 86400) | int %} {%- if delta == 0 %} Today {%- elif delta == 1 %} Tomorrow {%- endif %} {{- event | timestamp_custom(\" %-I %p\") }} - obj : \"p5b52\" # Forecast temp +8h properties : \"text\" : \"{{ state_attr('weather.openweathermap','forecast')[12]['temperature'] }}\" - obj : \"p5b53\" # Forecast condition +8h properties : \"src\" : \"/littlefs/w-32-{{ state_attr('weather.openweathermap','forecast')[12]['condition'] }}.png\" - obj : \"p5b61\" # Forecast date +1d properties : \"text\" : > {%- set now = as_timestamp(strptime(state_attr('weather.your_homename','forecast')[0]['datetime'], '%Y-%m-%dT%H:%M:%S%z', default='2020-01-00T00:00:00+00:00')) %} {%- set day = now | timestamp_custom(\"%w\") %} {%- set days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"] %} {{ days[ day | int -1 ] }}{{- now | timestamp_custom(\" %d\") }} - obj : \"p5b62\" # Forecast temp min +1d properties : \"text\" : \"{{ state_attr('weather.your_homename','forecast')[0]['templow'] }}\" - obj : \"p5b63\" # Forecast temp max +1d properties : \"text\" : \"{{ state_attr('weather.your_homename','forecast')[0]['temperature'] }}\" - obj : \"p5b64\" # Forecast condition +1d properties : \"src\" : \"/littlefs/w-32-{{ state_attr('weather.your_homename','forecast')[0]['condition'] }}.png\" - obj : \"p5b71\" # Forecast date +2d properties : \"text\" : > {%- set now = as_timestamp(strptime(state_attr('weather.your_homename','forecast')[1]['datetime'], '%Y-%m-%dT%H:%M:%S%z', default='2020-01-00T00:00:00+00:00')) %} {%- set day = now | timestamp_custom(\"%w\") %} {%- set days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"] %} {{ days[ day | int -1 ] }}{{- now | timestamp_custom(\" %d\") }} - obj : \"p5b72\" # Forecast temp min +2d properties : \"text\" : \"{{ state_attr('weather.your_homename','forecast')[1]['templow'] }}\" - obj : \"p5b73\" # Forecast temp max +2d properties : \"text\" : \"{{ state_attr('weather.your_homename','forecast')[1]['temperature'] }}\" - obj : \"p5b74\" # Forecast condition +2d properties : \"src\" : \"/littlefs/w-32-{{ state_attr('weather.your_homename','forecast')[1]['condition'] }}.png\" - obj : \"p5b81\" # Forecast date +3d properties : \"text\" : > {%- set now = as_timestamp(strptime(state_attr('weather.your_homename','forecast')[2]['datetime'], '%Y-%m-%dT%H:%M:%S%z', default='2020-01-00T00:00:00+00:00')) %} {%- set day = now | timestamp_custom(\"%w\") %} {%- set days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"] %} {{ days[ day | int -1 ] }}{{- now | timestamp_custom(\" %d\") }} - obj : \"p5b82\" # Forecast temp min +3d properties : \"text\" : \"{{ state_attr('weather.your_homename','forecast')[2]['templow'] }}\" - obj : \"p5b83\" # Forecast temp max +3d properties : \"text\" : \"{{ state_attr('weather.your_homename','forecast')[2]['temperature'] }}\" - obj : \"p5b84\" # Forecast condition +3d properties : \"src\" : \"/littlefs/w-32-{{ state_attr('weather.your_homename','forecast')[2]['condition'] }}.png\" - obj : \"p5b91\" # Forecast date +4d properties : \"text\" : > {%- set now = as_timestamp(strptime(state_attr('weather.your_homename','forecast')[3]['datetime'], '%Y-%m-%dT%H:%M:%S%z', default='2020-01-00T00:00:00+00:00')) %} {%- set day = now | timestamp_custom(\"%w\") %} {%- set days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"] %} {{ days[ day | int -1 ] }}{{- now | timestamp_custom(\" %d\") }} - obj : \"p5b92\" # Forecast temp min +4d properties : \"text\" : \"{{ state_attr('weather.your_homename','forecast')[3]['templow'] }}\" - obj : \"p5b93\" # Forecast temp max +4d properties : \"text\" : \"{{ state_attr('weather.your_homename','forecast')[3]['temperature'] }}\" - obj : \"p5b94\" # Forecast condition +4d properties : \"src\" : \"/littlefs/w-32-{{ state_attr('weather.your_homename','forecast')[3]['condition'] }}.png\"","title":"Example Configurations"},{"location":"integrations/home-assistant/sampl_conf/#display-clock-and-temperature","text":"The easiest example is to display the state of a clock and a temperature sensor from Home Assistant, using label objects in openHASP. Create a label object to display the temperature value, a separate label object to display the unit and a third label object for the clock: 1 2 3 { \"page\" : 0 , \"id\" : 4 , \"obj\" : \"label\" , \"x\" : 175 , \"y\" : 5 , \"h\" : 30 , \"w\" : 45 , \"text\" : \"00.0\" , \"align\" : 2 , \"bg_color\" : \"#2C3E50\" } { \"page\" : 0 , \"id\" : 5 , \"obj\" : \"label\" , \"x\" : 220 , \"y\" : 5 , \"h\" : 30 , \"w\" : 45 , \"text\" : \"\u00b0C\" , \"align\" : 0 , \"bg_color\" : \"#2C3E50\" } { \"page\" : 0 , \"id\" : 6 , \"obj\" : \"label\" , \"x\" : 3 , \"y\" : 5 , \"h\" : 30 , \"w\" : 62 , \"text\" : \"00:00\" , \"align\" : 0 , \"bg_color\" : \"#2C3E50\" } In component configuration all you need for the objects is: 1 2 3 4 5 6 7 objects : - obj : \"p0b4\" properties : \"text\" : \"{{ states('sensor.my_room_temperature') }}\" - obj : \"p0b6\" properties : \"text\" : \"{{ states('sensor.time') }}\"","title":"Display clock and temperature"},{"location":"integrations/home-assistant/sampl_conf/#some-basic-controls","text":"Jsonl and Home Assistant configuration:","title":"Some basic controls"},{"location":"integrations/home-assistant/sampl_conf/#color-coded-icons","text":"","title":"Color coded icons"},{"location":"integrations/home-assistant/sampl_conf/#light-brightness-and-color","text":"Have a light in Home Assistant controlled by openHASP. In our example we use Lanbon L8's moodlight which has both brightness and color - we use a slider object for the brightness, and a cpicker object for color. relevant openHASP config: 1 2 { \"page\" : 1 , \"id\" : 31 , \"obj\" : \"slider\" , \"x\" : 6 , \"y\" : 15 , \"w\" : 14 , \"h\" : 180 , \"min\" : 1 , \"max\" : 255 } { \"page\" : 1 , \"id\" : 32 , \"obj\" : \"cpicker\" , \"x\" : 30 , \"y\" : 10 , \"w\" : 180 , \"h\" : 180 } relevant openHASP-custom-component config: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 - obj : \"p1b31\" # Light brightness properties : \"val\" : \"{{ state_attr('light.plate_moodlight', 'brightness') if state_attr('light.plate_moodlight', 'brightness') != None else 0 }}\" event : \"changed\" : - service : light.turn_on data : entity_id : light.plate_moodlight brightness : \"{{ val }}\" \"up\" : - service : light.turn_on data : entity_id : light.plate_moodlight brightness : \"{{ val }}\" - obj : \"p1b32\" # Light color properties : \"color\" : > {% if is_state('light.plate_moodlight','on') %} {% set rgb = state_attr('light.plate_moodlight','rgb_color') %} {{ \"#%02x%02x%02x\" | format(rgb[0],rgb[1],rgb[2]) }} {% endif %} event : \"up\" : - service : light.turn_on data : entity_id : light.plate_moodlight rgb_color : \"[{{ r }},{{ g }},{{ b }}]\" The brightness slider value gets updated from the brightness attribute of light.plate_moodlight , while it's on. If it's off, that attribute is removed by Home Assistant, in that case we set it to 0 . The color property gets updated from the rgb_color attriburte of the light. The R, G and B decimal color values are converted to hexadecimal html color code using a template whenever the color of the light changes in Home Assistant. When somebody changes the color of the picker object on the page, the light in Home Assistant gets updated with rgb_color values received in the MQTT message from the plate.","title":"Light brightness and color"},{"location":"integrations/home-assistant/sampl_conf/#cover-with-state-feedback","text":"The icon on the up and down buttons change color when covers move and set opacity when reached to limit. UI theme set to Hasp Light in plate's web interface. relevant openHASP config: (screen size 240x320) 1 2 3 { \"page\" : 1 , \"id\" : 4 , \"obj\" : \"btn\" , \"x\" : 5 , \"y\" : 140 , \"w\" : 73 , \"h\" : 60 , \"toggle\" : false , \"text\" : \"\\uE05D\" , \"text_font\" : 32 } { \"page\" : 1 , \"id\" : 5 , \"obj\" : \"btn\" , \"x\" : 83 , \"y\" : 140 , \"w\" : 73 , \"h\" : 60 , \"toggle\" : false , \"text\" : \"\\uE4DB\" , \"text_font\" : 32 } { \"page\" : 1 , \"id\" : 6 , \"obj\" : \"btn\" , \"x\" : 161 , \"y\" : 140 , \"w\" : 73 , \"h\" : 60 , \"toggle\" : false , \"text\" : \"\\uE045\" , \"text_font\" : 32 } relevant openHASP-custom-component config: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 - obj : \"p1b4\" properties : \"text_color\" : \"{{ '#FFFF00' if is_state('cover.cover_1', 'opening') else '#FFFFFF' }}\" \"text_opa\" : \"{{ '80' if is_state_attr('cover.cover_1','current_position', 100) else '255' }}\" event : \"down\" : - service : cover.open_cover target : entity_id : \"cover.cover_1\" - obj : \"p1b5\" properties : \"text\" : > {% if is_state('cover.cover_1', 'closing') %} {{ \"\\uE4DB\" | e }} {%-elif is_state('cover.cover_1', 'opening') %} {{ \"\\uE4DB\" | e }} {%-elif is_state('cover.cover_1', 'closed') %} {{ \"\\uF11C\" | e }} {%-elif is_state('cover.cover_1', 'open') %} {{ \"\\uF11E\" | e }} {% endif %} event : \"down\" : - service : cover.stop_cover target : entity_id : \"cover.cover_1\" - obj : \"p1b6\" properties : \"text_color\" : \"{{ '#FFFF00' if is_state('cover.cover_1', 'closing') else '#FFFFFF' }}\" \"text_opa\" : \"{{ '80' if is_state_attr('cover.cover_1','current_position', 0) else '255' }}\" event : \"down\" : - service : cover.close_cover target : entity_id : \"cover.cover_1\"","title":"Cover with state feedback"},{"location":"integrations/home-assistant/sampl_conf/#cover-with-button-matrix","text":"A simpler cover control with only basic feedback. UI theme set to Hasp Light in plate's web interface. relevant openHASP config: (screen size 240x320) 1 { \"page\" : 4 , \"id\" : 20 , \"obj\" : \"btnmatrix\" , \"x\" : 0 , \"y\" : 20 , \"w\" : 240 , \"h\" : 70 , \"options\" :[ \"\\uE05D\" , \"\\uE4DB\" , \"\\uE045\" ], \"text_font\" : 32 , \"bg_opa\" : 0 , \"border_opa\" : 0 } relevant openHASP-custom-component config: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 - obj : \"p4b20\" properties : \"options\" : > {% if is_state('cover.cover_1', 'closing') %} [\"\\uE05D\",\"\\uE4DB\",\"#FFFF00 \\uE045\"] {%-elif is_state('cover.cover_1', 'opening') %} [\"#FFFF00 \\uE05D\",\"\\uE4DB\",\"\\uE045\"] {%-else %} [\"\\uE05D\",\"\\uE4DB\",\"\\uE045\"] {% endif %} event : \"down\" : - service : > {% if val == 0 %} cover.open_cover {%-elif val == 1 %} cover.stop_cover {%-elif val == 2 %} cover.close_cover {% endif %} target : entity_id : cover.cover_1","title":"Cover with button matrix"},{"location":"integrations/home-assistant/sampl_conf/#covers-like-in-lovelace","text":"The icon behaves like in Lovelace. UI theme set to Hasp Light in plate's web interface. Your browser does not support the video tag. Check out the Lovelace-like entities for similar placement. relevant openHASP config: (screen size 240x320, UI Theme: Hasp Light) 1 2 3 4 5 6 7 8 9 10 11 { \"page\" : 5 , \"id\" : 12 , \"obj\" : \"label\" , \"x\" : 8 , \"y\" : 33 , \"w\" : 35 , \"h\" : 35 , \"text\" : \"\\uF11D\" , \"align\" : 1 , \"text_font\" : 32 , \"text_color\" : \"#053248\" } { \"page\" : 5 , \"id\" : 13 , \"obj\" : \"label\" , \"x\" : 48 , \"y\" : 43 , \"w\" : 80 , \"h\" : 30 , \"text\" : \"Cover 1\" , \"align\" : 0 , \"text_font\" : 16 , \"text_color\" : \"#053248\" } { \"page\" : 5 , \"id\" : 14 , \"obj\" : \"btn\" , \"x\" : 125 , \"y\" : 37 , \"w\" : 30 , \"h\" : 30 , \"toggle\" : false , \"text\" : \"\\uE05D\" , \"text_font\" : 32 , \"bg_opa\" : 0 , \"border_opa\" : 0 , \"text_color\" : \"#053248\" } { \"page\" : 5 , \"id\" : 15 , \"obj\" : \"btn\" , \"x\" : 165 , \"y\" : 37 , \"w\" : 30 , \"h\" : 30 , \"toggle\" : false , \"text\" : \"\\uE4DB\" , \"text_font\" : 32 , \"bg_opa\" : 0 , \"border_opa\" : 0 , \"text_color\" : \"#053248\" } { \"page\" : 5 , \"id\" : 16 , \"obj\" : \"btn\" , \"x\" : 205 , \"y\" : 37 , \"w\" : 30 , \"h\" : 30 , \"toggle\" : false , \"text\" : \"\\uE045\" , \"text_font\" : 32 , \"bg_opa\" : 0 , \"border_opa\" : 0 , \"text_color\" : \"#053248\" } { \"page\" : 5 , \"id\" : 22 , \"obj\" : \"label\" , \"x\" : 8 , \"y\" : 69 , \"w\" : 35 , \"h\" : 35 , \"text\" : \"\\uF11D\" , \"align\" : 1 , \"text_font\" : 32 , \"text_color\" : \"#053248\" } { \"page\" : 5 , \"id\" : 23 , \"obj\" : \"label\" , \"x\" : 48 , \"y\" : 79 , \"w\" : 80 , \"h\" : 30 , \"text\" : \"Cover 2\" , \"align\" : 0 , \"text_font\" : 16 , \"text_color\" : \"#053248\" } { \"page\" : 5 , \"id\" : 24 , \"obj\" : \"btn\" , \"x\" : 125 , \"y\" : 73 , \"w\" : 30 , \"h\" : 30 , \"toggle\" : false , \"text\" : \"\\uE05D\" , \"text_font\" : 32 , \"bg_opa\" : 0 , \"border_opa\" : 0 , \"text_color\" : \"#053248\" } { \"page\" : 5 , \"id\" : 25 , \"obj\" : \"btn\" , \"x\" : 165 , \"y\" : 73 , \"w\" : 30 , \"h\" : 30 , \"toggle\" : false , \"text\" : \"\\uE4DB\" , \"text_font\" : 32 , \"bg_opa\" : 0 , \"border_opa\" : 0 , \"text_color\" : \"#053248\" } { \"page\" : 5 , \"id\" : 26 , \"obj\" : \"btn\" , \"x\" : 205 , \"y\" : 73 , \"w\" : 30 , \"h\" : 30 , \"toggle\" : false , \"text\" : \"\\uE045\" , \"text_font\" : 32 , \"bg_opa\" : 0 , \"border_opa\" : 0 , \"text_color\" : \"#053248\" } relevant openHASP-custom-component config: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 - obj : \"p5b12\" properties : \"text\" : > {% if is_state('cover.my_cover', 'closing') %} {{ \"\\uE6C0\" | e }} {%-elif is_state('cover.my_cover', 'opening') %} {{ \"\\uE6C3\" | e }} {%-elif is_state('cover.my_cover', 'closed') %} {{ \"\\uF11C\" | e }} {%-elif is_state('cover.my_cover', 'open') %} {{ \"\\uF11E\" | e }} {% endif %} - obj : \"p5b14\" event : \"down\" : - service : cover.open_cover target : entity_id : \"cover.my_cover\" - obj : \"p5b15\" event : \"down\" : - service : cover.stop_cover target : entity_id : \"cover.my_cover\" - obj : \"p5b16\" event : \"down\" : - service : cover.close_cover target : entity_id : \"cover.my_cover\"","title":"Covers like in Lovelace"},{"location":"integrations/home-assistant/sampl_conf/#media-player","text":"The labels with artist and title are scrolling, the progressbar fills if the media player provides duration and playback position. The dropdown lists containing the available sources and sound modes of the player get populated automatically by the values existing on the player in Home Assistant, and also the actually selected source is in sync with it. Player availability is shown by the opacity of the buttons. Player state (play/pause) is shown by the middle button, short pressing means pause, long-press means stop. Power state shown by color, repeat, shuffle and muted state shown by appropriate icons on the buttons. UI theme set to Hasp Light in plate's web interface. relevant openHASP config: (screen size 240x320) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"page\" : 6 , \"id\" : 10 , \"obj\" : \"obj\" , \"x\" : 5 , \"y\" : 35 , \"w\" : 230 , \"h\" : 250 , \"click\" : 0 , \"bg_opa\" : 0 , \"shadow_opa\" : 140 , \"shadow_color\" : \"black\" , \"shadow_width\" : 20 , \"shadow_spread\" : 0 } { \"page\" : 6 , \"id\" : 11 , \"obj\" : \"obj\" , \"x\" : 8 , \"y\" : 38 , \"w\" : 200 , \"h\" : 84 , \"click\" : 0 } { \"page\" : 6 , \"id\" : 12 , \"obj\" : \"label\" , \"x\" : 10 , \"y\" : 48 , \"w\" : 196 , \"h\" : 30 , \"text\" : \"-\" , \"mode\" : \"scroll\" , \"align\" : 1 } { \"page\" : 6 , \"id\" : 13 , \"obj\" : \"label\" , \"x\" : 10 , \"y\" : 83 , \"w\" : 196 , \"h\" : 30 , \"text\" : \"-\" , \"mode\" : \"scroll\" , \"align\" : 1 } { \"page\" : 6 , \"id\" : 14 , \"obj\" : \"bar\" , \"x\" : 8 , \"y\" : 117 , \"w\" : 200 , \"h\" : 5 , \"min\" : 0 , \"max\" : 100 , \"border_opa\" : 0 , \"pad_top\" : 0 , \"pad_bottom\" : 0 , \"pad_left\" : 0 , \"pad_right\" : 0 } { \"page\" : 6 , \"id\" : 15 , \"obj\" : \"dropdown\" , \"x\" : 8 , \"y\" : 129 , \"w\" : 120 , \"h\" : 30 , \"options\" : \"Source1\\nSource2\\nSource3\" , \"direction\" : 3 , \"max_height\" : 300 , \"radius\" : 5 } { \"page\" : 6 , \"id\" : 16 , \"obj\" : \"dropdown\" , \"x\" : 133 , \"y\" : 129 , \"w\" : 75 , \"h\" : 30 , \"options\" : \"Jazz\\nPop\\nRock\" , \"direction\" : 2 , \"radius\" : 5 } { \"page\" : 6 , \"id\" : 17 , \"obj\" : \"btn\" , \"x\" : 8 , \"y\" : 166 , \"w\" : 50 , \"h\" : 70 , \"toggle\" : false , \"text\" : \"\\uE4AE\" , \"text_font\" : 32 } { \"page\" : 6 , \"id\" : 18 , \"obj\" : \"btn\" , \"x\" : 66 , \"y\" : 166 , \"w\" : 83 , \"h\" : 70 , \"toggle\" : false , \"text\" : \"\\uE40A\" , \"text_font\" : 32 } { \"page\" : 6 , \"id\" : 19 , \"obj\" : \"btn\" , \"x\" : 157 , \"y\" : 166 , \"w\" : 51 , \"h\" : 70 , \"toggle\" : false , \"text\" : \"\\uE4AD\" , \"text_font\" : 32 } { \"page\" : 6 , \"id\" : 20 , \"obj\" : \"slider\" , \"x\" : 212 , \"y\" : 38 , \"w\" : 20 , \"h\" : 244 , \"min\" : 0 , \"max\" : 100 , \"val\" : 85 } { \"page\" : 6 , \"id\" : 21 , \"obj\" : \"btn\" , \"x\" : 8 , \"y\" : 241 , \"w\" : 45 , \"h\" : 40 , \"toggle\" : false , \"text\" : \"\\uE425\" , \"text_font\" : 32 } { \"page\" : 6 , \"id\" : 22 , \"obj\" : \"btn\" , \"x\" : 60 , \"y\" : 241 , \"w\" : 45 , \"h\" : 40 , \"toggle\" : false , \"text\" : \"\\uE457\" , \"text_font\" : 32 } { \"page\" : 6 , \"id\" : 23 , \"obj\" : \"btn\" , \"x\" : 111 , \"y\" : 241 , \"w\" : 45 , \"h\" : 40 , \"toggle\" : false , \"text\" : \"\\uE49E\" , \"text_font\" : 32 } { \"page\" : 6 , \"id\" : 24 , \"obj\" : \"btn\" , \"x\" : 163 , \"y\" : 241 , \"w\" : 45 , \"h\" : 40 , \"toggle\" : false , \"text\" : \"\\uE57E\" , \"text_font\" : 32 } relevant openHASP-custom-component config: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 - obj : \"p6b12\" # artist label properties : \"text\" : \"{{ state_attr('media_player.sound_my_room1','media_artist') if state_attr('media_player.sound_my_room1','media_artist') else '-' }}\" - obj : \"p6b13\" # title label properties : \"text\" : \"{{ state_attr('media_player.sound_my_room1','media_title') if state_attr('media_player.sound_my_room1','media_title') else '-' }}\" - obj : \"p6b15\" # sources list properties : \"options\" : > {% if not (is_state('media_player.sound_my_room1','unavailable')) %} {{\"(no source)\\n\"|e}} {%- for source in state_attr('media_player.sound_my_room1','source_list') -%} {{source+\"\\n\"|e}}{%-if not loop.last%}{%-endif%}{%-endfor%}{%-endif %} \"val\" : > {% if not (is_state('media_player.sound_my_room1','unavailable')) %} {% if state_attr('media_player.sound_my_room1','source') == None %}0{% else %} {%for source in state_attr('media_player.sound_my_room1','source_list')%} {{loop.index if source == state_attr('media_player.sound_my_room1','source') }} {%-endfor%}{%-endif %}{%-endif %} \"click\" : \"{{ 'false' if (is_state('media_player.sound_my_room1','unavailable') or is_state('media_player.sound_my_room1','unknown')) else 'true' }}\" event : \"changed\" : - service : media_player.select_source data : entity_id : media_player.sound_my_room1 source : \"{{ text }}\" - obj : \"p6b16\" # sound modes list properties : \"options\" : > {% if not (is_state('media_player.sound_my_room1','unavailable')) %} {%-for soundmode in state_attr('media_player.sound_my_room1','sound_mode_list')-%} {{soundmode+\"\\n\"|e}}{%-if not loop.last%}{%-endif%}{%-endfor%}{%-endif %} \"val\" : > {% if not (is_state('media_player.sound_my_room1','unavailable')) %}{%for source in state_attr('media_player.sound_my_room1','sound_mode_list')%} {{loop.index -1 if source == state_attr('media_player.sound_my_room1','sound_mode') }} {%-endfor%}{% endif %} \"click\" : \"{{ 'false' if (is_state('media_player.sound_my_room1','unavailable') or is_state('media_player.sound_my_room1','unknown')) else 'true' }}\" event : \"changed\" : - service : media_player.select_sound_mode data : entity_id : media_player.sound_my_room1 sound_mode : \"{{ text }}\" - obj : \"p6b14\" # progressbar properties : \"max\" : \"{{ state_attr('media_player.sound_my_room1','media_duration') | int }}\" \"val\" : \"{{ state_attr('media_player.sound_my_room1','media_position') | int }}\" - obj : \"p6b18\" # play/pause/stop properties : \"text\" : > {% if is_state('media_player.sound_my_room1', 'playing') %} {{ \"\\uE3E4\" | e }} {%-else %} {{ \"\\uE40A\" | e }} {%-endif %} \"text_opa\" : \"{{ '80' if (is_state('media_player.sound_my_room1','unavailable') or is_state('media_player.sound_my_room1','unknown')) else '255' }}\" event : \"down\" : - service : media_player.media_play_pause target : entity_id : media_player.sound_my_room1 \"long\" : - service : media_player.media_stop target : entity_id : media_player.sound_my_room1 - obj : \"p6b17\" # prev properties : \"text_opa\" : \"{{ '80' if (is_state('media_player.sound_my_room1','unavailable') or is_state('media_player.sound_my_room1','unknown')) else '255' }}\" event : \"down\" : - service : media_player.media_previous_track target : entity_id : media_player.sound_my_room1 - obj : \"p6b19\" # next properties : \"text_opa\" : \"{{ '80' if (is_state('media_player.sound_my_room1','unavailable') or is_state('media_player.sound_my_room1','unknown')) else '255' }}\" event : \"down\" : - service : media_player.media_next_track target : entity_id : media_player.sound_my_room1 - obj : \"p6b20\" # volume slider properties : \"val\" : \"{{ state_attr('media_player.sound_my_room1','volume_level') * 100 | int }}\" \"click\" : \"{{ 'false' if (is_state('media_player.sound_my_room1','unavailable') or is_state('media_player.sound_my_room1','unknown')) else 'true' }}\" event : \"changed\" : - service : media_player.volume_set data : entity_id : media_player.sound_my_room1 volume_level : \"{{ val | int / 100 }}\" \"up\" : - service : media_player.volume_set data : entity_id : media_player.sound_my_room1 volume_level : \"{{ val | int / 100 }}\" - obj : \"p6b21\" # power properties : \"text_color\" : \"{{ '#B00000' if states('media_player.sound_my_room1') == 'off' else '#FFFFFF' }}\" \"text_opa\" : \"{{ '80' if (is_state('media_player.sound_my_room1','unavailable') or is_state('media_player.sound_my_room1','unknown')) else '255' }}\" event : \"down\" : - service : media_player.toggle data : entity_id : media_player.sound_my_room1 - obj : \"p6b22\" # repeat properties : \"text\" : > {% if is_state_attr('media_player.sound_my_room1', 'repeat', 'one') %} {{ \"\\uE458\" | e }} {% elif is_state_attr('media_player.sound_my_room1', 'repeat', 'all') %} {{ \"\\uE456\" | e }} {%-else %} {{ \"\\uE457\" | e }} {%-endif %} \"text_opa\" : \"{{ '80' if (is_state('media_player.sound_my_room1','unavailable') or is_state('media_player.sound_my_room1','unknown')) else '255' }}\" event : \"down\" : - service : media_player.repeat_set data : entity_id : media_player.sound_my_room1 repeat : > {% if is_state_attr('media_player.sound_my_room1', 'repeat', 'one') %} all {% elif is_state_attr('media_player.sound_my_room1', 'repeat', 'all') %} off {% elif is_state_attr('media_player.sound_my_room1', 'repeat', 'off') %} one {%-endif %} - obj : \"p6b23\" # shuffle properties : \"text\" : > {% if state_attr('media_player.sound_my_room1', 'shuffle') %} {{ \"\\uE49D\" | e }} {%-else %} {{ \"\\uE49E\" | e }} {%-endif %} \"text_opa\" : \"{{ '80' if (is_state('media_player.sound_my_room1','unavailable') or is_state('media_player.sound_my_room1','unknown')) else '255' }}\" event : \"down\" : - service : media_player.shuffle_set data : entity_id : media_player.sound_my_room1 shuffle : > {% if state_attr('media_player.sound_my_room1', 'shuffle') %} false {% else %} true {%-endif %} - obj : \"p6b24\" # mute properties : \"text\" : > {% if state_attr('media_player.sound_my_room1', 'is_volume_muted') %} {{ \"\\uE75F\" | e }} {%-else %} {{ \"\\uE57E\" | e }} {%-endif %} \"text_opa\" : \"{{ '80' if (is_state('media_player.sound_my_room1','unavailable') or is_state('media_player.sound_my_room1','unknown')) else '255' }}\" event : \"down\" : - service : media_player.volume_mute data : entity_id : media_player.sound_my_room1 is_volume_muted : > {% if state_attr('media_player.sound_my_room1', 'is_volume_muted') %} false {% else %} true {%-endif %} Note that the val value of the slider is multiplied and divided by 100 when read and set, because LVGL only suppports integers for object values. By multiplying and dividing by 100, it becomes possible to set volume between 0 and 1 as required by Home Assistant.","title":"Media player"},{"location":"integrations/home-assistant/sampl_conf/#generic-thermostatclimate","text":"This example is a bit more complex in the aspect that it uses several objects put on top of each other, and grouped toghether using the parentid parameter. Special attention goes to an invisible tabview (exteding over the label dispaying the target temperarture) which allows for swiping between an on/off switch and dropdowns for setting the hvac and fan modes. The target temperature can be set by dragging the arc handle, more precise +/- setting possible by short/long pressing the middle circle containing the current temperature (increasing/decreasing the value by the temperature step defined by the climate entity). Note that the min , max and val values of the arc and gauge are multiplied and divided by 10 when set and read, because LVGL only suppports integers for object values. By multiplying and dividing by 10, it becomes possible to set decimal values for climate temperature. The number of the ticks on the gauge is determined from the min , max attributes of the configured climate, likewise the hvac_modes and fan_modes dropdowns. You can localise these using the if-else statements of the template in the configuration of the custom component. The active area of the arc changes color based on the current hvac mode of the entity. UI theme set to Hasp Light in plate's web interface. Note that the tab swiping dots ( p3b26 ) are also handled by the custom component. Don't forget update the service call in the configuration with your plate's MQTT node name, and the command parameters if you change the page of the objects. Your browser does not support the video tag. relevant openHASP config: (screen size 240x320) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { \"page\" : 3 , \"id\" : 10 , \"obj\" : \"obj\" , \"x\" : 5 , \"y\" : 35 , \"w\" : 230 , \"h\" : 250 , \"click\" : 0 } { \"page\" : 3 , \"id\" : 10 , \"obj\" : \"obj\" , \"x\" : 5 , \"y\" : 35 , \"w\" : 230 , \"h\" : 250 , \"click\" : 0 } { \"page\" : 3 , \"id\" : 20 , \"obj\" : \"arc\" , \"x\" : 5 , \"y\" : 37 , \"w\" : 230 , \"h\" : 230 , \"min\" : 170 , \"max\" : 300 , \"val\" : 250 , \"border_side\" : 0 , \"type\" : 0 , \"rotation\" : 0 , \"start_angle\" : 135 , \"end_angle\" : 45 , \"adjustable\" : \"true\" , \"line_width\" : 21 , \"line_width1\" : 21 , \"line_color1\" : \"#34bdeb\" , \"bg_opa\" : 0 , \"pad_top2\" : 5 , \"pad_bottom2\" : 5 , \"pad_left2\" : 5 , \"pad_right2\" : 5 , \"pad_top\" : 5 , \"pad_bottom\" : 5 , \"pad_left\" : 5 , \"pad_right\" : 5 } { \"page\" : 3 , \"id\" : 21 , \"obj\" : \"gauge\" , \"x\" : 28 , \"y\" : 28 , \"w\" : 175 , \"h\" : 175 , \"parentid\" : 20 , \"min\" : 170 , \"max\" : 300 , \"val\" : 224 , \"format\" : 1 , \"critical_value\" : 301 , \"label_count\" : 14 , \"line_count\" : 27 , \"border_width\" : 0 , \"pad_top\" : 2 , \"pad_bottom\" : 2 , \"pad_left\" : 2 , \"pad_right\" : 2 , \"value_str\" : \"\u00b0C\" , \"value_ofs_y\" : 55 , \"value_font\" : 16 , \"bg_opa\" : 0 , \"line_width2\" : 3 , \"line_rounded2\" : 1 , \"line_color\" : \"#348feb\" , \"line_color1\" : \"#348feb\" , \"scale_grad_color\" : \"#eb4934\" , \"scale_grad_color1\" : \"#eb4934\" , \"scale_end_color1\" : \"#eb4934\" } { \"page\" : 3 , \"id\" : 22 , \"obj\" : \"obj\" , \"x\" : 85 , \"y\" : 85 , \"w\" : 60 , \"h\" : 60 , \"parentid\" : 20 , \"click\" : 0 , \"radius\" : 30 , \"border_width\" : 2 , \"border_opa\" : 200 } { \"page\" : 3 , \"id\" : 23 , \"obj\" : \"label\" , \"x\" : 80 , \"y\" : 100 , \"w\" : 70 , \"h\" : 30 , \"parentid\" : 20 , \"text\" : \"22.4\" , \"text_font\" : 24 , \"align\" : \"center\" } { \"page\" : 3 , \"id\" : 24 , \"obj\" : \"obj\" , \"x\" : 145 , \"y\" : 245 , \"w\" : 60 , \"h\" : 30 , \"click\" : 0 , \"radius\" : 5 } { \"page\" : 3 , \"id\" : 25 , \"obj\" : \"label\" , \"x\" : 145 , \"y\" : 245 , \"w\" : 60 , \"h\" : 30 , \"text\" : \"25\" , \"text_font\" : 24 , \"align\" : \"center\" } { \"page\" : 3 , \"id\" : 26 , \"obj\" : \"label\" , \"x\" : 90 , \"y\" : 220 , \"w\" : 60 , \"h\" : 30 , \"text\" : \"#909090 \\u2022# #000000 \\u2022# #909090 \\u2022#\" , \"text_font\" : 24 , \"align\" : \"center\" , \"text_color\" : \"grey\" , \"border_width\" : 0 } { \"page\" : 3 , \"id\" : 30 , \"obj\" : \"tabview\" , \"x\" : 0 , \"y\" : 235 , \"w\" : 240 , \"h\" : 80 , \"btn_pos\" : 0 , \"bg_opa\" : 0 , \"border_width\" : 0 , \"radius\" : 0 } { \"page\" : 3 , \"id\" : 31 , \"obj\" : \"tab\" , \"parentid\" : 30 } { \"page\" : 3 , \"id\" : 32 , \"obj\" : \"tab\" , \"parentid\" : 30 } { \"page\" : 3 , \"id\" : 33 , \"obj\" : \"tab\" , \"parentid\" : 30 } { \"page\" : 3 , \"id\" : 41 , \"obj\" : \"switch\" , \"x\" : 35 , \"y\" : 10 , \"w\" : 60 , \"h\" : 30 , \"parentid\" : 31 , \"radius\" : 25 , \"radius2\" : 25 } { \"page\" : 3 , \"id\" : 42 , \"obj\" : \"dropdown\" , \"x\" : 15 , \"y\" : 10 , \"w\" : 110 , \"h\" : 30 , \"parentid\" : 32 , \"options\" : \"fan_modes\" , \"direction\" : \"1\" , \"radius\" : 5 } { \"page\" : 3 , \"id\" : 43 , \"obj\" : \"dropdown\" , \"x\" : 15 , \"y\" : 10 , \"w\" : 110 , \"h\" : 30 , \"parentid\" : 33 , \"options\" : \"hvac_modes\" , \"direction\" : \"1\" , \"radius\" : 5 } relevant openHASP-custom-component configobj : \"p3b20\" # arc slider properties : \"val\" : \"{{ state_attr('climate.thermostat_1','temperature') * 10 | int if not (is_state('climate.thermostat_1','unavailable')) }}\" \"min\" : \"{{ state_attr('climate.thermostat_1','min_temp') * 10 | int if not (is_state('climate.thermostat_1','unavailable')) }}\" \"max\" : \"{{ state_attr('climate.thermostat_1','max_temp') * 10 | int if not (is_state('climate.thermostat_1','unavailable')) }}\" \"line_color1\" : > {% if is_state('climate.thermostat_1', 'cool') %} {{ \"#346beb\" }} {%-elif is_state('climate.thermostat_1', 'heat_cool') %} {{ \"#34bdeb\" }} {%-elif is_state('climate.thermostat_1', 'heat') %} {{ \"#eb3434\" }} {%-elif is_state('climate.thermostat_1', 'dry') %} {{ \"#ebeb34\" }} {%-elif is_state('climate.thermostat_1', 'fan_only') %} {{ \"#34eb77\" }} {%-else %} {{ \"#9f96b0\" }} {% endif %} event : \"changed\" : - service : climate.set_temperature target : entity_id : climate.thermostat_1 data : temperature : \"{{ val | int / 10 }}\" \"up\" : - service : climate.set_temperature target : entity_id : climate.thermostat_1 data : temperature : \"{{ val | int / 10 }}\" - obj : \"p3b21\" # gauge current temp properties : \"val\" : \"{{ state_attr('climate.thermostat_1','current_temperature') * 10 | int if not (is_state('climate.thermostat_1','unavailable')) }}\" \"min\" : \"{{ state_attr('climate.thermostat_1','min_temp') * 10 | int if not (is_state('climate.thermostat_1','unavailable')) }}\" \"max\" : \"{{ state_attr('climate.thermostat_1','max_temp') * 10 | int if not (is_state('climate.thermostat_1','unavailable')) }}\" \"critical_value\" : \"{{ (state_attr('climate.thermostat_1','max_temp') * 10 | int + 1) if not (is_state('climate.thermostat_1','unavailable')) }}\" \"label_count\" : \"{{ (state_attr('climate.thermostat_1','max_temp') | int - state_attr('climate.thermostat_1','min_temp') | int + 1) if not (is_state('climate.thermostat_1','unavailable')) }}\" \"line_count\" : \"{{ ((state_attr('climate.thermostat_1','max_temp') | int - state_attr('climate.thermostat_1','min_temp') | int) * 2 + 1) if not (is_state('climate.thermostat_1','unavailable')) }}\" - obj : \"p3b23\" # label current temp (and +/- with short/long touch) properties : \"text\" : \"{{ state_attr('climate.thermostat_1','current_temperature') if not (is_state('climate.thermostat_1','unavailable')) }}\" event : \"up\" : - service : climate.set_temperature target : entity_id : climate.thermostat_1 data : temperature : \"{{ state_attr('climate.thermostat_1','temperature') + state_attr('climate.thermostat_1','target_temp_step') | float(default=0)}}\" \"long\" : - service : climate.set_temperature target : entity_id : climate.thermostat_1 data : temperature : \"{{ state_attr('climate.thermostat_1','temperature') - state_attr('climate.thermostat_1','target_temp_step') | float(default=0)}}\" - obj : \"p3b25\" # label target temp properties : \"text\" : \"{{ state_attr('climate.thermostat_1','temperature') if not (is_state('climate.thermostat_1','unavailable')) }}\" - obj : \"p3b41\" # on/off switch properties : \"val\" : \"{{ 0 if (is_state('climate.thermostat_1', 'off') or is_state('climate.thermostat_1', 'unavailable')) else 1 }}\" event : \"down\" : - service_template : > {% if val == 0 -%} climate.turn_on {% else -%} climate.turn_off {% endif -%} entity_id : \"climate.thermostat_1\" - obj : \"p3b30\" # tab dots event : \"changed\" : - service : openhasp.command target : entity_id : openhasp.your_plate data : keyword : p3b26.text parameters : > {% if val == 0 %} {{ \"#000000 \\u2022# #909090 \\u2022# #909090 \\u2022#\" | e }} {%-elif val == 1 %} {{ \"#909090 \\u2022# #000000 \\u2022# #909090 \\u2022#\" | e }} {%-elif val == 2 %} {{ \"#909090 \\u2022# #909090 \\u2022# #000000 \\u2022#\" | e }} {% endif %} - obj : \"p3b42\" # dropdown with fan_modes properties : \"options\" : > {% if not (is_state('climate.thermostat_1','unavailable')) %}{%for mode in state_attr('climate.thermostat_1','fan_modes')%} {%- if mode == 'auto' -%} Automatic{{\"\\n\"|e}} {%- elif mode == 'low' -%} Low{{\"\\n\"|e}} {%- elif mode == 'medium' -%} Medium{{\"\\n\"|e}} {%- elif mode == 'high' -%} High{{\"\\n\"|e}} {%- elif mode == 'turbo' -%} Turbo{{\"\\n\"|e}} {%- endif -%} {%-if not loop.last%}{%-endif%}{%-endfor%}{% endif %} \"val\" : > {% if not (is_state('climate.thermostat_1','unavailable')) %}{%for mode in state_attr('climate.thermostat_1','fan_modes')%} {{loop.index -1 if mode == state_attr('climate.thermostat_1','fan_mode') }} {%-endfor%}{% endif %} event : \"changed\" : - service : climate.set_fan_mode target : entity_id : climate.thermostat_1 data : fan_mode : > {% if text == \"Automatic\" -%} auto {% elif text == 'Low' -%} low {% elif text == 'Medium' -%} medium {% elif text == 'High' -%} high {% elif text == 'Turbo' -%} turbo {% endif -%} - obj : \"p3b43\" # dropdown with hvac_modes properties : \"options\" : > {% if not (is_state('climate.thermostat_1','unavailable')) %}{%for mode in state_attr('climate.thermostat_1','hvac_modes')%} {%- if mode == 'off' -%} Off{{\"\\n\"|e}} {%- elif mode == 'heat' -%} Heating{{\"\\n\"|e}} {%- elif mode == 'cool' -%} Cooling{{\"\\n\"|e}} {%- elif mode == 'heat_cool' -%} Heat/Cool{{\"\\n\"|e}} {%- elif mode == 'dry' -%} Drying{{\"\\n\"|e}} {%- elif mode == 'fan_only' -%} Fan only{{\"\\n\"|e}} {%- else -%} On{{\"\\n\"|e}} {%- endif -%} {%-if not loop.last%}{%-endif%}{%-endfor%}{% endif %} \"val\" : > {% if not (is_state('climate.thermostat_1','unavailable')) %}{%for mode in state_attr('climate.thermostat_1','hvac_modes')%} {{loop.index -1 if mode == states('climate.thermostat_1') }} {%-endfor%}{% endif %} event : \"changed\" : - service : climate.set_hvac_mode target : entity_id : climate.thermostat_1 data : hvac_mode : > {% if text == \"Off\" -%} off {% elif text == 'Heating' -%} heat {% elif text == 'Cooling' -%} cool {% elif text == 'Heat/Cool' -%} heat_cool {% elif text == 'Drying' -%} dry {% elif text == 'Fan only' -%} fan_only {% endif -%}","title":"Generic thermostat/climate"},{"location":"integrations/home-assistant/sampl_conf/#current-weather-and-forecasts","text":"This example implements two weather forecast screens which located on the same page, can be swiped left and right. On the top area the current weather is shown, on the bottom area the user can choose by swiping between next hours and next days forecast. This is achieved by a tabview object with invisible tabs. Since there's no weather integration in Home Assistant which can offer so much information at once, this can be achieved by installing multiple weather components. In our example we use two: Met.no (the one coming by default pre-installed) for next days forecast. OpenWeatherMap (available as standard integration to be activated) for next hours forecast. You need to set the forecast mode to onecall_hourly to get forecasts for the day's next hours. The openHASP component grabs information from both weather sources and updates them on every change. The various strings containing day names, day periods, weather conditions can be localized easily to any language within the configuration. Weather condition icons are displayed from the internal flash space of the plate. For this, you need to upload the desired icon pack to the plate: light theme dark theme To unzip them on the plate, connect via Telnet and run the command unzip /openhasp-weathericons-day.zip to unzip the light theme above (alternatively you can unzip them on your computer and upload them one by one). The configuration example only shows how to use the light theme icons. Icons are copyright from manifestinteractive and merlinthered . This example implements Home Assistant's standard weather conditions only (as in 2021.06), so any weather integration component can be used. Some integrations know extra conditions in addition to the standard ones, those (with their corresponding icons) can be easily added to the component configuration below. Note that the tab swiping dots ( p5b10 ) are also handled by the custom component. Don't forget update the service call in the configuration with your plate's MQTT node name, and the command parameters if you change the page of the objects. relevant openHASP config: (screen size 240x320, UI Theme: Hasp Light) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 { \"page\" : 5 , \"id\" : 1 , \"obj\" : \"btn\" , \"x\" : 0 , \"y\" : 0 , \"w\" : 240 , \"h\" : 30 , \"text\" : \"WEATHER\" , \"text_font\" : 16 , \"bg_color\" : \"#2C3E50\" , \"text_color\" : \"#FFFFFF\" , \"radius\" : 0 , \"border_side\" : 0 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 2 , \"obj\" : \"obj\" , \"x\" : 5 , \"y\" : 35 , \"w\" : 230 , \"h\" : 250 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 14 , \"obj\" : \"img\" , \"src\" : \"/littlefs/openhasp_dummy_img.png\" , \"parentid\" : 2 , \"auto_size\" : 1 , \"w\" : 128 , \"offset_x\" : -6 , \"offset_y\" : -10 } { \"page\" : 5 , \"id\" : 15 , \"obj\" : \"label\" , \"x\" : 100 , \"y\" : 10 , \"w\" : 130 , \"h\" : 25 , \"align\" : \"center\" , \"text\" : \"date current\" , \"parentid\" : 2 } { \"page\" : 5 , \"id\" : 16 , \"obj\" : \"label\" , \"x\" : 125 , \"y\" : 34 , \"w\" : 95 , \"h\" : 40 , \"align\" : \"center\" , \"text\" : \"00.0\u00b0C\" , \"parentid\" : 2 , \"text_font\" : 32 } { \"page\" : 5 , \"id\" : 17 , \"obj\" : \"label\" , \"x\" : 110 , \"y\" : 78 , \"w\" : 120 , \"h\" : 25 , \"align\" : \"center\" , \"text\" : \"condition\" , \"parentid\" : 2 } { \"page\" : 5 , \"id\" : 19 , \"obj\" : \"label\" , \"x\" : 90 , \"y\" : 95 , \"w\" : 60 , \"h\" : 30 , \"text\" : \"#000000 \\u2022# #909090 \\u2022#\" , \"parentid\" : 2 , \"text_font\" : 24 , \"align\" : \"center\" , \"text_color\" : \"grey\" } { \"page\" : 5 , \"id\" : 10 , \"obj\" : \"tabview\" , \"x\" : 0 , \"y\" : 0 , \"w\" : 240 , \"h\" : 260 , \"parentid\" : 2 , \"btn_pos\" : 0 , \"bg_opa\" : 0 , \"border_width\" : 0 } { \"page\" : 5 , \"id\" : 11 , \"obj\" : \"tab\" , \"parentid\" : 10 } { \"page\" : 5 , \"id\" : 12 , \"obj\" : \"tab\" , \"parentid\" : 10 } { \"page\" : 5 , \"id\" : 21 , \"obj\" : \"label\" , \"x\" : 8 , \"y\" : 123 , \"w\" : 130 , \"h\" : 22 , \"align\" : \"left\" , \"text\" : \"hour+2\" , \"parentid\" : 11 , \"pad_top\" : 3 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 22 , \"obj\" : \"label\" , \"x\" : 124 , \"y\" : 123 , \"w\" : 50 , \"h\" : 22 , \"align\" : \"center\" , \"text\" : \"00.0\" , \"parentid\" : 11 , \"pad_top\" : -2 , \"text_font\" : 24 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 23 , \"obj\" : \"img\" , \"x\" : 182 , \"y\" : 118 , \"w\" : 32 , \"h\" : 32 , \"src\" : \"/littlefs/openhasp_dummy_img.png\" , \"parentid\" : 11 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 31 , \"obj\" : \"label\" , \"x\" : 8 , \"y\" : 154 , \"w\" : 130 , \"h\" : 22 , \"align\" : \"left\" , \"text\" : \"hour+3\" , \"parentid\" : 11 , \"pad_top\" : 3 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 32 , \"obj\" : \"label\" , \"x\" : 124 , \"y\" : 154 , \"w\" : 50 , \"h\" : 22 , \"align\" : \"center\" , \"text\" : \"00.0\" , \"parentid\" : 11 , \"pad_top\" : -2 , \"text_font\" : 24 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 33 , \"obj\" : \"img\" , \"x\" : 182 , \"y\" : 150 , \"w\" : 32 , \"h\" : 32 , \"src\" : \"/littlefs/openhasp_dummy_img.png\" , \"parentid\" : 11 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 41 , \"obj\" : \"label\" , \"x\" : 8 , \"y\" : 186 , \"w\" : 130 , \"h\" : 22 , \"align\" : \"left\" , \"text\" : \"hour+4\" , \"parentid\" : 11 , \"pad_top\" : 3 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 42 , \"obj\" : \"label\" , \"x\" : 124 , \"y\" : 186 , \"w\" : 50 , \"h\" : 22 , \"align\" : \"center\" , \"text\" : \"00.0\" , \"parentid\" : 11 , \"pad_top\" : -2 , \"text_font\" : 24 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 43 , \"obj\" : \"img\" , \"x\" : 182 , \"y\" : 182 , \"w\" : 32 , \"h\" : 32 , \"src\" : \"/littlefs/openhasp_dummy_img.png\" , \"parentid\" : 11 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 51 , \"obj\" : \"label\" , \"x\" : 8 , \"y\" : 218 , \"w\" : 130 , \"h\" : 22 , \"align\" : \"left\" , \"text\" : \"hour+5\" , \"parentid\" : 11 , \"pad_top\" : 3 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 52 , \"obj\" : \"label\" , \"x\" : 124 , \"y\" : 218 , \"w\" : 50 , \"h\" : 22 , \"align\" : \"center\" , \"text\" : \"00.0\" , \"parentid\" : 11 , \"pad_top\" : -2 , \"text_font\" : 24 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 53 , \"obj\" : \"img\" , \"x\" : 182 , \"y\" : 214 , \"w\" : 32 , \"h\" : 32 , \"src\" : \"/littlefs/openhasp_dummy_img.png\" , \"parentid\" : 11 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 61 , \"obj\" : \"label\" , \"x\" : 6 , \"y\" : 123 , \"w\" : 100 , \"h\" : 22 , \"align\" : \"left\" , \"text\" : \"date+1\" , \"parentid\" : 12 , \"pad_top\" : 3 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 62 , \"obj\" : \"label\" , \"x\" : 102 , \"y\" : 123 , \"w\" : 40 , \"h\" : 22 , \"align\" : \"center\" , \"text\" : \"00.0\" , \"parentid\" : 12 , \"pad_top\" : -2 , \"text_font\" : 24 , \"text_color\" : \"Navy\" , \"click\" : 0 } { \"page\" : 5 , \"id\" : 63 , \"obj\" : \"label\" , \"x\" : 150 , \"y\" : 123 , \"w\" : 40 , \"h\" : 22 , \"align\" : \"center\" , \"text\" : \"00.0\" , \"parentid\" : 12 , \"pad_top\" : -2 , \"text_font\" : 24 , \"text_color\" : \"Blush\" , \"click\" : 0 } { \"page\" : 5 , \"id\" : 64 , \"obj\" : \"img\" , \"x\" : 194 , \"y\" : 118 , \"w\" : 32 , \"h\" : 32 , \"src\" : \"/littlefs/openhasp_dummy_img.png\" , \"parentid\" : 12 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 71 , \"obj\" : \"label\" , \"x\" : 6 , \"y\" : 154 , \"w\" : 100 , \"h\" : 22 , \"align\" : \"left\" , \"text\" : \"date+2\" , \"parentid\" : 12 , \"pad_top\" : 3 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 72 , \"obj\" : \"label\" , \"x\" : 102 , \"y\" : 154 , \"w\" : 40 , \"h\" : 22 , \"align\" : \"center\" , \"text\" : \"00.0\" , \"parentid\" : 12 , \"pad_top\" : -2 , \"text_font\" : 24 , \"text_color\" : \"Navy\" , \"click\" : 0 } { \"page\" : 5 , \"id\" : 73 , \"obj\" : \"label\" , \"x\" : 150 , \"y\" : 154 , \"w\" : 40 , \"h\" : 22 , \"align\" : \"center\" , \"text\" : \"00.0\" , \"parentid\" : 12 , \"pad_top\" : -2 , \"text_font\" : 24 , \"text_color\" : \"Blush\" , \"click\" : 0 } { \"page\" : 5 , \"id\" : 74 , \"obj\" : \"img\" , \"x\" : 194 , \"y\" : 150 , \"w\" : 32 , \"h\" : 32 , \"src\" : \"/littlefs/openhasp_dummy_img.png\" , \"parentid\" : 12 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 81 , \"obj\" : \"label\" , \"x\" : 6 , \"y\" : 186 , \"w\" : 100 , \"h\" : 22 , \"align\" : \"left\" , \"text\" : \"date+3\" , \"parentid\" : 12 , \"pad_top\" : 3 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 82 , \"obj\" : \"label\" , \"x\" : 102 , \"y\" : 186 , \"w\" : 40 , \"h\" : 22 , \"align\" : \"center\" , \"text\" : \"00.0\" , \"parentid\" : 12 , \"pad_top\" : -2 , \"text_font\" : 24 , \"text_color\" : \"Navy\" , \"click\" : 0 } { \"page\" : 5 , \"id\" : 83 , \"obj\" : \"label\" , \"x\" : 150 , \"y\" : 186 , \"w\" : 40 , \"h\" : 22 , \"align\" : \"center\" , \"text\" : \"00.0\" , \"parentid\" : 12 , \"pad_top\" : -2 , \"text_font\" : 24 , \"text_color\" : \"Blush\" , \"click\" : 0 } { \"page\" : 5 , \"id\" : 84 , \"obj\" : \"img\" , \"x\" : 194 , \"y\" : 182 , \"w\" : 32 , \"h\" : 32 , \"src\" : \"/littlefs/openhasp_dummy_img.png\" , \"parentid\" : 12 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 91 , \"obj\" : \"label\" , \"x\" : 6 , \"y\" : 218 , \"w\" : 100 , \"h\" : 22 , \"align\" : \"left\" , \"text\" : \"date+4\" , \"parentid\" : 12 , \"pad_top\" : 3 , \"click\" : 0 } { \"page\" : 5 , \"id\" : 92 , \"obj\" : \"label\" , \"x\" : 102 , \"y\" : 218 , \"w\" : 40 , \"h\" : 22 , \"align\" : \"center\" , \"text\" : \"00.0\" , \"parentid\" : 12 , \"pad_top\" : -2 , \"text_font\" : 24 , \"text_color\" : \"Navy\" , \"click\" : 0 } { \"page\" : 5 , \"id\" : 93 , \"obj\" : \"label\" , \"x\" : 150 , \"y\" : 218 , \"w\" : 40 , \"h\" : 22 , \"align\" : \"center\" , \"text\" : \"00.0\" , \"parentid\" : 12 , \"pad_top\" : -2 , \"text_font\" : 24 , \"text_color\" : \"Blush\" , \"click\" : 0 } { \"page\" : 5 , \"id\" : 94 , \"obj\" : \"img\" , \"x\" : 194 , \"y\" : 214 , \"w\" : 32 , \"h\" : 32 , \"src\" : \"/littlefs/openhasp_dummy_img.png\" , \"parentid\" : 12 , \"click\" : 0 } relevant openHASP-custom-component configobj : \"p5b14\" # Icon properties : \"src\" : \"{{ '/littlefs/w-128-' + states('weather.openweathermap') + '.png' if not is_state('weather.openweathermap','unavailable') }}\" - obj : \"p5b15\" # Current date (adjust format to your needs) properties : \"text\" : > {%- set day = (states.weather.openweathermap.last_changed).strftime('%w') %} {%- set days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"] %} {{- days[ day | int -1 ] }} {{ (states.weather.openweathermap.last_changed).strftime('%m. %d. ') }} - obj : \"p5b16\" # Current temp (you can use your own outdoor temp sensor if you have one) properties : \"text\" : \"{{ state_attr('weather.openweathermap','temperature') |string + '\u00b0C' if not is_state('weather.openweathermap','unavailable') }}\" # or \"{{ states('sensor.your_own_temp_sensor') }}\u00b0C\" - obj : \"p5b17\" # Current weather condition properties : \"text\" : > {% if states('weather.openweathermap') == \"clear-night\" -%} Clear night {% elif states('weather.openweathermap') == 'cloudy' -%} Cloudy {% elif states('weather.openweathermap') == 'fog' -%} Fog {% elif states('weather.openweathermap') == 'hail' -%} Hail {% elif states('weather.openweathermap') == 'lightning' -%} Lightning {% elif states('weather.openweathermap') == 'lightning-rainy' -%} Thunderstorms {% elif states('weather.openweathermap') == 'partlycloudy' -%} Partly cloudy {% elif states('weather.openweathermap') == 'pouring' -%} Pouring rain {% elif states('weather.openweathermap') == 'rainy' -%} Rainy {% elif states('weather.openweathermap') == 'snowy' -%} Snowy {% elif states('weather.openweathermap') == 'snowy-rainy' -%} Snowy-rainy {% elif states('weather.openweathermap') == 'sunny' -%} Sunny {% elif states('weather.openweathermap') == 'windy' -%} Windy {% elif states('weather.openweathermap') == 'windy-variant' -%} Windy {% elif states('weather.openweathermap') == 'exceptional' -%} Exceptional {% elif states('weather.openweathermap') == 'unavailable' -%} (not available) {% else -%} {{ states('weather.openweathermap') }} {% endif -%} - obj : \"p5b10\" # tab dots event : \"changed\" : - service : openhasp.command target : entity_id : openhasp.your_plate data : keyword : p8b19.text parameters : > {% if val == 0 %} {{ \"#000000 \\u2022# #909090 \\u2022#\" | e }} {%-elif val == 1 %} {{ \"#909090 \\u2022# #000000 \\u2022#\" | e }} {% endif %} - obj : \"p5b21\" # Forecast time +1h properties : \"text\" : > {%- set update = states('sensor.date') %} {%- set midnight = now().replace(hour=0, minute=0, second=0, microsecond=0).timestamp() %} {%- set event = as_timestamp(strptime(state_attr('weather.openweathermap','forecast')[1]['datetime'], '%Y-%m-%dT%H:%M:%S%z', default='2020-01-00T00:00:00+00:00')) %} {%- set delta = ((event - midnight) // 86400) | int %} {%- if delta == 0 %} Today {%- elif delta == 1 %} Tomorrow {%- endif %} {{- event | timestamp_custom(\" %-I %p\") }} - obj : \"p5b22\" # Forecast temp +1h properties : \"text\" : \"{{ state_attr('weather.openweathermap','forecast')[1]['temperature'] }}\" - obj : \"p5b23\" # Forecast condition +1h properties : \"src\" : \"/littlefs/w-32-{{ state_attr('weather.openweathermap','forecast')[1]['condition'] }}.png\" - obj : \"p5b31\" # Forecast time +2h (using Dawn/Morn etc instead of Today/Tomorrow) properties : \"text\" : > {%- set hour = as_timestamp(strptime(state_attr('weather.openweathermap','forecast')[3]['datetime'], '%Y-%m-%dT%H:%M:%S%z', default='2020-01-00T00:00:00+00:00')) | timestamp_custom(\"%-H\") | int %} {%- if 4 <= hour < 6 %} Dawning {%- elif 6 <= hour < 9 %} Morning {%- elif 9 <= hour < 12 %} Forenoon {%- elif 12 <= hour < 18 %} Afternoon {%- elif 18 <= hour < 23 %} Evening {%- elif 23 <= hour or hour < 4 %} Night {%- endif %} {{- \" \" + hour |string + \" o'clock\" }} - obj : \"p5b32\" # Forecast temp +2h properties : \"text\" : \"{{ state_attr('weather.openweathermap','forecast')[3]['temperature'] }}\" - obj : \"p5b33\" # Forecast condition +2h properties : \"src\" : \"/littlefs/w-32-{{ state_attr('weather.openweathermap','forecast')[3]['condition'] }}.png\" - obj : \"p5b41\" # Forecast time +4h properties : \"text\" : > {%- set update = states('sensor.date') %} {%- set midnight = now().replace(hour=0, minute=0, second=0, microsecond=0).timestamp() %} {%- set event = as_timestamp(strptime(state_attr('weather.openweathermap','forecast')[6]['datetime'], '%Y-%m-%dT%H:%M:%S%z', default='2020-01-00T00:00:00+00:00')) %} {%- set delta = ((event - midnight) // 86400) | int %} {%- if delta == 0 %} Today {%- elif delta == 1 %} Tomorrow {%- endif %} {{- event | timestamp_custom(\" %-I %p\") }} - obj : \"p5b42\" # Forecast temp +4h properties : \"text\" : \"{{ state_attr('weather.openweathermap','forecast')[6]['temperature'] }}\" - obj : \"p5b43\" # Forecast condition +4h properties : \"src\" : \"/littlefs/w-32-{{ state_attr('weather.openweathermap','forecast')[6]['condition'] }}.png\" - obj : \"p5b51\" # Forecast time +8h properties : \"text\" : > {%- set update = states('sensor.date') %} {%- set midnight = now().replace(hour=0, minute=0, second=0, microsecond=0).timestamp() %} {%- set event = as_timestamp(strptime(state_attr('weather.openweathermap','forecast')[12]['datetime'], '%Y-%m-%dT%H:%M:%S%z', default='2020-01-00T00:00:00+00:00')) %} {%- set delta = ((event - midnight) // 86400) | int %} {%- if delta == 0 %} Today {%- elif delta == 1 %} Tomorrow {%- endif %} {{- event | timestamp_custom(\" %-I %p\") }} - obj : \"p5b52\" # Forecast temp +8h properties : \"text\" : \"{{ state_attr('weather.openweathermap','forecast')[12]['temperature'] }}\" - obj : \"p5b53\" # Forecast condition +8h properties : \"src\" : \"/littlefs/w-32-{{ state_attr('weather.openweathermap','forecast')[12]['condition'] }}.png\" - obj : \"p5b61\" # Forecast date +1d properties : \"text\" : > {%- set now = as_timestamp(strptime(state_attr('weather.your_homename','forecast')[0]['datetime'], '%Y-%m-%dT%H:%M:%S%z', default='2020-01-00T00:00:00+00:00')) %} {%- set day = now | timestamp_custom(\"%w\") %} {%- set days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"] %} {{ days[ day | int -1 ] }}{{- now | timestamp_custom(\" %d\") }} - obj : \"p5b62\" # Forecast temp min +1d properties : \"text\" : \"{{ state_attr('weather.your_homename','forecast')[0]['templow'] }}\" - obj : \"p5b63\" # Forecast temp max +1d properties : \"text\" : \"{{ state_attr('weather.your_homename','forecast')[0]['temperature'] }}\" - obj : \"p5b64\" # Forecast condition +1d properties : \"src\" : \"/littlefs/w-32-{{ state_attr('weather.your_homename','forecast')[0]['condition'] }}.png\" - obj : \"p5b71\" # Forecast date +2d properties : \"text\" : > {%- set now = as_timestamp(strptime(state_attr('weather.your_homename','forecast')[1]['datetime'], '%Y-%m-%dT%H:%M:%S%z', default='2020-01-00T00:00:00+00:00')) %} {%- set day = now | timestamp_custom(\"%w\") %} {%- set days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"] %} {{ days[ day | int -1 ] }}{{- now | timestamp_custom(\" %d\") }} - obj : \"p5b72\" # Forecast temp min +2d properties : \"text\" : \"{{ state_attr('weather.your_homename','forecast')[1]['templow'] }}\" - obj : \"p5b73\" # Forecast temp max +2d properties : \"text\" : \"{{ state_attr('weather.your_homename','forecast')[1]['temperature'] }}\" - obj : \"p5b74\" # Forecast condition +2d properties : \"src\" : \"/littlefs/w-32-{{ state_attr('weather.your_homename','forecast')[1]['condition'] }}.png\" - obj : \"p5b81\" # Forecast date +3d properties : \"text\" : > {%- set now = as_timestamp(strptime(state_attr('weather.your_homename','forecast')[2]['datetime'], '%Y-%m-%dT%H:%M:%S%z', default='2020-01-00T00:00:00+00:00')) %} {%- set day = now | timestamp_custom(\"%w\") %} {%- set days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"] %} {{ days[ day | int -1 ] }}{{- now | timestamp_custom(\" %d\") }} - obj : \"p5b82\" # Forecast temp min +3d properties : \"text\" : \"{{ state_attr('weather.your_homename','forecast')[2]['templow'] }}\" - obj : \"p5b83\" # Forecast temp max +3d properties : \"text\" : \"{{ state_attr('weather.your_homename','forecast')[2]['temperature'] }}\" - obj : \"p5b84\" # Forecast condition +3d properties : \"src\" : \"/littlefs/w-32-{{ state_attr('weather.your_homename','forecast')[2]['condition'] }}.png\" - obj : \"p5b91\" # Forecast date +4d properties : \"text\" : > {%- set now = as_timestamp(strptime(state_attr('weather.your_homename','forecast')[3]['datetime'], '%Y-%m-%dT%H:%M:%S%z', default='2020-01-00T00:00:00+00:00')) %} {%- set day = now | timestamp_custom(\"%w\") %} {%- set days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"] %} {{ days[ day | int -1 ] }}{{- now | timestamp_custom(\" %d\") }} - obj : \"p5b92\" # Forecast temp min +4d properties : \"text\" : \"{{ state_attr('weather.your_homename','forecast')[3]['templow'] }}\" - obj : \"p5b93\" # Forecast temp max +4d properties : \"text\" : \"{{ state_attr('weather.your_homename','forecast')[3]['temperature'] }}\" - obj : \"p5b94\" # Forecast condition +4d properties : \"src\" : \"/littlefs/w-32-{{ state_attr('weather.your_homename','forecast')[3]['condition'] }}.png\"","title":"Current weather and forecasts"},{"location":"integrations/openhab/integration_openhab/","text":"Installation and Example ~ Page Layout We call plate any device running openHASP in your system. Installation ~ The openHAB configuration files to have this demo load automatically can be found here . Update the IP-address for your MQTT-broker in the haspLVGL_demo.things file. Make sure you have your plate connected to the network and to your MQTT boker, and your topic is set to demo_plate . Code ~ To add an openhasp plate to your installation with Jaffa Sunrise sample configuration, upload a pages.jsonl file with the folowing content to your plate: in the plate's web UI select Mono UI theme and reboot, upload a pages.jsonl file with the folowing content to your plate and reboot: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 { \"page\" : 1 , \"comment\" : \"---------- Page 1 ----------\" } { \"obj\" : \"btn\" , \"id\" : 4 , \"x\" : 5 , \"y\" : 5 , \"w\" : 230 , \"h\" : 58 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#FFAC00\" , \"border_width\" : 2 , \"radius\" : 10 , \"radius1\" : 10 , \"radius2\" : 10 , \"text\" : \"Lights On\" , \"value_ofs_x\" : -85 , \"value_font\" : 32 , \"value_str\" : \"\\uE6E8\" , \"value_color\" : \"#B6B6B6\" , \"text_color\" : \"#B6B6B6\" , \"text_font\" : 24 } { \"obj\" : \"btn\" , \"id\" : 5 , \"x\" : 5 , \"y\" : 68 , \"w\" : 230 , \"h\" : 58 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#FFAC00\" , \"border_width\" : 2 , \"radius\" : 10 , \"radius1\" : 10 , \"radius2\" : 10 , \"text\" : \"Daylight\" , \"value_ofs_x\" : -85 , \"value_font\" : 32 , \"value_str\" : \"\\uE599\" , \"value_color\" : \"#B6B6B6\" , \"text_color\" : \"#B6B6B6\" , \"text_font\" : 24 } { \"obj\" : \"btn\" , \"id\" : 6 , \"x\" : 5 , \"y\" : 131 , \"w\" : 230 , \"h\" : 58 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#FFAC00\" , \"border_width\" : 2 , \"radius\" : 10 , \"radius1\" : 10 , \"radius2\" : 10 , \"text\" : \"Night\" , \"value_ofs_x\" : -85 , \"value_font\" : 32 , \"value_str\" : \"\\uE594\" , \"value_color\" : \"#B6B6B6\" , \"text_color\" : \"#B6B6B6\" , \"text_font\" : 24 } { \"obj\" : \"btn\" , \"id\" : 7 , \"x\" : 5 , \"y\" : 194 , \"w\" : 230 , \"h\" : 58 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#FFAC00\" , \"border_width\" : 2 , \"radius\" : 10 , \"radius1\" : 10 , \"radius2\" : 10 , \"text\" : \"Lights Off\" , \"value_ofs_x\" : -85 , \"value_font\" : 32 , \"value_str\" : \"\\uE335\" , \"value_color\" : \"#B6B6B6\" , \"text_color\" : \"#B6B6B6\" , \"text_font\" : 24 } { \"page\" : 2 , \"comment\" : \"---------- Page 2 ----------\" } { \"obj\" : \"label\" , \"id\" : 8 , \"x\" : 5 , \"y\" : 5 , \"w\" : 230 , \"h\" : 30 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"radius\" : 10 , \"radius1\" : 10 , \"radius2\" : 10 , \"text\" : \"Kitchen Dimmer\" , \"text_color\" : \"#B6B6B6\" , \"text_font\" : 24 } { \"obj\" : \"label\" , \"id\" : 9 , \"x\" : 5 , \"y\" : 80 , \"w\" : 230 , \"h\" : 30 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"radius\" : 10 , \"radius1\" : 10 , \"radius2\" : 10 , \"text\" : \"Dining Dimmer\" , \"text_color\" : \"#B6B6B6\" , \"text_font\" : 24 } { \"obj\" : \"label\" , \"id\" : 10 , \"x\" : 5 , \"y\" : 165 , \"w\" : 230 , \"h\" : 30 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"radius\" : 10 , \"radius1\" : 10 , \"radius2\" : 10 , \"text\" : \"Front Blinds\" , \"text_color\" : \"#B6B6B6\" , \"text_font\" : 24 } { \"obj\" : \"slider\" , \"id\" : 11 , \"x\" : 20 , \"y\" : 40 , \"w\" : 200 , \"h\" : 30 , \"bg_color\" : \"#C7BAA7\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"radius\" : 15 , \"radius1\" : 15 , \"radius2\" : 20 , \"text_font\" : 1 , \"val\" : 80 , \"bg_color1\" : \"#FFAC00\" , \"bg_color2\" : \"#DC5C05\" } { \"obj\" : \"slider\" , \"id\" : 12 , \"x\" : 20 , \"y\" : 120 , \"w\" : 200 , \"h\" : 30 , \"bg_color\" : \"#C7BAA7\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"radius\" : 15 , \"radius1\" : 15 , \"radius2\" : 20 , \"text_font\" : 1 , \"val\" : 65 , \"bg_color1\" : \"#FFAC00\" , \"bg_color2\" : \"#DC5C05\" } { \"obj\" : \"slider\" , \"id\" : 13 , \"x\" : 20 , \"y\" : 205 , \"w\" : 200 , \"h\" : 30 , \"bg_color\" : \"#C7BAA7\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"radius\" : 15 , \"radius1\" : 15 , \"radius2\" : 20 , \"text_font\" : 1 , \"val\" : 25 , \"bg_color1\" : \"#FFAC00\" , \"bg_color2\" : \"#DC5C05\" } { \"page\" : 3 , \"comment\" : \"---------- Page 3 ----------\" } { \"obj\" : \"label\" , \"id\" : 14 , \"x\" : 42 , \"y\" : 10 , \"w\" : 236 , \"h\" : 30 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"text\" : \"Gold\" , \"text_color\" : \"#C7BAA7\" , \"text_font\" : 24 } { \"obj\" : \"label\" , \"id\" : 15 , \"x\" : 42 , \"y\" : 60 , \"mode\" : \"scroll\" , \"w\" : 236 , \"h\" : 30 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"text\" : \"Chet Faker\" , \"text_color\" : \"#C7BAA7\" , \"text_font\" : 24 } { \"obj\" : \"btn\" , \"id\" : 16 , \"x\" : 2 , \"y\" : 140 , \"w\" : 76 , \"h\" : 61 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#FFAC00\" , \"border_width\" : 2 , \"radius\" : 10 , \"radius1\" : 10 , \"radius2\" : 10 , \"text\" : \"\\uE4AE\" , \"text_color\" : \"#C7BAA7\" , \"text_font\" : 32 } { \"obj\" : \"btn\" , \"id\" : 17 , \"x\" : 82 , \"y\" : 140 , \"w\" : 76 , \"h\" : 61 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#FFAC00\" , \"border_width\" : 2 , \"radius\" : 10 , \"radius1\" : 10 , \"radius2\" : 10 , \"text\" : \"\\uE3E4\" , \"text_color\" : \"#C7BAA7\" , \"text_font\" : 32 } { \"obj\" : \"btn\" , \"id\" : 18 , \"x\" : 162 , \"y\" : 140 , \"w\" : 76 , \"h\" : 61 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#FFAC00\" , \"border_width\" : 2 , \"radius\" : 10 , \"radius1\" : 10 , \"radius2\" : 10 , \"text\" : \"\\uE4AD\" , \"text_color\" : \"#C7BAA7\" , \"text_font\" : 32 } { \"obj\" : \"bar\" , \"id\" : 19 , \"x\" : 2 , \"y\" : 105 , \"w\" : 236 , \"h\" : 20 , \"bg_color\" : \"#C7BAA7\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"radius\" : 15 , \"radius1\" : 15 , \"radius2\" : 15 , \"text_font\" : 1 , \"val\" : 65 , \"bg_color1\" : \"#FFAC00\" } { \"obj\" : \"slider\" , \"id\" : 20 , \"x\" : 35 , \"y\" : 220 , \"w\" : 170 , \"h\" : 30 , \"bg_color\" : \"#C7BAA7\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"radius\" : 15 , \"radius1\" : 15 , \"radius2\" : 20 , \"text_font\" : 1 , \"val\" : 30 , \"bg_color1\" : \"#FFAC00\" , \"bg_color2\" : \"#DC5C05\" } { \"obj\" : \"label\" , \"id\" : 21 , \"x\" : 2 , \"y\" : 10 , \"w\" : 40 , \"h\" : 61 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"text\" : \"\\uE75A\" , \"text_color\" : \"#C7BAA7\" , \"text_font\" : 24 } { \"obj\" : \"label\" , \"id\" : 22 , \"x\" : 2 , \"y\" : 60 , \"w\" : 36 , \"h\" : 61 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"text\" : \"\\uE004\" , \"text_color\" : \"#C7BAA7\" , \"text_font\" : 24 } { \"obj\" : \"label\" , \"id\" : 23 , \"x\" : 5 , \"y\" : 224 , \"w\" : 25 , \"h\" : 40 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"text\" : \"\\uE75F\" , \"text_color\" : \"#C7BAA7\" , \"text_font\" : 24 } { \"obj\" : \"label\" , \"id\" : 24 , \"x\" : 210 , \"y\" : 224 , \"w\" : 25 , \"h\" : 40 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"text\" : \"\\uE57E\" , \"text_color\" : \"#C7BAA7\" , \"text_font\" : 24 } { \"page\" : 0 , \"comment\" : \"---------- All pages ----------\" } { \"obj\" : \"btn\" , \"id\" : 1 , \"x\" : 5 , \"y\" : 257 , \"w\" : 73 , \"h\" : 58 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"radius\" : 10 , \"radius1\" : 10 , \"radius2\" : 10 , \"text\" : \"\\uE04D\" , \"text_color\" : \"#978B7D\" , \"text_font\" : 32 } { \"obj\" : \"btn\" , \"id\" : 2 , \"x\" : 83 , \"y\" : 257 , \"w\" : 73 , \"h\" : 58 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"radius\" : 10 , \"radius1\" : 10 , \"radius2\" : 10 , \"text\" : \"\\uE2DC\" , \"text_color\" : \"#978B7D\" , \"text_font\" : 32 } { \"obj\" : \"btn\" , \"id\" : 3 , \"x\" : 161 , \"y\" : 257 , \"w\" : 73 , \"h\" : 58 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"radius\" : 10 , \"radius1\" : 10 , \"radius2\" : 10 , \"text\" : \"\\uE054\" , \"text_color\" : \"#978B7D\" , \"text_font\" : 32 } Restart the plate and the demo page should load automatically to your device.","title":"Installation and Example"},{"location":"integrations/openhab/integration_openhab/#installation-and-example","text":"","title":"Installation and Example"},{"location":"integrations/openhab/integration_openhab/#installation","text":"The openHAB configuration files to have this demo load automatically can be found here . Update the IP-address for your MQTT-broker in the haspLVGL_demo.things file. Make sure you have your plate connected to the network and to your MQTT boker, and your topic is set to demo_plate .","title":"Installation"},{"location":"integrations/openhab/integration_openhab/#code","text":"To add an openhasp plate to your installation with Jaffa Sunrise sample configuration, upload a pages.jsonl file with the folowing content to your plate: in the plate's web UI select Mono UI theme and reboot, upload a pages.jsonl file with the folowing content to your plate and reboot: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 { \"page\" : 1 , \"comment\" : \"---------- Page 1 ----------\" } { \"obj\" : \"btn\" , \"id\" : 4 , \"x\" : 5 , \"y\" : 5 , \"w\" : 230 , \"h\" : 58 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#FFAC00\" , \"border_width\" : 2 , \"radius\" : 10 , \"radius1\" : 10 , \"radius2\" : 10 , \"text\" : \"Lights On\" , \"value_ofs_x\" : -85 , \"value_font\" : 32 , \"value_str\" : \"\\uE6E8\" , \"value_color\" : \"#B6B6B6\" , \"text_color\" : \"#B6B6B6\" , \"text_font\" : 24 } { \"obj\" : \"btn\" , \"id\" : 5 , \"x\" : 5 , \"y\" : 68 , \"w\" : 230 , \"h\" : 58 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#FFAC00\" , \"border_width\" : 2 , \"radius\" : 10 , \"radius1\" : 10 , \"radius2\" : 10 , \"text\" : \"Daylight\" , \"value_ofs_x\" : -85 , \"value_font\" : 32 , \"value_str\" : \"\\uE599\" , \"value_color\" : \"#B6B6B6\" , \"text_color\" : \"#B6B6B6\" , \"text_font\" : 24 } { \"obj\" : \"btn\" , \"id\" : 6 , \"x\" : 5 , \"y\" : 131 , \"w\" : 230 , \"h\" : 58 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#FFAC00\" , \"border_width\" : 2 , \"radius\" : 10 , \"radius1\" : 10 , \"radius2\" : 10 , \"text\" : \"Night\" , \"value_ofs_x\" : -85 , \"value_font\" : 32 , \"value_str\" : \"\\uE594\" , \"value_color\" : \"#B6B6B6\" , \"text_color\" : \"#B6B6B6\" , \"text_font\" : 24 } { \"obj\" : \"btn\" , \"id\" : 7 , \"x\" : 5 , \"y\" : 194 , \"w\" : 230 , \"h\" : 58 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#FFAC00\" , \"border_width\" : 2 , \"radius\" : 10 , \"radius1\" : 10 , \"radius2\" : 10 , \"text\" : \"Lights Off\" , \"value_ofs_x\" : -85 , \"value_font\" : 32 , \"value_str\" : \"\\uE335\" , \"value_color\" : \"#B6B6B6\" , \"text_color\" : \"#B6B6B6\" , \"text_font\" : 24 } { \"page\" : 2 , \"comment\" : \"---------- Page 2 ----------\" } { \"obj\" : \"label\" , \"id\" : 8 , \"x\" : 5 , \"y\" : 5 , \"w\" : 230 , \"h\" : 30 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"radius\" : 10 , \"radius1\" : 10 , \"radius2\" : 10 , \"text\" : \"Kitchen Dimmer\" , \"text_color\" : \"#B6B6B6\" , \"text_font\" : 24 } { \"obj\" : \"label\" , \"id\" : 9 , \"x\" : 5 , \"y\" : 80 , \"w\" : 230 , \"h\" : 30 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"radius\" : 10 , \"radius1\" : 10 , \"radius2\" : 10 , \"text\" : \"Dining Dimmer\" , \"text_color\" : \"#B6B6B6\" , \"text_font\" : 24 } { \"obj\" : \"label\" , \"id\" : 10 , \"x\" : 5 , \"y\" : 165 , \"w\" : 230 , \"h\" : 30 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"radius\" : 10 , \"radius1\" : 10 , \"radius2\" : 10 , \"text\" : \"Front Blinds\" , \"text_color\" : \"#B6B6B6\" , \"text_font\" : 24 } { \"obj\" : \"slider\" , \"id\" : 11 , \"x\" : 20 , \"y\" : 40 , \"w\" : 200 , \"h\" : 30 , \"bg_color\" : \"#C7BAA7\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"radius\" : 15 , \"radius1\" : 15 , \"radius2\" : 20 , \"text_font\" : 1 , \"val\" : 80 , \"bg_color1\" : \"#FFAC00\" , \"bg_color2\" : \"#DC5C05\" } { \"obj\" : \"slider\" , \"id\" : 12 , \"x\" : 20 , \"y\" : 120 , \"w\" : 200 , \"h\" : 30 , \"bg_color\" : \"#C7BAA7\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"radius\" : 15 , \"radius1\" : 15 , \"radius2\" : 20 , \"text_font\" : 1 , \"val\" : 65 , \"bg_color1\" : \"#FFAC00\" , \"bg_color2\" : \"#DC5C05\" } { \"obj\" : \"slider\" , \"id\" : 13 , \"x\" : 20 , \"y\" : 205 , \"w\" : 200 , \"h\" : 30 , \"bg_color\" : \"#C7BAA7\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"radius\" : 15 , \"radius1\" : 15 , \"radius2\" : 20 , \"text_font\" : 1 , \"val\" : 25 , \"bg_color1\" : \"#FFAC00\" , \"bg_color2\" : \"#DC5C05\" } { \"page\" : 3 , \"comment\" : \"---------- Page 3 ----------\" } { \"obj\" : \"label\" , \"id\" : 14 , \"x\" : 42 , \"y\" : 10 , \"w\" : 236 , \"h\" : 30 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"text\" : \"Gold\" , \"text_color\" : \"#C7BAA7\" , \"text_font\" : 24 } { \"obj\" : \"label\" , \"id\" : 15 , \"x\" : 42 , \"y\" : 60 , \"mode\" : \"scroll\" , \"w\" : 236 , \"h\" : 30 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"text\" : \"Chet Faker\" , \"text_color\" : \"#C7BAA7\" , \"text_font\" : 24 } { \"obj\" : \"btn\" , \"id\" : 16 , \"x\" : 2 , \"y\" : 140 , \"w\" : 76 , \"h\" : 61 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#FFAC00\" , \"border_width\" : 2 , \"radius\" : 10 , \"radius1\" : 10 , \"radius2\" : 10 , \"text\" : \"\\uE4AE\" , \"text_color\" : \"#C7BAA7\" , \"text_font\" : 32 } { \"obj\" : \"btn\" , \"id\" : 17 , \"x\" : 82 , \"y\" : 140 , \"w\" : 76 , \"h\" : 61 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#FFAC00\" , \"border_width\" : 2 , \"radius\" : 10 , \"radius1\" : 10 , \"radius2\" : 10 , \"text\" : \"\\uE3E4\" , \"text_color\" : \"#C7BAA7\" , \"text_font\" : 32 } { \"obj\" : \"btn\" , \"id\" : 18 , \"x\" : 162 , \"y\" : 140 , \"w\" : 76 , \"h\" : 61 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#FFAC00\" , \"border_width\" : 2 , \"radius\" : 10 , \"radius1\" : 10 , \"radius2\" : 10 , \"text\" : \"\\uE4AD\" , \"text_color\" : \"#C7BAA7\" , \"text_font\" : 32 } { \"obj\" : \"bar\" , \"id\" : 19 , \"x\" : 2 , \"y\" : 105 , \"w\" : 236 , \"h\" : 20 , \"bg_color\" : \"#C7BAA7\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"radius\" : 15 , \"radius1\" : 15 , \"radius2\" : 15 , \"text_font\" : 1 , \"val\" : 65 , \"bg_color1\" : \"#FFAC00\" } { \"obj\" : \"slider\" , \"id\" : 20 , \"x\" : 35 , \"y\" : 220 , \"w\" : 170 , \"h\" : 30 , \"bg_color\" : \"#C7BAA7\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"radius\" : 15 , \"radius1\" : 15 , \"radius2\" : 20 , \"text_font\" : 1 , \"val\" : 30 , \"bg_color1\" : \"#FFAC00\" , \"bg_color2\" : \"#DC5C05\" } { \"obj\" : \"label\" , \"id\" : 21 , \"x\" : 2 , \"y\" : 10 , \"w\" : 40 , \"h\" : 61 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"text\" : \"\\uE75A\" , \"text_color\" : \"#C7BAA7\" , \"text_font\" : 24 } { \"obj\" : \"label\" , \"id\" : 22 , \"x\" : 2 , \"y\" : 60 , \"w\" : 36 , \"h\" : 61 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"text\" : \"\\uE004\" , \"text_color\" : \"#C7BAA7\" , \"text_font\" : 24 } { \"obj\" : \"label\" , \"id\" : 23 , \"x\" : 5 , \"y\" : 224 , \"w\" : 25 , \"h\" : 40 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"text\" : \"\\uE75F\" , \"text_color\" : \"#C7BAA7\" , \"text_font\" : 24 } { \"obj\" : \"label\" , \"id\" : 24 , \"x\" : 210 , \"y\" : 224 , \"w\" : 25 , \"h\" : 40 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"text\" : \"\\uE57E\" , \"text_color\" : \"#C7BAA7\" , \"text_font\" : 24 } { \"page\" : 0 , \"comment\" : \"---------- All pages ----------\" } { \"obj\" : \"btn\" , \"id\" : 1 , \"x\" : 5 , \"y\" : 257 , \"w\" : 73 , \"h\" : 58 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"radius\" : 10 , \"radius1\" : 10 , \"radius2\" : 10 , \"text\" : \"\\uE04D\" , \"text_color\" : \"#978B7D\" , \"text_font\" : 32 } { \"obj\" : \"btn\" , \"id\" : 2 , \"x\" : 83 , \"y\" : 257 , \"w\" : 73 , \"h\" : 58 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"radius\" : 10 , \"radius1\" : 10 , \"radius2\" : 10 , \"text\" : \"\\uE2DC\" , \"text_color\" : \"#978B7D\" , \"text_font\" : 32 } { \"obj\" : \"btn\" , \"id\" : 3 , \"x\" : 161 , \"y\" : 257 , \"w\" : 73 , \"h\" : 58 , \"bg_color\" : \"#000000\" , \"border_color\" : \"#C7BAA7\" , \"border_width\" : 0 , \"radius\" : 10 , \"radius1\" : 10 , \"radius2\" : 10 , \"text\" : \"\\uE054\" , \"text_color\" : \"#978B7D\" , \"text_font\" : 32 } Restart the plate and the demo page should load automatically to your device.","title":"Code"}]}